# 1 "simple-return.cu"
#pragma GCC diagnostic ignored "-Wunused-local-typedefs"
# 1
#pragma GCC diagnostic push
# 1
#pragma GCC diagnostic ignored "-Wunused-variable"
# 1
#pragma GCC diagnostic ignored "-Wunused-function"
# 1
static char __nv_inited_managed_rt = 0; static void **__nv_fatbinhandle_for_managed_rt; static void __nv_save_fatbinhandle_for_managed_rt(void **in){__nv_fatbinhandle_for_managed_rt = in;} static char __nv_init_managed_rt_with_module(void **); static inline void __nv_init_managed_rt(void) { __nv_inited_managed_rt = (__nv_inited_managed_rt ? __nv_inited_managed_rt                 : __nv_init_managed_rt_with_module(__nv_fatbinhandle_for_managed_rt));}
# 1
#pragma GCC diagnostic pop
# 1
#pragma GCC diagnostic ignored "-Wunused-variable"

# 1
#define __nv_is_extended_device_lambda_closure_type(X) false
#define __nv_is_extended_host_device_lambda_closure_type(X) false

# 1
# 61 "/usr/include/cuda_runtime.h" 3
#pragma GCC diagnostic push
# 64
#pragma GCC diagnostic ignored "-Wunused-function"
# 66 "/usr/include/device_types.h" 3
#if 0
# 66
enum cudaRoundMode { 
# 68
cudaRoundNearest, 
# 69
cudaRoundZero, 
# 70
cudaRoundPosInf, 
# 71
cudaRoundMinInf
# 72
}; 
#endif
# 98 "/usr/include/vector_types.h" 3
#if 0
# 98
struct char1 { 
# 100
signed char x; 
# 101
}; 
#endif
# 103 "/usr/include/vector_types.h" 3
#if 0
# 103
struct uchar1 { 
# 105
unsigned char x; 
# 106
}; 
#endif
# 109 "/usr/include/vector_types.h" 3
#if 0
# 109
struct __attribute((aligned(2))) char2 { 
# 111
signed char x, y; 
# 112
}; 
#endif
# 114 "/usr/include/vector_types.h" 3
#if 0
# 114
struct __attribute((aligned(2))) uchar2 { 
# 116
unsigned char x, y; 
# 117
}; 
#endif
# 119 "/usr/include/vector_types.h" 3
#if 0
# 119
struct char3 { 
# 121
signed char x, y, z; 
# 122
}; 
#endif
# 124 "/usr/include/vector_types.h" 3
#if 0
# 124
struct uchar3 { 
# 126
unsigned char x, y, z; 
# 127
}; 
#endif
# 129 "/usr/include/vector_types.h" 3
#if 0
# 129
struct __attribute((aligned(4))) char4 { 
# 131
signed char x, y, z, w; 
# 132
}; 
#endif
# 134 "/usr/include/vector_types.h" 3
#if 0
# 134
struct __attribute((aligned(4))) uchar4 { 
# 136
unsigned char x, y, z, w; 
# 137
}; 
#endif
# 139 "/usr/include/vector_types.h" 3
#if 0
# 139
struct short1 { 
# 141
short x; 
# 142
}; 
#endif
# 144 "/usr/include/vector_types.h" 3
#if 0
# 144
struct ushort1 { 
# 146
unsigned short x; 
# 147
}; 
#endif
# 149 "/usr/include/vector_types.h" 3
#if 0
# 149
struct __attribute((aligned(4))) short2 { 
# 151
short x, y; 
# 152
}; 
#endif
# 154 "/usr/include/vector_types.h" 3
#if 0
# 154
struct __attribute((aligned(4))) ushort2 { 
# 156
unsigned short x, y; 
# 157
}; 
#endif
# 159 "/usr/include/vector_types.h" 3
#if 0
# 159
struct short3 { 
# 161
short x, y, z; 
# 162
}; 
#endif
# 164 "/usr/include/vector_types.h" 3
#if 0
# 164
struct ushort3 { 
# 166
unsigned short x, y, z; 
# 167
}; 
#endif
# 169 "/usr/include/vector_types.h" 3
#if 0
# 169
struct __attribute((aligned(8))) short4 { short x; short y; short z; short w; }; 
#endif
# 170 "/usr/include/vector_types.h" 3
#if 0
# 170
struct __attribute((aligned(8))) ushort4 { unsigned short x; unsigned short y; unsigned short z; unsigned short w; }; 
#endif
# 172 "/usr/include/vector_types.h" 3
#if 0
# 172
struct int1 { 
# 174
int x; 
# 175
}; 
#endif
# 177 "/usr/include/vector_types.h" 3
#if 0
# 177
struct uint1 { 
# 179
unsigned x; 
# 180
}; 
#endif
# 182 "/usr/include/vector_types.h" 3
#if 0
# 182
struct __attribute((aligned(8))) int2 { int x; int y; }; 
#endif
# 183 "/usr/include/vector_types.h" 3
#if 0
# 183
struct __attribute((aligned(8))) uint2 { unsigned x; unsigned y; }; 
#endif
# 185 "/usr/include/vector_types.h" 3
#if 0
# 185
struct int3 { 
# 187
int x, y, z; 
# 188
}; 
#endif
# 190 "/usr/include/vector_types.h" 3
#if 0
# 190
struct uint3 { 
# 192
unsigned x, y, z; 
# 193
}; 
#endif
# 195 "/usr/include/vector_types.h" 3
#if 0
# 195
struct __attribute((aligned(16))) int4 { 
# 197
int x, y, z, w; 
# 198
}; 
#endif
# 200 "/usr/include/vector_types.h" 3
#if 0
# 200
struct __attribute((aligned(16))) uint4 { 
# 202
unsigned x, y, z, w; 
# 203
}; 
#endif
# 205 "/usr/include/vector_types.h" 3
#if 0
# 205
struct long1 { 
# 207
long x; 
# 208
}; 
#endif
# 210 "/usr/include/vector_types.h" 3
#if 0
# 210
struct ulong1 { 
# 212
unsigned long x; 
# 213
}; 
#endif
# 220 "/usr/include/vector_types.h" 3
#if 0
# 220
struct __attribute((aligned((2) * sizeof(long)))) long2 { 
# 222
long x, y; 
# 223
}; 
#endif
# 225 "/usr/include/vector_types.h" 3
#if 0
# 225
struct __attribute((aligned((2) * sizeof(unsigned long)))) ulong2 { 
# 227
unsigned long x, y; 
# 228
}; 
#endif
# 232 "/usr/include/vector_types.h" 3
#if 0
# 232
struct long3 { 
# 234
long x, y, z; 
# 235
}; 
#endif
# 237 "/usr/include/vector_types.h" 3
#if 0
# 237
struct ulong3 { 
# 239
unsigned long x, y, z; 
# 240
}; 
#endif
# 242 "/usr/include/vector_types.h" 3
#if 0
# 242
struct __attribute((aligned(16))) long4 { 
# 244
long x, y, z, w; 
# 245
}; 
#endif
# 247 "/usr/include/vector_types.h" 3
#if 0
# 247
struct __attribute((aligned(16))) ulong4 { 
# 249
unsigned long x, y, z, w; 
# 250
}; 
#endif
# 252 "/usr/include/vector_types.h" 3
#if 0
# 252
struct float1 { 
# 254
float x; 
# 255
}; 
#endif
# 274 "/usr/include/vector_types.h" 3
#if 0
# 274
struct __attribute((aligned(8))) float2 { float x; float y; }; 
#endif
# 279 "/usr/include/vector_types.h" 3
#if 0
# 279
struct float3 { 
# 281
float x, y, z; 
# 282
}; 
#endif
# 284 "/usr/include/vector_types.h" 3
#if 0
# 284
struct __attribute((aligned(16))) float4 { 
# 286
float x, y, z, w; 
# 287
}; 
#endif
# 289 "/usr/include/vector_types.h" 3
#if 0
# 289
struct longlong1 { 
# 291
long long x; 
# 292
}; 
#endif
# 294 "/usr/include/vector_types.h" 3
#if 0
# 294
struct ulonglong1 { 
# 296
unsigned long long x; 
# 297
}; 
#endif
# 299 "/usr/include/vector_types.h" 3
#if 0
# 299
struct __attribute((aligned(16))) longlong2 { 
# 301
long long x, y; 
# 302
}; 
#endif
# 304 "/usr/include/vector_types.h" 3
#if 0
# 304
struct __attribute((aligned(16))) ulonglong2 { 
# 306
unsigned long long x, y; 
# 307
}; 
#endif
# 309 "/usr/include/vector_types.h" 3
#if 0
# 309
struct longlong3 { 
# 311
long long x, y, z; 
# 312
}; 
#endif
# 314 "/usr/include/vector_types.h" 3
#if 0
# 314
struct ulonglong3 { 
# 316
unsigned long long x, y, z; 
# 317
}; 
#endif
# 319 "/usr/include/vector_types.h" 3
#if 0
# 319
struct __attribute((aligned(16))) longlong4 { 
# 321
long long x, y, z, w; 
# 322
}; 
#endif
# 324 "/usr/include/vector_types.h" 3
#if 0
# 324
struct __attribute((aligned(16))) ulonglong4 { 
# 326
unsigned long long x, y, z, w; 
# 327
}; 
#endif
# 329 "/usr/include/vector_types.h" 3
#if 0
# 329
struct double1 { 
# 331
double x; 
# 332
}; 
#endif
# 334 "/usr/include/vector_types.h" 3
#if 0
# 334
struct __attribute((aligned(16))) double2 { 
# 336
double x, y; 
# 337
}; 
#endif
# 339 "/usr/include/vector_types.h" 3
#if 0
# 339
struct double3 { 
# 341
double x, y, z; 
# 342
}; 
#endif
# 344 "/usr/include/vector_types.h" 3
#if 0
# 344
struct __attribute((aligned(16))) double4 { 
# 346
double x, y, z, w; 
# 347
}; 
#endif
# 361 "/usr/include/vector_types.h" 3
#if 0
typedef char1 
# 361
char1; 
#endif
# 362 "/usr/include/vector_types.h" 3
#if 0
typedef uchar1 
# 362
uchar1; 
#endif
# 363 "/usr/include/vector_types.h" 3
#if 0
typedef char2 
# 363
char2; 
#endif
# 364 "/usr/include/vector_types.h" 3
#if 0
typedef uchar2 
# 364
uchar2; 
#endif
# 365 "/usr/include/vector_types.h" 3
#if 0
typedef char3 
# 365
char3; 
#endif
# 366 "/usr/include/vector_types.h" 3
#if 0
typedef uchar3 
# 366
uchar3; 
#endif
# 367 "/usr/include/vector_types.h" 3
#if 0
typedef char4 
# 367
char4; 
#endif
# 368 "/usr/include/vector_types.h" 3
#if 0
typedef uchar4 
# 368
uchar4; 
#endif
# 369 "/usr/include/vector_types.h" 3
#if 0
typedef short1 
# 369
short1; 
#endif
# 370 "/usr/include/vector_types.h" 3
#if 0
typedef ushort1 
# 370
ushort1; 
#endif
# 371 "/usr/include/vector_types.h" 3
#if 0
typedef short2 
# 371
short2; 
#endif
# 372 "/usr/include/vector_types.h" 3
#if 0
typedef ushort2 
# 372
ushort2; 
#endif
# 373 "/usr/include/vector_types.h" 3
#if 0
typedef short3 
# 373
short3; 
#endif
# 374 "/usr/include/vector_types.h" 3
#if 0
typedef ushort3 
# 374
ushort3; 
#endif
# 375 "/usr/include/vector_types.h" 3
#if 0
typedef short4 
# 375
short4; 
#endif
# 376 "/usr/include/vector_types.h" 3
#if 0
typedef ushort4 
# 376
ushort4; 
#endif
# 377 "/usr/include/vector_types.h" 3
#if 0
typedef int1 
# 377
int1; 
#endif
# 378 "/usr/include/vector_types.h" 3
#if 0
typedef uint1 
# 378
uint1; 
#endif
# 379 "/usr/include/vector_types.h" 3
#if 0
typedef int2 
# 379
int2; 
#endif
# 380 "/usr/include/vector_types.h" 3
#if 0
typedef uint2 
# 380
uint2; 
#endif
# 381 "/usr/include/vector_types.h" 3
#if 0
typedef int3 
# 381
int3; 
#endif
# 382 "/usr/include/vector_types.h" 3
#if 0
typedef uint3 
# 382
uint3; 
#endif
# 383 "/usr/include/vector_types.h" 3
#if 0
typedef int4 
# 383
int4; 
#endif
# 384 "/usr/include/vector_types.h" 3
#if 0
typedef uint4 
# 384
uint4; 
#endif
# 385 "/usr/include/vector_types.h" 3
#if 0
typedef long1 
# 385
long1; 
#endif
# 386 "/usr/include/vector_types.h" 3
#if 0
typedef ulong1 
# 386
ulong1; 
#endif
# 387 "/usr/include/vector_types.h" 3
#if 0
typedef long2 
# 387
long2; 
#endif
# 388 "/usr/include/vector_types.h" 3
#if 0
typedef ulong2 
# 388
ulong2; 
#endif
# 389 "/usr/include/vector_types.h" 3
#if 0
typedef long3 
# 389
long3; 
#endif
# 390 "/usr/include/vector_types.h" 3
#if 0
typedef ulong3 
# 390
ulong3; 
#endif
# 391 "/usr/include/vector_types.h" 3
#if 0
typedef long4 
# 391
long4; 
#endif
# 392 "/usr/include/vector_types.h" 3
#if 0
typedef ulong4 
# 392
ulong4; 
#endif
# 393 "/usr/include/vector_types.h" 3
#if 0
typedef float1 
# 393
float1; 
#endif
# 394 "/usr/include/vector_types.h" 3
#if 0
typedef float2 
# 394
float2; 
#endif
# 395 "/usr/include/vector_types.h" 3
#if 0
typedef float3 
# 395
float3; 
#endif
# 396 "/usr/include/vector_types.h" 3
#if 0
typedef float4 
# 396
float4; 
#endif
# 397 "/usr/include/vector_types.h" 3
#if 0
typedef longlong1 
# 397
longlong1; 
#endif
# 398 "/usr/include/vector_types.h" 3
#if 0
typedef ulonglong1 
# 398
ulonglong1; 
#endif
# 399 "/usr/include/vector_types.h" 3
#if 0
typedef longlong2 
# 399
longlong2; 
#endif
# 400 "/usr/include/vector_types.h" 3
#if 0
typedef ulonglong2 
# 400
ulonglong2; 
#endif
# 401 "/usr/include/vector_types.h" 3
#if 0
typedef longlong3 
# 401
longlong3; 
#endif
# 402 "/usr/include/vector_types.h" 3
#if 0
typedef ulonglong3 
# 402
ulonglong3; 
#endif
# 403 "/usr/include/vector_types.h" 3
#if 0
typedef longlong4 
# 403
longlong4; 
#endif
# 404 "/usr/include/vector_types.h" 3
#if 0
typedef ulonglong4 
# 404
ulonglong4; 
#endif
# 405 "/usr/include/vector_types.h" 3
#if 0
typedef double1 
# 405
double1; 
#endif
# 406 "/usr/include/vector_types.h" 3
#if 0
typedef double2 
# 406
double2; 
#endif
# 407 "/usr/include/vector_types.h" 3
#if 0
typedef double3 
# 407
double3; 
#endif
# 408 "/usr/include/vector_types.h" 3
#if 0
typedef double4 
# 408
double4; 
#endif
# 416 "/usr/include/vector_types.h" 3
#if 0
# 416
struct dim3 { 
# 418
unsigned x, y, z; 
# 428
}; 
#endif
# 430 "/usr/include/vector_types.h" 3
#if 0
typedef dim3 
# 430
dim3; 
#endif
# 149 "/usr/lib/gcc/x86_64-linux-gnu/8/include/stddef.h" 3
typedef long ptrdiff_t; 
# 216 "/usr/lib/gcc/x86_64-linux-gnu/8/include/stddef.h" 3
typedef unsigned long size_t; 
#if !defined(__CUDA_INCLUDE_COMPILER_INTERNAL_HEADERS__)
#define __CUDA_INCLUDE_COMPILER_INTERNAL_HEADERS__
#endif
#include "crt/host_runtime.h"
# 437 "/usr/lib/gcc/x86_64-linux-gnu/8/include/stddef.h" 3
typedef 
# 426 "/usr/lib/gcc/x86_64-linux-gnu/8/include/stddef.h" 3
struct { 
# 427
long long __max_align_ll __attribute((__aligned__(__alignof__(long long)))); 
# 428
long double __max_align_ld __attribute((__aligned__(__alignof__(long double)))); 
# 437 "/usr/lib/gcc/x86_64-linux-gnu/8/include/stddef.h" 3
} max_align_t; 
# 444
typedef __decltype((nullptr)) nullptr_t; 
# 189 "/usr/include/driver_types.h" 3
#if 0
# 189
enum cudaError { 
# 196
cudaSuccess, 
# 202
cudaErrorInvalidValue, 
# 208
cudaErrorMemoryAllocation, 
# 214
cudaErrorInitializationError, 
# 221
cudaErrorCudartUnloading, 
# 228
cudaErrorProfilerDisabled, 
# 236
cudaErrorProfilerNotInitialized, 
# 243
cudaErrorProfilerAlreadyStarted, 
# 250
cudaErrorProfilerAlreadyStopped, 
# 259 "/usr/include/driver_types.h" 3
cudaErrorInvalidConfiguration, 
# 265
cudaErrorInvalidPitchValue = 12, 
# 271
cudaErrorInvalidSymbol, 
# 279
cudaErrorInvalidHostPointer = 16, 
# 287
cudaErrorInvalidDevicePointer, 
# 293
cudaErrorInvalidTexture, 
# 299
cudaErrorInvalidTextureBinding, 
# 306
cudaErrorInvalidChannelDescriptor, 
# 312
cudaErrorInvalidMemcpyDirection, 
# 322 "/usr/include/driver_types.h" 3
cudaErrorAddressOfConstant, 
# 331 "/usr/include/driver_types.h" 3
cudaErrorTextureFetchFailed, 
# 340 "/usr/include/driver_types.h" 3
cudaErrorTextureNotBound, 
# 349 "/usr/include/driver_types.h" 3
cudaErrorSynchronizationError, 
# 355
cudaErrorInvalidFilterSetting, 
# 361
cudaErrorInvalidNormSetting, 
# 369
cudaErrorMixedDeviceExecution, 
# 377
cudaErrorNotYetImplemented = 31, 
# 386 "/usr/include/driver_types.h" 3
cudaErrorMemoryValueTooLarge, 
# 393
cudaErrorInsufficientDriver = 35, 
# 399
cudaErrorInvalidSurface = 37, 
# 405
cudaErrorDuplicateVariableName = 43, 
# 411
cudaErrorDuplicateTextureName, 
# 417
cudaErrorDuplicateSurfaceName, 
# 427 "/usr/include/driver_types.h" 3
cudaErrorDevicesUnavailable, 
# 440 "/usr/include/driver_types.h" 3
cudaErrorIncompatibleDriverContext = 49, 
# 446
cudaErrorMissingConfiguration = 52, 
# 455 "/usr/include/driver_types.h" 3
cudaErrorPriorLaunchFailure, 
# 462
cudaErrorLaunchMaxDepthExceeded = 65, 
# 470
cudaErrorLaunchFileScopedTex, 
# 478
cudaErrorLaunchFileScopedSurf, 
# 493 "/usr/include/driver_types.h" 3
cudaErrorSyncDepthExceeded, 
# 505 "/usr/include/driver_types.h" 3
cudaErrorLaunchPendingCountExceeded, 
# 511
cudaErrorInvalidDeviceFunction = 98, 
# 517
cudaErrorNoDevice = 100, 
# 523
cudaErrorInvalidDevice, 
# 528
cudaErrorStartupFailure = 127, 
# 533
cudaErrorInvalidKernelImage = 200, 
# 543 "/usr/include/driver_types.h" 3
cudaErrorDeviceUninitilialized, 
# 548
cudaErrorMapBufferObjectFailed = 205, 
# 553
cudaErrorUnmapBufferObjectFailed, 
# 559
cudaErrorArrayIsMapped, 
# 564
cudaErrorAlreadyMapped, 
# 572
cudaErrorNoKernelImageForDevice, 
# 577
cudaErrorAlreadyAcquired, 
# 582
cudaErrorNotMapped, 
# 588
cudaErrorNotMappedAsArray, 
# 594
cudaErrorNotMappedAsPointer, 
# 600
cudaErrorECCUncorrectable, 
# 606
cudaErrorUnsupportedLimit, 
# 612
cudaErrorDeviceAlreadyInUse, 
# 618
cudaErrorPeerAccessUnsupported, 
# 624
cudaErrorInvalidPtx, 
# 629
cudaErrorInvalidGraphicsContext, 
# 635
cudaErrorNvlinkUncorrectable, 
# 642
cudaErrorJitCompilerNotFound, 
# 647
cudaErrorInvalidSource = 300, 
# 652
cudaErrorFileNotFound, 
# 657
cudaErrorSharedObjectSymbolNotFound, 
# 662
cudaErrorSharedObjectInitFailed, 
# 667
cudaErrorOperatingSystem, 
# 674
cudaErrorInvalidResourceHandle = 400, 
# 680
cudaErrorIllegalState, 
# 686
cudaErrorSymbolNotFound = 500, 
# 694
cudaErrorNotReady = 600, 
# 702
cudaErrorIllegalAddress = 700, 
# 711 "/usr/include/driver_types.h" 3
cudaErrorLaunchOutOfResources, 
# 722 "/usr/include/driver_types.h" 3
cudaErrorLaunchTimeout, 
# 728
cudaErrorLaunchIncompatibleTexturing, 
# 735
cudaErrorPeerAccessAlreadyEnabled, 
# 742
cudaErrorPeerAccessNotEnabled, 
# 755 "/usr/include/driver_types.h" 3
cudaErrorSetOnActiveProcess = 708, 
# 762
cudaErrorContextIsDestroyed, 
# 769
cudaErrorAssert, 
# 776
cudaErrorTooManyPeers, 
# 782
cudaErrorHostMemoryAlreadyRegistered, 
# 788
cudaErrorHostMemoryNotRegistered, 
# 797 "/usr/include/driver_types.h" 3
cudaErrorHardwareStackError, 
# 805
cudaErrorIllegalInstruction, 
# 814 "/usr/include/driver_types.h" 3
cudaErrorMisalignedAddress, 
# 825 "/usr/include/driver_types.h" 3
cudaErrorInvalidAddressSpace, 
# 833
cudaErrorInvalidPc, 
# 844 "/usr/include/driver_types.h" 3
cudaErrorLaunchFailure, 
# 853 "/usr/include/driver_types.h" 3
cudaErrorCooperativeLaunchTooLarge, 
# 858
cudaErrorNotPermitted = 800, 
# 864
cudaErrorNotSupported, 
# 873 "/usr/include/driver_types.h" 3
cudaErrorSystemNotReady, 
# 880
cudaErrorSystemDriverMismatch, 
# 889 "/usr/include/driver_types.h" 3
cudaErrorCompatNotSupportedOnDevice, 
# 894
cudaErrorStreamCaptureUnsupported = 900, 
# 900
cudaErrorStreamCaptureInvalidated, 
# 906
cudaErrorStreamCaptureMerge, 
# 911
cudaErrorStreamCaptureUnmatched, 
# 917
cudaErrorStreamCaptureUnjoined, 
# 924
cudaErrorStreamCaptureIsolation, 
# 930
cudaErrorStreamCaptureImplicit, 
# 936
cudaErrorCapturedEvent, 
# 943
cudaErrorStreamCaptureWrongThread, 
# 948
cudaErrorUnknown = 999, 
# 956
cudaErrorApiFailureBase = 10000
# 957
}; 
#endif
# 962 "/usr/include/driver_types.h" 3
#if 0
# 962
enum cudaChannelFormatKind { 
# 964
cudaChannelFormatKindSigned, 
# 965
cudaChannelFormatKindUnsigned, 
# 966
cudaChannelFormatKindFloat, 
# 967
cudaChannelFormatKindNone
# 968
}; 
#endif
# 973 "/usr/include/driver_types.h" 3
#if 0
# 973
struct cudaChannelFormatDesc { 
# 975
int x; 
# 976
int y; 
# 977
int z; 
# 978
int w; 
# 979
cudaChannelFormatKind f; 
# 980
}; 
#endif
# 985 "/usr/include/driver_types.h" 3
typedef struct cudaArray *cudaArray_t; 
# 990
typedef const cudaArray *cudaArray_const_t; 
# 992
struct cudaArray; 
# 997
typedef struct cudaMipmappedArray *cudaMipmappedArray_t; 
# 1002
typedef const cudaMipmappedArray *cudaMipmappedArray_const_t; 
# 1004
struct cudaMipmappedArray; 
# 1009
#if 0
# 1009
enum cudaMemoryType { 
# 1011
cudaMemoryTypeUnregistered, 
# 1012
cudaMemoryTypeHost, 
# 1013
cudaMemoryTypeDevice, 
# 1014
cudaMemoryTypeManaged
# 1015
}; 
#endif
# 1020 "/usr/include/driver_types.h" 3
#if 0
# 1020
enum cudaMemcpyKind { 
# 1022
cudaMemcpyHostToHost, 
# 1023
cudaMemcpyHostToDevice, 
# 1024
cudaMemcpyDeviceToHost, 
# 1025
cudaMemcpyDeviceToDevice, 
# 1026
cudaMemcpyDefault
# 1027
}; 
#endif
# 1034 "/usr/include/driver_types.h" 3
#if 0
# 1034
struct cudaPitchedPtr { 
# 1036
void *ptr; 
# 1037
size_t pitch; 
# 1038
size_t xsize; 
# 1039
size_t ysize; 
# 1040
}; 
#endif
# 1047 "/usr/include/driver_types.h" 3
#if 0
# 1047
struct cudaExtent { 
# 1049
size_t width; 
# 1050
size_t height; 
# 1051
size_t depth; 
# 1052
}; 
#endif
# 1059 "/usr/include/driver_types.h" 3
#if 0
# 1059
struct cudaPos { 
# 1061
size_t x; 
# 1062
size_t y; 
# 1063
size_t z; 
# 1064
}; 
#endif
# 1069 "/usr/include/driver_types.h" 3
#if 0
# 1069
struct cudaMemcpy3DParms { 
# 1071
cudaArray_t srcArray; 
# 1072
cudaPos srcPos; 
# 1073
cudaPitchedPtr srcPtr; 
# 1075
cudaArray_t dstArray; 
# 1076
cudaPos dstPos; 
# 1077
cudaPitchedPtr dstPtr; 
# 1079
cudaExtent extent; 
# 1080
cudaMemcpyKind kind; __pad__(volatile char:8;)__pad__(volatile char:8;)__pad__(volatile char:8;)__pad__(volatile char:8;)
# 1081
}; 
#endif
# 1086 "/usr/include/driver_types.h" 3
#if 0
# 1086
struct cudaMemcpy3DPeerParms { 
# 1088
cudaArray_t srcArray; 
# 1089
cudaPos srcPos; 
# 1090
cudaPitchedPtr srcPtr; 
# 1091
int srcDevice; 
# 1093
cudaArray_t dstArray; 
# 1094
cudaPos dstPos; 
# 1095
cudaPitchedPtr dstPtr; 
# 1096
int dstDevice; 
# 1098
cudaExtent extent; 
# 1099
}; 
#endif
# 1104 "/usr/include/driver_types.h" 3
#if 0
# 1104
struct cudaMemsetParams { 
# 1105
void *dst; 
# 1106
size_t pitch; 
# 1107
unsigned value; 
# 1108
unsigned elementSize; 
# 1109
size_t width; 
# 1110
size_t height; 
# 1111
}; 
#endif
# 1123 "/usr/include/driver_types.h" 3
typedef void (*cudaHostFn_t)(void * userData); 
# 1128
#if 0
# 1128
struct cudaHostNodeParams { 
# 1129
cudaHostFn_t fn; 
# 1130
void *userData; 
# 1131
}; 
#endif
# 1136 "/usr/include/driver_types.h" 3
#if 0
# 1136
enum cudaStreamCaptureStatus { 
# 1137
cudaStreamCaptureStatusNone, 
# 1138
cudaStreamCaptureStatusActive, 
# 1139
cudaStreamCaptureStatusInvalidated
# 1141
}; 
#endif
# 1147 "/usr/include/driver_types.h" 3
#if 0
# 1147
enum cudaStreamCaptureMode { 
# 1148
cudaStreamCaptureModeGlobal, 
# 1149
cudaStreamCaptureModeThreadLocal, 
# 1150
cudaStreamCaptureModeRelaxed
# 1151
}; 
#endif
# 1156 "/usr/include/driver_types.h" 3
struct cudaGraphicsResource; 
# 1161
#if 0
# 1161
enum cudaGraphicsRegisterFlags { 
# 1163
cudaGraphicsRegisterFlagsNone, 
# 1164
cudaGraphicsRegisterFlagsReadOnly, 
# 1165
cudaGraphicsRegisterFlagsWriteDiscard, 
# 1166
cudaGraphicsRegisterFlagsSurfaceLoadStore = 4, 
# 1167
cudaGraphicsRegisterFlagsTextureGather = 8
# 1168
}; 
#endif
# 1173 "/usr/include/driver_types.h" 3
#if 0
# 1173
enum cudaGraphicsMapFlags { 
# 1175
cudaGraphicsMapFlagsNone, 
# 1176
cudaGraphicsMapFlagsReadOnly, 
# 1177
cudaGraphicsMapFlagsWriteDiscard
# 1178
}; 
#endif
# 1183 "/usr/include/driver_types.h" 3
#if 0
# 1183
enum cudaGraphicsCubeFace { 
# 1185
cudaGraphicsCubeFacePositiveX, 
# 1186
cudaGraphicsCubeFaceNegativeX, 
# 1187
cudaGraphicsCubeFacePositiveY, 
# 1188
cudaGraphicsCubeFaceNegativeY, 
# 1189
cudaGraphicsCubeFacePositiveZ, 
# 1190
cudaGraphicsCubeFaceNegativeZ
# 1191
}; 
#endif
# 1196 "/usr/include/driver_types.h" 3
#if 0
# 1196
enum cudaResourceType { 
# 1198
cudaResourceTypeArray, 
# 1199
cudaResourceTypeMipmappedArray, 
# 1200
cudaResourceTypeLinear, 
# 1201
cudaResourceTypePitch2D
# 1202
}; 
#endif
# 1207 "/usr/include/driver_types.h" 3
#if 0
# 1207
enum cudaResourceViewFormat { 
# 1209
cudaResViewFormatNone, 
# 1210
cudaResViewFormatUnsignedChar1, 
# 1211
cudaResViewFormatUnsignedChar2, 
# 1212
cudaResViewFormatUnsignedChar4, 
# 1213
cudaResViewFormatSignedChar1, 
# 1214
cudaResViewFormatSignedChar2, 
# 1215
cudaResViewFormatSignedChar4, 
# 1216
cudaResViewFormatUnsignedShort1, 
# 1217
cudaResViewFormatUnsignedShort2, 
# 1218
cudaResViewFormatUnsignedShort4, 
# 1219
cudaResViewFormatSignedShort1, 
# 1220
cudaResViewFormatSignedShort2, 
# 1221
cudaResViewFormatSignedShort4, 
# 1222
cudaResViewFormatUnsignedInt1, 
# 1223
cudaResViewFormatUnsignedInt2, 
# 1224
cudaResViewFormatUnsignedInt4, 
# 1225
cudaResViewFormatSignedInt1, 
# 1226
cudaResViewFormatSignedInt2, 
# 1227
cudaResViewFormatSignedInt4, 
# 1228
cudaResViewFormatHalf1, 
# 1229
cudaResViewFormatHalf2, 
# 1230
cudaResViewFormatHalf4, 
# 1231
cudaResViewFormatFloat1, 
# 1232
cudaResViewFormatFloat2, 
# 1233
cudaResViewFormatFloat4, 
# 1234
cudaResViewFormatUnsignedBlockCompressed1, 
# 1235
cudaResViewFormatUnsignedBlockCompressed2, 
# 1236
cudaResViewFormatUnsignedBlockCompressed3, 
# 1237
cudaResViewFormatUnsignedBlockCompressed4, 
# 1238
cudaResViewFormatSignedBlockCompressed4, 
# 1239
cudaResViewFormatUnsignedBlockCompressed5, 
# 1240
cudaResViewFormatSignedBlockCompressed5, 
# 1241
cudaResViewFormatUnsignedBlockCompressed6H, 
# 1242
cudaResViewFormatSignedBlockCompressed6H, 
# 1243
cudaResViewFormatUnsignedBlockCompressed7
# 1244
}; 
#endif
# 1249 "/usr/include/driver_types.h" 3
#if 0
# 1249
struct cudaResourceDesc { 
# 1250
cudaResourceType resType; 
# 1252
union { 
# 1253
struct { 
# 1254
cudaArray_t array; 
# 1255
} array; 
# 1256
struct { 
# 1257
cudaMipmappedArray_t mipmap; 
# 1258
} mipmap; 
# 1259
struct { 
# 1260
void *devPtr; 
# 1261
cudaChannelFormatDesc desc; 
# 1262
size_t sizeInBytes; 
# 1263
} linear; 
# 1264
struct { 
# 1265
void *devPtr; 
# 1266
cudaChannelFormatDesc desc; 
# 1267
size_t width; 
# 1268
size_t height; 
# 1269
size_t pitchInBytes; 
# 1270
} pitch2D; 
# 1271
} res; 
# 1272
}; 
#endif
# 1277 "/usr/include/driver_types.h" 3
#if 0
# 1277
struct cudaResourceViewDesc { 
# 1279
cudaResourceViewFormat format; 
# 1280
size_t width; 
# 1281
size_t height; 
# 1282
size_t depth; 
# 1283
unsigned firstMipmapLevel; 
# 1284
unsigned lastMipmapLevel; 
# 1285
unsigned firstLayer; 
# 1286
unsigned lastLayer; 
# 1287
}; 
#endif
# 1292 "/usr/include/driver_types.h" 3
#if 0
# 1292
struct cudaPointerAttributes { 
# 1302 "/usr/include/driver_types.h" 3
__attribute((deprecated)) cudaMemoryType memoryType; 
# 1308
cudaMemoryType type; 
# 1319 "/usr/include/driver_types.h" 3
int device; 
# 1325
void *devicePointer; 
# 1334 "/usr/include/driver_types.h" 3
void *hostPointer; 
# 1341
__attribute((deprecated)) int isManaged; __pad__(volatile char:8;)__pad__(volatile char:8;)__pad__(volatile char:8;)__pad__(volatile char:8;)
# 1342
}; 
#endif
# 1347 "/usr/include/driver_types.h" 3
#if 0
# 1347
struct cudaFuncAttributes { 
# 1354
size_t sharedSizeBytes; 
# 1360
size_t constSizeBytes; 
# 1365
size_t localSizeBytes; 
# 1372
int maxThreadsPerBlock; 
# 1377
int numRegs; 
# 1384
int ptxVersion; 
# 1391
int binaryVersion; 
# 1397
int cacheModeCA; 
# 1404
int maxDynamicSharedSizeBytes; 
# 1413 "/usr/include/driver_types.h" 3
int preferredShmemCarveout; 
# 1414
}; 
#endif
# 1419 "/usr/include/driver_types.h" 3
#if 0
# 1419
enum cudaFuncAttribute { 
# 1421
cudaFuncAttributeMaxDynamicSharedMemorySize = 8, 
# 1422
cudaFuncAttributePreferredSharedMemoryCarveout, 
# 1423
cudaFuncAttributeMax
# 1424
}; 
#endif
# 1429 "/usr/include/driver_types.h" 3
#if 0
# 1429
enum cudaFuncCache { 
# 1431
cudaFuncCachePreferNone, 
# 1432
cudaFuncCachePreferShared, 
# 1433
cudaFuncCachePreferL1, 
# 1434
cudaFuncCachePreferEqual
# 1435
}; 
#endif
# 1441 "/usr/include/driver_types.h" 3
#if 0
# 1441
enum cudaSharedMemConfig { 
# 1443
cudaSharedMemBankSizeDefault, 
# 1444
cudaSharedMemBankSizeFourByte, 
# 1445
cudaSharedMemBankSizeEightByte
# 1446
}; 
#endif
# 1451 "/usr/include/driver_types.h" 3
#if 0
# 1451
enum cudaSharedCarveout { 
# 1452
cudaSharedmemCarveoutDefault = (-1), 
# 1453
cudaSharedmemCarveoutMaxShared = 100, 
# 1454
cudaSharedmemCarveoutMaxL1 = 0
# 1455
}; 
#endif
# 1460 "/usr/include/driver_types.h" 3
#if 0
# 1460
enum cudaComputeMode { 
# 1462
cudaComputeModeDefault, 
# 1463
cudaComputeModeExclusive, 
# 1464
cudaComputeModeProhibited, 
# 1465
cudaComputeModeExclusiveProcess
# 1466
}; 
#endif
# 1471 "/usr/include/driver_types.h" 3
#if 0
# 1471
enum cudaLimit { 
# 1473
cudaLimitStackSize, 
# 1474
cudaLimitPrintfFifoSize, 
# 1475
cudaLimitMallocHeapSize, 
# 1476
cudaLimitDevRuntimeSyncDepth, 
# 1477
cudaLimitDevRuntimePendingLaunchCount, 
# 1478
cudaLimitMaxL2FetchGranularity
# 1479
}; 
#endif
# 1484 "/usr/include/driver_types.h" 3
#if 0
# 1484
enum cudaMemoryAdvise { 
# 1486
cudaMemAdviseSetReadMostly = 1, 
# 1487
cudaMemAdviseUnsetReadMostly, 
# 1488
cudaMemAdviseSetPreferredLocation, 
# 1489
cudaMemAdviseUnsetPreferredLocation, 
# 1490
cudaMemAdviseSetAccessedBy, 
# 1491
cudaMemAdviseUnsetAccessedBy
# 1492
}; 
#endif
# 1497 "/usr/include/driver_types.h" 3
#if 0
# 1497
enum cudaMemRangeAttribute { 
# 1499
cudaMemRangeAttributeReadMostly = 1, 
# 1500
cudaMemRangeAttributePreferredLocation, 
# 1501
cudaMemRangeAttributeAccessedBy, 
# 1502
cudaMemRangeAttributeLastPrefetchLocation
# 1503
}; 
#endif
# 1508 "/usr/include/driver_types.h" 3
#if 0
# 1508
enum cudaOutputMode { 
# 1510
cudaKeyValuePair, 
# 1511
cudaCSV
# 1512
}; 
#endif
# 1517 "/usr/include/driver_types.h" 3
#if 0
# 1517
enum cudaDeviceAttr { 
# 1519
cudaDevAttrMaxThreadsPerBlock = 1, 
# 1520
cudaDevAttrMaxBlockDimX, 
# 1521
cudaDevAttrMaxBlockDimY, 
# 1522
cudaDevAttrMaxBlockDimZ, 
# 1523
cudaDevAttrMaxGridDimX, 
# 1524
cudaDevAttrMaxGridDimY, 
# 1525
cudaDevAttrMaxGridDimZ, 
# 1526
cudaDevAttrMaxSharedMemoryPerBlock, 
# 1527
cudaDevAttrTotalConstantMemory, 
# 1528
cudaDevAttrWarpSize, 
# 1529
cudaDevAttrMaxPitch, 
# 1530
cudaDevAttrMaxRegistersPerBlock, 
# 1531
cudaDevAttrClockRate, 
# 1532
cudaDevAttrTextureAlignment, 
# 1533
cudaDevAttrGpuOverlap, 
# 1534
cudaDevAttrMultiProcessorCount, 
# 1535
cudaDevAttrKernelExecTimeout, 
# 1536
cudaDevAttrIntegrated, 
# 1537
cudaDevAttrCanMapHostMemory, 
# 1538
cudaDevAttrComputeMode, 
# 1539
cudaDevAttrMaxTexture1DWidth, 
# 1540
cudaDevAttrMaxTexture2DWidth, 
# 1541
cudaDevAttrMaxTexture2DHeight, 
# 1542
cudaDevAttrMaxTexture3DWidth, 
# 1543
cudaDevAttrMaxTexture3DHeight, 
# 1544
cudaDevAttrMaxTexture3DDepth, 
# 1545
cudaDevAttrMaxTexture2DLayeredWidth, 
# 1546
cudaDevAttrMaxTexture2DLayeredHeight, 
# 1547
cudaDevAttrMaxTexture2DLayeredLayers, 
# 1548
cudaDevAttrSurfaceAlignment, 
# 1549
cudaDevAttrConcurrentKernels, 
# 1550
cudaDevAttrEccEnabled, 
# 1551
cudaDevAttrPciBusId, 
# 1552
cudaDevAttrPciDeviceId, 
# 1553
cudaDevAttrTccDriver, 
# 1554
cudaDevAttrMemoryClockRate, 
# 1555
cudaDevAttrGlobalMemoryBusWidth, 
# 1556
cudaDevAttrL2CacheSize, 
# 1557
cudaDevAttrMaxThreadsPerMultiProcessor, 
# 1558
cudaDevAttrAsyncEngineCount, 
# 1559
cudaDevAttrUnifiedAddressing, 
# 1560
cudaDevAttrMaxTexture1DLayeredWidth, 
# 1561
cudaDevAttrMaxTexture1DLayeredLayers, 
# 1562
cudaDevAttrMaxTexture2DGatherWidth = 45, 
# 1563
cudaDevAttrMaxTexture2DGatherHeight, 
# 1564
cudaDevAttrMaxTexture3DWidthAlt, 
# 1565
cudaDevAttrMaxTexture3DHeightAlt, 
# 1566
cudaDevAttrMaxTexture3DDepthAlt, 
# 1567
cudaDevAttrPciDomainId, 
# 1568
cudaDevAttrTexturePitchAlignment, 
# 1569
cudaDevAttrMaxTextureCubemapWidth, 
# 1570
cudaDevAttrMaxTextureCubemapLayeredWidth, 
# 1571
cudaDevAttrMaxTextureCubemapLayeredLayers, 
# 1572
cudaDevAttrMaxSurface1DWidth, 
# 1573
cudaDevAttrMaxSurface2DWidth, 
# 1574
cudaDevAttrMaxSurface2DHeight, 
# 1575
cudaDevAttrMaxSurface3DWidth, 
# 1576
cudaDevAttrMaxSurface3DHeight, 
# 1577
cudaDevAttrMaxSurface3DDepth, 
# 1578
cudaDevAttrMaxSurface1DLayeredWidth, 
# 1579
cudaDevAttrMaxSurface1DLayeredLayers, 
# 1580
cudaDevAttrMaxSurface2DLayeredWidth, 
# 1581
cudaDevAttrMaxSurface2DLayeredHeight, 
# 1582
cudaDevAttrMaxSurface2DLayeredLayers, 
# 1583
cudaDevAttrMaxSurfaceCubemapWidth, 
# 1584
cudaDevAttrMaxSurfaceCubemapLayeredWidth, 
# 1585
cudaDevAttrMaxSurfaceCubemapLayeredLayers, 
# 1586
cudaDevAttrMaxTexture1DLinearWidth, 
# 1587
cudaDevAttrMaxTexture2DLinearWidth, 
# 1588
cudaDevAttrMaxTexture2DLinearHeight, 
# 1589
cudaDevAttrMaxTexture2DLinearPitch, 
# 1590
cudaDevAttrMaxTexture2DMipmappedWidth, 
# 1591
cudaDevAttrMaxTexture2DMipmappedHeight, 
# 1592
cudaDevAttrComputeCapabilityMajor, 
# 1593
cudaDevAttrComputeCapabilityMinor, 
# 1594
cudaDevAttrMaxTexture1DMipmappedWidth, 
# 1595
cudaDevAttrStreamPrioritiesSupported, 
# 1596
cudaDevAttrGlobalL1CacheSupported, 
# 1597
cudaDevAttrLocalL1CacheSupported, 
# 1598
cudaDevAttrMaxSharedMemoryPerMultiprocessor, 
# 1599
cudaDevAttrMaxRegistersPerMultiprocessor, 
# 1600
cudaDevAttrManagedMemory, 
# 1601
cudaDevAttrIsMultiGpuBoard, 
# 1602
cudaDevAttrMultiGpuBoardGroupID, 
# 1603
cudaDevAttrHostNativeAtomicSupported, 
# 1604
cudaDevAttrSingleToDoublePrecisionPerfRatio, 
# 1605
cudaDevAttrPageableMemoryAccess, 
# 1606
cudaDevAttrConcurrentManagedAccess, 
# 1607
cudaDevAttrComputePreemptionSupported, 
# 1608
cudaDevAttrCanUseHostPointerForRegisteredMem, 
# 1609
cudaDevAttrReserved92, 
# 1610
cudaDevAttrReserved93, 
# 1611
cudaDevAttrReserved94, 
# 1612
cudaDevAttrCooperativeLaunch, 
# 1613
cudaDevAttrCooperativeMultiDeviceLaunch, 
# 1614
cudaDevAttrMaxSharedMemoryPerBlockOptin, 
# 1615
cudaDevAttrCanFlushRemoteWrites, 
# 1616
cudaDevAttrHostRegisterSupported, 
# 1617
cudaDevAttrPageableMemoryAccessUsesHostPageTables, 
# 1618
cudaDevAttrDirectManagedMemAccessFromHost
# 1619
}; 
#endif
# 1625 "/usr/include/driver_types.h" 3
#if 0
# 1625
enum cudaDeviceP2PAttr { 
# 1626
cudaDevP2PAttrPerformanceRank = 1, 
# 1627
cudaDevP2PAttrAccessSupported, 
# 1628
cudaDevP2PAttrNativeAtomicSupported, 
# 1629
cudaDevP2PAttrCudaArrayAccessSupported
# 1630
}; 
#endif
# 1637 "/usr/include/driver_types.h" 3
#if 0
# 1637
struct CUuuid_st { 
# 1638
char bytes[16]; 
# 1639
}; 
#endif
# 1640 "/usr/include/driver_types.h" 3
#if 0
typedef CUuuid_st 
# 1640
CUuuid; 
#endif
# 1642 "/usr/include/driver_types.h" 3
#if 0
typedef CUuuid_st 
# 1642
cudaUUID_t; 
#endif
# 1647 "/usr/include/driver_types.h" 3
#if 0
# 1647
struct cudaDeviceProp { 
# 1649
char name[256]; 
# 1650
cudaUUID_t uuid; 
# 1651
char luid[8]; 
# 1652
unsigned luidDeviceNodeMask; 
# 1653
size_t totalGlobalMem; 
# 1654
size_t sharedMemPerBlock; 
# 1655
int regsPerBlock; 
# 1656
int warpSize; 
# 1657
size_t memPitch; 
# 1658
int maxThreadsPerBlock; 
# 1659
int maxThreadsDim[3]; 
# 1660
int maxGridSize[3]; 
# 1661
int clockRate; 
# 1662
size_t totalConstMem; 
# 1663
int major; 
# 1664
int minor; 
# 1665
size_t textureAlignment; 
# 1666
size_t texturePitchAlignment; 
# 1667
int deviceOverlap; 
# 1668
int multiProcessorCount; 
# 1669
int kernelExecTimeoutEnabled; 
# 1670
int integrated; 
# 1671
int canMapHostMemory; 
# 1672
int computeMode; 
# 1673
int maxTexture1D; 
# 1674
int maxTexture1DMipmap; 
# 1675
int maxTexture1DLinear; 
# 1676
int maxTexture2D[2]; 
# 1677
int maxTexture2DMipmap[2]; 
# 1678
int maxTexture2DLinear[3]; 
# 1679
int maxTexture2DGather[2]; 
# 1680
int maxTexture3D[3]; 
# 1681
int maxTexture3DAlt[3]; 
# 1682
int maxTextureCubemap; 
# 1683
int maxTexture1DLayered[2]; 
# 1684
int maxTexture2DLayered[3]; 
# 1685
int maxTextureCubemapLayered[2]; 
# 1686
int maxSurface1D; 
# 1687
int maxSurface2D[2]; 
# 1688
int maxSurface3D[3]; 
# 1689
int maxSurface1DLayered[2]; 
# 1690
int maxSurface2DLayered[3]; 
# 1691
int maxSurfaceCubemap; 
# 1692
int maxSurfaceCubemapLayered[2]; 
# 1693
size_t surfaceAlignment; 
# 1694
int concurrentKernels; 
# 1695
int ECCEnabled; 
# 1696
int pciBusID; 
# 1697
int pciDeviceID; 
# 1698
int pciDomainID; 
# 1699
int tccDriver; 
# 1700
int asyncEngineCount; 
# 1701
int unifiedAddressing; 
# 1702
int memoryClockRate; 
# 1703
int memoryBusWidth; 
# 1704
int l2CacheSize; 
# 1705
int maxThreadsPerMultiProcessor; 
# 1706
int streamPrioritiesSupported; 
# 1707
int globalL1CacheSupported; 
# 1708
int localL1CacheSupported; 
# 1709
size_t sharedMemPerMultiprocessor; 
# 1710
int regsPerMultiprocessor; 
# 1711
int managedMemory; 
# 1712
int isMultiGpuBoard; 
# 1713
int multiGpuBoardGroupID; 
# 1714
int hostNativeAtomicSupported; 
# 1715
int singleToDoublePrecisionPerfRatio; 
# 1716
int pageableMemoryAccess; 
# 1717
int concurrentManagedAccess; 
# 1718
int computePreemptionSupported; 
# 1719
int canUseHostPointerForRegisteredMem; 
# 1720
int cooperativeLaunch; 
# 1721
int cooperativeMultiDeviceLaunch; 
# 1722
size_t sharedMemPerBlockOptin; 
# 1723
int pageableMemoryAccessUsesHostPageTables; 
# 1724
int directManagedMemAccessFromHost; 
# 1725
}; 
#endif
# 1818 "/usr/include/driver_types.h" 3
#if 0
typedef 
# 1815
struct cudaIpcEventHandle_st { 
# 1817
char reserved[64]; 
# 1818
} cudaIpcEventHandle_t; 
#endif
# 1826 "/usr/include/driver_types.h" 3
#if 0
typedef 
# 1823
struct cudaIpcMemHandle_st { 
# 1825
char reserved[64]; 
# 1826
} cudaIpcMemHandle_t; 
#endif
# 1831 "/usr/include/driver_types.h" 3
#if 0
# 1831
enum cudaExternalMemoryHandleType { 
# 1835
cudaExternalMemoryHandleTypeOpaqueFd = 1, 
# 1839
cudaExternalMemoryHandleTypeOpaqueWin32, 
# 1843
cudaExternalMemoryHandleTypeOpaqueWin32Kmt, 
# 1847
cudaExternalMemoryHandleTypeD3D12Heap, 
# 1851
cudaExternalMemoryHandleTypeD3D12Resource
# 1852
}; 
#endif
# 1862 "/usr/include/driver_types.h" 3
#if 0
# 1862
struct cudaExternalMemoryHandleDesc { 
# 1866
cudaExternalMemoryHandleType type; 
# 1867
union { 
# 1873
int fd; 
# 1885 "/usr/include/driver_types.h" 3
struct { 
# 1889
void *handle; 
# 1894
const void *name; 
# 1895
} win32; 
# 1896
} handle; 
# 1900
unsigned long long size; 
# 1904
unsigned flags; __pad__(volatile char:8;)__pad__(volatile char:8;)__pad__(volatile char:8;)__pad__(volatile char:8;)
# 1905
}; 
#endif
# 1910 "/usr/include/driver_types.h" 3
#if 0
# 1910
struct cudaExternalMemoryBufferDesc { 
# 1914
unsigned long long offset; 
# 1918
unsigned long long size; 
# 1922
unsigned flags; 
# 1923
}; 
#endif
# 1928 "/usr/include/driver_types.h" 3
#if 0
# 1928
struct cudaExternalMemoryMipmappedArrayDesc { 
# 1933
unsigned long long offset; 
# 1937
cudaChannelFormatDesc formatDesc; 
# 1941
cudaExtent extent; 
# 1946
unsigned flags; 
# 1950
unsigned numLevels; 
# 1951
}; 
#endif
# 1956 "/usr/include/driver_types.h" 3
#if 0
# 1956
enum cudaExternalSemaphoreHandleType { 
# 1960
cudaExternalSemaphoreHandleTypeOpaqueFd = 1, 
# 1964
cudaExternalSemaphoreHandleTypeOpaqueWin32, 
# 1968
cudaExternalSemaphoreHandleTypeOpaqueWin32Kmt, 
# 1972
cudaExternalSemaphoreHandleTypeD3D12Fence
# 1973
}; 
#endif
# 1978 "/usr/include/driver_types.h" 3
#if 0
# 1978
struct cudaExternalSemaphoreHandleDesc { 
# 1982
cudaExternalSemaphoreHandleType type; 
# 1983
union { 
# 1988
int fd; 
# 1999 "/usr/include/driver_types.h" 3
struct { 
# 2003
void *handle; 
# 2008
const void *name; 
# 2009
} win32; 
# 2010
} handle; 
# 2014
unsigned flags; __pad__(volatile char:8;)__pad__(volatile char:8;)__pad__(volatile char:8;)__pad__(volatile char:8;)
# 2015
}; 
#endif
# 2020 "/usr/include/driver_types.h" 3
#if 0
# 2020
struct cudaExternalSemaphoreSignalParams { 
# 2021
union { 
# 2025
struct { 
# 2029
unsigned long long value; 
# 2030
} fence; 
# 2031
} params; 
# 2035
unsigned flags; 
# 2036
}; 
#endif
# 2041 "/usr/include/driver_types.h" 3
#if 0
# 2041
struct cudaExternalSemaphoreWaitParams { 
# 2042
union { 
# 2046
struct { 
# 2050
unsigned long long value; 
# 2051
} fence; 
# 2052
} params; 
# 2056
unsigned flags; 
# 2057
}; 
#endif
# 2069 "/usr/include/driver_types.h" 3
#if 0
typedef cudaError 
# 2069
cudaError_t; 
#endif
# 2074 "/usr/include/driver_types.h" 3
#if 0
typedef struct CUstream_st *
# 2074
cudaStream_t; 
#endif
# 2079 "/usr/include/driver_types.h" 3
#if 0
typedef struct CUevent_st *
# 2079
cudaEvent_t; 
#endif
# 2084 "/usr/include/driver_types.h" 3
#if 0
typedef cudaGraphicsResource *
# 2084
cudaGraphicsResource_t; 
#endif
# 2089 "/usr/include/driver_types.h" 3
#if 0
typedef cudaOutputMode 
# 2089
cudaOutputMode_t; 
#endif
# 2094 "/usr/include/driver_types.h" 3
#if 0
typedef struct CUexternalMemory_st *
# 2094
cudaExternalMemory_t; 
#endif
# 2099 "/usr/include/driver_types.h" 3
#if 0
typedef struct CUexternalSemaphore_st *
# 2099
cudaExternalSemaphore_t; 
#endif
# 2104 "/usr/include/driver_types.h" 3
#if 0
typedef struct CUgraph_st *
# 2104
cudaGraph_t; 
#endif
# 2109 "/usr/include/driver_types.h" 3
#if 0
typedef struct CUgraphNode_st *
# 2109
cudaGraphNode_t; 
#endif
# 2114 "/usr/include/driver_types.h" 3
#if 0
# 2114
enum cudaCGScope { 
# 2115
cudaCGScopeInvalid, 
# 2116
cudaCGScopeGrid, 
# 2117
cudaCGScopeMultiGrid
# 2118
}; 
#endif
# 2123 "/usr/include/driver_types.h" 3
#if 0
# 2123
struct cudaLaunchParams { 
# 2125
void *func; 
# 2126
dim3 gridDim; 
# 2127
dim3 blockDim; 
# 2128
void **args; 
# 2129
size_t sharedMem; 
# 2130
cudaStream_t stream; 
# 2131
}; 
#endif
# 2136 "/usr/include/driver_types.h" 3
#if 0
# 2136
struct cudaKernelNodeParams { 
# 2137
void *func; 
# 2138
dim3 gridDim; 
# 2139
dim3 blockDim; 
# 2140
unsigned sharedMemBytes; 
# 2141
void **kernelParams; 
# 2142
void **extra; 
# 2143
}; 
#endif
# 2148 "/usr/include/driver_types.h" 3
#if 0
# 2148
enum cudaGraphNodeType { 
# 2149
cudaGraphNodeTypeKernel, 
# 2150
cudaGraphNodeTypeMemcpy, 
# 2151
cudaGraphNodeTypeMemset, 
# 2152
cudaGraphNodeTypeHost, 
# 2153
cudaGraphNodeTypeGraph, 
# 2154
cudaGraphNodeTypeEmpty, 
# 2155
cudaGraphNodeTypeCount
# 2156
}; 
#endif
# 2161 "/usr/include/driver_types.h" 3
typedef struct CUgraphExec_st *cudaGraphExec_t; 
# 84 "/usr/include/surface_types.h" 3
#if 0
# 84
enum cudaSurfaceBoundaryMode { 
# 86
cudaBoundaryModeZero, 
# 87
cudaBoundaryModeClamp, 
# 88
cudaBoundaryModeTrap
# 89
}; 
#endif
# 94 "/usr/include/surface_types.h" 3
#if 0
# 94
enum cudaSurfaceFormatMode { 
# 96
cudaFormatModeForced, 
# 97
cudaFormatModeAuto
# 98
}; 
#endif
# 103 "/usr/include/surface_types.h" 3
#if 0
# 103
struct surfaceReference { 
# 108
cudaChannelFormatDesc channelDesc; 
# 109
}; 
#endif
# 114 "/usr/include/surface_types.h" 3
#if 0
typedef unsigned long long 
# 114
cudaSurfaceObject_t; 
#endif
# 84 "/usr/include/texture_types.h" 3
#if 0
# 84
enum cudaTextureAddressMode { 
# 86
cudaAddressModeWrap, 
# 87
cudaAddressModeClamp, 
# 88
cudaAddressModeMirror, 
# 89
cudaAddressModeBorder
# 90
}; 
#endif
# 95 "/usr/include/texture_types.h" 3
#if 0
# 95
enum cudaTextureFilterMode { 
# 97
cudaFilterModePoint, 
# 98
cudaFilterModeLinear
# 99
}; 
#endif
# 104 "/usr/include/texture_types.h" 3
#if 0
# 104
enum cudaTextureReadMode { 
# 106
cudaReadModeElementType, 
# 107
cudaReadModeNormalizedFloat
# 108
}; 
#endif
# 113 "/usr/include/texture_types.h" 3
#if 0
# 113
struct textureReference { 
# 118
int normalized; 
# 122
cudaTextureFilterMode filterMode; 
# 126
cudaTextureAddressMode addressMode[3]; 
# 130
cudaChannelFormatDesc channelDesc; 
# 134
int sRGB; 
# 138
unsigned maxAnisotropy; 
# 142
cudaTextureFilterMode mipmapFilterMode; 
# 146
float mipmapLevelBias; 
# 150
float minMipmapLevelClamp; 
# 154
float maxMipmapLevelClamp; 
# 155
int __cudaReserved[15]; 
# 156
}; 
#endif
# 161 "/usr/include/texture_types.h" 3
#if 0
# 161
struct cudaTextureDesc { 
# 166
cudaTextureAddressMode addressMode[3]; 
# 170
cudaTextureFilterMode filterMode; 
# 174
cudaTextureReadMode readMode; 
# 178
int sRGB; 
# 182
float borderColor[4]; 
# 186
int normalizedCoords; 
# 190
unsigned maxAnisotropy; 
# 194
cudaTextureFilterMode mipmapFilterMode; 
# 198
float mipmapLevelBias; 
# 202
float minMipmapLevelClamp; 
# 206
float maxMipmapLevelClamp; 
# 207
}; 
#endif
# 212 "/usr/include/texture_types.h" 3
#if 0
typedef unsigned long long 
# 212
cudaTextureObject_t; 
#endif
# 70 "/usr/include/library_types.h" 3
typedef 
# 54
enum cudaDataType_t { 
# 56
CUDA_R_16F = 2, 
# 57
CUDA_C_16F = 6, 
# 58
CUDA_R_32F = 0, 
# 59
CUDA_C_32F = 4, 
# 60
CUDA_R_64F = 1, 
# 61
CUDA_C_64F = 5, 
# 62
CUDA_R_8I = 3, 
# 63
CUDA_C_8I = 7, 
# 64
CUDA_R_8U, 
# 65
CUDA_C_8U, 
# 66
CUDA_R_32I, 
# 67
CUDA_C_32I, 
# 68
CUDA_R_32U, 
# 69
CUDA_C_32U
# 70
} cudaDataType; 
# 78
typedef 
# 73
enum libraryPropertyType_t { 
# 75
MAJOR_VERSION, 
# 76
MINOR_VERSION, 
# 77
PATCH_LEVEL
# 78
} libraryPropertyType; 
# 121 "/usr/include/cuda_device_runtime_api.h" 3
extern "C" {
# 123
extern cudaError_t cudaDeviceGetAttribute(int * value, cudaDeviceAttr attr, int device); 
# 124
extern cudaError_t cudaDeviceGetLimit(size_t * pValue, cudaLimit limit); 
# 125
extern cudaError_t cudaDeviceGetCacheConfig(cudaFuncCache * pCacheConfig); 
# 126
extern cudaError_t cudaDeviceGetSharedMemConfig(cudaSharedMemConfig * pConfig); 
# 127
extern cudaError_t cudaDeviceSynchronize(); 
# 128
extern cudaError_t cudaGetLastError(); 
# 129
extern cudaError_t cudaPeekAtLastError(); 
# 130
extern const char *cudaGetErrorString(cudaError_t error); 
# 131
extern const char *cudaGetErrorName(cudaError_t error); 
# 132
extern cudaError_t cudaGetDeviceCount(int * count); 
# 133
extern cudaError_t cudaGetDevice(int * device); 
# 134
extern cudaError_t cudaStreamCreateWithFlags(cudaStream_t * pStream, unsigned flags); 
# 135
extern cudaError_t cudaStreamDestroy(cudaStream_t stream); 
# 136
extern cudaError_t cudaStreamWaitEvent(cudaStream_t stream, cudaEvent_t event, unsigned flags); 
# 137
__attribute__((unused)) extern cudaError_t cudaStreamWaitEvent_ptsz(cudaStream_t stream, cudaEvent_t event, unsigned flags); 
# 138
extern cudaError_t cudaEventCreateWithFlags(cudaEvent_t * event, unsigned flags); 
# 139
extern cudaError_t cudaEventRecord(cudaEvent_t event, cudaStream_t stream); 
# 140
__attribute__((unused)) extern cudaError_t cudaEventRecord_ptsz(cudaEvent_t event, cudaStream_t stream); 
# 141
extern cudaError_t cudaEventDestroy(cudaEvent_t event); 
# 142
extern cudaError_t cudaFuncGetAttributes(cudaFuncAttributes * attr, const void * func); 
# 143
extern cudaError_t cudaFree(void * devPtr); 
# 144
extern cudaError_t cudaMalloc(void ** devPtr, size_t size); 
# 145
extern cudaError_t cudaMemcpyAsync(void * dst, const void * src, size_t count, cudaMemcpyKind kind, cudaStream_t stream); 
# 146
__attribute__((unused)) extern cudaError_t cudaMemcpyAsync_ptsz(void * dst, const void * src, size_t count, cudaMemcpyKind kind, cudaStream_t stream); 
# 147
extern cudaError_t cudaMemcpy2DAsync(void * dst, size_t dpitch, const void * src, size_t spitch, size_t width, size_t height, cudaMemcpyKind kind, cudaStream_t stream); 
# 148
__attribute__((unused)) extern cudaError_t cudaMemcpy2DAsync_ptsz(void * dst, size_t dpitch, const void * src, size_t spitch, size_t width, size_t height, cudaMemcpyKind kind, cudaStream_t stream); 
# 149
extern cudaError_t cudaMemcpy3DAsync(const cudaMemcpy3DParms * p, cudaStream_t stream); 
# 150
__attribute__((unused)) extern cudaError_t cudaMemcpy3DAsync_ptsz(const cudaMemcpy3DParms * p, cudaStream_t stream); 
# 151
extern cudaError_t cudaMemsetAsync(void * devPtr, int value, size_t count, cudaStream_t stream); 
# 152
__attribute__((unused)) extern cudaError_t cudaMemsetAsync_ptsz(void * devPtr, int value, size_t count, cudaStream_t stream); 
# 153
extern cudaError_t cudaMemset2DAsync(void * devPtr, size_t pitch, int value, size_t width, size_t height, cudaStream_t stream); 
# 154
__attribute__((unused)) extern cudaError_t cudaMemset2DAsync_ptsz(void * devPtr, size_t pitch, int value, size_t width, size_t height, cudaStream_t stream); 
# 155
extern cudaError_t cudaMemset3DAsync(cudaPitchedPtr pitchedDevPtr, int value, cudaExtent extent, cudaStream_t stream); 
# 156
__attribute__((unused)) extern cudaError_t cudaMemset3DAsync_ptsz(cudaPitchedPtr pitchedDevPtr, int value, cudaExtent extent, cudaStream_t stream); 
# 157
extern cudaError_t cudaRuntimeGetVersion(int * runtimeVersion); 
# 178 "/usr/include/cuda_device_runtime_api.h" 3
__attribute__((unused)) extern void *cudaGetParameterBuffer(size_t alignment, size_t size); 
# 206 "/usr/include/cuda_device_runtime_api.h" 3
__attribute__((unused)) extern void *cudaGetParameterBufferV2(void * func, dim3 gridDimension, dim3 blockDimension, unsigned sharedMemSize); 
# 207
__attribute__((unused)) extern cudaError_t cudaLaunchDevice_ptsz(void * func, void * parameterBuffer, dim3 gridDimension, dim3 blockDimension, unsigned sharedMemSize, cudaStream_t stream); 
# 208
__attribute__((unused)) extern cudaError_t cudaLaunchDeviceV2_ptsz(void * parameterBuffer, cudaStream_t stream); 
# 226 "/usr/include/cuda_device_runtime_api.h" 3
__attribute__((unused)) extern cudaError_t cudaLaunchDevice(void * func, void * parameterBuffer, dim3 gridDimension, dim3 blockDimension, unsigned sharedMemSize, cudaStream_t stream); 
# 227
__attribute__((unused)) extern cudaError_t cudaLaunchDeviceV2(void * parameterBuffer, cudaStream_t stream); 
# 230
extern cudaError_t cudaOccupancyMaxActiveBlocksPerMultiprocessor(int * numBlocks, const void * func, int blockSize, size_t dynamicSmemSize); 
# 231
extern cudaError_t cudaOccupancyMaxActiveBlocksPerMultiprocessorWithFlags(int * numBlocks, const void * func, int blockSize, size_t dynamicSmemSize, unsigned flags); 
# 233
__attribute__((unused)) extern unsigned long long cudaCGGetIntrinsicHandle(cudaCGScope scope); 
# 234
__attribute__((unused)) extern cudaError_t cudaCGSynchronize(unsigned long long handle, unsigned flags); 
# 235
__attribute__((unused)) extern cudaError_t cudaCGSynchronizeGrid(unsigned long long handle, unsigned flags); 
# 236
__attribute__((unused)) extern cudaError_t cudaCGGetSize(unsigned * numThreads, unsigned * numGrids, unsigned long long handle); 
# 237
__attribute__((unused)) extern cudaError_t cudaCGGetRank(unsigned * threadRank, unsigned * gridRank, unsigned long long handle); 
# 238
}
# 240
template< class T> static inline cudaError_t cudaMalloc(T ** devPtr, size_t size); 
# 241
template< class T> static inline cudaError_t cudaFuncGetAttributes(cudaFuncAttributes * attr, T * entry); 
# 242
template< class T> static inline cudaError_t cudaOccupancyMaxActiveBlocksPerMultiprocessor(int * numBlocks, T func, int blockSize, size_t dynamicSmemSize); 
# 243
template< class T> static inline cudaError_t cudaOccupancyMaxActiveBlocksPerMultiprocessorWithFlags(int * numBlocks, T func, int blockSize, size_t dynamicSmemSize, unsigned flags); 
# 245 "/usr/include/cuda_runtime_api.h" 3
extern "C" {
# 280 "/usr/include/cuda_runtime_api.h" 3
extern cudaError_t cudaDeviceReset(); 
# 301 "/usr/include/cuda_runtime_api.h" 3
extern cudaError_t cudaDeviceSynchronize(); 
# 386 "/usr/include/cuda_runtime_api.h" 3
extern cudaError_t cudaDeviceSetLimit(cudaLimit limit, size_t value); 
# 420 "/usr/include/cuda_runtime_api.h" 3
extern cudaError_t cudaDeviceGetLimit(size_t * pValue, cudaLimit limit); 
# 453 "/usr/include/cuda_runtime_api.h" 3
extern cudaError_t cudaDeviceGetCacheConfig(cudaFuncCache * pCacheConfig); 
# 490 "/usr/include/cuda_runtime_api.h" 3
extern cudaError_t cudaDeviceGetStreamPriorityRange(int * leastPriority, int * greatestPriority); 
# 534 "/usr/include/cuda_runtime_api.h" 3
extern cudaError_t cudaDeviceSetCacheConfig(cudaFuncCache cacheConfig); 
# 565 "/usr/include/cuda_runtime_api.h" 3
extern cudaError_t cudaDeviceGetSharedMemConfig(cudaSharedMemConfig * pConfig); 
# 609 "/usr/include/cuda_runtime_api.h" 3
extern cudaError_t cudaDeviceSetSharedMemConfig(cudaSharedMemConfig config); 
# 636 "/usr/include/cuda_runtime_api.h" 3
extern cudaError_t cudaDeviceGetByPCIBusId(int * device, const char * pciBusId); 
# 666 "/usr/include/cuda_runtime_api.h" 3
extern cudaError_t cudaDeviceGetPCIBusId(char * pciBusId, int len, int device); 
# 713 "/usr/include/cuda_runtime_api.h" 3
extern cudaError_t cudaIpcGetEventHandle(cudaIpcEventHandle_t * handle, cudaEvent_t event); 
# 753 "/usr/include/cuda_runtime_api.h" 3
extern cudaError_t cudaIpcOpenEventHandle(cudaEvent_t * event, cudaIpcEventHandle_t handle); 
# 796 "/usr/include/cuda_runtime_api.h" 3
extern cudaError_t cudaIpcGetMemHandle(cudaIpcMemHandle_t * handle, void * devPtr); 
# 854 "/usr/include/cuda_runtime_api.h" 3
extern cudaError_t cudaIpcOpenMemHandle(void ** devPtr, cudaIpcMemHandle_t handle, unsigned flags); 
# 889 "/usr/include/cuda_runtime_api.h" 3
extern cudaError_t cudaIpcCloseMemHandle(void * devPtr); 
# 931 "/usr/include/cuda_runtime_api.h" 3
__attribute((deprecated)) extern cudaError_t cudaThreadExit(); 
# 957 "/usr/include/cuda_runtime_api.h" 3
__attribute((deprecated)) extern cudaError_t cudaThreadSynchronize(); 
# 1006 "/usr/include/cuda_runtime_api.h" 3
__attribute((deprecated)) extern cudaError_t cudaThreadSetLimit(cudaLimit limit, size_t value); 
# 1039 "/usr/include/cuda_runtime_api.h" 3
__attribute((deprecated)) extern cudaError_t cudaThreadGetLimit(size_t * pValue, cudaLimit limit); 
# 1075 "/usr/include/cuda_runtime_api.h" 3
__attribute((deprecated)) extern cudaError_t cudaThreadGetCacheConfig(cudaFuncCache * pCacheConfig); 
# 1122 "/usr/include/cuda_runtime_api.h" 3
__attribute((deprecated)) extern cudaError_t cudaThreadSetCacheConfig(cudaFuncCache cacheConfig); 
# 1181 "/usr/include/cuda_runtime_api.h" 3
extern cudaError_t cudaGetLastError(); 
# 1227 "/usr/include/cuda_runtime_api.h" 3
extern cudaError_t cudaPeekAtLastError(); 
# 1243 "/usr/include/cuda_runtime_api.h" 3
extern const char *cudaGetErrorName(cudaError_t error); 
# 1259 "/usr/include/cuda_runtime_api.h" 3
extern const char *cudaGetErrorString(cudaError_t error); 
# 1288 "/usr/include/cuda_runtime_api.h" 3
extern cudaError_t cudaGetDeviceCount(int * count); 
# 1559 "/usr/include/cuda_runtime_api.h" 3
extern cudaError_t cudaGetDeviceProperties(cudaDeviceProp * prop, int device); 
# 1748 "/usr/include/cuda_runtime_api.h" 3
extern cudaError_t cudaDeviceGetAttribute(int * value, cudaDeviceAttr attr, int device); 
# 1788 "/usr/include/cuda_runtime_api.h" 3
extern cudaError_t cudaDeviceGetP2PAttribute(int * value, cudaDeviceP2PAttr attr, int srcDevice, int dstDevice); 
# 1809 "/usr/include/cuda_runtime_api.h" 3
extern cudaError_t cudaChooseDevice(int * device, const cudaDeviceProp * prop); 
# 1846 "/usr/include/cuda_runtime_api.h" 3
extern cudaError_t cudaSetDevice(int device); 
# 1867 "/usr/include/cuda_runtime_api.h" 3
extern cudaError_t cudaGetDevice(int * device); 
# 1898 "/usr/include/cuda_runtime_api.h" 3
extern cudaError_t cudaSetValidDevices(int * device_arr, int len); 
# 1967 "/usr/include/cuda_runtime_api.h" 3
extern cudaError_t cudaSetDeviceFlags(unsigned flags); 
# 2013 "/usr/include/cuda_runtime_api.h" 3
extern cudaError_t cudaGetDeviceFlags(unsigned * flags); 
# 2053 "/usr/include/cuda_runtime_api.h" 3
extern cudaError_t cudaStreamCreate(cudaStream_t * pStream); 
# 2085 "/usr/include/cuda_runtime_api.h" 3
extern cudaError_t cudaStreamCreateWithFlags(cudaStream_t * pStream, unsigned flags); 
# 2131 "/usr/include/cuda_runtime_api.h" 3
extern cudaError_t cudaStreamCreateWithPriority(cudaStream_t * pStream, unsigned flags, int priority); 
# 2158 "/usr/include/cuda_runtime_api.h" 3
extern cudaError_t cudaStreamGetPriority(cudaStream_t hStream, int * priority); 
# 2183 "/usr/include/cuda_runtime_api.h" 3
extern cudaError_t cudaStreamGetFlags(cudaStream_t hStream, unsigned * flags); 
# 2214 "/usr/include/cuda_runtime_api.h" 3
extern cudaError_t cudaStreamDestroy(cudaStream_t stream); 
# 2240 "/usr/include/cuda_runtime_api.h" 3
extern cudaError_t cudaStreamWaitEvent(cudaStream_t stream, cudaEvent_t event, unsigned flags); 
# 2248
typedef void (*cudaStreamCallback_t)(cudaStream_t stream, cudaError_t status, void * userData); 
# 2315 "/usr/include/cuda_runtime_api.h" 3
extern cudaError_t cudaStreamAddCallback(cudaStream_t stream, cudaStreamCallback_t callback, void * userData, unsigned flags); 
# 2339 "/usr/include/cuda_runtime_api.h" 3
extern cudaError_t cudaStreamSynchronize(cudaStream_t stream); 
# 2364 "/usr/include/cuda_runtime_api.h" 3
extern cudaError_t cudaStreamQuery(cudaStream_t stream); 
# 2447 "/usr/include/cuda_runtime_api.h" 3
extern cudaError_t cudaStreamAttachMemAsync(cudaStream_t stream, void * devPtr, size_t length = 0, unsigned flags = 4); 
# 2483 "/usr/include/cuda_runtime_api.h" 3
extern cudaError_t cudaStreamBeginCapture(cudaStream_t stream, cudaStreamCaptureMode mode); 
# 2534 "/usr/include/cuda_runtime_api.h" 3
extern cudaError_t cudaThreadExchangeStreamCaptureMode(cudaStreamCaptureMode * mode); 
# 2562 "/usr/include/cuda_runtime_api.h" 3
extern cudaError_t cudaStreamEndCapture(cudaStream_t stream, cudaGraph_t * pGraph); 
# 2600 "/usr/include/cuda_runtime_api.h" 3
extern cudaError_t cudaStreamIsCapturing(cudaStream_t stream, cudaStreamCaptureStatus * pCaptureStatus); 
# 2628 "/usr/include/cuda_runtime_api.h" 3
extern cudaError_t cudaStreamGetCaptureInfo(cudaStream_t stream, cudaStreamCaptureStatus * pCaptureStatus, unsigned long long * pId); 
# 2666 "/usr/include/cuda_runtime_api.h" 3
extern cudaError_t cudaEventCreate(cudaEvent_t * event); 
# 2703 "/usr/include/cuda_runtime_api.h" 3
extern cudaError_t cudaEventCreateWithFlags(cudaEvent_t * event, unsigned flags); 
# 2742 "/usr/include/cuda_runtime_api.h" 3
extern cudaError_t cudaEventRecord(cudaEvent_t event, cudaStream_t stream = 0); 
# 2773 "/usr/include/cuda_runtime_api.h" 3
extern cudaError_t cudaEventQuery(cudaEvent_t event); 
# 2803 "/usr/include/cuda_runtime_api.h" 3
extern cudaError_t cudaEventSynchronize(cudaEvent_t event); 
# 2830 "/usr/include/cuda_runtime_api.h" 3
extern cudaError_t cudaEventDestroy(cudaEvent_t event); 
# 2873 "/usr/include/cuda_runtime_api.h" 3
extern cudaError_t cudaEventElapsedTime(float * ms, cudaEvent_t start, cudaEvent_t end); 
# 3012 "/usr/include/cuda_runtime_api.h" 3
extern cudaError_t cudaImportExternalMemory(cudaExternalMemory_t * extMem_out, const cudaExternalMemoryHandleDesc * memHandleDesc); 
# 3066 "/usr/include/cuda_runtime_api.h" 3
extern cudaError_t cudaExternalMemoryGetMappedBuffer(void ** devPtr, cudaExternalMemory_t extMem, const cudaExternalMemoryBufferDesc * bufferDesc); 
# 3121 "/usr/include/cuda_runtime_api.h" 3
extern cudaError_t cudaExternalMemoryGetMappedMipmappedArray(cudaMipmappedArray_t * mipmap, cudaExternalMemory_t extMem, const cudaExternalMemoryMipmappedArrayDesc * mipmapDesc); 
# 3144 "/usr/include/cuda_runtime_api.h" 3
extern cudaError_t cudaDestroyExternalMemory(cudaExternalMemory_t extMem); 
# 3238 "/usr/include/cuda_runtime_api.h" 3
extern cudaError_t cudaImportExternalSemaphore(cudaExternalSemaphore_t * extSem_out, const cudaExternalSemaphoreHandleDesc * semHandleDesc); 
# 3277 "/usr/include/cuda_runtime_api.h" 3
extern cudaError_t cudaSignalExternalSemaphoresAsync(const cudaExternalSemaphore_t * extSemArray, const cudaExternalSemaphoreSignalParams * paramsArray, unsigned numExtSems, cudaStream_t stream = 0); 
# 3320 "/usr/include/cuda_runtime_api.h" 3
extern cudaError_t cudaWaitExternalSemaphoresAsync(const cudaExternalSemaphore_t * extSemArray, const cudaExternalSemaphoreWaitParams * paramsArray, unsigned numExtSems, cudaStream_t stream = 0); 
# 3342 "/usr/include/cuda_runtime_api.h" 3
extern cudaError_t cudaDestroyExternalSemaphore(cudaExternalSemaphore_t extSem); 
# 3407 "/usr/include/cuda_runtime_api.h" 3
extern cudaError_t cudaLaunchKernel(const void * func, dim3 gridDim, dim3 blockDim, void ** args, size_t sharedMem, cudaStream_t stream); 
# 3464 "/usr/include/cuda_runtime_api.h" 3
extern cudaError_t cudaLaunchCooperativeKernel(const void * func, dim3 gridDim, dim3 blockDim, void ** args, size_t sharedMem, cudaStream_t stream); 
# 3563 "/usr/include/cuda_runtime_api.h" 3
extern cudaError_t cudaLaunchCooperativeKernelMultiDevice(cudaLaunchParams * launchParamsList, unsigned numDevices, unsigned flags = 0); 
# 3612 "/usr/include/cuda_runtime_api.h" 3
extern cudaError_t cudaFuncSetCacheConfig(const void * func, cudaFuncCache cacheConfig); 
# 3667 "/usr/include/cuda_runtime_api.h" 3
extern cudaError_t cudaFuncSetSharedMemConfig(const void * func, cudaSharedMemConfig config); 
# 3702 "/usr/include/cuda_runtime_api.h" 3
extern cudaError_t cudaFuncGetAttributes(cudaFuncAttributes * attr, const void * func); 
# 3741 "/usr/include/cuda_runtime_api.h" 3
extern cudaError_t cudaFuncSetAttribute(const void * func, cudaFuncAttribute attr, int value); 
# 3765 "/usr/include/cuda_runtime_api.h" 3
__attribute((deprecated)) extern cudaError_t cudaSetDoubleForDevice(double * d); 
# 3789 "/usr/include/cuda_runtime_api.h" 3
__attribute((deprecated)) extern cudaError_t cudaSetDoubleForHost(double * d); 
# 3855 "/usr/include/cuda_runtime_api.h" 3
extern cudaError_t cudaLaunchHostFunc(cudaStream_t stream, cudaHostFn_t fn, void * userData); 
# 3910 "/usr/include/cuda_runtime_api.h" 3
extern cudaError_t cudaOccupancyMaxActiveBlocksPerMultiprocessor(int * numBlocks, const void * func, int blockSize, size_t dynamicSMemSize); 
# 3954 "/usr/include/cuda_runtime_api.h" 3
extern cudaError_t cudaOccupancyMaxActiveBlocksPerMultiprocessorWithFlags(int * numBlocks, const void * func, int blockSize, size_t dynamicSMemSize, unsigned flags); 
# 4074 "/usr/include/cuda_runtime_api.h" 3
extern cudaError_t cudaMallocManaged(void ** devPtr, size_t size, unsigned flags = 1); 
# 4105 "/usr/include/cuda_runtime_api.h" 3
extern cudaError_t cudaMalloc(void ** devPtr, size_t size); 
# 4138 "/usr/include/cuda_runtime_api.h" 3
extern cudaError_t cudaMallocHost(void ** ptr, size_t size); 
# 4181 "/usr/include/cuda_runtime_api.h" 3
extern cudaError_t cudaMallocPitch(void ** devPtr, size_t * pitch, size_t width, size_t height); 
# 4227 "/usr/include/cuda_runtime_api.h" 3
extern cudaError_t cudaMallocArray(cudaArray_t * array, const cudaChannelFormatDesc * desc, size_t width, size_t height = 0, unsigned flags = 0); 
# 4256 "/usr/include/cuda_runtime_api.h" 3
extern cudaError_t cudaFree(void * devPtr); 
# 4279 "/usr/include/cuda_runtime_api.h" 3
extern cudaError_t cudaFreeHost(void * ptr); 
# 4302 "/usr/include/cuda_runtime_api.h" 3
extern cudaError_t cudaFreeArray(cudaArray_t array); 
# 4325 "/usr/include/cuda_runtime_api.h" 3
extern cudaError_t cudaFreeMipmappedArray(cudaMipmappedArray_t mipmappedArray); 
# 4391 "/usr/include/cuda_runtime_api.h" 3
extern cudaError_t cudaHostAlloc(void ** pHost, size_t size, unsigned flags); 
# 4475 "/usr/include/cuda_runtime_api.h" 3
extern cudaError_t cudaHostRegister(void * ptr, size_t size, unsigned flags); 
# 4498 "/usr/include/cuda_runtime_api.h" 3
extern cudaError_t cudaHostUnregister(void * ptr); 
# 4543 "/usr/include/cuda_runtime_api.h" 3
extern cudaError_t cudaHostGetDevicePointer(void ** pDevice, void * pHost, unsigned flags); 
# 4565 "/usr/include/cuda_runtime_api.h" 3
extern cudaError_t cudaHostGetFlags(unsigned * pFlags, void * pHost); 
# 4604 "/usr/include/cuda_runtime_api.h" 3
extern cudaError_t cudaMalloc3D(cudaPitchedPtr * pitchedDevPtr, cudaExtent extent); 
# 4743 "/usr/include/cuda_runtime_api.h" 3
extern cudaError_t cudaMalloc3DArray(cudaArray_t * array, const cudaChannelFormatDesc * desc, cudaExtent extent, unsigned flags = 0); 
# 4882 "/usr/include/cuda_runtime_api.h" 3
extern cudaError_t cudaMallocMipmappedArray(cudaMipmappedArray_t * mipmappedArray, const cudaChannelFormatDesc * desc, cudaExtent extent, unsigned numLevels, unsigned flags = 0); 
# 4911 "/usr/include/cuda_runtime_api.h" 3
extern cudaError_t cudaGetMipmappedArrayLevel(cudaArray_t * levelArray, cudaMipmappedArray_const_t mipmappedArray, unsigned level); 
# 5016 "/usr/include/cuda_runtime_api.h" 3
extern cudaError_t cudaMemcpy3D(const cudaMemcpy3DParms * p); 
# 5047 "/usr/include/cuda_runtime_api.h" 3
extern cudaError_t cudaMemcpy3DPeer(const cudaMemcpy3DPeerParms * p); 
# 5165 "/usr/include/cuda_runtime_api.h" 3
extern cudaError_t cudaMemcpy3DAsync(const cudaMemcpy3DParms * p, cudaStream_t stream = 0); 
# 5191 "/usr/include/cuda_runtime_api.h" 3
extern cudaError_t cudaMemcpy3DPeerAsync(const cudaMemcpy3DPeerParms * p, cudaStream_t stream = 0); 
# 5213 "/usr/include/cuda_runtime_api.h" 3
extern cudaError_t cudaMemGetInfo(size_t * free, size_t * total); 
# 5239 "/usr/include/cuda_runtime_api.h" 3
extern cudaError_t cudaArrayGetInfo(cudaChannelFormatDesc * desc, cudaExtent * extent, unsigned * flags, cudaArray_t array); 
# 5282 "/usr/include/cuda_runtime_api.h" 3
extern cudaError_t cudaMemcpy(void * dst, const void * src, size_t count, cudaMemcpyKind kind); 
# 5317 "/usr/include/cuda_runtime_api.h" 3
extern cudaError_t cudaMemcpyPeer(void * dst, int dstDevice, const void * src, int srcDevice, size_t count); 
# 5365 "/usr/include/cuda_runtime_api.h" 3
extern cudaError_t cudaMemcpy2D(void * dst, size_t dpitch, const void * src, size_t spitch, size_t width, size_t height, cudaMemcpyKind kind); 
# 5414 "/usr/include/cuda_runtime_api.h" 3
extern cudaError_t cudaMemcpy2DToArray(cudaArray_t dst, size_t wOffset, size_t hOffset, const void * src, size_t spitch, size_t width, size_t height, cudaMemcpyKind kind); 
# 5463 "/usr/include/cuda_runtime_api.h" 3
extern cudaError_t cudaMemcpy2DFromArray(void * dst, size_t dpitch, cudaArray_const_t src, size_t wOffset, size_t hOffset, size_t width, size_t height, cudaMemcpyKind kind); 
# 5510 "/usr/include/cuda_runtime_api.h" 3
extern cudaError_t cudaMemcpy2DArrayToArray(cudaArray_t dst, size_t wOffsetDst, size_t hOffsetDst, cudaArray_const_t src, size_t wOffsetSrc, size_t hOffsetSrc, size_t width, size_t height, cudaMemcpyKind kind = cudaMemcpyDeviceToDevice); 
# 5553 "/usr/include/cuda_runtime_api.h" 3
extern cudaError_t cudaMemcpyToSymbol(const void * symbol, const void * src, size_t count, size_t offset = 0, cudaMemcpyKind kind = cudaMemcpyHostToDevice); 
# 5596 "/usr/include/cuda_runtime_api.h" 3
extern cudaError_t cudaMemcpyFromSymbol(void * dst, const void * symbol, size_t count, size_t offset = 0, cudaMemcpyKind kind = cudaMemcpyDeviceToHost); 
# 5652 "/usr/include/cuda_runtime_api.h" 3
extern cudaError_t cudaMemcpyAsync(void * dst, const void * src, size_t count, cudaMemcpyKind kind, cudaStream_t stream = 0); 
# 5687 "/usr/include/cuda_runtime_api.h" 3
extern cudaError_t cudaMemcpyPeerAsync(void * dst, int dstDevice, const void * src, int srcDevice, size_t count, cudaStream_t stream = 0); 
# 5749 "/usr/include/cuda_runtime_api.h" 3
extern cudaError_t cudaMemcpy2DAsync(void * dst, size_t dpitch, const void * src, size_t spitch, size_t width, size_t height, cudaMemcpyKind kind, cudaStream_t stream = 0); 
# 5806 "/usr/include/cuda_runtime_api.h" 3
extern cudaError_t cudaMemcpy2DToArrayAsync(cudaArray_t dst, size_t wOffset, size_t hOffset, const void * src, size_t spitch, size_t width, size_t height, cudaMemcpyKind kind, cudaStream_t stream = 0); 
# 5862 "/usr/include/cuda_runtime_api.h" 3
extern cudaError_t cudaMemcpy2DFromArrayAsync(void * dst, size_t dpitch, cudaArray_const_t src, size_t wOffset, size_t hOffset, size_t width, size_t height, cudaMemcpyKind kind, cudaStream_t stream = 0); 
# 5913 "/usr/include/cuda_runtime_api.h" 3
extern cudaError_t cudaMemcpyToSymbolAsync(const void * symbol, const void * src, size_t count, size_t offset, cudaMemcpyKind kind, cudaStream_t stream = 0); 
# 5964 "/usr/include/cuda_runtime_api.h" 3
extern cudaError_t cudaMemcpyFromSymbolAsync(void * dst, const void * symbol, size_t count, size_t offset, cudaMemcpyKind kind, cudaStream_t stream = 0); 
# 5993 "/usr/include/cuda_runtime_api.h" 3
extern cudaError_t cudaMemset(void * devPtr, int value, size_t count); 
# 6027 "/usr/include/cuda_runtime_api.h" 3
extern cudaError_t cudaMemset2D(void * devPtr, size_t pitch, int value, size_t width, size_t height); 
# 6071 "/usr/include/cuda_runtime_api.h" 3
extern cudaError_t cudaMemset3D(cudaPitchedPtr pitchedDevPtr, int value, cudaExtent extent); 
# 6107 "/usr/include/cuda_runtime_api.h" 3
extern cudaError_t cudaMemsetAsync(void * devPtr, int value, size_t count, cudaStream_t stream = 0); 
# 6148 "/usr/include/cuda_runtime_api.h" 3
extern cudaError_t cudaMemset2DAsync(void * devPtr, size_t pitch, int value, size_t width, size_t height, cudaStream_t stream = 0); 
# 6199 "/usr/include/cuda_runtime_api.h" 3
extern cudaError_t cudaMemset3DAsync(cudaPitchedPtr pitchedDevPtr, int value, cudaExtent extent, cudaStream_t stream = 0); 
# 6227 "/usr/include/cuda_runtime_api.h" 3
extern cudaError_t cudaGetSymbolAddress(void ** devPtr, const void * symbol); 
# 6254 "/usr/include/cuda_runtime_api.h" 3
extern cudaError_t cudaGetSymbolSize(size_t * size, const void * symbol); 
# 6324 "/usr/include/cuda_runtime_api.h" 3
extern cudaError_t cudaMemPrefetchAsync(const void * devPtr, size_t count, int dstDevice, cudaStream_t stream = 0); 
# 6440 "/usr/include/cuda_runtime_api.h" 3
extern cudaError_t cudaMemAdvise(const void * devPtr, size_t count, cudaMemoryAdvise advice, int device); 
# 6499 "/usr/include/cuda_runtime_api.h" 3
extern cudaError_t cudaMemRangeGetAttribute(void * data, size_t dataSize, cudaMemRangeAttribute attribute, const void * devPtr, size_t count); 
# 6538 "/usr/include/cuda_runtime_api.h" 3
extern cudaError_t cudaMemRangeGetAttributes(void ** data, size_t * dataSizes, cudaMemRangeAttribute * attributes, size_t numAttributes, const void * devPtr, size_t count); 
# 6598 "/usr/include/cuda_runtime_api.h" 3
__attribute((deprecated)) extern cudaError_t cudaMemcpyToArray(cudaArray_t dst, size_t wOffset, size_t hOffset, const void * src, size_t count, cudaMemcpyKind kind); 
# 6640 "/usr/include/cuda_runtime_api.h" 3
__attribute((deprecated)) extern cudaError_t cudaMemcpyFromArray(void * dst, cudaArray_const_t src, size_t wOffset, size_t hOffset, size_t count, cudaMemcpyKind kind); 
# 6683 "/usr/include/cuda_runtime_api.h" 3
__attribute((deprecated)) extern cudaError_t cudaMemcpyArrayToArray(cudaArray_t dst, size_t wOffsetDst, size_t hOffsetDst, cudaArray_const_t src, size_t wOffsetSrc, size_t hOffsetSrc, size_t count, cudaMemcpyKind kind = cudaMemcpyDeviceToDevice); 
# 6734 "/usr/include/cuda_runtime_api.h" 3
__attribute((deprecated)) extern cudaError_t cudaMemcpyToArrayAsync(cudaArray_t dst, size_t wOffset, size_t hOffset, const void * src, size_t count, cudaMemcpyKind kind, cudaStream_t stream = 0); 
# 6784 "/usr/include/cuda_runtime_api.h" 3
__attribute((deprecated)) extern cudaError_t cudaMemcpyFromArrayAsync(void * dst, cudaArray_const_t src, size_t wOffset, size_t hOffset, size_t count, cudaMemcpyKind kind, cudaStream_t stream = 0); 
# 6950 "/usr/include/cuda_runtime_api.h" 3
extern cudaError_t cudaPointerGetAttributes(cudaPointerAttributes * attributes, const void * ptr); 
# 6991 "/usr/include/cuda_runtime_api.h" 3
extern cudaError_t cudaDeviceCanAccessPeer(int * canAccessPeer, int device, int peerDevice); 
# 7033 "/usr/include/cuda_runtime_api.h" 3
extern cudaError_t cudaDeviceEnablePeerAccess(int peerDevice, unsigned flags); 
# 7055 "/usr/include/cuda_runtime_api.h" 3
extern cudaError_t cudaDeviceDisablePeerAccess(int peerDevice); 
# 7118 "/usr/include/cuda_runtime_api.h" 3
extern cudaError_t cudaGraphicsUnregisterResource(cudaGraphicsResource_t resource); 
# 7153 "/usr/include/cuda_runtime_api.h" 3
extern cudaError_t cudaGraphicsResourceSetMapFlags(cudaGraphicsResource_t resource, unsigned flags); 
# 7192 "/usr/include/cuda_runtime_api.h" 3
extern cudaError_t cudaGraphicsMapResources(int count, cudaGraphicsResource_t * resources, cudaStream_t stream = 0); 
# 7227 "/usr/include/cuda_runtime_api.h" 3
extern cudaError_t cudaGraphicsUnmapResources(int count, cudaGraphicsResource_t * resources, cudaStream_t stream = 0); 
# 7259 "/usr/include/cuda_runtime_api.h" 3
extern cudaError_t cudaGraphicsResourceGetMappedPointer(void ** devPtr, size_t * size, cudaGraphicsResource_t resource); 
# 7297 "/usr/include/cuda_runtime_api.h" 3
extern cudaError_t cudaGraphicsSubResourceGetMappedArray(cudaArray_t * array, cudaGraphicsResource_t resource, unsigned arrayIndex, unsigned mipLevel); 
# 7326 "/usr/include/cuda_runtime_api.h" 3
extern cudaError_t cudaGraphicsResourceGetMappedMipmappedArray(cudaMipmappedArray_t * mipmappedArray, cudaGraphicsResource_t resource); 
# 7397 "/usr/include/cuda_runtime_api.h" 3
extern cudaError_t cudaBindTexture(size_t * offset, const textureReference * texref, const void * devPtr, const cudaChannelFormatDesc * desc, size_t size = ((2147483647) * 2U) + 1U); 
# 7456 "/usr/include/cuda_runtime_api.h" 3
extern cudaError_t cudaBindTexture2D(size_t * offset, const textureReference * texref, const void * devPtr, const cudaChannelFormatDesc * desc, size_t width, size_t height, size_t pitch); 
# 7494 "/usr/include/cuda_runtime_api.h" 3
extern cudaError_t cudaBindTextureToArray(const textureReference * texref, cudaArray_const_t array, const cudaChannelFormatDesc * desc); 
# 7534 "/usr/include/cuda_runtime_api.h" 3
extern cudaError_t cudaBindTextureToMipmappedArray(const textureReference * texref, cudaMipmappedArray_const_t mipmappedArray, const cudaChannelFormatDesc * desc); 
# 7560 "/usr/include/cuda_runtime_api.h" 3
extern cudaError_t cudaUnbindTexture(const textureReference * texref); 
# 7589 "/usr/include/cuda_runtime_api.h" 3
extern cudaError_t cudaGetTextureAlignmentOffset(size_t * offset, const textureReference * texref); 
# 7619 "/usr/include/cuda_runtime_api.h" 3
extern cudaError_t cudaGetTextureReference(const textureReference ** texref, const void * symbol); 
# 7664 "/usr/include/cuda_runtime_api.h" 3
extern cudaError_t cudaBindSurfaceToArray(const surfaceReference * surfref, cudaArray_const_t array, const cudaChannelFormatDesc * desc); 
# 7689 "/usr/include/cuda_runtime_api.h" 3
extern cudaError_t cudaGetSurfaceReference(const surfaceReference ** surfref, const void * symbol); 
# 7724 "/usr/include/cuda_runtime_api.h" 3
extern cudaError_t cudaGetChannelDesc(cudaChannelFormatDesc * desc, cudaArray_const_t array); 
# 7754 "/usr/include/cuda_runtime_api.h" 3
extern cudaChannelFormatDesc cudaCreateChannelDesc(int x, int y, int z, int w, cudaChannelFormatKind f); 
# 7969 "/usr/include/cuda_runtime_api.h" 3
extern cudaError_t cudaCreateTextureObject(cudaTextureObject_t * pTexObject, const cudaResourceDesc * pResDesc, const cudaTextureDesc * pTexDesc, const cudaResourceViewDesc * pResViewDesc); 
# 7988 "/usr/include/cuda_runtime_api.h" 3
extern cudaError_t cudaDestroyTextureObject(cudaTextureObject_t texObject); 
# 8008 "/usr/include/cuda_runtime_api.h" 3
extern cudaError_t cudaGetTextureObjectResourceDesc(cudaResourceDesc * pResDesc, cudaTextureObject_t texObject); 
# 8028 "/usr/include/cuda_runtime_api.h" 3
extern cudaError_t cudaGetTextureObjectTextureDesc(cudaTextureDesc * pTexDesc, cudaTextureObject_t texObject); 
# 8049 "/usr/include/cuda_runtime_api.h" 3
extern cudaError_t cudaGetTextureObjectResourceViewDesc(cudaResourceViewDesc * pResViewDesc, cudaTextureObject_t texObject); 
# 8094 "/usr/include/cuda_runtime_api.h" 3
extern cudaError_t cudaCreateSurfaceObject(cudaSurfaceObject_t * pSurfObject, const cudaResourceDesc * pResDesc); 
# 8113 "/usr/include/cuda_runtime_api.h" 3
extern cudaError_t cudaDestroySurfaceObject(cudaSurfaceObject_t surfObject); 
# 8132 "/usr/include/cuda_runtime_api.h" 3
extern cudaError_t cudaGetSurfaceObjectResourceDesc(cudaResourceDesc * pResDesc, cudaSurfaceObject_t surfObject); 
# 8166 "/usr/include/cuda_runtime_api.h" 3
extern cudaError_t cudaDriverGetVersion(int * driverVersion); 
# 8191 "/usr/include/cuda_runtime_api.h" 3
extern cudaError_t cudaRuntimeGetVersion(int * runtimeVersion); 
# 8238 "/usr/include/cuda_runtime_api.h" 3
extern cudaError_t cudaGraphCreate(cudaGraph_t * pGraph, unsigned flags); 
# 8335 "/usr/include/cuda_runtime_api.h" 3
extern cudaError_t cudaGraphAddKernelNode(cudaGraphNode_t * pGraphNode, cudaGraph_t graph, const cudaGraphNode_t * pDependencies, size_t numDependencies, const cudaKernelNodeParams * pNodeParams); 
# 8368 "/usr/include/cuda_runtime_api.h" 3
extern cudaError_t cudaGraphKernelNodeGetParams(cudaGraphNode_t node, cudaKernelNodeParams * pNodeParams); 
# 8393 "/usr/include/cuda_runtime_api.h" 3
extern cudaError_t cudaGraphKernelNodeSetParams(cudaGraphNode_t node, const cudaKernelNodeParams * pNodeParams); 
# 8437 "/usr/include/cuda_runtime_api.h" 3
extern cudaError_t cudaGraphAddMemcpyNode(cudaGraphNode_t * pGraphNode, cudaGraph_t graph, const cudaGraphNode_t * pDependencies, size_t numDependencies, const cudaMemcpy3DParms * pCopyParams); 
# 8460 "/usr/include/cuda_runtime_api.h" 3
extern cudaError_t cudaGraphMemcpyNodeGetParams(cudaGraphNode_t node, cudaMemcpy3DParms * pNodeParams); 
# 8483 "/usr/include/cuda_runtime_api.h" 3
extern cudaError_t cudaGraphMemcpyNodeSetParams(cudaGraphNode_t node, const cudaMemcpy3DParms * pNodeParams); 
# 8525 "/usr/include/cuda_runtime_api.h" 3
extern cudaError_t cudaGraphAddMemsetNode(cudaGraphNode_t * pGraphNode, cudaGraph_t graph, const cudaGraphNode_t * pDependencies, size_t numDependencies, const cudaMemsetParams * pMemsetParams); 
# 8548 "/usr/include/cuda_runtime_api.h" 3
extern cudaError_t cudaGraphMemsetNodeGetParams(cudaGraphNode_t node, cudaMemsetParams * pNodeParams); 
# 8571 "/usr/include/cuda_runtime_api.h" 3
extern cudaError_t cudaGraphMemsetNodeSetParams(cudaGraphNode_t node, const cudaMemsetParams * pNodeParams); 
# 8612 "/usr/include/cuda_runtime_api.h" 3
extern cudaError_t cudaGraphAddHostNode(cudaGraphNode_t * pGraphNode, cudaGraph_t graph, const cudaGraphNode_t * pDependencies, size_t numDependencies, const cudaHostNodeParams * pNodeParams); 
# 8635 "/usr/include/cuda_runtime_api.h" 3
extern cudaError_t cudaGraphHostNodeGetParams(cudaGraphNode_t node, cudaHostNodeParams * pNodeParams); 
# 8658 "/usr/include/cuda_runtime_api.h" 3
extern cudaError_t cudaGraphHostNodeSetParams(cudaGraphNode_t node, const cudaHostNodeParams * pNodeParams); 
# 8696 "/usr/include/cuda_runtime_api.h" 3
extern cudaError_t cudaGraphAddChildGraphNode(cudaGraphNode_t * pGraphNode, cudaGraph_t graph, const cudaGraphNode_t * pDependencies, size_t numDependencies, cudaGraph_t childGraph); 
# 8720 "/usr/include/cuda_runtime_api.h" 3
extern cudaError_t cudaGraphChildGraphNodeGetGraph(cudaGraphNode_t node, cudaGraph_t * pGraph); 
# 8757 "/usr/include/cuda_runtime_api.h" 3
extern cudaError_t cudaGraphAddEmptyNode(cudaGraphNode_t * pGraphNode, cudaGraph_t graph, const cudaGraphNode_t * pDependencies, size_t numDependencies); 
# 8784 "/usr/include/cuda_runtime_api.h" 3
extern cudaError_t cudaGraphClone(cudaGraph_t * pGraphClone, cudaGraph_t originalGraph); 
# 8812 "/usr/include/cuda_runtime_api.h" 3
extern cudaError_t cudaGraphNodeFindInClone(cudaGraphNode_t * pNode, cudaGraphNode_t originalNode, cudaGraph_t clonedGraph); 
# 8843 "/usr/include/cuda_runtime_api.h" 3
extern cudaError_t cudaGraphNodeGetType(cudaGraphNode_t node, cudaGraphNodeType * pType); 
# 8874 "/usr/include/cuda_runtime_api.h" 3
extern cudaError_t cudaGraphGetNodes(cudaGraph_t graph, cudaGraphNode_t * nodes, size_t * numNodes); 
# 8905 "/usr/include/cuda_runtime_api.h" 3
extern cudaError_t cudaGraphGetRootNodes(cudaGraph_t graph, cudaGraphNode_t * pRootNodes, size_t * pNumRootNodes); 
# 8939 "/usr/include/cuda_runtime_api.h" 3
extern cudaError_t cudaGraphGetEdges(cudaGraph_t graph, cudaGraphNode_t * from, cudaGraphNode_t * to, size_t * numEdges); 
# 8970 "/usr/include/cuda_runtime_api.h" 3
extern cudaError_t cudaGraphNodeGetDependencies(cudaGraphNode_t node, cudaGraphNode_t * pDependencies, size_t * pNumDependencies); 
# 9002 "/usr/include/cuda_runtime_api.h" 3
extern cudaError_t cudaGraphNodeGetDependentNodes(cudaGraphNode_t node, cudaGraphNode_t * pDependentNodes, size_t * pNumDependentNodes); 
# 9033 "/usr/include/cuda_runtime_api.h" 3
extern cudaError_t cudaGraphAddDependencies(cudaGraph_t graph, const cudaGraphNode_t * from, const cudaGraphNode_t * to, size_t numDependencies); 
# 9064 "/usr/include/cuda_runtime_api.h" 3
extern cudaError_t cudaGraphRemoveDependencies(cudaGraph_t graph, const cudaGraphNode_t * from, const cudaGraphNode_t * to, size_t numDependencies); 
# 9090 "/usr/include/cuda_runtime_api.h" 3
extern cudaError_t cudaGraphDestroyNode(cudaGraphNode_t node); 
# 9126 "/usr/include/cuda_runtime_api.h" 3
extern cudaError_t cudaGraphInstantiate(cudaGraphExec_t * pGraphExec, cudaGraph_t graph, cudaGraphNode_t * pErrorNode, char * pLogBuffer, size_t bufferSize); 
# 9160 "/usr/include/cuda_runtime_api.h" 3
extern cudaError_t cudaGraphExecKernelNodeSetParams(cudaGraphExec_t hGraphExec, cudaGraphNode_t node, const cudaKernelNodeParams * pNodeParams); 
# 9185 "/usr/include/cuda_runtime_api.h" 3
extern cudaError_t cudaGraphLaunch(cudaGraphExec_t graphExec, cudaStream_t stream); 
# 9206 "/usr/include/cuda_runtime_api.h" 3
extern cudaError_t cudaGraphExecDestroy(cudaGraphExec_t graphExec); 
# 9226 "/usr/include/cuda_runtime_api.h" 3
extern cudaError_t cudaGraphDestroy(cudaGraph_t graph); 
# 9231
extern cudaError_t cudaGetExportTable(const void ** ppExportTable, const cudaUUID_t * pExportTableId); 
# 9476 "/usr/include/cuda_runtime_api.h" 3
}
# 104 "/usr/include/channel_descriptor.h" 3
template< class T> inline cudaChannelFormatDesc cudaCreateChannelDesc() 
# 105
{ 
# 106
return cudaCreateChannelDesc(0, 0, 0, 0, cudaChannelFormatKindNone); 
# 107
} 
# 109
static inline cudaChannelFormatDesc cudaCreateChannelDescHalf() 
# 110
{ 
# 111
int e = (((int)sizeof(unsigned short)) * 8); 
# 113
return cudaCreateChannelDesc(e, 0, 0, 0, cudaChannelFormatKindFloat); 
# 114
} 
# 116
static inline cudaChannelFormatDesc cudaCreateChannelDescHalf1() 
# 117
{ 
# 118
int e = (((int)sizeof(unsigned short)) * 8); 
# 120
return cudaCreateChannelDesc(e, 0, 0, 0, cudaChannelFormatKindFloat); 
# 121
} 
# 123
static inline cudaChannelFormatDesc cudaCreateChannelDescHalf2() 
# 124
{ 
# 125
int e = (((int)sizeof(unsigned short)) * 8); 
# 127
return cudaCreateChannelDesc(e, e, 0, 0, cudaChannelFormatKindFloat); 
# 128
} 
# 130
static inline cudaChannelFormatDesc cudaCreateChannelDescHalf4() 
# 131
{ 
# 132
int e = (((int)sizeof(unsigned short)) * 8); 
# 134
return cudaCreateChannelDesc(e, e, e, e, cudaChannelFormatKindFloat); 
# 135
} 
# 137
template<> inline cudaChannelFormatDesc cudaCreateChannelDesc< char> () 
# 138
{ 
# 139
int e = (((int)sizeof(char)) * 8); 
# 144
return cudaCreateChannelDesc(e, 0, 0, 0, cudaChannelFormatKindSigned); 
# 146
} 
# 148
template<> inline cudaChannelFormatDesc cudaCreateChannelDesc< signed char> () 
# 149
{ 
# 150
int e = (((int)sizeof(signed char)) * 8); 
# 152
return cudaCreateChannelDesc(e, 0, 0, 0, cudaChannelFormatKindSigned); 
# 153
} 
# 155
template<> inline cudaChannelFormatDesc cudaCreateChannelDesc< unsigned char> () 
# 156
{ 
# 157
int e = (((int)sizeof(unsigned char)) * 8); 
# 159
return cudaCreateChannelDesc(e, 0, 0, 0, cudaChannelFormatKindUnsigned); 
# 160
} 
# 162
template<> inline cudaChannelFormatDesc cudaCreateChannelDesc< char1> () 
# 163
{ 
# 164
int e = (((int)sizeof(signed char)) * 8); 
# 166
return cudaCreateChannelDesc(e, 0, 0, 0, cudaChannelFormatKindSigned); 
# 167
} 
# 169
template<> inline cudaChannelFormatDesc cudaCreateChannelDesc< uchar1> () 
# 170
{ 
# 171
int e = (((int)sizeof(unsigned char)) * 8); 
# 173
return cudaCreateChannelDesc(e, 0, 0, 0, cudaChannelFormatKindUnsigned); 
# 174
} 
# 176
template<> inline cudaChannelFormatDesc cudaCreateChannelDesc< char2> () 
# 177
{ 
# 178
int e = (((int)sizeof(signed char)) * 8); 
# 180
return cudaCreateChannelDesc(e, e, 0, 0, cudaChannelFormatKindSigned); 
# 181
} 
# 183
template<> inline cudaChannelFormatDesc cudaCreateChannelDesc< uchar2> () 
# 184
{ 
# 185
int e = (((int)sizeof(unsigned char)) * 8); 
# 187
return cudaCreateChannelDesc(e, e, 0, 0, cudaChannelFormatKindUnsigned); 
# 188
} 
# 190
template<> inline cudaChannelFormatDesc cudaCreateChannelDesc< char4> () 
# 191
{ 
# 192
int e = (((int)sizeof(signed char)) * 8); 
# 194
return cudaCreateChannelDesc(e, e, e, e, cudaChannelFormatKindSigned); 
# 195
} 
# 197
template<> inline cudaChannelFormatDesc cudaCreateChannelDesc< uchar4> () 
# 198
{ 
# 199
int e = (((int)sizeof(unsigned char)) * 8); 
# 201
return cudaCreateChannelDesc(e, e, e, e, cudaChannelFormatKindUnsigned); 
# 202
} 
# 204
template<> inline cudaChannelFormatDesc cudaCreateChannelDesc< short> () 
# 205
{ 
# 206
int e = (((int)sizeof(short)) * 8); 
# 208
return cudaCreateChannelDesc(e, 0, 0, 0, cudaChannelFormatKindSigned); 
# 209
} 
# 211
template<> inline cudaChannelFormatDesc cudaCreateChannelDesc< unsigned short> () 
# 212
{ 
# 213
int e = (((int)sizeof(unsigned short)) * 8); 
# 215
return cudaCreateChannelDesc(e, 0, 0, 0, cudaChannelFormatKindUnsigned); 
# 216
} 
# 218
template<> inline cudaChannelFormatDesc cudaCreateChannelDesc< short1> () 
# 219
{ 
# 220
int e = (((int)sizeof(short)) * 8); 
# 222
return cudaCreateChannelDesc(e, 0, 0, 0, cudaChannelFormatKindSigned); 
# 223
} 
# 225
template<> inline cudaChannelFormatDesc cudaCreateChannelDesc< ushort1> () 
# 226
{ 
# 227
int e = (((int)sizeof(unsigned short)) * 8); 
# 229
return cudaCreateChannelDesc(e, 0, 0, 0, cudaChannelFormatKindUnsigned); 
# 230
} 
# 232
template<> inline cudaChannelFormatDesc cudaCreateChannelDesc< short2> () 
# 233
{ 
# 234
int e = (((int)sizeof(short)) * 8); 
# 236
return cudaCreateChannelDesc(e, e, 0, 0, cudaChannelFormatKindSigned); 
# 237
} 
# 239
template<> inline cudaChannelFormatDesc cudaCreateChannelDesc< ushort2> () 
# 240
{ 
# 241
int e = (((int)sizeof(unsigned short)) * 8); 
# 243
return cudaCreateChannelDesc(e, e, 0, 0, cudaChannelFormatKindUnsigned); 
# 244
} 
# 246
template<> inline cudaChannelFormatDesc cudaCreateChannelDesc< short4> () 
# 247
{ 
# 248
int e = (((int)sizeof(short)) * 8); 
# 250
return cudaCreateChannelDesc(e, e, e, e, cudaChannelFormatKindSigned); 
# 251
} 
# 253
template<> inline cudaChannelFormatDesc cudaCreateChannelDesc< ushort4> () 
# 254
{ 
# 255
int e = (((int)sizeof(unsigned short)) * 8); 
# 257
return cudaCreateChannelDesc(e, e, e, e, cudaChannelFormatKindUnsigned); 
# 258
} 
# 260
template<> inline cudaChannelFormatDesc cudaCreateChannelDesc< int> () 
# 261
{ 
# 262
int e = (((int)sizeof(int)) * 8); 
# 264
return cudaCreateChannelDesc(e, 0, 0, 0, cudaChannelFormatKindSigned); 
# 265
} 
# 267
template<> inline cudaChannelFormatDesc cudaCreateChannelDesc< unsigned> () 
# 268
{ 
# 269
int e = (((int)sizeof(unsigned)) * 8); 
# 271
return cudaCreateChannelDesc(e, 0, 0, 0, cudaChannelFormatKindUnsigned); 
# 272
} 
# 274
template<> inline cudaChannelFormatDesc cudaCreateChannelDesc< int1> () 
# 275
{ 
# 276
int e = (((int)sizeof(int)) * 8); 
# 278
return cudaCreateChannelDesc(e, 0, 0, 0, cudaChannelFormatKindSigned); 
# 279
} 
# 281
template<> inline cudaChannelFormatDesc cudaCreateChannelDesc< uint1> () 
# 282
{ 
# 283
int e = (((int)sizeof(unsigned)) * 8); 
# 285
return cudaCreateChannelDesc(e, 0, 0, 0, cudaChannelFormatKindUnsigned); 
# 286
} 
# 288
template<> inline cudaChannelFormatDesc cudaCreateChannelDesc< int2> () 
# 289
{ 
# 290
int e = (((int)sizeof(int)) * 8); 
# 292
return cudaCreateChannelDesc(e, e, 0, 0, cudaChannelFormatKindSigned); 
# 293
} 
# 295
template<> inline cudaChannelFormatDesc cudaCreateChannelDesc< uint2> () 
# 296
{ 
# 297
int e = (((int)sizeof(unsigned)) * 8); 
# 299
return cudaCreateChannelDesc(e, e, 0, 0, cudaChannelFormatKindUnsigned); 
# 300
} 
# 302
template<> inline cudaChannelFormatDesc cudaCreateChannelDesc< int4> () 
# 303
{ 
# 304
int e = (((int)sizeof(int)) * 8); 
# 306
return cudaCreateChannelDesc(e, e, e, e, cudaChannelFormatKindSigned); 
# 307
} 
# 309
template<> inline cudaChannelFormatDesc cudaCreateChannelDesc< uint4> () 
# 310
{ 
# 311
int e = (((int)sizeof(unsigned)) * 8); 
# 313
return cudaCreateChannelDesc(e, e, e, e, cudaChannelFormatKindUnsigned); 
# 314
} 
# 376 "/usr/include/channel_descriptor.h" 3
template<> inline cudaChannelFormatDesc cudaCreateChannelDesc< float> () 
# 377
{ 
# 378
int e = (((int)sizeof(float)) * 8); 
# 380
return cudaCreateChannelDesc(e, 0, 0, 0, cudaChannelFormatKindFloat); 
# 381
} 
# 383
template<> inline cudaChannelFormatDesc cudaCreateChannelDesc< float1> () 
# 384
{ 
# 385
int e = (((int)sizeof(float)) * 8); 
# 387
return cudaCreateChannelDesc(e, 0, 0, 0, cudaChannelFormatKindFloat); 
# 388
} 
# 390
template<> inline cudaChannelFormatDesc cudaCreateChannelDesc< float2> () 
# 391
{ 
# 392
int e = (((int)sizeof(float)) * 8); 
# 394
return cudaCreateChannelDesc(e, e, 0, 0, cudaChannelFormatKindFloat); 
# 395
} 
# 397
template<> inline cudaChannelFormatDesc cudaCreateChannelDesc< float4> () 
# 398
{ 
# 399
int e = (((int)sizeof(float)) * 8); 
# 401
return cudaCreateChannelDesc(e, e, e, e, cudaChannelFormatKindFloat); 
# 402
} 
# 79 "/usr/include/driver_functions.h" 3
static inline cudaPitchedPtr make_cudaPitchedPtr(void *d, size_t p, size_t xsz, size_t ysz) 
# 80
{ 
# 81
cudaPitchedPtr s; 
# 83
(s.ptr) = d; 
# 84
(s.pitch) = p; 
# 85
(s.xsize) = xsz; 
# 86
(s.ysize) = ysz; 
# 88
return s; 
# 89
} 
# 106 "/usr/include/driver_functions.h" 3
static inline cudaPos make_cudaPos(size_t x, size_t y, size_t z) 
# 107
{ 
# 108
cudaPos p; 
# 110
(p.x) = x; 
# 111
(p.y) = y; 
# 112
(p.z) = z; 
# 114
return p; 
# 115
} 
# 132 "/usr/include/driver_functions.h" 3
static inline cudaExtent make_cudaExtent(size_t w, size_t h, size_t d) 
# 133
{ 
# 134
cudaExtent e; 
# 136
(e.width) = w; 
# 137
(e.height) = h; 
# 138
(e.depth) = d; 
# 140
return e; 
# 141
} 
# 73 "/usr/include/vector_functions.h" 3
static inline char1 make_char1(signed char x); 
# 75
static inline uchar1 make_uchar1(unsigned char x); 
# 77
static inline char2 make_char2(signed char x, signed char y); 
# 79
static inline uchar2 make_uchar2(unsigned char x, unsigned char y); 
# 81
static inline char3 make_char3(signed char x, signed char y, signed char z); 
# 83
static inline uchar3 make_uchar3(unsigned char x, unsigned char y, unsigned char z); 
# 85
static inline char4 make_char4(signed char x, signed char y, signed char z, signed char w); 
# 87
static inline uchar4 make_uchar4(unsigned char x, unsigned char y, unsigned char z, unsigned char w); 
# 89
static inline short1 make_short1(short x); 
# 91
static inline ushort1 make_ushort1(unsigned short x); 
# 93
static inline short2 make_short2(short x, short y); 
# 95
static inline ushort2 make_ushort2(unsigned short x, unsigned short y); 
# 97
static inline short3 make_short3(short x, short y, short z); 
# 99
static inline ushort3 make_ushort3(unsigned short x, unsigned short y, unsigned short z); 
# 101
static inline short4 make_short4(short x, short y, short z, short w); 
# 103
static inline ushort4 make_ushort4(unsigned short x, unsigned short y, unsigned short z, unsigned short w); 
# 105
static inline int1 make_int1(int x); 
# 107
static inline uint1 make_uint1(unsigned x); 
# 109
static inline int2 make_int2(int x, int y); 
# 111
static inline uint2 make_uint2(unsigned x, unsigned y); 
# 113
static inline int3 make_int3(int x, int y, int z); 
# 115
static inline uint3 make_uint3(unsigned x, unsigned y, unsigned z); 
# 117
static inline int4 make_int4(int x, int y, int z, int w); 
# 119
static inline uint4 make_uint4(unsigned x, unsigned y, unsigned z, unsigned w); 
# 121
static inline long1 make_long1(long x); 
# 123
static inline ulong1 make_ulong1(unsigned long x); 
# 125
static inline long2 make_long2(long x, long y); 
# 127
static inline ulong2 make_ulong2(unsigned long x, unsigned long y); 
# 129
static inline long3 make_long3(long x, long y, long z); 
# 131
static inline ulong3 make_ulong3(unsigned long x, unsigned long y, unsigned long z); 
# 133
static inline long4 make_long4(long x, long y, long z, long w); 
# 135
static inline ulong4 make_ulong4(unsigned long x, unsigned long y, unsigned long z, unsigned long w); 
# 137
static inline float1 make_float1(float x); 
# 139
static inline float2 make_float2(float x, float y); 
# 141
static inline float3 make_float3(float x, float y, float z); 
# 143
static inline float4 make_float4(float x, float y, float z, float w); 
# 145
static inline longlong1 make_longlong1(long long x); 
# 147
static inline ulonglong1 make_ulonglong1(unsigned long long x); 
# 149
static inline longlong2 make_longlong2(long long x, long long y); 
# 151
static inline ulonglong2 make_ulonglong2(unsigned long long x, unsigned long long y); 
# 153
static inline longlong3 make_longlong3(long long x, long long y, long long z); 
# 155
static inline ulonglong3 make_ulonglong3(unsigned long long x, unsigned long long y, unsigned long long z); 
# 157
static inline longlong4 make_longlong4(long long x, long long y, long long z, long long w); 
# 159
static inline ulonglong4 make_ulonglong4(unsigned long long x, unsigned long long y, unsigned long long z, unsigned long long w); 
# 161
static inline double1 make_double1(double x); 
# 163
static inline double2 make_double2(double x, double y); 
# 165
static inline double3 make_double3(double x, double y, double z); 
# 167
static inline double4 make_double4(double x, double y, double z, double w); 
# 73 "/usr/include/vector_functions.hpp" 3
static inline char1 make_char1(signed char x) 
# 74
{ 
# 75
char1 t; (t.x) = x; return t; 
# 76
} 
# 78
static inline uchar1 make_uchar1(unsigned char x) 
# 79
{ 
# 80
uchar1 t; (t.x) = x; return t; 
# 81
} 
# 83
static inline char2 make_char2(signed char x, signed char y) 
# 84
{ 
# 85
char2 t; (t.x) = x; (t.y) = y; return t; 
# 86
} 
# 88
static inline uchar2 make_uchar2(unsigned char x, unsigned char y) 
# 89
{ 
# 90
uchar2 t; (t.x) = x; (t.y) = y; return t; 
# 91
} 
# 93
static inline char3 make_char3(signed char x, signed char y, signed char z) 
# 94
{ 
# 95
char3 t; (t.x) = x; (t.y) = y; (t.z) = z; return t; 
# 96
} 
# 98
static inline uchar3 make_uchar3(unsigned char x, unsigned char y, unsigned char z) 
# 99
{ 
# 100
uchar3 t; (t.x) = x; (t.y) = y; (t.z) = z; return t; 
# 101
} 
# 103
static inline char4 make_char4(signed char x, signed char y, signed char z, signed char w) 
# 104
{ 
# 105
char4 t; (t.x) = x; (t.y) = y; (t.z) = z; (t.w) = w; return t; 
# 106
} 
# 108
static inline uchar4 make_uchar4(unsigned char x, unsigned char y, unsigned char z, unsigned char w) 
# 109
{ 
# 110
uchar4 t; (t.x) = x; (t.y) = y; (t.z) = z; (t.w) = w; return t; 
# 111
} 
# 113
static inline short1 make_short1(short x) 
# 114
{ 
# 115
short1 t; (t.x) = x; return t; 
# 116
} 
# 118
static inline ushort1 make_ushort1(unsigned short x) 
# 119
{ 
# 120
ushort1 t; (t.x) = x; return t; 
# 121
} 
# 123
static inline short2 make_short2(short x, short y) 
# 124
{ 
# 125
short2 t; (t.x) = x; (t.y) = y; return t; 
# 126
} 
# 128
static inline ushort2 make_ushort2(unsigned short x, unsigned short y) 
# 129
{ 
# 130
ushort2 t; (t.x) = x; (t.y) = y; return t; 
# 131
} 
# 133
static inline short3 make_short3(short x, short y, short z) 
# 134
{ 
# 135
short3 t; (t.x) = x; (t.y) = y; (t.z) = z; return t; 
# 136
} 
# 138
static inline ushort3 make_ushort3(unsigned short x, unsigned short y, unsigned short z) 
# 139
{ 
# 140
ushort3 t; (t.x) = x; (t.y) = y; (t.z) = z; return t; 
# 141
} 
# 143
static inline short4 make_short4(short x, short y, short z, short w) 
# 144
{ 
# 145
short4 t; (t.x) = x; (t.y) = y; (t.z) = z; (t.w) = w; return t; 
# 146
} 
# 148
static inline ushort4 make_ushort4(unsigned short x, unsigned short y, unsigned short z, unsigned short w) 
# 149
{ 
# 150
ushort4 t; (t.x) = x; (t.y) = y; (t.z) = z; (t.w) = w; return t; 
# 151
} 
# 153
static inline int1 make_int1(int x) 
# 154
{ 
# 155
int1 t; (t.x) = x; return t; 
# 156
} 
# 158
static inline uint1 make_uint1(unsigned x) 
# 159
{ 
# 160
uint1 t; (t.x) = x; return t; 
# 161
} 
# 163
static inline int2 make_int2(int x, int y) 
# 164
{ 
# 165
int2 t; (t.x) = x; (t.y) = y; return t; 
# 166
} 
# 168
static inline uint2 make_uint2(unsigned x, unsigned y) 
# 169
{ 
# 170
uint2 t; (t.x) = x; (t.y) = y; return t; 
# 171
} 
# 173
static inline int3 make_int3(int x, int y, int z) 
# 174
{ 
# 175
int3 t; (t.x) = x; (t.y) = y; (t.z) = z; return t; 
# 176
} 
# 178
static inline uint3 make_uint3(unsigned x, unsigned y, unsigned z) 
# 179
{ 
# 180
uint3 t; (t.x) = x; (t.y) = y; (t.z) = z; return t; 
# 181
} 
# 183
static inline int4 make_int4(int x, int y, int z, int w) 
# 184
{ 
# 185
int4 t; (t.x) = x; (t.y) = y; (t.z) = z; (t.w) = w; return t; 
# 186
} 
# 188
static inline uint4 make_uint4(unsigned x, unsigned y, unsigned z, unsigned w) 
# 189
{ 
# 190
uint4 t; (t.x) = x; (t.y) = y; (t.z) = z; (t.w) = w; return t; 
# 191
} 
# 193
static inline long1 make_long1(long x) 
# 194
{ 
# 195
long1 t; (t.x) = x; return t; 
# 196
} 
# 198
static inline ulong1 make_ulong1(unsigned long x) 
# 199
{ 
# 200
ulong1 t; (t.x) = x; return t; 
# 201
} 
# 203
static inline long2 make_long2(long x, long y) 
# 204
{ 
# 205
long2 t; (t.x) = x; (t.y) = y; return t; 
# 206
} 
# 208
static inline ulong2 make_ulong2(unsigned long x, unsigned long y) 
# 209
{ 
# 210
ulong2 t; (t.x) = x; (t.y) = y; return t; 
# 211
} 
# 213
static inline long3 make_long3(long x, long y, long z) 
# 214
{ 
# 215
long3 t; (t.x) = x; (t.y) = y; (t.z) = z; return t; 
# 216
} 
# 218
static inline ulong3 make_ulong3(unsigned long x, unsigned long y, unsigned long z) 
# 219
{ 
# 220
ulong3 t; (t.x) = x; (t.y) = y; (t.z) = z; return t; 
# 221
} 
# 223
static inline long4 make_long4(long x, long y, long z, long w) 
# 224
{ 
# 225
long4 t; (t.x) = x; (t.y) = y; (t.z) = z; (t.w) = w; return t; 
# 226
} 
# 228
static inline ulong4 make_ulong4(unsigned long x, unsigned long y, unsigned long z, unsigned long w) 
# 229
{ 
# 230
ulong4 t; (t.x) = x; (t.y) = y; (t.z) = z; (t.w) = w; return t; 
# 231
} 
# 233
static inline float1 make_float1(float x) 
# 234
{ 
# 235
float1 t; (t.x) = x; return t; 
# 236
} 
# 238
static inline float2 make_float2(float x, float y) 
# 239
{ 
# 240
float2 t; (t.x) = x; (t.y) = y; return t; 
# 241
} 
# 243
static inline float3 make_float3(float x, float y, float z) 
# 244
{ 
# 245
float3 t; (t.x) = x; (t.y) = y; (t.z) = z; return t; 
# 246
} 
# 248
static inline float4 make_float4(float x, float y, float z, float w) 
# 249
{ 
# 250
float4 t; (t.x) = x; (t.y) = y; (t.z) = z; (t.w) = w; return t; 
# 251
} 
# 253
static inline longlong1 make_longlong1(long long x) 
# 254
{ 
# 255
longlong1 t; (t.x) = x; return t; 
# 256
} 
# 258
static inline ulonglong1 make_ulonglong1(unsigned long long x) 
# 259
{ 
# 260
ulonglong1 t; (t.x) = x; return t; 
# 261
} 
# 263
static inline longlong2 make_longlong2(long long x, long long y) 
# 264
{ 
# 265
longlong2 t; (t.x) = x; (t.y) = y; return t; 
# 266
} 
# 268
static inline ulonglong2 make_ulonglong2(unsigned long long x, unsigned long long y) 
# 269
{ 
# 270
ulonglong2 t; (t.x) = x; (t.y) = y; return t; 
# 271
} 
# 273
static inline longlong3 make_longlong3(long long x, long long y, long long z) 
# 274
{ 
# 275
longlong3 t; (t.x) = x; (t.y) = y; (t.z) = z; return t; 
# 276
} 
# 278
static inline ulonglong3 make_ulonglong3(unsigned long long x, unsigned long long y, unsigned long long z) 
# 279
{ 
# 280
ulonglong3 t; (t.x) = x; (t.y) = y; (t.z) = z; return t; 
# 281
} 
# 283
static inline longlong4 make_longlong4(long long x, long long y, long long z, long long w) 
# 284
{ 
# 285
longlong4 t; (t.x) = x; (t.y) = y; (t.z) = z; (t.w) = w; return t; 
# 286
} 
# 288
static inline ulonglong4 make_ulonglong4(unsigned long long x, unsigned long long y, unsigned long long z, unsigned long long w) 
# 289
{ 
# 290
ulonglong4 t; (t.x) = x; (t.y) = y; (t.z) = z; (t.w) = w; return t; 
# 291
} 
# 293
static inline double1 make_double1(double x) 
# 294
{ 
# 295
double1 t; (t.x) = x; return t; 
# 296
} 
# 298
static inline double2 make_double2(double x, double y) 
# 299
{ 
# 300
double2 t; (t.x) = x; (t.y) = y; return t; 
# 301
} 
# 303
static inline double3 make_double3(double x, double y, double z) 
# 304
{ 
# 305
double3 t; (t.x) = x; (t.y) = y; (t.z) = z; return t; 
# 306
} 
# 308
static inline double4 make_double4(double x, double y, double z, double w) 
# 309
{ 
# 310
double4 t; (t.x) = x; (t.y) = y; (t.z) = z; (t.w) = w; return t; 
# 311
} 
# 28 "/usr/include/string.h" 3
extern "C" {
# 43 "/usr/include/string.h" 3
extern void *memcpy(void *__restrict__ __dest, const void *__restrict__ __src, size_t __n) throw()
# 44
 __attribute((__nonnull__(1, 2))); 
# 47
extern void *memmove(void * __dest, const void * __src, size_t __n) throw()
# 48
 __attribute((__nonnull__(1, 2))); 
# 54
extern void *memccpy(void *__restrict__ __dest, const void *__restrict__ __src, int __c, size_t __n) throw()
# 56
 __attribute((__nonnull__(1, 2))); 
# 61
extern void *memset(void * __s, int __c, size_t __n) throw() __attribute((__nonnull__(1))); 
# 64
extern int memcmp(const void * __s1, const void * __s2, size_t __n) throw()
# 65
 __attribute((__pure__)) __attribute((__nonnull__(1, 2))); 
# 69
extern "C++" {
# 71
extern void *memchr(void * __s, int __c, size_t __n) throw() __asm__("memchr")
# 72
 __attribute((__pure__)) __attribute((__nonnull__(1))); 
# 73
extern const void *memchr(const void * __s, int __c, size_t __n) throw() __asm__("memchr")
# 74
 __attribute((__pure__)) __attribute((__nonnull__(1))); 
# 89 "/usr/include/string.h" 3
}
# 99 "/usr/include/string.h" 3
extern "C++" void *rawmemchr(void * __s, int __c) throw() __asm__("rawmemchr")
# 100
 __attribute((__pure__)) __attribute((__nonnull__(1))); 
# 101
extern "C++" const void *rawmemchr(const void * __s, int __c) throw() __asm__("rawmemchr")
# 102
 __attribute((__pure__)) __attribute((__nonnull__(1))); 
# 110
extern "C++" void *memrchr(void * __s, int __c, size_t __n) throw() __asm__("memrchr")
# 111
 __attribute((__pure__)) __attribute((__nonnull__(1))); 
# 112
extern "C++" const void *memrchr(const void * __s, int __c, size_t __n) throw() __asm__("memrchr")
# 113
 __attribute((__pure__)) __attribute((__nonnull__(1))); 
# 122 "/usr/include/string.h" 3
extern char *strcpy(char *__restrict__ __dest, const char *__restrict__ __src) throw()
# 123
 __attribute((__nonnull__(1, 2))); 
# 125
extern char *strncpy(char *__restrict__ __dest, const char *__restrict__ __src, size_t __n) throw()
# 127
 __attribute((__nonnull__(1, 2))); 
# 130
extern char *strcat(char *__restrict__ __dest, const char *__restrict__ __src) throw()
# 131
 __attribute((__nonnull__(1, 2))); 
# 133
extern char *strncat(char *__restrict__ __dest, const char *__restrict__ __src, size_t __n) throw()
# 134
 __attribute((__nonnull__(1, 2))); 
# 137
extern int strcmp(const char * __s1, const char * __s2) throw()
# 138
 __attribute((__pure__)) __attribute((__nonnull__(1, 2))); 
# 140
extern int strncmp(const char * __s1, const char * __s2, size_t __n) throw()
# 141
 __attribute((__pure__)) __attribute((__nonnull__(1, 2))); 
# 144
extern int strcoll(const char * __s1, const char * __s2) throw()
# 145
 __attribute((__pure__)) __attribute((__nonnull__(1, 2))); 
# 147
extern size_t strxfrm(char *__restrict__ __dest, const char *__restrict__ __src, size_t __n) throw()
# 149
 __attribute((__nonnull__(2))); 
# 28 "/usr/include/x86_64-linux-gnu/bits/types/__locale_t.h" 3
struct __locale_struct { 
# 31
struct __locale_data *__locales[13]; 
# 34
const unsigned short *__ctype_b; 
# 35
const int *__ctype_tolower; 
# 36
const int *__ctype_toupper; 
# 39
const char *__names[13]; 
# 40
}; 
# 42
typedef __locale_struct *__locale_t; 
# 24 "/usr/include/x86_64-linux-gnu/bits/types/locale_t.h" 3
typedef __locale_t locale_t; 
# 156 "/usr/include/string.h" 3
extern int strcoll_l(const char * __s1, const char * __s2, locale_t __l) throw()
# 157
 __attribute((__pure__)) __attribute((__nonnull__(1, 2, 3))); 
# 160
extern size_t strxfrm_l(char * __dest, const char * __src, size_t __n, locale_t __l) throw()
# 161
 __attribute((__nonnull__(2, 4))); 
# 167
extern char *strdup(const char * __s) throw()
# 168
 __attribute((__malloc__)) __attribute((__nonnull__(1))); 
# 175
extern char *strndup(const char * __string, size_t __n) throw()
# 176
 __attribute((__malloc__)) __attribute((__nonnull__(1))); 
# 204 "/usr/include/string.h" 3
extern "C++" {
# 206
extern char *strchr(char * __s, int __c) throw() __asm__("strchr")
# 207
 __attribute((__pure__)) __attribute((__nonnull__(1))); 
# 208
extern const char *strchr(const char * __s, int __c) throw() __asm__("strchr")
# 209
 __attribute((__pure__)) __attribute((__nonnull__(1))); 
# 224 "/usr/include/string.h" 3
}
# 231
extern "C++" {
# 233
extern char *strrchr(char * __s, int __c) throw() __asm__("strrchr")
# 234
 __attribute((__pure__)) __attribute((__nonnull__(1))); 
# 235
extern const char *strrchr(const char * __s, int __c) throw() __asm__("strrchr")
# 236
 __attribute((__pure__)) __attribute((__nonnull__(1))); 
# 251 "/usr/include/string.h" 3
}
# 261 "/usr/include/string.h" 3
extern "C++" char *strchrnul(char * __s, int __c) throw() __asm__("strchrnul")
# 262
 __attribute((__pure__)) __attribute((__nonnull__(1))); 
# 263
extern "C++" const char *strchrnul(const char * __s, int __c) throw() __asm__("strchrnul")
# 264
 __attribute((__pure__)) __attribute((__nonnull__(1))); 
# 273 "/usr/include/string.h" 3
extern size_t strcspn(const char * __s, const char * __reject) throw()
# 274
 __attribute((__pure__)) __attribute((__nonnull__(1, 2))); 
# 277
extern size_t strspn(const char * __s, const char * __accept) throw()
# 278
 __attribute((__pure__)) __attribute((__nonnull__(1, 2))); 
# 281
extern "C++" {
# 283
extern char *strpbrk(char * __s, const char * __accept) throw() __asm__("strpbrk")
# 284
 __attribute((__pure__)) __attribute((__nonnull__(1, 2))); 
# 285
extern const char *strpbrk(const char * __s, const char * __accept) throw() __asm__("strpbrk")
# 286
 __attribute((__pure__)) __attribute((__nonnull__(1, 2))); 
# 301 "/usr/include/string.h" 3
}
# 308
extern "C++" {
# 310
extern char *strstr(char * __haystack, const char * __needle) throw() __asm__("strstr")
# 311
 __attribute((__pure__)) __attribute((__nonnull__(1, 2))); 
# 312
extern const char *strstr(const char * __haystack, const char * __needle) throw() __asm__("strstr")
# 313
 __attribute((__pure__)) __attribute((__nonnull__(1, 2))); 
# 328 "/usr/include/string.h" 3
}
# 336
extern char *strtok(char *__restrict__ __s, const char *__restrict__ __delim) throw()
# 337
 __attribute((__nonnull__(2))); 
# 341
extern char *__strtok_r(char *__restrict__ __s, const char *__restrict__ __delim, char **__restrict__ __save_ptr) throw()
# 344
 __attribute((__nonnull__(2, 3))); 
# 346
extern char *strtok_r(char *__restrict__ __s, const char *__restrict__ __delim, char **__restrict__ __save_ptr) throw()
# 348
 __attribute((__nonnull__(2, 3))); 
# 354
extern "C++" char *strcasestr(char * __haystack, const char * __needle) throw() __asm__("strcasestr")
# 355
 __attribute((__pure__)) __attribute((__nonnull__(1, 2))); 
# 356
extern "C++" const char *strcasestr(const char * __haystack, const char * __needle) throw() __asm__("strcasestr")
# 358
 __attribute((__pure__)) __attribute((__nonnull__(1, 2))); 
# 369 "/usr/include/string.h" 3
extern void *memmem(const void * __haystack, size_t __haystacklen, const void * __needle, size_t __needlelen) throw()
# 371
 __attribute((__pure__)) __attribute((__nonnull__(1, 3))); 
# 375
extern void *__mempcpy(void *__restrict__ __dest, const void *__restrict__ __src, size_t __n) throw()
# 377
 __attribute((__nonnull__(1, 2))); 
# 378
extern void *mempcpy(void *__restrict__ __dest, const void *__restrict__ __src, size_t __n) throw()
# 380
 __attribute((__nonnull__(1, 2))); 
# 385
extern size_t strlen(const char * __s) throw()
# 386
 __attribute((__pure__)) __attribute((__nonnull__(1))); 
# 391
extern size_t strnlen(const char * __string, size_t __maxlen) throw()
# 392
 __attribute((__pure__)) __attribute((__nonnull__(1))); 
# 397
extern char *strerror(int __errnum) throw(); 
# 421 "/usr/include/string.h" 3
extern char *strerror_r(int __errnum, char * __buf, size_t __buflen) throw()
# 422
 __attribute((__nonnull__(2))); 
# 428
extern char *strerror_l(int __errnum, locale_t __l) throw(); 
# 30 "/usr/include/strings.h" 3
extern "C" {
# 34
extern int bcmp(const void * __s1, const void * __s2, size_t __n) throw()
# 35
 __attribute((__pure__)) __attribute((__nonnull__(1, 2))); 
# 38
extern void bcopy(const void * __src, void * __dest, size_t __n) throw()
# 39
 __attribute((__nonnull__(1, 2))); 
# 42
extern void bzero(void * __s, size_t __n) throw() __attribute((__nonnull__(1))); 
# 46
extern "C++" {
# 48
extern char *index(char * __s, int __c) throw() __asm__("index")
# 49
 __attribute((__pure__)) __attribute((__nonnull__(1))); 
# 50
extern const char *index(const char * __s, int __c) throw() __asm__("index")
# 51
 __attribute((__pure__)) __attribute((__nonnull__(1))); 
# 66 "/usr/include/strings.h" 3
}
# 74
extern "C++" {
# 76
extern char *rindex(char * __s, int __c) throw() __asm__("rindex")
# 77
 __attribute((__pure__)) __attribute((__nonnull__(1))); 
# 78
extern const char *rindex(const char * __s, int __c) throw() __asm__("rindex")
# 79
 __attribute((__pure__)) __attribute((__nonnull__(1))); 
# 94 "/usr/include/strings.h" 3
}
# 104 "/usr/include/strings.h" 3
extern int ffs(int __i) throw() __attribute((const)); 
# 110
extern int ffsl(long __l) throw() __attribute((const)); 
# 111
__extension__ extern int ffsll(long long __ll) throw()
# 112
 __attribute((const)); 
# 116
extern int strcasecmp(const char * __s1, const char * __s2) throw()
# 117
 __attribute((__pure__)) __attribute((__nonnull__(1, 2))); 
# 120
extern int strncasecmp(const char * __s1, const char * __s2, size_t __n) throw()
# 121
 __attribute((__pure__)) __attribute((__nonnull__(1, 2))); 
# 128
extern int strcasecmp_l(const char * __s1, const char * __s2, locale_t __loc) throw()
# 129
 __attribute((__pure__)) __attribute((__nonnull__(1, 2, 3))); 
# 133
extern int strncasecmp_l(const char * __s1, const char * __s2, size_t __n, locale_t __loc) throw()
# 135
 __attribute((__pure__)) __attribute((__nonnull__(1, 2, 4))); 
# 138
}
# 436 "/usr/include/string.h" 3
extern void explicit_bzero(void * __s, size_t __n) throw() __attribute((__nonnull__(1))); 
# 440
extern char *strsep(char **__restrict__ __stringp, const char *__restrict__ __delim) throw()
# 442
 __attribute((__nonnull__(1, 2))); 
# 447
extern char *strsignal(int __sig) throw(); 
# 450
extern char *__stpcpy(char *__restrict__ __dest, const char *__restrict__ __src) throw()
# 451
 __attribute((__nonnull__(1, 2))); 
# 452
extern char *stpcpy(char *__restrict__ __dest, const char *__restrict__ __src) throw()
# 453
 __attribute((__nonnull__(1, 2))); 
# 457
extern char *__stpncpy(char *__restrict__ __dest, const char *__restrict__ __src, size_t __n) throw()
# 459
 __attribute((__nonnull__(1, 2))); 
# 460
extern char *stpncpy(char *__restrict__ __dest, const char *__restrict__ __src, size_t __n) throw()
# 462
 __attribute((__nonnull__(1, 2))); 
# 467
extern int strverscmp(const char * __s1, const char * __s2) throw()
# 468
 __attribute((__pure__)) __attribute((__nonnull__(1, 2))); 
# 471
extern char *strfry(char * __string) throw() __attribute((__nonnull__(1))); 
# 474
extern void *memfrob(void * __s, size_t __n) throw() __attribute((__nonnull__(1))); 
# 482
extern "C++" char *basename(char * __filename) throw() __asm__("basename")
# 483
 __attribute((__nonnull__(1))); 
# 484
extern "C++" const char *basename(const char * __filename) throw() __asm__("basename")
# 485
 __attribute((__nonnull__(1))); 
# 499 "/usr/include/string.h" 3
}
# 31 "/usr/include/x86_64-linux-gnu/bits/types.h" 3
typedef unsigned char __u_char; 
# 32
typedef unsigned short __u_short; 
# 33
typedef unsigned __u_int; 
# 34
typedef unsigned long __u_long; 
# 37
typedef signed char __int8_t; 
# 38
typedef unsigned char __uint8_t; 
# 39
typedef signed short __int16_t; 
# 40
typedef unsigned short __uint16_t; 
# 41
typedef signed int __int32_t; 
# 42
typedef unsigned __uint32_t; 
# 44
typedef signed long __int64_t; 
# 45
typedef unsigned long __uint64_t; 
# 52
typedef __int8_t __int_least8_t; 
# 53
typedef __uint8_t __uint_least8_t; 
# 54
typedef __int16_t __int_least16_t; 
# 55
typedef __uint16_t __uint_least16_t; 
# 56
typedef __int32_t __int_least32_t; 
# 57
typedef __uint32_t __uint_least32_t; 
# 58
typedef __int64_t __int_least64_t; 
# 59
typedef __uint64_t __uint_least64_t; 
# 63
typedef long __quad_t; 
# 64
typedef unsigned long __u_quad_t; 
# 72
typedef long __intmax_t; 
# 73
typedef unsigned long __uintmax_t; 
# 145 "/usr/include/x86_64-linux-gnu/bits/types.h" 3
typedef unsigned long __dev_t; 
# 146
typedef unsigned __uid_t; 
# 147
typedef unsigned __gid_t; 
# 148
typedef unsigned long __ino_t; 
# 149
typedef unsigned long __ino64_t; 
# 150
typedef unsigned __mode_t; 
# 151
typedef unsigned long __nlink_t; 
# 152
typedef long __off_t; 
# 153
typedef long __off64_t; 
# 154
typedef int __pid_t; 
# 155
typedef struct { int __val[2]; } __fsid_t; 
# 156
typedef long __clock_t; 
# 157
typedef unsigned long __rlim_t; 
# 158
typedef unsigned long __rlim64_t; 
# 159
typedef unsigned __id_t; 
# 160
typedef long __time_t; 
# 161
typedef unsigned __useconds_t; 
# 162
typedef long __suseconds_t; 
# 164
typedef int __daddr_t; 
# 165
typedef int __key_t; 
# 168
typedef int __clockid_t; 
# 171
typedef void *__timer_t; 
# 174
typedef long __blksize_t; 
# 179
typedef long __blkcnt_t; 
# 180
typedef long __blkcnt64_t; 
# 183
typedef unsigned long __fsblkcnt_t; 
# 184
typedef unsigned long __fsblkcnt64_t; 
# 187
typedef unsigned long __fsfilcnt_t; 
# 188
typedef unsigned long __fsfilcnt64_t; 
# 191
typedef long __fsword_t; 
# 193
typedef long __ssize_t; 
# 196
typedef long __syscall_slong_t; 
# 198
typedef unsigned long __syscall_ulong_t; 
# 202
typedef __off64_t __loff_t; 
# 203
typedef char *__caddr_t; 
# 206
typedef long __intptr_t; 
# 209
typedef unsigned __socklen_t; 
# 214
typedef int __sig_atomic_t; 
# 8 "/usr/include/x86_64-linux-gnu/bits/types/struct_timeval.h" 3
struct timeval { 
# 10
__time_t tv_sec; 
# 11
__suseconds_t tv_usec; 
# 12
}; 
# 26 "/usr/include/x86_64-linux-gnu/bits/timex.h" 3
struct timex { 
# 28
unsigned modes; 
# 29
__syscall_slong_t offset; 
# 30
__syscall_slong_t freq; 
# 31
__syscall_slong_t maxerror; 
# 32
__syscall_slong_t esterror; 
# 33
int status; 
# 34
__syscall_slong_t constant; 
# 35
__syscall_slong_t precision; 
# 36
__syscall_slong_t tolerance; 
# 37
timeval time; 
# 38
__syscall_slong_t tick; 
# 39
__syscall_slong_t ppsfreq; 
# 40
__syscall_slong_t jitter; 
# 41
int shift; 
# 42
__syscall_slong_t stabil; 
# 43
__syscall_slong_t jitcnt; 
# 44
__syscall_slong_t calcnt; 
# 45
__syscall_slong_t errcnt; 
# 46
__syscall_slong_t stbcnt; 
# 48
int tai; 
# 51
int:32; int:32; int:32; int:32; 
# 52
int:32; int:32; int:32; int:32; 
# 53
int:32; int:32; int:32; 
# 54
}; 
# 75 "/usr/include/x86_64-linux-gnu/bits/time.h" 3
extern "C" {
# 78
extern int clock_adjtime(__clockid_t __clock_id, timex * __utx) throw(); 
# 80
}
# 7 "/usr/include/x86_64-linux-gnu/bits/types/clock_t.h" 3
typedef __clock_t clock_t; 
# 7 "/usr/include/x86_64-linux-gnu/bits/types/time_t.h" 3
typedef __time_t time_t; 
# 7 "/usr/include/x86_64-linux-gnu/bits/types/struct_tm.h" 3
struct tm { 
# 9
int tm_sec; 
# 10
int tm_min; 
# 11
int tm_hour; 
# 12
int tm_mday; 
# 13
int tm_mon; 
# 14
int tm_year; 
# 15
int tm_wday; 
# 16
int tm_yday; 
# 17
int tm_isdst; 
# 20
long tm_gmtoff; 
# 21
const char *tm_zone; 
# 26
}; 
# 10 "/usr/include/x86_64-linux-gnu/bits/types/struct_timespec.h" 3
struct timespec { 
# 12
__time_t tv_sec; 
# 16
__syscall_slong_t tv_nsec; 
# 26 "/usr/include/x86_64-linux-gnu/bits/types/struct_timespec.h" 3
}; 
# 7 "/usr/include/x86_64-linux-gnu/bits/types/clockid_t.h" 3
typedef __clockid_t clockid_t; 
# 7 "/usr/include/x86_64-linux-gnu/bits/types/timer_t.h" 3
typedef __timer_t timer_t; 
# 8 "/usr/include/x86_64-linux-gnu/bits/types/struct_itimerspec.h" 3
struct itimerspec { 
# 10
timespec it_interval; 
# 11
timespec it_value; 
# 12
}; 
# 49 "/usr/include/time.h" 3
struct sigevent; 
# 54
typedef __pid_t pid_t; 
# 68 "/usr/include/time.h" 3
extern "C" {
# 72
extern clock_t clock() throw(); 
# 75
extern time_t time(time_t * __timer) throw(); 
# 78
extern double difftime(time_t __time1, time_t __time0) throw()
# 79
 __attribute((const)); 
# 82
extern time_t mktime(tm * __tp) throw(); 
# 88
extern size_t strftime(char *__restrict__ __s, size_t __maxsize, const char *__restrict__ __format, const tm *__restrict__ __tp) throw(); 
# 95
extern char *strptime(const char *__restrict__ __s, const char *__restrict__ __fmt, tm * __tp) throw(); 
# 104
extern size_t strftime_l(char *__restrict__ __s, size_t __maxsize, const char *__restrict__ __format, const tm *__restrict__ __tp, locale_t __loc) throw(); 
# 111
extern char *strptime_l(const char *__restrict__ __s, const char *__restrict__ __fmt, tm * __tp, locale_t __loc) throw(); 
# 119
extern tm *gmtime(const time_t * __timer) throw(); 
# 123
extern tm *localtime(const time_t * __timer) throw(); 
# 128
extern tm *gmtime_r(const time_t *__restrict__ __timer, tm *__restrict__ __tp) throw(); 
# 133
extern tm *localtime_r(const time_t *__restrict__ __timer, tm *__restrict__ __tp) throw(); 
# 139
extern char *asctime(const tm * __tp) throw(); 
# 142
extern char *ctime(const time_t * __timer) throw(); 
# 149
extern char *asctime_r(const tm *__restrict__ __tp, char *__restrict__ __buf) throw(); 
# 153
extern char *ctime_r(const time_t *__restrict__ __timer, char *__restrict__ __buf) throw(); 
# 159
extern char *__tzname[2]; 
# 160
extern int __daylight; 
# 161
extern long __timezone; 
# 166
extern char *tzname[2]; 
# 170
extern void tzset() throw(); 
# 174
extern int daylight; 
# 175
extern long timezone; 
# 190 "/usr/include/time.h" 3
extern time_t timegm(tm * __tp) throw(); 
# 193
extern time_t timelocal(tm * __tp) throw(); 
# 196
extern int dysize(int __year) throw() __attribute((const)); 
# 205 "/usr/include/time.h" 3
extern int nanosleep(const timespec * __requested_time, timespec * __remaining); 
# 210
extern int clock_getres(clockid_t __clock_id, timespec * __res) throw(); 
# 213
extern int clock_gettime(clockid_t __clock_id, timespec * __tp) throw(); 
# 216
extern int clock_settime(clockid_t __clock_id, const timespec * __tp) throw(); 
# 224
extern int clock_nanosleep(clockid_t __clock_id, int __flags, const timespec * __req, timespec * __rem); 
# 229
extern int clock_getcpuclockid(pid_t __pid, clockid_t * __clock_id) throw(); 
# 234
extern int timer_create(clockid_t __clock_id, sigevent *__restrict__ __evp, timer_t *__restrict__ __timerid) throw(); 
# 239
extern int timer_delete(timer_t __timerid) throw(); 
# 242
extern int timer_settime(timer_t __timerid, int __flags, const itimerspec *__restrict__ __value, itimerspec *__restrict__ __ovalue) throw(); 
# 247
extern int timer_gettime(timer_t __timerid, itimerspec * __value) throw(); 
# 251
extern int timer_getoverrun(timer_t __timerid) throw(); 
# 257
extern int timespec_get(timespec * __ts, int __base) throw()
# 258
 __attribute((__nonnull__(1))); 
# 274 "/usr/include/time.h" 3
extern int getdate_err; 
# 283 "/usr/include/time.h" 3
extern tm *getdate(const char * __string); 
# 297 "/usr/include/time.h" 3
extern int getdate_r(const char *__restrict__ __string, tm *__restrict__ __resbufp); 
# 301
}
# 80 "/usr/include/crt/common_functions.h" 3
extern "C" {
# 83
extern clock_t clock() throw(); 
# 88
extern void *memset(void *, int, size_t) throw(); 
# 89
extern void *memcpy(void *, const void *, size_t) throw(); 
# 91
}
# 108 "/usr/include/crt/math_functions.h" 3
extern "C" {
# 192 "/usr/include/crt/math_functions.h" 3
extern int abs(int) throw(); 
# 193
extern long labs(long) throw(); 
# 194
extern long long llabs(long long) throw(); 
# 244 "/usr/include/crt/math_functions.h" 3
extern double fabs(double x) throw(); 
# 285 "/usr/include/crt/math_functions.h" 3
extern float fabsf(float x) throw(); 
# 289
extern inline int min(int, int); 
# 291
extern inline unsigned umin(unsigned, unsigned); 
# 292
extern inline long long llmin(long long, long long); 
# 293
extern inline unsigned long long ullmin(unsigned long long, unsigned long long); 
# 314 "/usr/include/crt/math_functions.h" 3
extern float fminf(float x, float y) throw(); 
# 334 "/usr/include/crt/math_functions.h" 3
extern double fmin(double x, double y) throw(); 
# 341
extern inline int max(int, int); 
# 343
extern inline unsigned umax(unsigned, unsigned); 
# 344
extern inline long long llmax(long long, long long); 
# 345
extern inline unsigned long long ullmax(unsigned long long, unsigned long long); 
# 366 "/usr/include/crt/math_functions.h" 3
extern float fmaxf(float x, float y) throw(); 
# 386 "/usr/include/crt/math_functions.h" 3
extern double fmax(double, double) throw(); 
# 430 "/usr/include/crt/math_functions.h" 3
extern double sin(double x) throw(); 
# 463 "/usr/include/crt/math_functions.h" 3
extern double cos(double x) throw(); 
# 482 "/usr/include/crt/math_functions.h" 3
extern void sincos(double x, double * sptr, double * cptr) throw(); 
# 498 "/usr/include/crt/math_functions.h" 3
extern void sincosf(float x, float * sptr, float * cptr) throw(); 
# 543 "/usr/include/crt/math_functions.h" 3
extern double tan(double x) throw(); 
# 612 "/usr/include/crt/math_functions.h" 3
extern double sqrt(double x) throw(); 
# 684 "/usr/include/crt/math_functions.h" 3
extern double rsqrt(double x); 
# 754 "/usr/include/crt/math_functions.h" 3
extern float rsqrtf(float x); 
# 810 "/usr/include/crt/math_functions.h" 3
extern double log2(double x) throw(); 
# 835 "/usr/include/crt/math_functions.h" 3
extern double exp2(double x) throw(); 
# 860 "/usr/include/crt/math_functions.h" 3
extern float exp2f(float x) throw(); 
# 887 "/usr/include/crt/math_functions.h" 3
extern double exp10(double x) throw(); 
# 910 "/usr/include/crt/math_functions.h" 3
extern float exp10f(float x) throw(); 
# 956 "/usr/include/crt/math_functions.h" 3
extern double expm1(double x) throw(); 
# 1001 "/usr/include/crt/math_functions.h" 3
extern float expm1f(float x) throw(); 
# 1056 "/usr/include/crt/math_functions.h" 3
extern float log2f(float x) throw(); 
# 1110 "/usr/include/crt/math_functions.h" 3
extern double log10(double x) throw(); 
# 1181 "/usr/include/crt/math_functions.h" 3
extern double log(double x) throw(); 
# 1275 "/usr/include/crt/math_functions.h" 3
extern double log1p(double x) throw(); 
# 1372 "/usr/include/crt/math_functions.h" 3
extern float log1pf(float x) throw(); 
# 1447 "/usr/include/crt/math_functions.h" 3
extern double floor(double x) throw(); 
# 1486 "/usr/include/crt/math_functions.h" 3
extern double exp(double x) throw(); 
# 1517 "/usr/include/crt/math_functions.h" 3
extern double cosh(double x) throw(); 
# 1547 "/usr/include/crt/math_functions.h" 3
extern double sinh(double x) throw(); 
# 1577 "/usr/include/crt/math_functions.h" 3
extern double tanh(double x) throw(); 
# 1612 "/usr/include/crt/math_functions.h" 3
extern double acosh(double x) throw(); 
# 1650 "/usr/include/crt/math_functions.h" 3
extern float acoshf(float x) throw(); 
# 1666 "/usr/include/crt/math_functions.h" 3
extern double asinh(double x) throw(); 
# 1682 "/usr/include/crt/math_functions.h" 3
extern float asinhf(float x) throw(); 
# 1736 "/usr/include/crt/math_functions.h" 3
extern double atanh(double x) throw(); 
# 1790 "/usr/include/crt/math_functions.h" 3
extern float atanhf(float x) throw(); 
# 1849 "/usr/include/crt/math_functions.h" 3
extern double ldexp(double x, int exp) throw(); 
# 1905 "/usr/include/crt/math_functions.h" 3
extern float ldexpf(float x, int exp) throw(); 
# 1957 "/usr/include/crt/math_functions.h" 3
extern double logb(double x) throw(); 
# 2012 "/usr/include/crt/math_functions.h" 3
extern float logbf(float x) throw(); 
# 2042 "/usr/include/crt/math_functions.h" 3
extern int ilogb(double x) throw(); 
# 2072 "/usr/include/crt/math_functions.h" 3
extern int ilogbf(float x) throw(); 
# 2148 "/usr/include/crt/math_functions.h" 3
extern double scalbn(double x, int n) throw(); 
# 2224 "/usr/include/crt/math_functions.h" 3
extern float scalbnf(float x, int n) throw(); 
# 2300 "/usr/include/crt/math_functions.h" 3
extern double scalbln(double x, long n) throw(); 
# 2376 "/usr/include/crt/math_functions.h" 3
extern float scalblnf(float x, long n) throw(); 
# 2454 "/usr/include/crt/math_functions.h" 3
extern double frexp(double x, int * nptr) throw(); 
# 2529 "/usr/include/crt/math_functions.h" 3
extern float frexpf(float x, int * nptr) throw(); 
# 2543 "/usr/include/crt/math_functions.h" 3
extern double round(double x) throw(); 
# 2560 "/usr/include/crt/math_functions.h" 3
extern float roundf(float x) throw(); 
# 2578 "/usr/include/crt/math_functions.h" 3
extern long lround(double x) throw(); 
# 2596 "/usr/include/crt/math_functions.h" 3
extern long lroundf(float x) throw(); 
# 2614 "/usr/include/crt/math_functions.h" 3
extern long long llround(double x) throw(); 
# 2632 "/usr/include/crt/math_functions.h" 3
extern long long llroundf(float x) throw(); 
# 2684 "/usr/include/crt/math_functions.h" 3
extern float rintf(float x) throw(); 
# 2701 "/usr/include/crt/math_functions.h" 3
extern long lrint(double x) throw(); 
# 2718 "/usr/include/crt/math_functions.h" 3
extern long lrintf(float x) throw(); 
# 2735 "/usr/include/crt/math_functions.h" 3
extern long long llrint(double x) throw(); 
# 2752 "/usr/include/crt/math_functions.h" 3
extern long long llrintf(float x) throw(); 
# 2805 "/usr/include/crt/math_functions.h" 3
extern double nearbyint(double x) throw(); 
# 2858 "/usr/include/crt/math_functions.h" 3
extern float nearbyintf(float x) throw(); 
# 2920 "/usr/include/crt/math_functions.h" 3
extern double ceil(double x) throw(); 
# 2932 "/usr/include/crt/math_functions.h" 3
extern double trunc(double x) throw(); 
# 2947 "/usr/include/crt/math_functions.h" 3
extern float truncf(float x) throw(); 
# 2973 "/usr/include/crt/math_functions.h" 3
extern double fdim(double x, double y) throw(); 
# 2999 "/usr/include/crt/math_functions.h" 3
extern float fdimf(float x, float y) throw(); 
# 3035 "/usr/include/crt/math_functions.h" 3
extern double atan2(double y, double x) throw(); 
# 3066 "/usr/include/crt/math_functions.h" 3
extern double atan(double x) throw(); 
# 3089 "/usr/include/crt/math_functions.h" 3
extern double acos(double x) throw(); 
# 3121 "/usr/include/crt/math_functions.h" 3
extern double asin(double x) throw(); 
# 3167 "/usr/include/crt/math_functions.h" 3
extern double hypot(double x, double y) throw(); 
# 3219 "/usr/include/crt/math_functions.h" 3
extern double rhypot(double x, double y) throw(); 
# 3265 "/usr/include/crt/math_functions.h" 3
extern float hypotf(float x, float y) throw(); 
# 3317 "/usr/include/crt/math_functions.h" 3
extern float rhypotf(float x, float y) throw(); 
# 3361 "/usr/include/crt/math_functions.h" 3
extern double norm3d(double a, double b, double c) throw(); 
# 3412 "/usr/include/crt/math_functions.h" 3
extern double rnorm3d(double a, double b, double c) throw(); 
# 3461 "/usr/include/crt/math_functions.h" 3
extern double norm4d(double a, double b, double c, double d) throw(); 
# 3517 "/usr/include/crt/math_functions.h" 3
extern double rnorm4d(double a, double b, double c, double d) throw(); 
# 3562 "/usr/include/crt/math_functions.h" 3
extern double norm(int dim, const double * t) throw(); 
# 3613 "/usr/include/crt/math_functions.h" 3
extern double rnorm(int dim, const double * t) throw(); 
# 3665 "/usr/include/crt/math_functions.h" 3
extern float rnormf(int dim, const float * a) throw(); 
# 3709 "/usr/include/crt/math_functions.h" 3
extern float normf(int dim, const float * a) throw(); 
# 3754 "/usr/include/crt/math_functions.h" 3
extern float norm3df(float a, float b, float c) throw(); 
# 3805 "/usr/include/crt/math_functions.h" 3
extern float rnorm3df(float a, float b, float c) throw(); 
# 3854 "/usr/include/crt/math_functions.h" 3
extern float norm4df(float a, float b, float c, float d) throw(); 
# 3910 "/usr/include/crt/math_functions.h" 3
extern float rnorm4df(float a, float b, float c, float d) throw(); 
# 3997 "/usr/include/crt/math_functions.h" 3
extern double cbrt(double x) throw(); 
# 4083 "/usr/include/crt/math_functions.h" 3
extern float cbrtf(float x) throw(); 
# 4138 "/usr/include/crt/math_functions.h" 3
extern double rcbrt(double x); 
# 4188 "/usr/include/crt/math_functions.h" 3
extern float rcbrtf(float x); 
# 4248 "/usr/include/crt/math_functions.h" 3
extern double sinpi(double x); 
# 4308 "/usr/include/crt/math_functions.h" 3
extern float sinpif(float x); 
# 4360 "/usr/include/crt/math_functions.h" 3
extern double cospi(double x); 
# 4412 "/usr/include/crt/math_functions.h" 3
extern float cospif(float x); 
# 4442 "/usr/include/crt/math_functions.h" 3
extern void sincospi(double x, double * sptr, double * cptr); 
# 4472 "/usr/include/crt/math_functions.h" 3
extern void sincospif(float x, float * sptr, float * cptr); 
# 4784 "/usr/include/crt/math_functions.h" 3
extern double pow(double x, double y) throw(); 
# 4840 "/usr/include/crt/math_functions.h" 3
extern double modf(double x, double * iptr) throw(); 
# 4899 "/usr/include/crt/math_functions.h" 3
extern double fmod(double x, double y) throw(); 
# 4985 "/usr/include/crt/math_functions.h" 3
extern double remainder(double x, double y) throw(); 
# 5075 "/usr/include/crt/math_functions.h" 3
extern float remainderf(float x, float y) throw(); 
# 5129 "/usr/include/crt/math_functions.h" 3
extern double remquo(double x, double y, int * quo) throw(); 
# 5183 "/usr/include/crt/math_functions.h" 3
extern float remquof(float x, float y, int * quo) throw(); 
# 5224 "/usr/include/crt/math_functions.h" 3
extern double j0(double x) throw(); 
# 5266 "/usr/include/crt/math_functions.h" 3
extern float j0f(float x) throw(); 
# 5327 "/usr/include/crt/math_functions.h" 3
extern double j1(double x) throw(); 
# 5388 "/usr/include/crt/math_functions.h" 3
extern float j1f(float x) throw(); 
# 5431 "/usr/include/crt/math_functions.h" 3
extern double jn(int n, double x) throw(); 
# 5474 "/usr/include/crt/math_functions.h" 3
extern float jnf(int n, float x) throw(); 
# 5526 "/usr/include/crt/math_functions.h" 3
extern double y0(double x) throw(); 
# 5578 "/usr/include/crt/math_functions.h" 3
extern float y0f(float x) throw(); 
# 5630 "/usr/include/crt/math_functions.h" 3
extern double y1(double x) throw(); 
# 5682 "/usr/include/crt/math_functions.h" 3
extern float y1f(float x) throw(); 
# 5735 "/usr/include/crt/math_functions.h" 3
extern double yn(int n, double x) throw(); 
# 5788 "/usr/include/crt/math_functions.h" 3
extern float ynf(int n, float x) throw(); 
# 5815 "/usr/include/crt/math_functions.h" 3
extern double cyl_bessel_i0(double x) throw(); 
# 5841 "/usr/include/crt/math_functions.h" 3
extern float cyl_bessel_i0f(float x) throw(); 
# 5868 "/usr/include/crt/math_functions.h" 3
extern double cyl_bessel_i1(double x) throw(); 
# 5894 "/usr/include/crt/math_functions.h" 3
extern float cyl_bessel_i1f(float x) throw(); 
# 5977 "/usr/include/crt/math_functions.h" 3
extern double erf(double x) throw(); 
# 6059 "/usr/include/crt/math_functions.h" 3
extern float erff(float x) throw(); 
# 6123 "/usr/include/crt/math_functions.h" 3
extern double erfinv(double y); 
# 6180 "/usr/include/crt/math_functions.h" 3
extern float erfinvf(float y); 
# 6219 "/usr/include/crt/math_functions.h" 3
extern double erfc(double x) throw(); 
# 6257 "/usr/include/crt/math_functions.h" 3
extern float erfcf(float x) throw(); 
# 6385 "/usr/include/crt/math_functions.h" 3
extern double lgamma(double x) throw(); 
# 6448 "/usr/include/crt/math_functions.h" 3
extern double erfcinv(double y); 
# 6504 "/usr/include/crt/math_functions.h" 3
extern float erfcinvf(float y); 
# 6562 "/usr/include/crt/math_functions.h" 3
extern double normcdfinv(double y); 
# 6620 "/usr/include/crt/math_functions.h" 3
extern float normcdfinvf(float y); 
# 6663 "/usr/include/crt/math_functions.h" 3
extern double normcdf(double y); 
# 6706 "/usr/include/crt/math_functions.h" 3
extern float normcdff(float y); 
# 6781 "/usr/include/crt/math_functions.h" 3
extern double erfcx(double x); 
# 6856 "/usr/include/crt/math_functions.h" 3
extern float erfcxf(float x); 
# 6990 "/usr/include/crt/math_functions.h" 3
extern float lgammaf(float x) throw(); 
# 7099 "/usr/include/crt/math_functions.h" 3
extern double tgamma(double x) throw(); 
# 7208 "/usr/include/crt/math_functions.h" 3
extern float tgammaf(float x) throw(); 
# 7221 "/usr/include/crt/math_functions.h" 3
extern double copysign(double x, double y) throw(); 
# 7234 "/usr/include/crt/math_functions.h" 3
extern float copysignf(float x, float y) throw(); 
# 7271 "/usr/include/crt/math_functions.h" 3
extern double nextafter(double x, double y) throw(); 
# 7308 "/usr/include/crt/math_functions.h" 3
extern float nextafterf(float x, float y) throw(); 
# 7324 "/usr/include/crt/math_functions.h" 3
extern double nan(const char * tagp) throw(); 
# 7340 "/usr/include/crt/math_functions.h" 3
extern float nanf(const char * tagp) throw(); 
# 7347
extern int __isinff(float) throw(); 
# 7348
extern int __isnanf(float) throw(); 
# 7358 "/usr/include/crt/math_functions.h" 3
extern int __finite(double) throw(); 
# 7359
extern int __finitef(float) throw(); 
# 7360
extern int __signbit(double) throw(); 
# 7361
extern int __isnan(double) throw(); 
# 7362
extern int __isinf(double) throw(); 
# 7365
extern int __signbitf(float) throw(); 
# 7524 "/usr/include/crt/math_functions.h" 3
extern double fma(double x, double y, double z) throw(); 
# 7682 "/usr/include/crt/math_functions.h" 3
extern float fmaf(float x, float y, float z) throw(); 
# 7693 "/usr/include/crt/math_functions.h" 3
extern int __signbitl(long double) throw(); 
# 7699
extern int __finitel(long double) throw(); 
# 7700
extern int __isinfl(long double) throw(); 
# 7701
extern int __isnanl(long double) throw(); 
# 7751 "/usr/include/crt/math_functions.h" 3
extern float acosf(float x) throw(); 
# 7791 "/usr/include/crt/math_functions.h" 3
extern float asinf(float x) throw(); 
# 7831 "/usr/include/crt/math_functions.h" 3
extern float atanf(float x) throw(); 
# 7864 "/usr/include/crt/math_functions.h" 3
extern float atan2f(float y, float x) throw(); 
# 7888 "/usr/include/crt/math_functions.h" 3
extern float cosf(float x) throw(); 
# 7930 "/usr/include/crt/math_functions.h" 3
extern float sinf(float x) throw(); 
# 7972 "/usr/include/crt/math_functions.h" 3
extern float tanf(float x) throw(); 
# 7996 "/usr/include/crt/math_functions.h" 3
extern float coshf(float x) throw(); 
# 8037 "/usr/include/crt/math_functions.h" 3
extern float sinhf(float x) throw(); 
# 8067 "/usr/include/crt/math_functions.h" 3
extern float tanhf(float x) throw(); 
# 8118 "/usr/include/crt/math_functions.h" 3
extern float logf(float x) throw(); 
# 8168 "/usr/include/crt/math_functions.h" 3
extern float expf(float x) throw(); 
# 8219 "/usr/include/crt/math_functions.h" 3
extern float log10f(float x) throw(); 
# 8274 "/usr/include/crt/math_functions.h" 3
extern float modff(float x, float * iptr) throw(); 
# 8582 "/usr/include/crt/math_functions.h" 3
extern float powf(float x, float y) throw(); 
# 8651 "/usr/include/crt/math_functions.h" 3
extern float sqrtf(float x) throw(); 
# 8710 "/usr/include/crt/math_functions.h" 3
extern float ceilf(float x) throw(); 
# 8782 "/usr/include/crt/math_functions.h" 3
extern float floorf(float x) throw(); 
# 8841 "/usr/include/crt/math_functions.h" 3
extern float fmodf(float x, float y) throw(); 
# 8856 "/usr/include/crt/math_functions.h" 3
}
# 236 "/usr/include/x86_64-linux-gnu/c++/8/bits/c++config.h" 3
namespace std { 
# 238
typedef unsigned long size_t; 
# 239
typedef long ptrdiff_t; 
# 242
typedef __decltype((nullptr)) nullptr_t; 
# 244
}
# 258 "/usr/include/x86_64-linux-gnu/c++/8/bits/c++config.h" 3
namespace std { 
# 260
inline namespace __cxx11 __attribute((__abi_tag__("cxx11"))) { }
# 261
}
# 262
namespace __gnu_cxx { 
# 264
inline namespace __cxx11 __attribute((__abi_tag__("cxx11"))) { }
# 265
}
# 67 "/usr/include/c++/8/bits/cpp_type_traits.h" 3
extern "C++" {
# 69
namespace std __attribute((__visibility__("default"))) { 
# 73
struct __true_type { }; 
# 74
struct __false_type { }; 
# 76
template< bool > 
# 77
struct __truth_type { 
# 78
typedef __false_type __type; }; 
# 81
template<> struct __truth_type< true>  { 
# 82
typedef __true_type __type; }; 
# 86
template< class _Sp, class _Tp> 
# 87
struct __traitor { 
# 89
enum { __value = ((bool)_Sp::__value) || ((bool)_Tp::__value)}; 
# 90
typedef typename __truth_type< __value> ::__type __type; 
# 91
}; 
# 94
template< class , class > 
# 95
struct __are_same { 
# 97
enum { __value}; 
# 98
typedef __false_type __type; 
# 99
}; 
# 101
template< class _Tp> 
# 102
struct __are_same< _Tp, _Tp>  { 
# 104
enum { __value = 1}; 
# 105
typedef __true_type __type; 
# 106
}; 
# 109
template< class _Tp> 
# 110
struct __is_void { 
# 112
enum { __value}; 
# 113
typedef __false_type __type; 
# 114
}; 
# 117
template<> struct __is_void< void>  { 
# 119
enum { __value = 1}; 
# 120
typedef __true_type __type; 
# 121
}; 
# 126
template< class _Tp> 
# 127
struct __is_integer { 
# 129
enum { __value}; 
# 130
typedef __false_type __type; 
# 131
}; 
# 138
template<> struct __is_integer< bool>  { 
# 140
enum { __value = 1}; 
# 141
typedef __true_type __type; 
# 142
}; 
# 145
template<> struct __is_integer< char>  { 
# 147
enum { __value = 1}; 
# 148
typedef __true_type __type; 
# 149
}; 
# 152
template<> struct __is_integer< signed char>  { 
# 154
enum { __value = 1}; 
# 155
typedef __true_type __type; 
# 156
}; 
# 159
template<> struct __is_integer< unsigned char>  { 
# 161
enum { __value = 1}; 
# 162
typedef __true_type __type; 
# 163
}; 
# 167
template<> struct __is_integer< wchar_t>  { 
# 169
enum { __value = 1}; 
# 170
typedef __true_type __type; 
# 171
}; 
# 176
template<> struct __is_integer< char16_t>  { 
# 178
enum { __value = 1}; 
# 179
typedef __true_type __type; 
# 180
}; 
# 183
template<> struct __is_integer< char32_t>  { 
# 185
enum { __value = 1}; 
# 186
typedef __true_type __type; 
# 187
}; 
# 191
template<> struct __is_integer< short>  { 
# 193
enum { __value = 1}; 
# 194
typedef __true_type __type; 
# 195
}; 
# 198
template<> struct __is_integer< unsigned short>  { 
# 200
enum { __value = 1}; 
# 201
typedef __true_type __type; 
# 202
}; 
# 205
template<> struct __is_integer< int>  { 
# 207
enum { __value = 1}; 
# 208
typedef __true_type __type; 
# 209
}; 
# 212
template<> struct __is_integer< unsigned>  { 
# 214
enum { __value = 1}; 
# 215
typedef __true_type __type; 
# 216
}; 
# 219
template<> struct __is_integer< long>  { 
# 221
enum { __value = 1}; 
# 222
typedef __true_type __type; 
# 223
}; 
# 226
template<> struct __is_integer< unsigned long>  { 
# 228
enum { __value = 1}; 
# 229
typedef __true_type __type; 
# 230
}; 
# 233
template<> struct __is_integer< long long>  { 
# 235
enum { __value = 1}; 
# 236
typedef __true_type __type; 
# 237
}; 
# 240
template<> struct __is_integer< unsigned long long>  { 
# 242
enum { __value = 1}; 
# 243
typedef __true_type __type; 
# 244
}; 
# 261 "/usr/include/c++/8/bits/cpp_type_traits.h" 3
template<> struct __is_integer< __int128_t>  { enum { __value = 1}; typedef __true_type __type; }; template<> struct __is_integer< __uint128_t>  { enum { __value = 1}; typedef __true_type __type; }; 
# 278 "/usr/include/c++/8/bits/cpp_type_traits.h" 3
template< class _Tp> 
# 279
struct __is_floating { 
# 281
enum { __value}; 
# 282
typedef __false_type __type; 
# 283
}; 
# 287
template<> struct __is_floating< float>  { 
# 289
enum { __value = 1}; 
# 290
typedef __true_type __type; 
# 291
}; 
# 294
template<> struct __is_floating< double>  { 
# 296
enum { __value = 1}; 
# 297
typedef __true_type __type; 
# 298
}; 
# 301
template<> struct __is_floating< long double>  { 
# 303
enum { __value = 1}; 
# 304
typedef __true_type __type; 
# 305
}; 
# 310
template< class _Tp> 
# 311
struct __is_pointer { 
# 313
enum { __value}; 
# 314
typedef __false_type __type; 
# 315
}; 
# 317
template< class _Tp> 
# 318
struct __is_pointer< _Tp *>  { 
# 320
enum { __value = 1}; 
# 321
typedef __true_type __type; 
# 322
}; 
# 327
template< class _Tp> 
# 328
struct __is_arithmetic : public __traitor< __is_integer< _Tp> , __is_floating< _Tp> >  { 
# 330
}; 
# 335
template< class _Tp> 
# 336
struct __is_scalar : public __traitor< __is_arithmetic< _Tp> , __is_pointer< _Tp> >  { 
# 338
}; 
# 343
template< class _Tp> 
# 344
struct __is_char { 
# 346
enum { __value}; 
# 347
typedef __false_type __type; 
# 348
}; 
# 351
template<> struct __is_char< char>  { 
# 353
enum { __value = 1}; 
# 354
typedef __true_type __type; 
# 355
}; 
# 359
template<> struct __is_char< wchar_t>  { 
# 361
enum { __value = 1}; 
# 362
typedef __true_type __type; 
# 363
}; 
# 366
template< class _Tp> 
# 367
struct __is_byte { 
# 369
enum { __value}; 
# 370
typedef __false_type __type; 
# 371
}; 
# 374
template<> struct __is_byte< char>  { 
# 376
enum { __value = 1}; 
# 377
typedef __true_type __type; 
# 378
}; 
# 381
template<> struct __is_byte< signed char>  { 
# 383
enum { __value = 1}; 
# 384
typedef __true_type __type; 
# 385
}; 
# 388
template<> struct __is_byte< unsigned char>  { 
# 390
enum { __value = 1}; 
# 391
typedef __true_type __type; 
# 392
}; 
# 408 "/usr/include/c++/8/bits/cpp_type_traits.h" 3
template< class _Tp> 
# 409
struct __is_move_iterator { 
# 411
enum { __value}; 
# 412
typedef __false_type __type; 
# 413
}; 
# 417
template< class _Iterator> inline _Iterator 
# 419
__miter_base(_Iterator __it) 
# 420
{ return __it; } 
# 423
}
# 424
}
# 37 "/usr/include/c++/8/ext/type_traits.h" 3
extern "C++" {
# 39
namespace __gnu_cxx __attribute((__visibility__("default"))) { 
# 44
template< bool , class > 
# 45
struct __enable_if { 
# 46
}; 
# 48
template< class _Tp> 
# 49
struct __enable_if< true, _Tp>  { 
# 50
typedef _Tp __type; }; 
# 54
template< bool _Cond, class _Iftrue, class _Iffalse> 
# 55
struct __conditional_type { 
# 56
typedef _Iftrue __type; }; 
# 58
template< class _Iftrue, class _Iffalse> 
# 59
struct __conditional_type< false, _Iftrue, _Iffalse>  { 
# 60
typedef _Iffalse __type; }; 
# 64
template< class _Tp> 
# 65
struct __add_unsigned { 
# 68
private: typedef __enable_if< std::__is_integer< _Tp> ::__value, _Tp>  __if_type; 
# 71
public: typedef typename __enable_if< std::__is_integer< _Tp> ::__value, _Tp> ::__type __type; 
# 72
}; 
# 75
template<> struct __add_unsigned< char>  { 
# 76
typedef unsigned char __type; }; 
# 79
template<> struct __add_unsigned< signed char>  { 
# 80
typedef unsigned char __type; }; 
# 83
template<> struct __add_unsigned< short>  { 
# 84
typedef unsigned short __type; }; 
# 87
template<> struct __add_unsigned< int>  { 
# 88
typedef unsigned __type; }; 
# 91
template<> struct __add_unsigned< long>  { 
# 92
typedef unsigned long __type; }; 
# 95
template<> struct __add_unsigned< long long>  { 
# 96
typedef unsigned long long __type; }; 
# 100
template<> struct __add_unsigned< bool> ; 
# 103
template<> struct __add_unsigned< wchar_t> ; 
# 107
template< class _Tp> 
# 108
struct __remove_unsigned { 
# 111
private: typedef __enable_if< std::__is_integer< _Tp> ::__value, _Tp>  __if_type; 
# 114
public: typedef typename __enable_if< std::__is_integer< _Tp> ::__value, _Tp> ::__type __type; 
# 115
}; 
# 118
template<> struct __remove_unsigned< char>  { 
# 119
typedef signed char __type; }; 
# 122
template<> struct __remove_unsigned< unsigned char>  { 
# 123
typedef signed char __type; }; 
# 126
template<> struct __remove_unsigned< unsigned short>  { 
# 127
typedef short __type; }; 
# 130
template<> struct __remove_unsigned< unsigned>  { 
# 131
typedef int __type; }; 
# 134
template<> struct __remove_unsigned< unsigned long>  { 
# 135
typedef long __type; }; 
# 138
template<> struct __remove_unsigned< unsigned long long>  { 
# 139
typedef long long __type; }; 
# 143
template<> struct __remove_unsigned< bool> ; 
# 146
template<> struct __remove_unsigned< wchar_t> ; 
# 150
template< class _Type> inline bool 
# 152
__is_null_pointer(_Type *__ptr) 
# 153
{ return __ptr == 0; } 
# 155
template< class _Type> inline bool 
# 157
__is_null_pointer(_Type) 
# 158
{ return false; } 
# 162
inline bool __is_null_pointer(std::nullptr_t) 
# 163
{ return true; } 
# 167
template< class _Tp, bool  = std::__is_integer< _Tp> ::__value> 
# 168
struct __promote { 
# 169
typedef double __type; }; 
# 174
template< class _Tp> 
# 175
struct __promote< _Tp, false>  { 
# 176
}; 
# 179
template<> struct __promote< long double>  { 
# 180
typedef long double __type; }; 
# 183
template<> struct __promote< double>  { 
# 184
typedef double __type; }; 
# 187
template<> struct __promote< float>  { 
# 188
typedef float __type; }; 
# 190
template< class _Tp, class _Up, class 
# 191
_Tp2 = typename __promote< _Tp> ::__type, class 
# 192
_Up2 = typename __promote< _Up> ::__type> 
# 193
struct __promote_2 { 
# 195
typedef __typeof__(_Tp2() + _Up2()) __type; 
# 196
}; 
# 198
template< class _Tp, class _Up, class _Vp, class 
# 199
_Tp2 = typename __promote< _Tp> ::__type, class 
# 200
_Up2 = typename __promote< _Up> ::__type, class 
# 201
_Vp2 = typename __promote< _Vp> ::__type> 
# 202
struct __promote_3 { 
# 204
typedef __typeof__((_Tp2() + _Up2()) + _Vp2()) __type; 
# 205
}; 
# 207
template< class _Tp, class _Up, class _Vp, class _Wp, class 
# 208
_Tp2 = typename __promote< _Tp> ::__type, class 
# 209
_Up2 = typename __promote< _Up> ::__type, class 
# 210
_Vp2 = typename __promote< _Vp> ::__type, class 
# 211
_Wp2 = typename __promote< _Wp> ::__type> 
# 212
struct __promote_4 { 
# 214
typedef __typeof__(((_Tp2() + _Up2()) + _Vp2()) + _Wp2()) __type; 
# 215
}; 
# 218
}
# 219
}
# 34 "/usr/include/math.h" 3
extern "C" {
# 214 "/usr/include/x86_64-linux-gnu/bits/floatn-common.h" 3
typedef float _Float32; 
# 251 "/usr/include/x86_64-linux-gnu/bits/floatn-common.h" 3
typedef double _Float64; 
# 268 "/usr/include/x86_64-linux-gnu/bits/floatn-common.h" 3
typedef double _Float32x; 
# 285 "/usr/include/x86_64-linux-gnu/bits/floatn-common.h" 3
typedef long double _Float64x; 
# 149 "/usr/include/math.h" 3
typedef float float_t; 
# 150
typedef double double_t; 
# 238 "/usr/include/math.h" 3
enum { 
# 239
FP_INT_UPWARD, 
# 242
FP_INT_DOWNWARD, 
# 245
FP_INT_TOWARDZERO, 
# 248
FP_INT_TONEARESTFROMZERO, 
# 251
FP_INT_TONEAREST
# 254
}; 
# 21 "/usr/include/x86_64-linux-gnu/bits/mathcalls-helper-functions.h" 3
extern int __fpclassify(double __value) throw()
# 22
 __attribute((const)); 
# 25
extern int __signbit(double __value) throw()
# 26
 __attribute((const)); 
# 30
extern int __isinf(double __value) throw() __attribute((const)); 
# 33
extern int __finite(double __value) throw() __attribute((const)); 
# 36
extern int __isnan(double __value) throw() __attribute((const)); 
# 39
extern int __iseqsig(double __x, double __y) throw(); 
# 42
extern int __issignaling(double __value) throw()
# 43
 __attribute((const)); 
# 53 "/usr/include/x86_64-linux-gnu/bits/mathcalls.h" 3
extern double acos(double __x) throw(); extern double __acos(double __x) throw(); 
# 55
extern double asin(double __x) throw(); extern double __asin(double __x) throw(); 
# 57
extern double atan(double __x) throw(); extern double __atan(double __x) throw(); 
# 59
extern double atan2(double __y, double __x) throw(); extern double __atan2(double __y, double __x) throw(); 
# 62
extern double cos(double __x) throw(); extern double __cos(double __x) throw(); 
# 64
extern double sin(double __x) throw(); extern double __sin(double __x) throw(); 
# 66
extern double tan(double __x) throw(); extern double __tan(double __x) throw(); 
# 71
extern double cosh(double __x) throw(); extern double __cosh(double __x) throw(); 
# 73
extern double sinh(double __x) throw(); extern double __sinh(double __x) throw(); 
# 75
extern double tanh(double __x) throw(); extern double __tanh(double __x) throw(); 
# 79
extern void sincos(double __x, double * __sinx, double * __cosx) throw(); extern void __sincos(double __x, double * __sinx, double * __cosx) throw(); 
# 85
extern double acosh(double __x) throw(); extern double __acosh(double __x) throw(); 
# 87
extern double asinh(double __x) throw(); extern double __asinh(double __x) throw(); 
# 89
extern double atanh(double __x) throw(); extern double __atanh(double __x) throw(); 
# 95
extern double exp(double __x) throw(); extern double __exp(double __x) throw(); 
# 98
extern double frexp(double __x, int * __exponent) throw(); extern double __frexp(double __x, int * __exponent) throw(); 
# 101
extern double ldexp(double __x, int __exponent) throw(); extern double __ldexp(double __x, int __exponent) throw(); 
# 104
extern double log(double __x) throw(); extern double __log(double __x) throw(); 
# 107
extern double log10(double __x) throw(); extern double __log10(double __x) throw(); 
# 110
extern double modf(double __x, double * __iptr) throw(); extern double __modf(double __x, double * __iptr) throw() __attribute((__nonnull__(2))); 
# 114
extern double exp10(double __x) throw(); extern double __exp10(double __x) throw(); 
# 119
extern double expm1(double __x) throw(); extern double __expm1(double __x) throw(); 
# 122
extern double log1p(double __x) throw(); extern double __log1p(double __x) throw(); 
# 125
extern double logb(double __x) throw(); extern double __logb(double __x) throw(); 
# 130
extern double exp2(double __x) throw(); extern double __exp2(double __x) throw(); 
# 133
extern double log2(double __x) throw(); extern double __log2(double __x) throw(); 
# 140
extern double pow(double __x, double __y) throw(); extern double __pow(double __x, double __y) throw(); 
# 143
extern double sqrt(double __x) throw(); extern double __sqrt(double __x) throw(); 
# 147
extern double hypot(double __x, double __y) throw(); extern double __hypot(double __x, double __y) throw(); 
# 152
extern double cbrt(double __x) throw(); extern double __cbrt(double __x) throw(); 
# 159
extern double ceil(double __x) throw() __attribute((const)); extern double __ceil(double __x) throw() __attribute((const)); 
# 162
extern double fabs(double __x) throw() __attribute((const)); extern double __fabs(double __x) throw() __attribute((const)); 
# 165
extern double floor(double __x) throw() __attribute((const)); extern double __floor(double __x) throw() __attribute((const)); 
# 168
extern double fmod(double __x, double __y) throw(); extern double __fmod(double __x, double __y) throw(); 
# 182 "/usr/include/x86_64-linux-gnu/bits/mathcalls.h" 3
extern int finite(double __value) throw() __attribute((const)); 
# 185
extern double drem(double __x, double __y) throw(); extern double __drem(double __x, double __y) throw(); 
# 189
extern double significand(double __x) throw(); extern double __significand(double __x) throw(); 
# 196
extern double copysign(double __x, double __y) throw() __attribute((const)); extern double __copysign(double __x, double __y) throw() __attribute((const)); 
# 201
extern double nan(const char * __tagb) throw(); extern double __nan(const char * __tagb) throw(); 
# 217 "/usr/include/x86_64-linux-gnu/bits/mathcalls.h" 3
extern double j0(double) throw(); extern double __j0(double) throw(); 
# 218
extern double j1(double) throw(); extern double __j1(double) throw(); 
# 219
extern double jn(int, double) throw(); extern double __jn(int, double) throw(); 
# 220
extern double y0(double) throw(); extern double __y0(double) throw(); 
# 221
extern double y1(double) throw(); extern double __y1(double) throw(); 
# 222
extern double yn(int, double) throw(); extern double __yn(int, double) throw(); 
# 228
extern double erf(double) throw(); extern double __erf(double) throw(); 
# 229
extern double erfc(double) throw(); extern double __erfc(double) throw(); 
# 230
extern double lgamma(double) throw(); extern double __lgamma(double) throw(); 
# 235
extern double tgamma(double) throw(); extern double __tgamma(double) throw(); 
# 241
extern double gamma(double) throw(); extern double __gamma(double) throw(); 
# 249
extern double lgamma_r(double, int * __signgamp) throw(); extern double __lgamma_r(double, int * __signgamp) throw(); 
# 256
extern double rint(double __x) throw(); extern double __rint(double __x) throw(); 
# 259
extern double nextafter(double __x, double __y) throw(); extern double __nextafter(double __x, double __y) throw(); 
# 261
extern double nexttoward(double __x, long double __y) throw(); extern double __nexttoward(double __x, long double __y) throw(); 
# 266
extern double nextdown(double __x) throw(); extern double __nextdown(double __x) throw(); 
# 268
extern double nextup(double __x) throw(); extern double __nextup(double __x) throw(); 
# 272
extern double remainder(double __x, double __y) throw(); extern double __remainder(double __x, double __y) throw(); 
# 276
extern double scalbn(double __x, int __n) throw(); extern double __scalbn(double __x, int __n) throw(); 
# 280
extern int ilogb(double __x) throw(); extern int __ilogb(double __x) throw(); 
# 285
extern long llogb(double __x) throw(); extern long __llogb(double __x) throw(); 
# 290
extern double scalbln(double __x, long __n) throw(); extern double __scalbln(double __x, long __n) throw(); 
# 294
extern double nearbyint(double __x) throw(); extern double __nearbyint(double __x) throw(); 
# 298
extern double round(double __x) throw() __attribute((const)); extern double __round(double __x) throw() __attribute((const)); 
# 302
extern double trunc(double __x) throw() __attribute((const)); extern double __trunc(double __x) throw() __attribute((const)); 
# 307
extern double remquo(double __x, double __y, int * __quo) throw(); extern double __remquo(double __x, double __y, int * __quo) throw(); 
# 314
extern long lrint(double __x) throw(); extern long __lrint(double __x) throw(); 
# 316
__extension__ extern long long llrint(double __x) throw(); extern long long __llrint(double __x) throw(); 
# 320
extern long lround(double __x) throw(); extern long __lround(double __x) throw(); 
# 322
__extension__ extern long long llround(double __x) throw(); extern long long __llround(double __x) throw(); 
# 326
extern double fdim(double __x, double __y) throw(); extern double __fdim(double __x, double __y) throw(); 
# 329
extern double fmax(double __x, double __y) throw() __attribute((const)); extern double __fmax(double __x, double __y) throw() __attribute((const)); 
# 332
extern double fmin(double __x, double __y) throw() __attribute((const)); extern double __fmin(double __x, double __y) throw() __attribute((const)); 
# 335
extern double fma(double __x, double __y, double __z) throw(); extern double __fma(double __x, double __y, double __z) throw(); 
# 340
extern double roundeven(double __x) throw() __attribute((const)); extern double __roundeven(double __x) throw() __attribute((const)); 
# 344
extern __intmax_t fromfp(double __x, int __round, unsigned __width) throw(); extern __intmax_t __fromfp(double __x, int __round, unsigned __width) throw(); 
# 349
extern __uintmax_t ufromfp(double __x, int __round, unsigned __width) throw(); extern __uintmax_t __ufromfp(double __x, int __round, unsigned __width) throw(); 
# 355
extern __intmax_t fromfpx(double __x, int __round, unsigned __width) throw(); extern __intmax_t __fromfpx(double __x, int __round, unsigned __width) throw(); 
# 361
extern __uintmax_t ufromfpx(double __x, int __round, unsigned __width) throw(); extern __uintmax_t __ufromfpx(double __x, int __round, unsigned __width) throw(); 
# 365
extern double fmaxmag(double __x, double __y) throw() __attribute((const)); extern double __fmaxmag(double __x, double __y) throw() __attribute((const)); 
# 368
extern double fminmag(double __x, double __y) throw() __attribute((const)); extern double __fminmag(double __x, double __y) throw() __attribute((const)); 
# 371
extern int canonicalize(double * __cx, const double * __x) throw(); 
# 376
extern int totalorder(const double * __x, const double * __y) throw()
# 378
 __attribute((__pure__)); 
# 381
extern int totalordermag(const double * __x, const double * __y) throw()
# 383
 __attribute((__pure__)); 
# 386
extern double getpayload(const double * __x) throw(); extern double __getpayload(const double * __x) throw(); 
# 389
extern int setpayload(double * __x, double __payload) throw(); 
# 392
extern int setpayloadsig(double * __x, double __payload) throw(); 
# 400
extern double scalb(double __x, double __n) throw(); extern double __scalb(double __x, double __n) throw(); 
# 21 "/usr/include/x86_64-linux-gnu/bits/mathcalls-helper-functions.h" 3
extern int __fpclassifyf(float __value) throw()
# 22
 __attribute((const)); 
# 25
extern int __signbitf(float __value) throw()
# 26
 __attribute((const)); 
# 30
extern int __isinff(float __value) throw() __attribute((const)); 
# 33
extern int __finitef(float __value) throw() __attribute((const)); 
# 36
extern int __isnanf(float __value) throw() __attribute((const)); 
# 39
extern int __iseqsigf(float __x, float __y) throw(); 
# 42
extern int __issignalingf(float __value) throw()
# 43
 __attribute((const)); 
# 53 "/usr/include/x86_64-linux-gnu/bits/mathcalls.h" 3
extern float acosf(float __x) throw(); extern float __acosf(float __x) throw(); 
# 55
extern float asinf(float __x) throw(); extern float __asinf(float __x) throw(); 
# 57
extern float atanf(float __x) throw(); extern float __atanf(float __x) throw(); 
# 59
extern float atan2f(float __y, float __x) throw(); extern float __atan2f(float __y, float __x) throw(); 
# 62
extern float cosf(float __x) throw(); 
# 64
extern float sinf(float __x) throw(); 
# 66
extern float tanf(float __x) throw(); 
# 71
extern float coshf(float __x) throw(); extern float __coshf(float __x) throw(); 
# 73
extern float sinhf(float __x) throw(); extern float __sinhf(float __x) throw(); 
# 75
extern float tanhf(float __x) throw(); extern float __tanhf(float __x) throw(); 
# 79
extern void sincosf(float __x, float * __sinx, float * __cosx) throw(); 
# 85
extern float acoshf(float __x) throw(); extern float __acoshf(float __x) throw(); 
# 87
extern float asinhf(float __x) throw(); extern float __asinhf(float __x) throw(); 
# 89
extern float atanhf(float __x) throw(); extern float __atanhf(float __x) throw(); 
# 95
extern float expf(float __x) throw(); 
# 98
extern float frexpf(float __x, int * __exponent) throw(); extern float __frexpf(float __x, int * __exponent) throw(); 
# 101
extern float ldexpf(float __x, int __exponent) throw(); extern float __ldexpf(float __x, int __exponent) throw(); 
# 104
extern float logf(float __x) throw(); 
# 107
extern float log10f(float __x) throw(); 
# 110
extern float modff(float __x, float * __iptr) throw(); extern float __modff(float __x, float * __iptr) throw() __attribute((__nonnull__(2))); 
# 114
extern float exp10f(float __x) throw(); 
# 119
extern float expm1f(float __x) throw(); extern float __expm1f(float __x) throw(); 
# 122
extern float log1pf(float __x) throw(); extern float __log1pf(float __x) throw(); 
# 125
extern float logbf(float __x) throw(); extern float __logbf(float __x) throw(); 
# 130
extern float exp2f(float __x) throw(); extern float __exp2f(float __x) throw(); 
# 133
extern float log2f(float __x) throw(); 
# 140
extern float powf(float __x, float __y) throw(); 
# 143
extern float sqrtf(float __x) throw(); extern float __sqrtf(float __x) throw(); 
# 147
extern float hypotf(float __x, float __y) throw(); extern float __hypotf(float __x, float __y) throw(); 
# 152
extern float cbrtf(float __x) throw(); extern float __cbrtf(float __x) throw(); 
# 159
extern float ceilf(float __x) throw() __attribute((const)); extern float __ceilf(float __x) throw() __attribute((const)); 
# 162
extern float fabsf(float __x) throw() __attribute((const)); extern float __fabsf(float __x) throw() __attribute((const)); 
# 165
extern float floorf(float __x) throw() __attribute((const)); extern float __floorf(float __x) throw() __attribute((const)); 
# 168
extern float fmodf(float __x, float __y) throw(); extern float __fmodf(float __x, float __y) throw(); 
# 177 "/usr/include/x86_64-linux-gnu/bits/mathcalls.h" 3
extern int isinff(float __value) throw() __attribute((const)); 
# 182
extern int finitef(float __value) throw() __attribute((const)); 
# 185
extern float dremf(float __x, float __y) throw(); extern float __dremf(float __x, float __y) throw(); 
# 189
extern float significandf(float __x) throw(); extern float __significandf(float __x) throw(); 
# 196
extern float copysignf(float __x, float __y) throw() __attribute((const)); extern float __copysignf(float __x, float __y) throw() __attribute((const)); 
# 201
extern float nanf(const char * __tagb) throw(); extern float __nanf(const char * __tagb) throw(); 
# 211 "/usr/include/x86_64-linux-gnu/bits/mathcalls.h" 3
extern int isnanf(float __value) throw() __attribute((const)); 
# 217
extern float j0f(float) throw(); extern float __j0f(float) throw(); 
# 218
extern float j1f(float) throw(); extern float __j1f(float) throw(); 
# 219
extern float jnf(int, float) throw(); extern float __jnf(int, float) throw(); 
# 220
extern float y0f(float) throw(); extern float __y0f(float) throw(); 
# 221
extern float y1f(float) throw(); extern float __y1f(float) throw(); 
# 222
extern float ynf(int, float) throw(); extern float __ynf(int, float) throw(); 
# 228
extern float erff(float) throw(); extern float __erff(float) throw(); 
# 229
extern float erfcf(float) throw(); extern float __erfcf(float) throw(); 
# 230
extern float lgammaf(float) throw(); extern float __lgammaf(float) throw(); 
# 235
extern float tgammaf(float) throw(); extern float __tgammaf(float) throw(); 
# 241
extern float gammaf(float) throw(); extern float __gammaf(float) throw(); 
# 249
extern float lgammaf_r(float, int * __signgamp) throw(); extern float __lgammaf_r(float, int * __signgamp) throw(); 
# 256
extern float rintf(float __x) throw(); extern float __rintf(float __x) throw(); 
# 259
extern float nextafterf(float __x, float __y) throw(); extern float __nextafterf(float __x, float __y) throw(); 
# 261
extern float nexttowardf(float __x, long double __y) throw(); extern float __nexttowardf(float __x, long double __y) throw(); 
# 266
extern float nextdownf(float __x) throw(); extern float __nextdownf(float __x) throw(); 
# 268
extern float nextupf(float __x) throw(); extern float __nextupf(float __x) throw(); 
# 272
extern float remainderf(float __x, float __y) throw(); extern float __remainderf(float __x, float __y) throw(); 
# 276
extern float scalbnf(float __x, int __n) throw(); extern float __scalbnf(float __x, int __n) throw(); 
# 280
extern int ilogbf(float __x) throw(); extern int __ilogbf(float __x) throw(); 
# 285
extern long llogbf(float __x) throw(); extern long __llogbf(float __x) throw(); 
# 290
extern float scalblnf(float __x, long __n) throw(); extern float __scalblnf(float __x, long __n) throw(); 
# 294
extern float nearbyintf(float __x) throw(); extern float __nearbyintf(float __x) throw(); 
# 298
extern float roundf(float __x) throw() __attribute((const)); extern float __roundf(float __x) throw() __attribute((const)); 
# 302
extern float truncf(float __x) throw() __attribute((const)); extern float __truncf(float __x) throw() __attribute((const)); 
# 307
extern float remquof(float __x, float __y, int * __quo) throw(); extern float __remquof(float __x, float __y, int * __quo) throw(); 
# 314
extern long lrintf(float __x) throw(); extern long __lrintf(float __x) throw(); 
# 316
__extension__ extern long long llrintf(float __x) throw(); extern long long __llrintf(float __x) throw(); 
# 320
extern long lroundf(float __x) throw(); extern long __lroundf(float __x) throw(); 
# 322
__extension__ extern long long llroundf(float __x) throw(); extern long long __llroundf(float __x) throw(); 
# 326
extern float fdimf(float __x, float __y) throw(); extern float __fdimf(float __x, float __y) throw(); 
# 329
extern float fmaxf(float __x, float __y) throw() __attribute((const)); extern float __fmaxf(float __x, float __y) throw() __attribute((const)); 
# 332
extern float fminf(float __x, float __y) throw() __attribute((const)); extern float __fminf(float __x, float __y) throw() __attribute((const)); 
# 335
extern float fmaf(float __x, float __y, float __z) throw(); extern float __fmaf(float __x, float __y, float __z) throw(); 
# 340
extern float roundevenf(float __x) throw() __attribute((const)); extern float __roundevenf(float __x) throw() __attribute((const)); 
# 344
extern __intmax_t fromfpf(float __x, int __round, unsigned __width) throw(); extern __intmax_t __fromfpf(float __x, int __round, unsigned __width) throw(); 
# 349
extern __uintmax_t ufromfpf(float __x, int __round, unsigned __width) throw(); extern __uintmax_t __ufromfpf(float __x, int __round, unsigned __width) throw(); 
# 355
extern __intmax_t fromfpxf(float __x, int __round, unsigned __width) throw(); extern __intmax_t __fromfpxf(float __x, int __round, unsigned __width) throw(); 
# 361
extern __uintmax_t ufromfpxf(float __x, int __round, unsigned __width) throw(); extern __uintmax_t __ufromfpxf(float __x, int __round, unsigned __width) throw(); 
# 365
extern float fmaxmagf(float __x, float __y) throw() __attribute((const)); extern float __fmaxmagf(float __x, float __y) throw() __attribute((const)); 
# 368
extern float fminmagf(float __x, float __y) throw() __attribute((const)); extern float __fminmagf(float __x, float __y) throw() __attribute((const)); 
# 371
extern int canonicalizef(float * __cx, const float * __x) throw(); 
# 376
extern int totalorderf(const float * __x, const float * __y) throw()
# 378
 __attribute((__pure__)); 
# 381
extern int totalordermagf(const float * __x, const float * __y) throw()
# 383
 __attribute((__pure__)); 
# 386
extern float getpayloadf(const float * __x) throw(); extern float __getpayloadf(const float * __x) throw(); 
# 389
extern int setpayloadf(float * __x, float __payload) throw(); 
# 392
extern int setpayloadsigf(float * __x, float __payload) throw(); 
# 400
extern float scalbf(float __x, float __n) throw(); extern float __scalbf(float __x, float __n) throw(); 
# 21 "/usr/include/x86_64-linux-gnu/bits/mathcalls-helper-functions.h" 3
extern int __fpclassifyl(long double __value) throw()
# 22
 __attribute((const)); 
# 25
extern int __signbitl(long double __value) throw()
# 26
 __attribute((const)); 
# 30
extern int __isinfl(long double __value) throw() __attribute((const)); 
# 33
extern int __finitel(long double __value) throw() __attribute((const)); 
# 36
extern int __isnanl(long double __value) throw() __attribute((const)); 
# 39
extern int __iseqsigl(long double __x, long double __y) throw(); 
# 42
extern int __issignalingl(long double __value) throw()
# 43
 __attribute((const)); 
# 53 "/usr/include/x86_64-linux-gnu/bits/mathcalls.h" 3
extern long double acosl(long double __x) throw(); extern long double __acosl(long double __x) throw(); 
# 55
extern long double asinl(long double __x) throw(); extern long double __asinl(long double __x) throw(); 
# 57
extern long double atanl(long double __x) throw(); extern long double __atanl(long double __x) throw(); 
# 59
extern long double atan2l(long double __y, long double __x) throw(); extern long double __atan2l(long double __y, long double __x) throw(); 
# 62
extern long double cosl(long double __x) throw(); extern long double __cosl(long double __x) throw(); 
# 64
extern long double sinl(long double __x) throw(); extern long double __sinl(long double __x) throw(); 
# 66
extern long double tanl(long double __x) throw(); extern long double __tanl(long double __x) throw(); 
# 71
extern long double coshl(long double __x) throw(); extern long double __coshl(long double __x) throw(); 
# 73
extern long double sinhl(long double __x) throw(); extern long double __sinhl(long double __x) throw(); 
# 75
extern long double tanhl(long double __x) throw(); extern long double __tanhl(long double __x) throw(); 
# 79
extern void sincosl(long double __x, long double * __sinx, long double * __cosx) throw(); extern void __sincosl(long double __x, long double * __sinx, long double * __cosx) throw(); 
# 85
extern long double acoshl(long double __x) throw(); extern long double __acoshl(long double __x) throw(); 
# 87
extern long double asinhl(long double __x) throw(); extern long double __asinhl(long double __x) throw(); 
# 89
extern long double atanhl(long double __x) throw(); extern long double __atanhl(long double __x) throw(); 
# 95
extern long double expl(long double __x) throw(); extern long double __expl(long double __x) throw(); 
# 98
extern long double frexpl(long double __x, int * __exponent) throw(); extern long double __frexpl(long double __x, int * __exponent) throw(); 
# 101
extern long double ldexpl(long double __x, int __exponent) throw(); extern long double __ldexpl(long double __x, int __exponent) throw(); 
# 104
extern long double logl(long double __x) throw(); extern long double __logl(long double __x) throw(); 
# 107
extern long double log10l(long double __x) throw(); extern long double __log10l(long double __x) throw(); 
# 110
extern long double modfl(long double __x, long double * __iptr) throw(); extern long double __modfl(long double __x, long double * __iptr) throw() __attribute((__nonnull__(2))); 
# 114
extern long double exp10l(long double __x) throw(); extern long double __exp10l(long double __x) throw(); 
# 119
extern long double expm1l(long double __x) throw(); extern long double __expm1l(long double __x) throw(); 
# 122
extern long double log1pl(long double __x) throw(); extern long double __log1pl(long double __x) throw(); 
# 125
extern long double logbl(long double __x) throw(); extern long double __logbl(long double __x) throw(); 
# 130
extern long double exp2l(long double __x) throw(); extern long double __exp2l(long double __x) throw(); 
# 133
extern long double log2l(long double __x) throw(); extern long double __log2l(long double __x) throw(); 
# 140
extern long double powl(long double __x, long double __y) throw(); extern long double __powl(long double __x, long double __y) throw(); 
# 143
extern long double sqrtl(long double __x) throw(); extern long double __sqrtl(long double __x) throw(); 
# 147
extern long double hypotl(long double __x, long double __y) throw(); extern long double __hypotl(long double __x, long double __y) throw(); 
# 152
extern long double cbrtl(long double __x) throw(); extern long double __cbrtl(long double __x) throw(); 
# 159
extern long double ceill(long double __x) throw() __attribute((const)); extern long double __ceill(long double __x) throw() __attribute((const)); 
# 162
extern long double fabsl(long double __x) throw() __attribute((const)); extern long double __fabsl(long double __x) throw() __attribute((const)); 
# 165
extern long double floorl(long double __x) throw() __attribute((const)); extern long double __floorl(long double __x) throw() __attribute((const)); 
# 168
extern long double fmodl(long double __x, long double __y) throw(); extern long double __fmodl(long double __x, long double __y) throw(); 
# 177 "/usr/include/x86_64-linux-gnu/bits/mathcalls.h" 3
extern int isinfl(long double __value) throw() __attribute((const)); 
# 182
extern int finitel(long double __value) throw() __attribute((const)); 
# 185
extern long double dreml(long double __x, long double __y) throw(); extern long double __dreml(long double __x, long double __y) throw(); 
# 189
extern long double significandl(long double __x) throw(); extern long double __significandl(long double __x) throw(); 
# 196
extern long double copysignl(long double __x, long double __y) throw() __attribute((const)); extern long double __copysignl(long double __x, long double __y) throw() __attribute((const)); 
# 201
extern long double nanl(const char * __tagb) throw(); extern long double __nanl(const char * __tagb) throw(); 
# 211 "/usr/include/x86_64-linux-gnu/bits/mathcalls.h" 3
extern int isnanl(long double __value) throw() __attribute((const)); 
# 217
extern long double j0l(long double) throw(); extern long double __j0l(long double) throw(); 
# 218
extern long double j1l(long double) throw(); extern long double __j1l(long double) throw(); 
# 219
extern long double jnl(int, long double) throw(); extern long double __jnl(int, long double) throw(); 
# 220
extern long double y0l(long double) throw(); extern long double __y0l(long double) throw(); 
# 221
extern long double y1l(long double) throw(); extern long double __y1l(long double) throw(); 
# 222
extern long double ynl(int, long double) throw(); extern long double __ynl(int, long double) throw(); 
# 228
extern long double erfl(long double) throw(); extern long double __erfl(long double) throw(); 
# 229
extern long double erfcl(long double) throw(); extern long double __erfcl(long double) throw(); 
# 230
extern long double lgammal(long double) throw(); extern long double __lgammal(long double) throw(); 
# 235
extern long double tgammal(long double) throw(); extern long double __tgammal(long double) throw(); 
# 241
extern long double gammal(long double) throw(); extern long double __gammal(long double) throw(); 
# 249
extern long double lgammal_r(long double, int * __signgamp) throw(); extern long double __lgammal_r(long double, int * __signgamp) throw(); 
# 256
extern long double rintl(long double __x) throw(); extern long double __rintl(long double __x) throw(); 
# 259
extern long double nextafterl(long double __x, long double __y) throw(); extern long double __nextafterl(long double __x, long double __y) throw(); 
# 261
extern long double nexttowardl(long double __x, long double __y) throw(); extern long double __nexttowardl(long double __x, long double __y) throw(); 
# 266
extern long double nextdownl(long double __x) throw(); extern long double __nextdownl(long double __x) throw(); 
# 268
extern long double nextupl(long double __x) throw(); extern long double __nextupl(long double __x) throw(); 
# 272
extern long double remainderl(long double __x, long double __y) throw(); extern long double __remainderl(long double __x, long double __y) throw(); 
# 276
extern long double scalbnl(long double __x, int __n) throw(); extern long double __scalbnl(long double __x, int __n) throw(); 
# 280
extern int ilogbl(long double __x) throw(); extern int __ilogbl(long double __x) throw(); 
# 285
extern long llogbl(long double __x) throw(); extern long __llogbl(long double __x) throw(); 
# 290
extern long double scalblnl(long double __x, long __n) throw(); extern long double __scalblnl(long double __x, long __n) throw(); 
# 294
extern long double nearbyintl(long double __x) throw(); extern long double __nearbyintl(long double __x) throw(); 
# 298
extern long double roundl(long double __x) throw() __attribute((const)); extern long double __roundl(long double __x) throw() __attribute((const)); 
# 302
extern long double truncl(long double __x) throw() __attribute((const)); extern long double __truncl(long double __x) throw() __attribute((const)); 
# 307
extern long double remquol(long double __x, long double __y, int * __quo) throw(); extern long double __remquol(long double __x, long double __y, int * __quo) throw(); 
# 314
extern long lrintl(long double __x) throw(); extern long __lrintl(long double __x) throw(); 
# 316
__extension__ extern long long llrintl(long double __x) throw(); extern long long __llrintl(long double __x) throw(); 
# 320
extern long lroundl(long double __x) throw(); extern long __lroundl(long double __x) throw(); 
# 322
__extension__ extern long long llroundl(long double __x) throw(); extern long long __llroundl(long double __x) throw(); 
# 326
extern long double fdiml(long double __x, long double __y) throw(); extern long double __fdiml(long double __x, long double __y) throw(); 
# 329
extern long double fmaxl(long double __x, long double __y) throw() __attribute((const)); extern long double __fmaxl(long double __x, long double __y) throw() __attribute((const)); 
# 332
extern long double fminl(long double __x, long double __y) throw() __attribute((const)); extern long double __fminl(long double __x, long double __y) throw() __attribute((const)); 
# 335
extern long double fmal(long double __x, long double __y, long double __z) throw(); extern long double __fmal(long double __x, long double __y, long double __z) throw(); 
# 340
extern long double roundevenl(long double __x) throw() __attribute((const)); extern long double __roundevenl(long double __x) throw() __attribute((const)); 
# 344
extern __intmax_t fromfpl(long double __x, int __round, unsigned __width) throw(); extern __intmax_t __fromfpl(long double __x, int __round, unsigned __width) throw(); 
# 349
extern __uintmax_t ufromfpl(long double __x, int __round, unsigned __width) throw(); extern __uintmax_t __ufromfpl(long double __x, int __round, unsigned __width) throw(); 
# 355
extern __intmax_t fromfpxl(long double __x, int __round, unsigned __width) throw(); extern __intmax_t __fromfpxl(long double __x, int __round, unsigned __width) throw(); 
# 361
extern __uintmax_t ufromfpxl(long double __x, int __round, unsigned __width) throw(); extern __uintmax_t __ufromfpxl(long double __x, int __round, unsigned __width) throw(); 
# 365
extern long double fmaxmagl(long double __x, long double __y) throw() __attribute((const)); extern long double __fmaxmagl(long double __x, long double __y) throw() __attribute((const)); 
# 368
extern long double fminmagl(long double __x, long double __y) throw() __attribute((const)); extern long double __fminmagl(long double __x, long double __y) throw() __attribute((const)); 
# 371
extern int canonicalizel(long double * __cx, const long double * __x) throw(); 
# 376
extern int totalorderl(const long double * __x, const long double * __y) throw()
# 378
 __attribute((__pure__)); 
# 381
extern int totalordermagl(const long double * __x, const long double * __y) throw()
# 383
 __attribute((__pure__)); 
# 386
extern long double getpayloadl(const long double * __x) throw(); extern long double __getpayloadl(const long double * __x) throw(); 
# 389
extern int setpayloadl(long double * __x, long double __payload) throw(); 
# 392
extern int setpayloadsigl(long double * __x, long double __payload) throw(); 
# 400
extern long double scalbl(long double __x, long double __n) throw(); extern long double __scalbl(long double __x, long double __n) throw(); 
# 53 "/usr/include/x86_64-linux-gnu/bits/mathcalls.h" 3
extern _Float32 acosf32(_Float32 __x) throw(); extern _Float32 __acosf32(_Float32 __x) throw(); 
# 55
extern _Float32 asinf32(_Float32 __x) throw(); extern _Float32 __asinf32(_Float32 __x) throw(); 
# 57
extern _Float32 atanf32(_Float32 __x) throw(); extern _Float32 __atanf32(_Float32 __x) throw(); 
# 59
extern _Float32 atan2f32(_Float32 __y, _Float32 __x) throw(); extern _Float32 __atan2f32(_Float32 __y, _Float32 __x) throw(); 
# 62
extern _Float32 cosf32(_Float32 __x) throw(); extern _Float32 __cosf32(_Float32 __x) throw(); 
# 64
extern _Float32 sinf32(_Float32 __x) throw(); extern _Float32 __sinf32(_Float32 __x) throw(); 
# 66
extern _Float32 tanf32(_Float32 __x) throw(); extern _Float32 __tanf32(_Float32 __x) throw(); 
# 71
extern _Float32 coshf32(_Float32 __x) throw(); extern _Float32 __coshf32(_Float32 __x) throw(); 
# 73
extern _Float32 sinhf32(_Float32 __x) throw(); extern _Float32 __sinhf32(_Float32 __x) throw(); 
# 75
extern _Float32 tanhf32(_Float32 __x) throw(); extern _Float32 __tanhf32(_Float32 __x) throw(); 
# 79
extern void sincosf32(_Float32 __x, _Float32 * __sinx, _Float32 * __cosx) throw(); extern void __sincosf32(_Float32 __x, _Float32 * __sinx, _Float32 * __cosx) throw(); 
# 85
extern _Float32 acoshf32(_Float32 __x) throw(); extern _Float32 __acoshf32(_Float32 __x) throw(); 
# 87
extern _Float32 asinhf32(_Float32 __x) throw(); extern _Float32 __asinhf32(_Float32 __x) throw(); 
# 89
extern _Float32 atanhf32(_Float32 __x) throw(); extern _Float32 __atanhf32(_Float32 __x) throw(); 
# 95
extern _Float32 expf32(_Float32 __x) throw(); extern _Float32 __expf32(_Float32 __x) throw(); 
# 98
extern _Float32 frexpf32(_Float32 __x, int * __exponent) throw(); extern _Float32 __frexpf32(_Float32 __x, int * __exponent) throw(); 
# 101
extern _Float32 ldexpf32(_Float32 __x, int __exponent) throw(); extern _Float32 __ldexpf32(_Float32 __x, int __exponent) throw(); 
# 104
extern _Float32 logf32(_Float32 __x) throw(); extern _Float32 __logf32(_Float32 __x) throw(); 
# 107
extern _Float32 log10f32(_Float32 __x) throw(); extern _Float32 __log10f32(_Float32 __x) throw(); 
# 110
extern _Float32 modff32(_Float32 __x, _Float32 * __iptr) throw(); extern _Float32 __modff32(_Float32 __x, _Float32 * __iptr) throw() __attribute((__nonnull__(2))); 
# 114
extern _Float32 exp10f32(_Float32 __x) throw(); extern _Float32 __exp10f32(_Float32 __x) throw(); 
# 119
extern _Float32 expm1f32(_Float32 __x) throw(); extern _Float32 __expm1f32(_Float32 __x) throw(); 
# 122
extern _Float32 log1pf32(_Float32 __x) throw(); extern _Float32 __log1pf32(_Float32 __x) throw(); 
# 125
extern _Float32 logbf32(_Float32 __x) throw(); extern _Float32 __logbf32(_Float32 __x) throw(); 
# 130
extern _Float32 exp2f32(_Float32 __x) throw(); extern _Float32 __exp2f32(_Float32 __x) throw(); 
# 133
extern _Float32 log2f32(_Float32 __x) throw(); extern _Float32 __log2f32(_Float32 __x) throw(); 
# 140
extern _Float32 powf32(_Float32 __x, _Float32 __y) throw(); extern _Float32 __powf32(_Float32 __x, _Float32 __y) throw(); 
# 143
extern _Float32 sqrtf32(_Float32 __x) throw(); extern _Float32 __sqrtf32(_Float32 __x) throw(); 
# 147
extern _Float32 hypotf32(_Float32 __x, _Float32 __y) throw(); extern _Float32 __hypotf32(_Float32 __x, _Float32 __y) throw(); 
# 152
extern _Float32 cbrtf32(_Float32 __x) throw(); extern _Float32 __cbrtf32(_Float32 __x) throw(); 
# 159
extern _Float32 ceilf32(_Float32 __x) throw() __attribute((const)); extern _Float32 __ceilf32(_Float32 __x) throw() __attribute((const)); 
# 162
extern _Float32 fabsf32(_Float32 __x) throw() __attribute((const)); extern _Float32 __fabsf32(_Float32 __x) throw() __attribute((const)); 
# 165
extern _Float32 floorf32(_Float32 __x) throw() __attribute((const)); extern _Float32 __floorf32(_Float32 __x) throw() __attribute((const)); 
# 168
extern _Float32 fmodf32(_Float32 __x, _Float32 __y) throw(); extern _Float32 __fmodf32(_Float32 __x, _Float32 __y) throw(); 
# 196 "/usr/include/x86_64-linux-gnu/bits/mathcalls.h" 3
extern _Float32 copysignf32(_Float32 __x, _Float32 __y) throw() __attribute((const)); extern _Float32 __copysignf32(_Float32 __x, _Float32 __y) throw() __attribute((const)); 
# 201
extern _Float32 nanf32(const char * __tagb) throw(); extern _Float32 __nanf32(const char * __tagb) throw(); 
# 217 "/usr/include/x86_64-linux-gnu/bits/mathcalls.h" 3
extern _Float32 j0f32(_Float32) throw(); extern _Float32 __j0f32(_Float32) throw(); 
# 218
extern _Float32 j1f32(_Float32) throw(); extern _Float32 __j1f32(_Float32) throw(); 
# 219
extern _Float32 jnf32(int, _Float32) throw(); extern _Float32 __jnf32(int, _Float32) throw(); 
# 220
extern _Float32 y0f32(_Float32) throw(); extern _Float32 __y0f32(_Float32) throw(); 
# 221
extern _Float32 y1f32(_Float32) throw(); extern _Float32 __y1f32(_Float32) throw(); 
# 222
extern _Float32 ynf32(int, _Float32) throw(); extern _Float32 __ynf32(int, _Float32) throw(); 
# 228
extern _Float32 erff32(_Float32) throw(); extern _Float32 __erff32(_Float32) throw(); 
# 229
extern _Float32 erfcf32(_Float32) throw(); extern _Float32 __erfcf32(_Float32) throw(); 
# 230
extern _Float32 lgammaf32(_Float32) throw(); extern _Float32 __lgammaf32(_Float32) throw(); 
# 235
extern _Float32 tgammaf32(_Float32) throw(); extern _Float32 __tgammaf32(_Float32) throw(); 
# 249 "/usr/include/x86_64-linux-gnu/bits/mathcalls.h" 3
extern _Float32 lgammaf32_r(_Float32, int * __signgamp) throw(); extern _Float32 __lgammaf32_r(_Float32, int * __signgamp) throw(); 
# 256
extern _Float32 rintf32(_Float32 __x) throw(); extern _Float32 __rintf32(_Float32 __x) throw(); 
# 259
extern _Float32 nextafterf32(_Float32 __x, _Float32 __y) throw(); extern _Float32 __nextafterf32(_Float32 __x, _Float32 __y) throw(); 
# 266
extern _Float32 nextdownf32(_Float32 __x) throw(); extern _Float32 __nextdownf32(_Float32 __x) throw(); 
# 268
extern _Float32 nextupf32(_Float32 __x) throw(); extern _Float32 __nextupf32(_Float32 __x) throw(); 
# 272
extern _Float32 remainderf32(_Float32 __x, _Float32 __y) throw(); extern _Float32 __remainderf32(_Float32 __x, _Float32 __y) throw(); 
# 276
extern _Float32 scalbnf32(_Float32 __x, int __n) throw(); extern _Float32 __scalbnf32(_Float32 __x, int __n) throw(); 
# 280
extern int ilogbf32(_Float32 __x) throw(); extern int __ilogbf32(_Float32 __x) throw(); 
# 285
extern long llogbf32(_Float32 __x) throw(); extern long __llogbf32(_Float32 __x) throw(); 
# 290
extern _Float32 scalblnf32(_Float32 __x, long __n) throw(); extern _Float32 __scalblnf32(_Float32 __x, long __n) throw(); 
# 294
extern _Float32 nearbyintf32(_Float32 __x) throw(); extern _Float32 __nearbyintf32(_Float32 __x) throw(); 
# 298
extern _Float32 roundf32(_Float32 __x) throw() __attribute((const)); extern _Float32 __roundf32(_Float32 __x) throw() __attribute((const)); 
# 302
extern _Float32 truncf32(_Float32 __x) throw() __attribute((const)); extern _Float32 __truncf32(_Float32 __x) throw() __attribute((const)); 
# 307
extern _Float32 remquof32(_Float32 __x, _Float32 __y, int * __quo) throw(); extern _Float32 __remquof32(_Float32 __x, _Float32 __y, int * __quo) throw(); 
# 314
extern long lrintf32(_Float32 __x) throw(); extern long __lrintf32(_Float32 __x) throw(); 
# 316
__extension__ extern long long llrintf32(_Float32 __x) throw(); extern long long __llrintf32(_Float32 __x) throw(); 
# 320
extern long lroundf32(_Float32 __x) throw(); extern long __lroundf32(_Float32 __x) throw(); 
# 322
__extension__ extern long long llroundf32(_Float32 __x) throw(); extern long long __llroundf32(_Float32 __x) throw(); 
# 326
extern _Float32 fdimf32(_Float32 __x, _Float32 __y) throw(); extern _Float32 __fdimf32(_Float32 __x, _Float32 __y) throw(); 
# 329
extern _Float32 fmaxf32(_Float32 __x, _Float32 __y) throw() __attribute((const)); extern _Float32 __fmaxf32(_Float32 __x, _Float32 __y) throw() __attribute((const)); 
# 332
extern _Float32 fminf32(_Float32 __x, _Float32 __y) throw() __attribute((const)); extern _Float32 __fminf32(_Float32 __x, _Float32 __y) throw() __attribute((const)); 
# 335
extern _Float32 fmaf32(_Float32 __x, _Float32 __y, _Float32 __z) throw(); extern _Float32 __fmaf32(_Float32 __x, _Float32 __y, _Float32 __z) throw(); 
# 340
extern _Float32 roundevenf32(_Float32 __x) throw() __attribute((const)); extern _Float32 __roundevenf32(_Float32 __x) throw() __attribute((const)); 
# 344
extern __intmax_t fromfpf32(_Float32 __x, int __round, unsigned __width) throw(); extern __intmax_t __fromfpf32(_Float32 __x, int __round, unsigned __width) throw(); 
# 349
extern __uintmax_t ufromfpf32(_Float32 __x, int __round, unsigned __width) throw(); extern __uintmax_t __ufromfpf32(_Float32 __x, int __round, unsigned __width) throw(); 
# 355
extern __intmax_t fromfpxf32(_Float32 __x, int __round, unsigned __width) throw(); extern __intmax_t __fromfpxf32(_Float32 __x, int __round, unsigned __width) throw(); 
# 361
extern __uintmax_t ufromfpxf32(_Float32 __x, int __round, unsigned __width) throw(); extern __uintmax_t __ufromfpxf32(_Float32 __x, int __round, unsigned __width) throw(); 
# 365
extern _Float32 fmaxmagf32(_Float32 __x, _Float32 __y) throw() __attribute((const)); extern _Float32 __fmaxmagf32(_Float32 __x, _Float32 __y) throw() __attribute((const)); 
# 368
extern _Float32 fminmagf32(_Float32 __x, _Float32 __y) throw() __attribute((const)); extern _Float32 __fminmagf32(_Float32 __x, _Float32 __y) throw() __attribute((const)); 
# 371
extern int canonicalizef32(_Float32 * __cx, const _Float32 * __x) throw(); 
# 376
extern int totalorderf32(const _Float32 * __x, const _Float32 * __y) throw()
# 378
 __attribute((__pure__)); 
# 381
extern int totalordermagf32(const _Float32 * __x, const _Float32 * __y) throw()
# 383
 __attribute((__pure__)); 
# 386
extern _Float32 getpayloadf32(const _Float32 * __x) throw(); extern _Float32 __getpayloadf32(const _Float32 * __x) throw(); 
# 389
extern int setpayloadf32(_Float32 * __x, _Float32 __payload) throw(); 
# 392
extern int setpayloadsigf32(_Float32 * __x, _Float32 __payload) throw(); 
# 53 "/usr/include/x86_64-linux-gnu/bits/mathcalls.h" 3
extern _Float64 acosf64(_Float64 __x) throw(); extern _Float64 __acosf64(_Float64 __x) throw(); 
# 55
extern _Float64 asinf64(_Float64 __x) throw(); extern _Float64 __asinf64(_Float64 __x) throw(); 
# 57
extern _Float64 atanf64(_Float64 __x) throw(); extern _Float64 __atanf64(_Float64 __x) throw(); 
# 59
extern _Float64 atan2f64(_Float64 __y, _Float64 __x) throw(); extern _Float64 __atan2f64(_Float64 __y, _Float64 __x) throw(); 
# 62
extern _Float64 cosf64(_Float64 __x) throw(); extern _Float64 __cosf64(_Float64 __x) throw(); 
# 64
extern _Float64 sinf64(_Float64 __x) throw(); extern _Float64 __sinf64(_Float64 __x) throw(); 
# 66
extern _Float64 tanf64(_Float64 __x) throw(); extern _Float64 __tanf64(_Float64 __x) throw(); 
# 71
extern _Float64 coshf64(_Float64 __x) throw(); extern _Float64 __coshf64(_Float64 __x) throw(); 
# 73
extern _Float64 sinhf64(_Float64 __x) throw(); extern _Float64 __sinhf64(_Float64 __x) throw(); 
# 75
extern _Float64 tanhf64(_Float64 __x) throw(); extern _Float64 __tanhf64(_Float64 __x) throw(); 
# 79
extern void sincosf64(_Float64 __x, _Float64 * __sinx, _Float64 * __cosx) throw(); extern void __sincosf64(_Float64 __x, _Float64 * __sinx, _Float64 * __cosx) throw(); 
# 85
extern _Float64 acoshf64(_Float64 __x) throw(); extern _Float64 __acoshf64(_Float64 __x) throw(); 
# 87
extern _Float64 asinhf64(_Float64 __x) throw(); extern _Float64 __asinhf64(_Float64 __x) throw(); 
# 89
extern _Float64 atanhf64(_Float64 __x) throw(); extern _Float64 __atanhf64(_Float64 __x) throw(); 
# 95
extern _Float64 expf64(_Float64 __x) throw(); extern _Float64 __expf64(_Float64 __x) throw(); 
# 98
extern _Float64 frexpf64(_Float64 __x, int * __exponent) throw(); extern _Float64 __frexpf64(_Float64 __x, int * __exponent) throw(); 
# 101
extern _Float64 ldexpf64(_Float64 __x, int __exponent) throw(); extern _Float64 __ldexpf64(_Float64 __x, int __exponent) throw(); 
# 104
extern _Float64 logf64(_Float64 __x) throw(); extern _Float64 __logf64(_Float64 __x) throw(); 
# 107
extern _Float64 log10f64(_Float64 __x) throw(); extern _Float64 __log10f64(_Float64 __x) throw(); 
# 110
extern _Float64 modff64(_Float64 __x, _Float64 * __iptr) throw(); extern _Float64 __modff64(_Float64 __x, _Float64 * __iptr) throw() __attribute((__nonnull__(2))); 
# 114
extern _Float64 exp10f64(_Float64 __x) throw(); extern _Float64 __exp10f64(_Float64 __x) throw(); 
# 119
extern _Float64 expm1f64(_Float64 __x) throw(); extern _Float64 __expm1f64(_Float64 __x) throw(); 
# 122
extern _Float64 log1pf64(_Float64 __x) throw(); extern _Float64 __log1pf64(_Float64 __x) throw(); 
# 125
extern _Float64 logbf64(_Float64 __x) throw(); extern _Float64 __logbf64(_Float64 __x) throw(); 
# 130
extern _Float64 exp2f64(_Float64 __x) throw(); extern _Float64 __exp2f64(_Float64 __x) throw(); 
# 133
extern _Float64 log2f64(_Float64 __x) throw(); extern _Float64 __log2f64(_Float64 __x) throw(); 
# 140
extern _Float64 powf64(_Float64 __x, _Float64 __y) throw(); extern _Float64 __powf64(_Float64 __x, _Float64 __y) throw(); 
# 143
extern _Float64 sqrtf64(_Float64 __x) throw(); extern _Float64 __sqrtf64(_Float64 __x) throw(); 
# 147
extern _Float64 hypotf64(_Float64 __x, _Float64 __y) throw(); extern _Float64 __hypotf64(_Float64 __x, _Float64 __y) throw(); 
# 152
extern _Float64 cbrtf64(_Float64 __x) throw(); extern _Float64 __cbrtf64(_Float64 __x) throw(); 
# 159
extern _Float64 ceilf64(_Float64 __x) throw() __attribute((const)); extern _Float64 __ceilf64(_Float64 __x) throw() __attribute((const)); 
# 162
extern _Float64 fabsf64(_Float64 __x) throw() __attribute((const)); extern _Float64 __fabsf64(_Float64 __x) throw() __attribute((const)); 
# 165
extern _Float64 floorf64(_Float64 __x) throw() __attribute((const)); extern _Float64 __floorf64(_Float64 __x) throw() __attribute((const)); 
# 168
extern _Float64 fmodf64(_Float64 __x, _Float64 __y) throw(); extern _Float64 __fmodf64(_Float64 __x, _Float64 __y) throw(); 
# 196 "/usr/include/x86_64-linux-gnu/bits/mathcalls.h" 3
extern _Float64 copysignf64(_Float64 __x, _Float64 __y) throw() __attribute((const)); extern _Float64 __copysignf64(_Float64 __x, _Float64 __y) throw() __attribute((const)); 
# 201
extern _Float64 nanf64(const char * __tagb) throw(); extern _Float64 __nanf64(const char * __tagb) throw(); 
# 217 "/usr/include/x86_64-linux-gnu/bits/mathcalls.h" 3
extern _Float64 j0f64(_Float64) throw(); extern _Float64 __j0f64(_Float64) throw(); 
# 218
extern _Float64 j1f64(_Float64) throw(); extern _Float64 __j1f64(_Float64) throw(); 
# 219
extern _Float64 jnf64(int, _Float64) throw(); extern _Float64 __jnf64(int, _Float64) throw(); 
# 220
extern _Float64 y0f64(_Float64) throw(); extern _Float64 __y0f64(_Float64) throw(); 
# 221
extern _Float64 y1f64(_Float64) throw(); extern _Float64 __y1f64(_Float64) throw(); 
# 222
extern _Float64 ynf64(int, _Float64) throw(); extern _Float64 __ynf64(int, _Float64) throw(); 
# 228
extern _Float64 erff64(_Float64) throw(); extern _Float64 __erff64(_Float64) throw(); 
# 229
extern _Float64 erfcf64(_Float64) throw(); extern _Float64 __erfcf64(_Float64) throw(); 
# 230
extern _Float64 lgammaf64(_Float64) throw(); extern _Float64 __lgammaf64(_Float64) throw(); 
# 235
extern _Float64 tgammaf64(_Float64) throw(); extern _Float64 __tgammaf64(_Float64) throw(); 
# 249 "/usr/include/x86_64-linux-gnu/bits/mathcalls.h" 3
extern _Float64 lgammaf64_r(_Float64, int * __signgamp) throw(); extern _Float64 __lgammaf64_r(_Float64, int * __signgamp) throw(); 
# 256
extern _Float64 rintf64(_Float64 __x) throw(); extern _Float64 __rintf64(_Float64 __x) throw(); 
# 259
extern _Float64 nextafterf64(_Float64 __x, _Float64 __y) throw(); extern _Float64 __nextafterf64(_Float64 __x, _Float64 __y) throw(); 
# 266
extern _Float64 nextdownf64(_Float64 __x) throw(); extern _Float64 __nextdownf64(_Float64 __x) throw(); 
# 268
extern _Float64 nextupf64(_Float64 __x) throw(); extern _Float64 __nextupf64(_Float64 __x) throw(); 
# 272
extern _Float64 remainderf64(_Float64 __x, _Float64 __y) throw(); extern _Float64 __remainderf64(_Float64 __x, _Float64 __y) throw(); 
# 276
extern _Float64 scalbnf64(_Float64 __x, int __n) throw(); extern _Float64 __scalbnf64(_Float64 __x, int __n) throw(); 
# 280
extern int ilogbf64(_Float64 __x) throw(); extern int __ilogbf64(_Float64 __x) throw(); 
# 285
extern long llogbf64(_Float64 __x) throw(); extern long __llogbf64(_Float64 __x) throw(); 
# 290
extern _Float64 scalblnf64(_Float64 __x, long __n) throw(); extern _Float64 __scalblnf64(_Float64 __x, long __n) throw(); 
# 294
extern _Float64 nearbyintf64(_Float64 __x) throw(); extern _Float64 __nearbyintf64(_Float64 __x) throw(); 
# 298
extern _Float64 roundf64(_Float64 __x) throw() __attribute((const)); extern _Float64 __roundf64(_Float64 __x) throw() __attribute((const)); 
# 302
extern _Float64 truncf64(_Float64 __x) throw() __attribute((const)); extern _Float64 __truncf64(_Float64 __x) throw() __attribute((const)); 
# 307
extern _Float64 remquof64(_Float64 __x, _Float64 __y, int * __quo) throw(); extern _Float64 __remquof64(_Float64 __x, _Float64 __y, int * __quo) throw(); 
# 314
extern long lrintf64(_Float64 __x) throw(); extern long __lrintf64(_Float64 __x) throw(); 
# 316
__extension__ extern long long llrintf64(_Float64 __x) throw(); extern long long __llrintf64(_Float64 __x) throw(); 
# 320
extern long lroundf64(_Float64 __x) throw(); extern long __lroundf64(_Float64 __x) throw(); 
# 322
__extension__ extern long long llroundf64(_Float64 __x) throw(); extern long long __llroundf64(_Float64 __x) throw(); 
# 326
extern _Float64 fdimf64(_Float64 __x, _Float64 __y) throw(); extern _Float64 __fdimf64(_Float64 __x, _Float64 __y) throw(); 
# 329
extern _Float64 fmaxf64(_Float64 __x, _Float64 __y) throw() __attribute((const)); extern _Float64 __fmaxf64(_Float64 __x, _Float64 __y) throw() __attribute((const)); 
# 332
extern _Float64 fminf64(_Float64 __x, _Float64 __y) throw() __attribute((const)); extern _Float64 __fminf64(_Float64 __x, _Float64 __y) throw() __attribute((const)); 
# 335
extern _Float64 fmaf64(_Float64 __x, _Float64 __y, _Float64 __z) throw(); extern _Float64 __fmaf64(_Float64 __x, _Float64 __y, _Float64 __z) throw(); 
# 340
extern _Float64 roundevenf64(_Float64 __x) throw() __attribute((const)); extern _Float64 __roundevenf64(_Float64 __x) throw() __attribute((const)); 
# 344
extern __intmax_t fromfpf64(_Float64 __x, int __round, unsigned __width) throw(); extern __intmax_t __fromfpf64(_Float64 __x, int __round, unsigned __width) throw(); 
# 349
extern __uintmax_t ufromfpf64(_Float64 __x, int __round, unsigned __width) throw(); extern __uintmax_t __ufromfpf64(_Float64 __x, int __round, unsigned __width) throw(); 
# 355
extern __intmax_t fromfpxf64(_Float64 __x, int __round, unsigned __width) throw(); extern __intmax_t __fromfpxf64(_Float64 __x, int __round, unsigned __width) throw(); 
# 361
extern __uintmax_t ufromfpxf64(_Float64 __x, int __round, unsigned __width) throw(); extern __uintmax_t __ufromfpxf64(_Float64 __x, int __round, unsigned __width) throw(); 
# 365
extern _Float64 fmaxmagf64(_Float64 __x, _Float64 __y) throw() __attribute((const)); extern _Float64 __fmaxmagf64(_Float64 __x, _Float64 __y) throw() __attribute((const)); 
# 368
extern _Float64 fminmagf64(_Float64 __x, _Float64 __y) throw() __attribute((const)); extern _Float64 __fminmagf64(_Float64 __x, _Float64 __y) throw() __attribute((const)); 
# 371
extern int canonicalizef64(_Float64 * __cx, const _Float64 * __x) throw(); 
# 376
extern int totalorderf64(const _Float64 * __x, const _Float64 * __y) throw()
# 378
 __attribute((__pure__)); 
# 381
extern int totalordermagf64(const _Float64 * __x, const _Float64 * __y) throw()
# 383
 __attribute((__pure__)); 
# 386
extern _Float64 getpayloadf64(const _Float64 * __x) throw(); extern _Float64 __getpayloadf64(const _Float64 * __x) throw(); 
# 389
extern int setpayloadf64(_Float64 * __x, _Float64 __payload) throw(); 
# 392
extern int setpayloadsigf64(_Float64 * __x, _Float64 __payload) throw(); 
# 53 "/usr/include/x86_64-linux-gnu/bits/mathcalls.h" 3
extern _Float32x acosf32x(_Float32x __x) throw(); extern _Float32x __acosf32x(_Float32x __x) throw(); 
# 55
extern _Float32x asinf32x(_Float32x __x) throw(); extern _Float32x __asinf32x(_Float32x __x) throw(); 
# 57
extern _Float32x atanf32x(_Float32x __x) throw(); extern _Float32x __atanf32x(_Float32x __x) throw(); 
# 59
extern _Float32x atan2f32x(_Float32x __y, _Float32x __x) throw(); extern _Float32x __atan2f32x(_Float32x __y, _Float32x __x) throw(); 
# 62
extern _Float32x cosf32x(_Float32x __x) throw(); extern _Float32x __cosf32x(_Float32x __x) throw(); 
# 64
extern _Float32x sinf32x(_Float32x __x) throw(); extern _Float32x __sinf32x(_Float32x __x) throw(); 
# 66
extern _Float32x tanf32x(_Float32x __x) throw(); extern _Float32x __tanf32x(_Float32x __x) throw(); 
# 71
extern _Float32x coshf32x(_Float32x __x) throw(); extern _Float32x __coshf32x(_Float32x __x) throw(); 
# 73
extern _Float32x sinhf32x(_Float32x __x) throw(); extern _Float32x __sinhf32x(_Float32x __x) throw(); 
# 75
extern _Float32x tanhf32x(_Float32x __x) throw(); extern _Float32x __tanhf32x(_Float32x __x) throw(); 
# 79
extern void sincosf32x(_Float32x __x, _Float32x * __sinx, _Float32x * __cosx) throw(); extern void __sincosf32x(_Float32x __x, _Float32x * __sinx, _Float32x * __cosx) throw(); 
# 85
extern _Float32x acoshf32x(_Float32x __x) throw(); extern _Float32x __acoshf32x(_Float32x __x) throw(); 
# 87
extern _Float32x asinhf32x(_Float32x __x) throw(); extern _Float32x __asinhf32x(_Float32x __x) throw(); 
# 89
extern _Float32x atanhf32x(_Float32x __x) throw(); extern _Float32x __atanhf32x(_Float32x __x) throw(); 
# 95
extern _Float32x expf32x(_Float32x __x) throw(); extern _Float32x __expf32x(_Float32x __x) throw(); 
# 98
extern _Float32x frexpf32x(_Float32x __x, int * __exponent) throw(); extern _Float32x __frexpf32x(_Float32x __x, int * __exponent) throw(); 
# 101
extern _Float32x ldexpf32x(_Float32x __x, int __exponent) throw(); extern _Float32x __ldexpf32x(_Float32x __x, int __exponent) throw(); 
# 104
extern _Float32x logf32x(_Float32x __x) throw(); extern _Float32x __logf32x(_Float32x __x) throw(); 
# 107
extern _Float32x log10f32x(_Float32x __x) throw(); extern _Float32x __log10f32x(_Float32x __x) throw(); 
# 110
extern _Float32x modff32x(_Float32x __x, _Float32x * __iptr) throw(); extern _Float32x __modff32x(_Float32x __x, _Float32x * __iptr) throw() __attribute((__nonnull__(2))); 
# 114
extern _Float32x exp10f32x(_Float32x __x) throw(); extern _Float32x __exp10f32x(_Float32x __x) throw(); 
# 119
extern _Float32x expm1f32x(_Float32x __x) throw(); extern _Float32x __expm1f32x(_Float32x __x) throw(); 
# 122
extern _Float32x log1pf32x(_Float32x __x) throw(); extern _Float32x __log1pf32x(_Float32x __x) throw(); 
# 125
extern _Float32x logbf32x(_Float32x __x) throw(); extern _Float32x __logbf32x(_Float32x __x) throw(); 
# 130
extern _Float32x exp2f32x(_Float32x __x) throw(); extern _Float32x __exp2f32x(_Float32x __x) throw(); 
# 133
extern _Float32x log2f32x(_Float32x __x) throw(); extern _Float32x __log2f32x(_Float32x __x) throw(); 
# 140
extern _Float32x powf32x(_Float32x __x, _Float32x __y) throw(); extern _Float32x __powf32x(_Float32x __x, _Float32x __y) throw(); 
# 143
extern _Float32x sqrtf32x(_Float32x __x) throw(); extern _Float32x __sqrtf32x(_Float32x __x) throw(); 
# 147
extern _Float32x hypotf32x(_Float32x __x, _Float32x __y) throw(); extern _Float32x __hypotf32x(_Float32x __x, _Float32x __y) throw(); 
# 152
extern _Float32x cbrtf32x(_Float32x __x) throw(); extern _Float32x __cbrtf32x(_Float32x __x) throw(); 
# 159
extern _Float32x ceilf32x(_Float32x __x) throw() __attribute((const)); extern _Float32x __ceilf32x(_Float32x __x) throw() __attribute((const)); 
# 162
extern _Float32x fabsf32x(_Float32x __x) throw() __attribute((const)); extern _Float32x __fabsf32x(_Float32x __x) throw() __attribute((const)); 
# 165
extern _Float32x floorf32x(_Float32x __x) throw() __attribute((const)); extern _Float32x __floorf32x(_Float32x __x) throw() __attribute((const)); 
# 168
extern _Float32x fmodf32x(_Float32x __x, _Float32x __y) throw(); extern _Float32x __fmodf32x(_Float32x __x, _Float32x __y) throw(); 
# 196 "/usr/include/x86_64-linux-gnu/bits/mathcalls.h" 3
extern _Float32x copysignf32x(_Float32x __x, _Float32x __y) throw() __attribute((const)); extern _Float32x __copysignf32x(_Float32x __x, _Float32x __y) throw() __attribute((const)); 
# 201
extern _Float32x nanf32x(const char * __tagb) throw(); extern _Float32x __nanf32x(const char * __tagb) throw(); 
# 217 "/usr/include/x86_64-linux-gnu/bits/mathcalls.h" 3
extern _Float32x j0f32x(_Float32x) throw(); extern _Float32x __j0f32x(_Float32x) throw(); 
# 218
extern _Float32x j1f32x(_Float32x) throw(); extern _Float32x __j1f32x(_Float32x) throw(); 
# 219
extern _Float32x jnf32x(int, _Float32x) throw(); extern _Float32x __jnf32x(int, _Float32x) throw(); 
# 220
extern _Float32x y0f32x(_Float32x) throw(); extern _Float32x __y0f32x(_Float32x) throw(); 
# 221
extern _Float32x y1f32x(_Float32x) throw(); extern _Float32x __y1f32x(_Float32x) throw(); 
# 222
extern _Float32x ynf32x(int, _Float32x) throw(); extern _Float32x __ynf32x(int, _Float32x) throw(); 
# 228
extern _Float32x erff32x(_Float32x) throw(); extern _Float32x __erff32x(_Float32x) throw(); 
# 229
extern _Float32x erfcf32x(_Float32x) throw(); extern _Float32x __erfcf32x(_Float32x) throw(); 
# 230
extern _Float32x lgammaf32x(_Float32x) throw(); extern _Float32x __lgammaf32x(_Float32x) throw(); 
# 235
extern _Float32x tgammaf32x(_Float32x) throw(); extern _Float32x __tgammaf32x(_Float32x) throw(); 
# 249 "/usr/include/x86_64-linux-gnu/bits/mathcalls.h" 3
extern _Float32x lgammaf32x_r(_Float32x, int * __signgamp) throw(); extern _Float32x __lgammaf32x_r(_Float32x, int * __signgamp) throw(); 
# 256
extern _Float32x rintf32x(_Float32x __x) throw(); extern _Float32x __rintf32x(_Float32x __x) throw(); 
# 259
extern _Float32x nextafterf32x(_Float32x __x, _Float32x __y) throw(); extern _Float32x __nextafterf32x(_Float32x __x, _Float32x __y) throw(); 
# 266
extern _Float32x nextdownf32x(_Float32x __x) throw(); extern _Float32x __nextdownf32x(_Float32x __x) throw(); 
# 268
extern _Float32x nextupf32x(_Float32x __x) throw(); extern _Float32x __nextupf32x(_Float32x __x) throw(); 
# 272
extern _Float32x remainderf32x(_Float32x __x, _Float32x __y) throw(); extern _Float32x __remainderf32x(_Float32x __x, _Float32x __y) throw(); 
# 276
extern _Float32x scalbnf32x(_Float32x __x, int __n) throw(); extern _Float32x __scalbnf32x(_Float32x __x, int __n) throw(); 
# 280
extern int ilogbf32x(_Float32x __x) throw(); extern int __ilogbf32x(_Float32x __x) throw(); 
# 285
extern long llogbf32x(_Float32x __x) throw(); extern long __llogbf32x(_Float32x __x) throw(); 
# 290
extern _Float32x scalblnf32x(_Float32x __x, long __n) throw(); extern _Float32x __scalblnf32x(_Float32x __x, long __n) throw(); 
# 294
extern _Float32x nearbyintf32x(_Float32x __x) throw(); extern _Float32x __nearbyintf32x(_Float32x __x) throw(); 
# 298
extern _Float32x roundf32x(_Float32x __x) throw() __attribute((const)); extern _Float32x __roundf32x(_Float32x __x) throw() __attribute((const)); 
# 302
extern _Float32x truncf32x(_Float32x __x) throw() __attribute((const)); extern _Float32x __truncf32x(_Float32x __x) throw() __attribute((const)); 
# 307
extern _Float32x remquof32x(_Float32x __x, _Float32x __y, int * __quo) throw(); extern _Float32x __remquof32x(_Float32x __x, _Float32x __y, int * __quo) throw(); 
# 314
extern long lrintf32x(_Float32x __x) throw(); extern long __lrintf32x(_Float32x __x) throw(); 
# 316
__extension__ extern long long llrintf32x(_Float32x __x) throw(); extern long long __llrintf32x(_Float32x __x) throw(); 
# 320
extern long lroundf32x(_Float32x __x) throw(); extern long __lroundf32x(_Float32x __x) throw(); 
# 322
__extension__ extern long long llroundf32x(_Float32x __x) throw(); extern long long __llroundf32x(_Float32x __x) throw(); 
# 326
extern _Float32x fdimf32x(_Float32x __x, _Float32x __y) throw(); extern _Float32x __fdimf32x(_Float32x __x, _Float32x __y) throw(); 
# 329
extern _Float32x fmaxf32x(_Float32x __x, _Float32x __y) throw() __attribute((const)); extern _Float32x __fmaxf32x(_Float32x __x, _Float32x __y) throw() __attribute((const)); 
# 332
extern _Float32x fminf32x(_Float32x __x, _Float32x __y) throw() __attribute((const)); extern _Float32x __fminf32x(_Float32x __x, _Float32x __y) throw() __attribute((const)); 
# 335
extern _Float32x fmaf32x(_Float32x __x, _Float32x __y, _Float32x __z) throw(); extern _Float32x __fmaf32x(_Float32x __x, _Float32x __y, _Float32x __z) throw(); 
# 340
extern _Float32x roundevenf32x(_Float32x __x) throw() __attribute((const)); extern _Float32x __roundevenf32x(_Float32x __x) throw() __attribute((const)); 
# 344
extern __intmax_t fromfpf32x(_Float32x __x, int __round, unsigned __width) throw(); extern __intmax_t __fromfpf32x(_Float32x __x, int __round, unsigned __width) throw(); 
# 349
extern __uintmax_t ufromfpf32x(_Float32x __x, int __round, unsigned __width) throw(); extern __uintmax_t __ufromfpf32x(_Float32x __x, int __round, unsigned __width) throw(); 
# 355
extern __intmax_t fromfpxf32x(_Float32x __x, int __round, unsigned __width) throw(); extern __intmax_t __fromfpxf32x(_Float32x __x, int __round, unsigned __width) throw(); 
# 361
extern __uintmax_t ufromfpxf32x(_Float32x __x, int __round, unsigned __width) throw(); extern __uintmax_t __ufromfpxf32x(_Float32x __x, int __round, unsigned __width) throw(); 
# 365
extern _Float32x fmaxmagf32x(_Float32x __x, _Float32x __y) throw() __attribute((const)); extern _Float32x __fmaxmagf32x(_Float32x __x, _Float32x __y) throw() __attribute((const)); 
# 368
extern _Float32x fminmagf32x(_Float32x __x, _Float32x __y) throw() __attribute((const)); extern _Float32x __fminmagf32x(_Float32x __x, _Float32x __y) throw() __attribute((const)); 
# 371
extern int canonicalizef32x(_Float32x * __cx, const _Float32x * __x) throw(); 
# 376
extern int totalorderf32x(const _Float32x * __x, const _Float32x * __y) throw()
# 378
 __attribute((__pure__)); 
# 381
extern int totalordermagf32x(const _Float32x * __x, const _Float32x * __y) throw()
# 383
 __attribute((__pure__)); 
# 386
extern _Float32x getpayloadf32x(const _Float32x * __x) throw(); extern _Float32x __getpayloadf32x(const _Float32x * __x) throw(); 
# 389
extern int setpayloadf32x(_Float32x * __x, _Float32x __payload) throw(); 
# 392
extern int setpayloadsigf32x(_Float32x * __x, _Float32x __payload) throw(); 
# 53 "/usr/include/x86_64-linux-gnu/bits/mathcalls.h" 3
extern _Float64x acosf64x(_Float64x __x) throw(); extern _Float64x __acosf64x(_Float64x __x) throw(); 
# 55
extern _Float64x asinf64x(_Float64x __x) throw(); extern _Float64x __asinf64x(_Float64x __x) throw(); 
# 57
extern _Float64x atanf64x(_Float64x __x) throw(); extern _Float64x __atanf64x(_Float64x __x) throw(); 
# 59
extern _Float64x atan2f64x(_Float64x __y, _Float64x __x) throw(); extern _Float64x __atan2f64x(_Float64x __y, _Float64x __x) throw(); 
# 62
extern _Float64x cosf64x(_Float64x __x) throw(); extern _Float64x __cosf64x(_Float64x __x) throw(); 
# 64
extern _Float64x sinf64x(_Float64x __x) throw(); extern _Float64x __sinf64x(_Float64x __x) throw(); 
# 66
extern _Float64x tanf64x(_Float64x __x) throw(); extern _Float64x __tanf64x(_Float64x __x) throw(); 
# 71
extern _Float64x coshf64x(_Float64x __x) throw(); extern _Float64x __coshf64x(_Float64x __x) throw(); 
# 73
extern _Float64x sinhf64x(_Float64x __x) throw(); extern _Float64x __sinhf64x(_Float64x __x) throw(); 
# 75
extern _Float64x tanhf64x(_Float64x __x) throw(); extern _Float64x __tanhf64x(_Float64x __x) throw(); 
# 79
extern void sincosf64x(_Float64x __x, _Float64x * __sinx, _Float64x * __cosx) throw(); extern void __sincosf64x(_Float64x __x, _Float64x * __sinx, _Float64x * __cosx) throw(); 
# 85
extern _Float64x acoshf64x(_Float64x __x) throw(); extern _Float64x __acoshf64x(_Float64x __x) throw(); 
# 87
extern _Float64x asinhf64x(_Float64x __x) throw(); extern _Float64x __asinhf64x(_Float64x __x) throw(); 
# 89
extern _Float64x atanhf64x(_Float64x __x) throw(); extern _Float64x __atanhf64x(_Float64x __x) throw(); 
# 95
extern _Float64x expf64x(_Float64x __x) throw(); extern _Float64x __expf64x(_Float64x __x) throw(); 
# 98
extern _Float64x frexpf64x(_Float64x __x, int * __exponent) throw(); extern _Float64x __frexpf64x(_Float64x __x, int * __exponent) throw(); 
# 101
extern _Float64x ldexpf64x(_Float64x __x, int __exponent) throw(); extern _Float64x __ldexpf64x(_Float64x __x, int __exponent) throw(); 
# 104
extern _Float64x logf64x(_Float64x __x) throw(); extern _Float64x __logf64x(_Float64x __x) throw(); 
# 107
extern _Float64x log10f64x(_Float64x __x) throw(); extern _Float64x __log10f64x(_Float64x __x) throw(); 
# 110
extern _Float64x modff64x(_Float64x __x, _Float64x * __iptr) throw(); extern _Float64x __modff64x(_Float64x __x, _Float64x * __iptr) throw() __attribute((__nonnull__(2))); 
# 114
extern _Float64x exp10f64x(_Float64x __x) throw(); extern _Float64x __exp10f64x(_Float64x __x) throw(); 
# 119
extern _Float64x expm1f64x(_Float64x __x) throw(); extern _Float64x __expm1f64x(_Float64x __x) throw(); 
# 122
extern _Float64x log1pf64x(_Float64x __x) throw(); extern _Float64x __log1pf64x(_Float64x __x) throw(); 
# 125
extern _Float64x logbf64x(_Float64x __x) throw(); extern _Float64x __logbf64x(_Float64x __x) throw(); 
# 130
extern _Float64x exp2f64x(_Float64x __x) throw(); extern _Float64x __exp2f64x(_Float64x __x) throw(); 
# 133
extern _Float64x log2f64x(_Float64x __x) throw(); extern _Float64x __log2f64x(_Float64x __x) throw(); 
# 140
extern _Float64x powf64x(_Float64x __x, _Float64x __y) throw(); extern _Float64x __powf64x(_Float64x __x, _Float64x __y) throw(); 
# 143
extern _Float64x sqrtf64x(_Float64x __x) throw(); extern _Float64x __sqrtf64x(_Float64x __x) throw(); 
# 147
extern _Float64x hypotf64x(_Float64x __x, _Float64x __y) throw(); extern _Float64x __hypotf64x(_Float64x __x, _Float64x __y) throw(); 
# 152
extern _Float64x cbrtf64x(_Float64x __x) throw(); extern _Float64x __cbrtf64x(_Float64x __x) throw(); 
# 159
extern _Float64x ceilf64x(_Float64x __x) throw() __attribute((const)); extern _Float64x __ceilf64x(_Float64x __x) throw() __attribute((const)); 
# 162
extern _Float64x fabsf64x(_Float64x __x) throw() __attribute((const)); extern _Float64x __fabsf64x(_Float64x __x) throw() __attribute((const)); 
# 165
extern _Float64x floorf64x(_Float64x __x) throw() __attribute((const)); extern _Float64x __floorf64x(_Float64x __x) throw() __attribute((const)); 
# 168
extern _Float64x fmodf64x(_Float64x __x, _Float64x __y) throw(); extern _Float64x __fmodf64x(_Float64x __x, _Float64x __y) throw(); 
# 196 "/usr/include/x86_64-linux-gnu/bits/mathcalls.h" 3
extern _Float64x copysignf64x(_Float64x __x, _Float64x __y) throw() __attribute((const)); extern _Float64x __copysignf64x(_Float64x __x, _Float64x __y) throw() __attribute((const)); 
# 201
extern _Float64x nanf64x(const char * __tagb) throw(); extern _Float64x __nanf64x(const char * __tagb) throw(); 
# 217 "/usr/include/x86_64-linux-gnu/bits/mathcalls.h" 3
extern _Float64x j0f64x(_Float64x) throw(); extern _Float64x __j0f64x(_Float64x) throw(); 
# 218
extern _Float64x j1f64x(_Float64x) throw(); extern _Float64x __j1f64x(_Float64x) throw(); 
# 219
extern _Float64x jnf64x(int, _Float64x) throw(); extern _Float64x __jnf64x(int, _Float64x) throw(); 
# 220
extern _Float64x y0f64x(_Float64x) throw(); extern _Float64x __y0f64x(_Float64x) throw(); 
# 221
extern _Float64x y1f64x(_Float64x) throw(); extern _Float64x __y1f64x(_Float64x) throw(); 
# 222
extern _Float64x ynf64x(int, _Float64x) throw(); extern _Float64x __ynf64x(int, _Float64x) throw(); 
# 228
extern _Float64x erff64x(_Float64x) throw(); extern _Float64x __erff64x(_Float64x) throw(); 
# 229
extern _Float64x erfcf64x(_Float64x) throw(); extern _Float64x __erfcf64x(_Float64x) throw(); 
# 230
extern _Float64x lgammaf64x(_Float64x) throw(); extern _Float64x __lgammaf64x(_Float64x) throw(); 
# 235
extern _Float64x tgammaf64x(_Float64x) throw(); extern _Float64x __tgammaf64x(_Float64x) throw(); 
# 249 "/usr/include/x86_64-linux-gnu/bits/mathcalls.h" 3
extern _Float64x lgammaf64x_r(_Float64x, int * __signgamp) throw(); extern _Float64x __lgammaf64x_r(_Float64x, int * __signgamp) throw(); 
# 256
extern _Float64x rintf64x(_Float64x __x) throw(); extern _Float64x __rintf64x(_Float64x __x) throw(); 
# 259
extern _Float64x nextafterf64x(_Float64x __x, _Float64x __y) throw(); extern _Float64x __nextafterf64x(_Float64x __x, _Float64x __y) throw(); 
# 266
extern _Float64x nextdownf64x(_Float64x __x) throw(); extern _Float64x __nextdownf64x(_Float64x __x) throw(); 
# 268
extern _Float64x nextupf64x(_Float64x __x) throw(); extern _Float64x __nextupf64x(_Float64x __x) throw(); 
# 272
extern _Float64x remainderf64x(_Float64x __x, _Float64x __y) throw(); extern _Float64x __remainderf64x(_Float64x __x, _Float64x __y) throw(); 
# 276
extern _Float64x scalbnf64x(_Float64x __x, int __n) throw(); extern _Float64x __scalbnf64x(_Float64x __x, int __n) throw(); 
# 280
extern int ilogbf64x(_Float64x __x) throw(); extern int __ilogbf64x(_Float64x __x) throw(); 
# 285
extern long llogbf64x(_Float64x __x) throw(); extern long __llogbf64x(_Float64x __x) throw(); 
# 290
extern _Float64x scalblnf64x(_Float64x __x, long __n) throw(); extern _Float64x __scalblnf64x(_Float64x __x, long __n) throw(); 
# 294
extern _Float64x nearbyintf64x(_Float64x __x) throw(); extern _Float64x __nearbyintf64x(_Float64x __x) throw(); 
# 298
extern _Float64x roundf64x(_Float64x __x) throw() __attribute((const)); extern _Float64x __roundf64x(_Float64x __x) throw() __attribute((const)); 
# 302
extern _Float64x truncf64x(_Float64x __x) throw() __attribute((const)); extern _Float64x __truncf64x(_Float64x __x) throw() __attribute((const)); 
# 307
extern _Float64x remquof64x(_Float64x __x, _Float64x __y, int * __quo) throw(); extern _Float64x __remquof64x(_Float64x __x, _Float64x __y, int * __quo) throw(); 
# 314
extern long lrintf64x(_Float64x __x) throw(); extern long __lrintf64x(_Float64x __x) throw(); 
# 316
__extension__ extern long long llrintf64x(_Float64x __x) throw(); extern long long __llrintf64x(_Float64x __x) throw(); 
# 320
extern long lroundf64x(_Float64x __x) throw(); extern long __lroundf64x(_Float64x __x) throw(); 
# 322
__extension__ extern long long llroundf64x(_Float64x __x) throw(); extern long long __llroundf64x(_Float64x __x) throw(); 
# 326
extern _Float64x fdimf64x(_Float64x __x, _Float64x __y) throw(); extern _Float64x __fdimf64x(_Float64x __x, _Float64x __y) throw(); 
# 329
extern _Float64x fmaxf64x(_Float64x __x, _Float64x __y) throw() __attribute((const)); extern _Float64x __fmaxf64x(_Float64x __x, _Float64x __y) throw() __attribute((const)); 
# 332
extern _Float64x fminf64x(_Float64x __x, _Float64x __y) throw() __attribute((const)); extern _Float64x __fminf64x(_Float64x __x, _Float64x __y) throw() __attribute((const)); 
# 335
extern _Float64x fmaf64x(_Float64x __x, _Float64x __y, _Float64x __z) throw(); extern _Float64x __fmaf64x(_Float64x __x, _Float64x __y, _Float64x __z) throw(); 
# 340
extern _Float64x roundevenf64x(_Float64x __x) throw() __attribute((const)); extern _Float64x __roundevenf64x(_Float64x __x) throw() __attribute((const)); 
# 344
extern __intmax_t fromfpf64x(_Float64x __x, int __round, unsigned __width) throw(); extern __intmax_t __fromfpf64x(_Float64x __x, int __round, unsigned __width) throw(); 
# 349
extern __uintmax_t ufromfpf64x(_Float64x __x, int __round, unsigned __width) throw(); extern __uintmax_t __ufromfpf64x(_Float64x __x, int __round, unsigned __width) throw(); 
# 355
extern __intmax_t fromfpxf64x(_Float64x __x, int __round, unsigned __width) throw(); extern __intmax_t __fromfpxf64x(_Float64x __x, int __round, unsigned __width) throw(); 
# 361
extern __uintmax_t ufromfpxf64x(_Float64x __x, int __round, unsigned __width) throw(); extern __uintmax_t __ufromfpxf64x(_Float64x __x, int __round, unsigned __width) throw(); 
# 365
extern _Float64x fmaxmagf64x(_Float64x __x, _Float64x __y) throw() __attribute((const)); extern _Float64x __fmaxmagf64x(_Float64x __x, _Float64x __y) throw() __attribute((const)); 
# 368
extern _Float64x fminmagf64x(_Float64x __x, _Float64x __y) throw() __attribute((const)); extern _Float64x __fminmagf64x(_Float64x __x, _Float64x __y) throw() __attribute((const)); 
# 371
extern int canonicalizef64x(_Float64x * __cx, const _Float64x * __x) throw(); 
# 376
extern int totalorderf64x(const _Float64x * __x, const _Float64x * __y) throw()
# 378
 __attribute((__pure__)); 
# 381
extern int totalordermagf64x(const _Float64x * __x, const _Float64x * __y) throw()
# 383
 __attribute((__pure__)); 
# 386
extern _Float64x getpayloadf64x(const _Float64x * __x) throw(); extern _Float64x __getpayloadf64x(const _Float64x * __x) throw(); 
# 389
extern int setpayloadf64x(_Float64x * __x, _Float64x __payload) throw(); 
# 392
extern int setpayloadsigf64x(_Float64x * __x, _Float64x __payload) throw(); 
# 24 "/usr/include/x86_64-linux-gnu/bits/mathcalls-narrow.h" 3
extern float fadd(double __x, double __y) throw(); 
# 27
extern float fdiv(double __x, double __y) throw(); 
# 30
extern float fmul(double __x, double __y) throw(); 
# 33
extern float fsub(double __x, double __y) throw(); 
# 24 "/usr/include/x86_64-linux-gnu/bits/mathcalls-narrow.h" 3
extern float faddl(long double __x, long double __y) throw(); 
# 27
extern float fdivl(long double __x, long double __y) throw(); 
# 30
extern float fmull(long double __x, long double __y) throw(); 
# 33
extern float fsubl(long double __x, long double __y) throw(); 
# 24 "/usr/include/x86_64-linux-gnu/bits/mathcalls-narrow.h" 3
extern double daddl(long double __x, long double __y) throw(); 
# 27
extern double ddivl(long double __x, long double __y) throw(); 
# 30
extern double dmull(long double __x, long double __y) throw(); 
# 33
extern double dsubl(long double __x, long double __y) throw(); 
# 24 "/usr/include/x86_64-linux-gnu/bits/mathcalls-narrow.h" 3
extern _Float32 f32addf32x(_Float32x __x, _Float32x __y) throw(); 
# 27
extern _Float32 f32divf32x(_Float32x __x, _Float32x __y) throw(); 
# 30
extern _Float32 f32mulf32x(_Float32x __x, _Float32x __y) throw(); 
# 33
extern _Float32 f32subf32x(_Float32x __x, _Float32x __y) throw(); 
# 24 "/usr/include/x86_64-linux-gnu/bits/mathcalls-narrow.h" 3
extern _Float32 f32addf64(_Float64 __x, _Float64 __y) throw(); 
# 27
extern _Float32 f32divf64(_Float64 __x, _Float64 __y) throw(); 
# 30
extern _Float32 f32mulf64(_Float64 __x, _Float64 __y) throw(); 
# 33
extern _Float32 f32subf64(_Float64 __x, _Float64 __y) throw(); 
# 24 "/usr/include/x86_64-linux-gnu/bits/mathcalls-narrow.h" 3
extern _Float32 f32addf64x(_Float64x __x, _Float64x __y) throw(); 
# 27
extern _Float32 f32divf64x(_Float64x __x, _Float64x __y) throw(); 
# 30
extern _Float32 f32mulf64x(_Float64x __x, _Float64x __y) throw(); 
# 33
extern _Float32 f32subf64x(_Float64x __x, _Float64x __y) throw(); 
# 24 "/usr/include/x86_64-linux-gnu/bits/mathcalls-narrow.h" 3
extern _Float32x f32xaddf64(_Float64 __x, _Float64 __y) throw(); 
# 27
extern _Float32x f32xdivf64(_Float64 __x, _Float64 __y) throw(); 
# 30
extern _Float32x f32xmulf64(_Float64 __x, _Float64 __y) throw(); 
# 33
extern _Float32x f32xsubf64(_Float64 __x, _Float64 __y) throw(); 
# 24 "/usr/include/x86_64-linux-gnu/bits/mathcalls-narrow.h" 3
extern _Float32x f32xaddf64x(_Float64x __x, _Float64x __y) throw(); 
# 27
extern _Float32x f32xdivf64x(_Float64x __x, _Float64x __y) throw(); 
# 30
extern _Float32x f32xmulf64x(_Float64x __x, _Float64x __y) throw(); 
# 33
extern _Float32x f32xsubf64x(_Float64x __x, _Float64x __y) throw(); 
# 24 "/usr/include/x86_64-linux-gnu/bits/mathcalls-narrow.h" 3
extern _Float64 f64addf64x(_Float64x __x, _Float64x __y) throw(); 
# 27
extern _Float64 f64divf64x(_Float64x __x, _Float64x __y) throw(); 
# 30
extern _Float64 f64mulf64x(_Float64x __x, _Float64x __y) throw(); 
# 33
extern _Float64 f64subf64x(_Float64x __x, _Float64x __y) throw(); 
# 773 "/usr/include/math.h" 3
extern int signgam; 
# 854 "/usr/include/math.h" 3
enum { 
# 855
FP_NAN, 
# 858
FP_INFINITE, 
# 861
FP_ZERO, 
# 864
FP_SUBNORMAL, 
# 867
FP_NORMAL
# 870
}; 
# 23 "/usr/include/x86_64-linux-gnu/bits/iscanonical.h" 3
extern int __iscanonicall(long double __x) throw()
# 24
 __attribute((const)); 
# 46 "/usr/include/x86_64-linux-gnu/bits/iscanonical.h" 3
extern "C++" {
# 47
inline int iscanonical(float __val) { return ((void)((__typeof__(__val))__val)), 1; } 
# 48
inline int iscanonical(double __val) { return ((void)((__typeof__(__val))__val)), 1; } 
# 49
inline int iscanonical(long double __val) { return __iscanonicall(__val); } 
# 53
}
# 985 "/usr/include/math.h" 3
extern "C++" {
# 986
inline int issignaling(float __val) { return __issignalingf(__val); } 
# 987
inline int issignaling(double __val) { return __issignaling(__val); } 
# 989
inline int issignaling(long double __val) 
# 990
{ 
# 994
return __issignalingl(__val); 
# 996
} 
# 1002
}
# 1016 "/usr/include/math.h" 3
extern "C++" {
# 1047 "/usr/include/math.h" 3
template< class __T> inline bool 
# 1048
iszero(__T __val) 
# 1049
{ 
# 1050
return __val == 0; 
# 1051
} 
# 1053
}
# 1278 "/usr/include/math.h" 3
extern "C++" {
# 1279
template< class > struct __iseqsig_type; 
# 1281
template<> struct __iseqsig_type< float>  { 
# 1283
static int __call(float __x, float __y) throw() 
# 1284
{ 
# 1285
return __iseqsigf(__x, __y); 
# 1286
} 
# 1287
}; 
# 1289
template<> struct __iseqsig_type< double>  { 
# 1291
static int __call(double __x, double __y) throw() 
# 1292
{ 
# 1293
return __iseqsig(__x, __y); 
# 1294
} 
# 1295
}; 
# 1297
template<> struct __iseqsig_type< long double>  { 
# 1299
static int __call(long double __x, long double __y) throw() 
# 1300
{ 
# 1302
return __iseqsigl(__x, __y); 
# 1306
} 
# 1307
}; 
# 1321 "/usr/include/math.h" 3
template< class _T1, class _T2> inline int 
# 1323
iseqsig(_T1 __x, _T2 __y) throw() 
# 1324
{ 
# 1326
typedef __decltype(((__x + __y) + (0.0F))) _T3; 
# 1330
return __iseqsig_type< __decltype(((__x + __y) + (0.0F)))> ::__call(__x, __y); 
# 1331
} 
# 1333
}
# 1338
}
# 33 "/usr/include/stdlib.h" 3
extern "C" {
# 57 "/usr/include/x86_64-linux-gnu/bits/waitflags.h" 3
typedef 
# 53
enum { 
# 54
P_ALL, 
# 55
P_PID, 
# 56
P_PGID
# 57
} idtype_t; 
# 62 "/usr/include/stdlib.h" 3
typedef 
# 59
struct { 
# 60
int quot; 
# 61
int rem; 
# 62
} div_t; 
# 70
typedef 
# 67
struct { 
# 68
long quot; 
# 69
long rem; 
# 70
} ldiv_t; 
# 80
__extension__ typedef 
# 77
struct { 
# 78
long long quot; 
# 79
long long rem; 
# 80
} lldiv_t; 
# 97 "/usr/include/stdlib.h" 3
extern size_t __ctype_get_mb_cur_max() throw(); 
# 101
extern double atof(const char * __nptr) throw()
# 102
 __attribute((__pure__)) __attribute((__nonnull__(1))); 
# 104
extern int atoi(const char * __nptr) throw()
# 105
 __attribute((__pure__)) __attribute((__nonnull__(1))); 
# 107
extern long atol(const char * __nptr) throw()
# 108
 __attribute((__pure__)) __attribute((__nonnull__(1))); 
# 112
__extension__ extern long long atoll(const char * __nptr) throw()
# 113
 __attribute((__pure__)) __attribute((__nonnull__(1))); 
# 117
extern double strtod(const char *__restrict__ __nptr, char **__restrict__ __endptr) throw()
# 119
 __attribute((__nonnull__(1))); 
# 123
extern float strtof(const char *__restrict__ __nptr, char **__restrict__ __endptr) throw()
# 124
 __attribute((__nonnull__(1))); 
# 126
extern long double strtold(const char *__restrict__ __nptr, char **__restrict__ __endptr) throw()
# 128
 __attribute((__nonnull__(1))); 
# 140 "/usr/include/stdlib.h" 3
extern _Float32 strtof32(const char *__restrict__ __nptr, char **__restrict__ __endptr) throw()
# 142
 __attribute((__nonnull__(1))); 
# 146
extern _Float64 strtof64(const char *__restrict__ __nptr, char **__restrict__ __endptr) throw()
# 148
 __attribute((__nonnull__(1))); 
# 158 "/usr/include/stdlib.h" 3
extern _Float32x strtof32x(const char *__restrict__ __nptr, char **__restrict__ __endptr) throw()
# 160
 __attribute((__nonnull__(1))); 
# 164
extern _Float64x strtof64x(const char *__restrict__ __nptr, char **__restrict__ __endptr) throw()
# 166
 __attribute((__nonnull__(1))); 
# 176 "/usr/include/stdlib.h" 3
extern long strtol(const char *__restrict__ __nptr, char **__restrict__ __endptr, int __base) throw()
# 178
 __attribute((__nonnull__(1))); 
# 180
extern unsigned long strtoul(const char *__restrict__ __nptr, char **__restrict__ __endptr, int __base) throw()
# 182
 __attribute((__nonnull__(1))); 
# 187
__extension__ extern long long strtoq(const char *__restrict__ __nptr, char **__restrict__ __endptr, int __base) throw()
# 189
 __attribute((__nonnull__(1))); 
# 192
__extension__ extern unsigned long long strtouq(const char *__restrict__ __nptr, char **__restrict__ __endptr, int __base) throw()
# 194
 __attribute((__nonnull__(1))); 
# 200
__extension__ extern long long strtoll(const char *__restrict__ __nptr, char **__restrict__ __endptr, int __base) throw()
# 202
 __attribute((__nonnull__(1))); 
# 205
__extension__ extern unsigned long long strtoull(const char *__restrict__ __nptr, char **__restrict__ __endptr, int __base) throw()
# 207
 __attribute((__nonnull__(1))); 
# 212
extern int strfromd(char * __dest, size_t __size, const char * __format, double __f) throw()
# 214
 __attribute((__nonnull__(3))); 
# 216
extern int strfromf(char * __dest, size_t __size, const char * __format, float __f) throw()
# 218
 __attribute((__nonnull__(3))); 
# 220
extern int strfroml(char * __dest, size_t __size, const char * __format, long double __f) throw()
# 222
 __attribute((__nonnull__(3))); 
# 232 "/usr/include/stdlib.h" 3
extern int strfromf32(char * __dest, size_t __size, const char * __format, _Float32 __f) throw()
# 234
 __attribute((__nonnull__(3))); 
# 238
extern int strfromf64(char * __dest, size_t __size, const char * __format, _Float64 __f) throw()
# 240
 __attribute((__nonnull__(3))); 
# 250 "/usr/include/stdlib.h" 3
extern int strfromf32x(char * __dest, size_t __size, const char * __format, _Float32x __f) throw()
# 252
 __attribute((__nonnull__(3))); 
# 256
extern int strfromf64x(char * __dest, size_t __size, const char * __format, _Float64x __f) throw()
# 258
 __attribute((__nonnull__(3))); 
# 274 "/usr/include/stdlib.h" 3
extern long strtol_l(const char *__restrict__ __nptr, char **__restrict__ __endptr, int __base, locale_t __loc) throw()
# 276
 __attribute((__nonnull__(1, 4))); 
# 278
extern unsigned long strtoul_l(const char *__restrict__ __nptr, char **__restrict__ __endptr, int __base, locale_t __loc) throw()
# 281
 __attribute((__nonnull__(1, 4))); 
# 284
__extension__ extern long long strtoll_l(const char *__restrict__ __nptr, char **__restrict__ __endptr, int __base, locale_t __loc) throw()
# 287
 __attribute((__nonnull__(1, 4))); 
# 290
__extension__ extern unsigned long long strtoull_l(const char *__restrict__ __nptr, char **__restrict__ __endptr, int __base, locale_t __loc) throw()
# 293
 __attribute((__nonnull__(1, 4))); 
# 295
extern double strtod_l(const char *__restrict__ __nptr, char **__restrict__ __endptr, locale_t __loc) throw()
# 297
 __attribute((__nonnull__(1, 3))); 
# 299
extern float strtof_l(const char *__restrict__ __nptr, char **__restrict__ __endptr, locale_t __loc) throw()
# 301
 __attribute((__nonnull__(1, 3))); 
# 303
extern long double strtold_l(const char *__restrict__ __nptr, char **__restrict__ __endptr, locale_t __loc) throw()
# 306
 __attribute((__nonnull__(1, 3))); 
# 316 "/usr/include/stdlib.h" 3
extern _Float32 strtof32_l(const char *__restrict__ __nptr, char **__restrict__ __endptr, locale_t __loc) throw()
# 319
 __attribute((__nonnull__(1, 3))); 
# 323
extern _Float64 strtof64_l(const char *__restrict__ __nptr, char **__restrict__ __endptr, locale_t __loc) throw()
# 326
 __attribute((__nonnull__(1, 3))); 
# 337 "/usr/include/stdlib.h" 3
extern _Float32x strtof32x_l(const char *__restrict__ __nptr, char **__restrict__ __endptr, locale_t __loc) throw()
# 340
 __attribute((__nonnull__(1, 3))); 
# 344
extern _Float64x strtof64x_l(const char *__restrict__ __nptr, char **__restrict__ __endptr, locale_t __loc) throw()
# 347
 __attribute((__nonnull__(1, 3))); 
# 385 "/usr/include/stdlib.h" 3
extern char *l64a(long __n) throw(); 
# 388
extern long a64l(const char * __s) throw()
# 389
 __attribute((__pure__)) __attribute((__nonnull__(1))); 
# 27 "/usr/include/x86_64-linux-gnu/sys/types.h" 3
extern "C" {
# 33
typedef __u_char u_char; 
# 34
typedef __u_short u_short; 
# 35
typedef __u_int u_int; 
# 36
typedef __u_long u_long; 
# 37
typedef __quad_t quad_t; 
# 38
typedef __u_quad_t u_quad_t; 
# 39
typedef __fsid_t fsid_t; 
# 42
typedef __loff_t loff_t; 
# 47
typedef __ino_t ino_t; 
# 54
typedef __ino64_t ino64_t; 
# 59
typedef __dev_t dev_t; 
# 64
typedef __gid_t gid_t; 
# 69
typedef __mode_t mode_t; 
# 74
typedef __nlink_t nlink_t; 
# 79
typedef __uid_t uid_t; 
# 85
typedef __off_t off_t; 
# 92
typedef __off64_t off64_t; 
# 103 "/usr/include/x86_64-linux-gnu/sys/types.h" 3
typedef __id_t id_t; 
# 108
typedef __ssize_t ssize_t; 
# 114
typedef __daddr_t daddr_t; 
# 115
typedef __caddr_t caddr_t; 
# 121
typedef __key_t key_t; 
# 134 "/usr/include/x86_64-linux-gnu/sys/types.h" 3
typedef __useconds_t useconds_t; 
# 138
typedef __suseconds_t suseconds_t; 
# 148 "/usr/include/x86_64-linux-gnu/sys/types.h" 3
typedef unsigned long ulong; 
# 149
typedef unsigned short ushort; 
# 150
typedef unsigned uint; 
# 24 "/usr/include/x86_64-linux-gnu/bits/stdint-intn.h" 3
typedef __int8_t int8_t; 
# 25
typedef __int16_t int16_t; 
# 26
typedef __int32_t int32_t; 
# 27
typedef __int64_t int64_t; 
# 158 "/usr/include/x86_64-linux-gnu/sys/types.h" 3
typedef __uint8_t u_int8_t; 
# 159
typedef __uint16_t u_int16_t; 
# 160
typedef __uint32_t u_int32_t; 
# 161
typedef __uint64_t u_int64_t; 
# 164
typedef long register_t __attribute((__mode__(__word__))); 
# 34 "/usr/include/x86_64-linux-gnu/bits/byteswap.h" 3
static inline __uint16_t __bswap_16(__uint16_t __bsx) 
# 35
{ 
# 37
return __builtin_bswap16(__bsx); 
# 41
} 
# 49
static inline __uint32_t __bswap_32(__uint32_t __bsx) 
# 50
{ 
# 52
return __builtin_bswap32(__bsx); 
# 56
} 
# 70 "/usr/include/x86_64-linux-gnu/bits/byteswap.h" 3
__extension__ static inline __uint64_t __bswap_64(__uint64_t __bsx) 
# 71
{ 
# 73
return __builtin_bswap64(__bsx); 
# 77
} 
# 33 "/usr/include/x86_64-linux-gnu/bits/uintn-identity.h" 3
static inline __uint16_t __uint16_identity(__uint16_t __x) 
# 34
{ 
# 35
return __x; 
# 36
} 
# 39
static inline __uint32_t __uint32_identity(__uint32_t __x) 
# 40
{ 
# 41
return __x; 
# 42
} 
# 45
static inline __uint64_t __uint64_identity(__uint64_t __x) 
# 46
{ 
# 47
return __x; 
# 48
} 
# 8 "/usr/include/x86_64-linux-gnu/bits/types/__sigset_t.h" 3
typedef 
# 6
struct { 
# 7
unsigned long __val[(1024) / ((8) * sizeof(unsigned long))]; 
# 8
} __sigset_t; 
# 7 "/usr/include/x86_64-linux-gnu/bits/types/sigset_t.h" 3
typedef __sigset_t sigset_t; 
# 49 "/usr/include/x86_64-linux-gnu/sys/select.h" 3
typedef long __fd_mask; 
# 70 "/usr/include/x86_64-linux-gnu/sys/select.h" 3
typedef 
# 60
struct { 
# 64
__fd_mask fds_bits[1024 / (8 * ((int)sizeof(__fd_mask)))]; 
# 70
} fd_set; 
# 77
typedef __fd_mask fd_mask; 
# 91 "/usr/include/x86_64-linux-gnu/sys/select.h" 3
extern "C" {
# 101 "/usr/include/x86_64-linux-gnu/sys/select.h" 3
extern int select(int __nfds, fd_set *__restrict__ __readfds, fd_set *__restrict__ __writefds, fd_set *__restrict__ __exceptfds, timeval *__restrict__ __timeout); 
# 113 "/usr/include/x86_64-linux-gnu/sys/select.h" 3
extern int pselect(int __nfds, fd_set *__restrict__ __readfds, fd_set *__restrict__ __writefds, fd_set *__restrict__ __exceptfds, const timespec *__restrict__ __timeout, const __sigset_t *__restrict__ __sigmask); 
# 126 "/usr/include/x86_64-linux-gnu/sys/select.h" 3
}
# 185 "/usr/include/x86_64-linux-gnu/sys/types.h" 3
typedef __blksize_t blksize_t; 
# 192
typedef __blkcnt_t blkcnt_t; 
# 196
typedef __fsblkcnt_t fsblkcnt_t; 
# 200
typedef __fsfilcnt_t fsfilcnt_t; 
# 219 "/usr/include/x86_64-linux-gnu/sys/types.h" 3
typedef __blkcnt64_t blkcnt64_t; 
# 220
typedef __fsblkcnt64_t fsblkcnt64_t; 
# 221
typedef __fsfilcnt64_t fsfilcnt64_t; 
# 53 "/usr/include/x86_64-linux-gnu/bits/thread-shared-types.h" 3
typedef 
# 49
struct __pthread_internal_list { 
# 51
__pthread_internal_list *__prev; 
# 52
__pthread_internal_list *__next; 
# 53
} __pthread_list_t; 
# 58
typedef 
# 55
struct __pthread_internal_slist { 
# 57
__pthread_internal_slist *__next; 
# 58
} __pthread_slist_t; 
# 22 "/usr/include/x86_64-linux-gnu/bits/struct_mutex.h" 3
struct __pthread_mutex_s { 
# 24
int __lock; 
# 25
unsigned __count; 
# 26
int __owner; 
# 28
unsigned __nusers; 
# 32
int __kind; 
# 34
short __spins; 
# 35
short __elision; 
# 36
__pthread_list_t __list; 
# 53 "/usr/include/x86_64-linux-gnu/bits/struct_mutex.h" 3
}; 
# 23 "/usr/include/x86_64-linux-gnu/bits/struct_rwlock.h" 3
struct __pthread_rwlock_arch_t { 
# 25
unsigned __readers; 
# 26
unsigned __writers; 
# 27
unsigned __wrphase_futex; 
# 28
unsigned __writers_futex; 
# 29
unsigned __pad3; 
# 30
unsigned __pad4; 
# 32
int __cur_writer; 
# 33
int __shared; 
# 34
signed char __rwelision; 
# 39
unsigned char __pad1[7]; 
# 42
unsigned long __pad2; 
# 45
unsigned __flags; 
# 55 "/usr/include/x86_64-linux-gnu/bits/struct_rwlock.h" 3
}; 
# 92 "/usr/include/x86_64-linux-gnu/bits/thread-shared-types.h" 3
struct __pthread_cond_s { 
# 95
__extension__ union { 
# 96
__extension__ unsigned long long __wseq; 
# 98
struct { 
# 99
unsigned __low; 
# 100
unsigned __high; 
# 101
} __wseq32; 
# 102
}; 
# 104
__extension__ union { 
# 105
__extension__ unsigned long long __g1_start; 
# 107
struct { 
# 108
unsigned __low; 
# 109
unsigned __high; 
# 110
} __g1_start32; 
# 111
}; 
# 112
unsigned __g_refs[2]; 
# 113
unsigned __g_size[2]; 
# 114
unsigned __g1_orig_size; 
# 115
unsigned __wrefs; 
# 116
unsigned __g_signals[2]; 
# 117
}; 
# 27 "/usr/include/x86_64-linux-gnu/bits/pthreadtypes.h" 3
typedef unsigned long pthread_t; 
# 36
typedef 
# 33
union { 
# 34
char __size[4]; 
# 35
int __align; 
# 36
} pthread_mutexattr_t; 
# 45
typedef 
# 42
union { 
# 43
char __size[4]; 
# 44
int __align; 
# 45
} pthread_condattr_t; 
# 49
typedef unsigned pthread_key_t; 
# 53
typedef int pthread_once_t; 
# 56
union pthread_attr_t { 
# 58
char __size[56]; 
# 59
long __align; 
# 60
}; 
# 62
typedef pthread_attr_t pthread_attr_t; 
# 72
typedef 
# 68
union { 
# 69
__pthread_mutex_s __data; 
# 70
char __size[40]; 
# 71
long __align; 
# 72
} pthread_mutex_t; 
# 80
typedef 
# 76
union { 
# 77
__pthread_cond_s __data; 
# 78
char __size[48]; 
# 79
__extension__ long long __align; 
# 80
} pthread_cond_t; 
# 91
typedef 
# 87
union { 
# 88
__pthread_rwlock_arch_t __data; 
# 89
char __size[56]; 
# 90
long __align; 
# 91
} pthread_rwlock_t; 
# 97
typedef 
# 94
union { 
# 95
char __size[8]; 
# 96
long __align; 
# 97
} pthread_rwlockattr_t; 
# 103
typedef volatile int pthread_spinlock_t; 
# 112
typedef 
# 109
union { 
# 110
char __size[32]; 
# 111
long __align; 
# 112
} pthread_barrier_t; 
# 118
typedef 
# 115
union { 
# 116
char __size[4]; 
# 117
int __align; 
# 118
} pthread_barrierattr_t; 
# 230 "/usr/include/x86_64-linux-gnu/sys/types.h" 3
}
# 401 "/usr/include/stdlib.h" 3
extern long random() throw(); 
# 404
extern void srandom(unsigned __seed) throw(); 
# 410
extern char *initstate(unsigned __seed, char * __statebuf, size_t __statelen) throw()
# 411
 __attribute((__nonnull__(2))); 
# 415
extern char *setstate(char * __statebuf) throw() __attribute((__nonnull__(1))); 
# 423
struct random_data { 
# 425
int32_t *fptr; 
# 426
int32_t *rptr; 
# 427
int32_t *state; 
# 428
int rand_type; 
# 429
int rand_deg; 
# 430
int rand_sep; 
# 431
int32_t *end_ptr; 
# 432
}; 
# 434
extern int random_r(random_data *__restrict__ __buf, int32_t *__restrict__ __result) throw()
# 435
 __attribute((__nonnull__(1, 2))); 
# 437
extern int srandom_r(unsigned __seed, random_data * __buf) throw()
# 438
 __attribute((__nonnull__(2))); 
# 440
extern int initstate_r(unsigned __seed, char *__restrict__ __statebuf, size_t __statelen, random_data *__restrict__ __buf) throw()
# 443
 __attribute((__nonnull__(2, 4))); 
# 445
extern int setstate_r(char *__restrict__ __statebuf, random_data *__restrict__ __buf) throw()
# 447
 __attribute((__nonnull__(1, 2))); 
# 453
extern int rand() throw(); 
# 455
extern void srand(unsigned __seed) throw(); 
# 459
extern int rand_r(unsigned * __seed) throw(); 
# 467
extern double drand48() throw(); 
# 468
extern double erand48(unsigned short  __xsubi[3]) throw() __attribute((__nonnull__(1))); 
# 471
extern long lrand48() throw(); 
# 472
extern long nrand48(unsigned short  __xsubi[3]) throw()
# 473
 __attribute((__nonnull__(1))); 
# 476
extern long mrand48() throw(); 
# 477
extern long jrand48(unsigned short  __xsubi[3]) throw()
# 478
 __attribute((__nonnull__(1))); 
# 481
extern void srand48(long __seedval) throw(); 
# 482
extern unsigned short *seed48(unsigned short  __seed16v[3]) throw()
# 483
 __attribute((__nonnull__(1))); 
# 484
extern void lcong48(unsigned short  __param[7]) throw() __attribute((__nonnull__(1))); 
# 490
struct drand48_data { 
# 492
unsigned short __x[3]; 
# 493
unsigned short __old_x[3]; 
# 494
unsigned short __c; 
# 495
unsigned short __init; 
# 496
__extension__ unsigned long long __a; 
# 498
}; 
# 501
extern int drand48_r(drand48_data *__restrict__ __buffer, double *__restrict__ __result) throw()
# 502
 __attribute((__nonnull__(1, 2))); 
# 503
extern int erand48_r(unsigned short  __xsubi[3], drand48_data *__restrict__ __buffer, double *__restrict__ __result) throw()
# 505
 __attribute((__nonnull__(1, 2))); 
# 508
extern int lrand48_r(drand48_data *__restrict__ __buffer, long *__restrict__ __result) throw()
# 510
 __attribute((__nonnull__(1, 2))); 
# 511
extern int nrand48_r(unsigned short  __xsubi[3], drand48_data *__restrict__ __buffer, long *__restrict__ __result) throw()
# 514
 __attribute((__nonnull__(1, 2))); 
# 517
extern int mrand48_r(drand48_data *__restrict__ __buffer, long *__restrict__ __result) throw()
# 519
 __attribute((__nonnull__(1, 2))); 
# 520
extern int jrand48_r(unsigned short  __xsubi[3], drand48_data *__restrict__ __buffer, long *__restrict__ __result) throw()
# 523
 __attribute((__nonnull__(1, 2))); 
# 526
extern int srand48_r(long __seedval, drand48_data * __buffer) throw()
# 527
 __attribute((__nonnull__(2))); 
# 529
extern int seed48_r(unsigned short  __seed16v[3], drand48_data * __buffer) throw()
# 530
 __attribute((__nonnull__(1, 2))); 
# 532
extern int lcong48_r(unsigned short  __param[7], drand48_data * __buffer) throw()
# 534
 __attribute((__nonnull__(1, 2))); 
# 539
extern void *malloc(size_t __size) throw() __attribute((__malloc__))
# 540
 __attribute((__alloc_size__(1))); 
# 542
extern void *calloc(size_t __nmemb, size_t __size) throw()
# 543
 __attribute((__malloc__)) __attribute((__alloc_size__(1, 2))); 
# 550
extern void *realloc(void * __ptr, size_t __size) throw()
# 551
 __attribute((__warn_unused_result__)) __attribute((__alloc_size__(2))); 
# 559
extern void *reallocarray(void * __ptr, size_t __nmemb, size_t __size) throw()
# 560
 __attribute((__warn_unused_result__))
# 561
 __attribute((__alloc_size__(2, 3))); 
# 565
extern void free(void * __ptr) throw(); 
# 26 "/usr/include/alloca.h" 3
extern "C" {
# 32
extern void *alloca(size_t __size) throw(); 
# 38
}
# 574 "/usr/include/stdlib.h" 3
extern void *valloc(size_t __size) throw() __attribute((__malloc__))
# 575
 __attribute((__alloc_size__(1))); 
# 580
extern int posix_memalign(void ** __memptr, size_t __alignment, size_t __size) throw()
# 581
 __attribute((__nonnull__(1))); 
# 586
extern void *aligned_alloc(size_t __alignment, size_t __size) throw()
# 587
 __attribute((__malloc__)) __attribute((__alloc_size__(2))); 
# 591
extern void abort() throw() __attribute((__noreturn__)); 
# 595
extern int atexit(void (* __func)(void)) throw() __attribute((__nonnull__(1))); 
# 600
extern "C++" int at_quick_exit(void (* __func)(void)) throw() __asm__("at_quick_exit")
# 601
 __attribute((__nonnull__(1))); 
# 610 "/usr/include/stdlib.h" 3
extern int on_exit(void (* __func)(int __status, void * __arg), void * __arg) throw()
# 611
 __attribute((__nonnull__(1))); 
# 617
extern void exit(int __status) throw() __attribute((__noreturn__)); 
# 623
extern void quick_exit(int __status) throw() __attribute((__noreturn__)); 
# 629
extern void _Exit(int __status) throw() __attribute((__noreturn__)); 
# 634
extern char *getenv(const char * __name) throw() __attribute((__nonnull__(1))); 
# 639
extern char *secure_getenv(const char * __name) throw()
# 640
 __attribute((__nonnull__(1))); 
# 647
extern int putenv(char * __string) throw() __attribute((__nonnull__(1))); 
# 653
extern int setenv(const char * __name, const char * __value, int __replace) throw()
# 654
 __attribute((__nonnull__(2))); 
# 657
extern int unsetenv(const char * __name) throw() __attribute((__nonnull__(1))); 
# 664
extern int clearenv() throw(); 
# 675 "/usr/include/stdlib.h" 3
extern char *mktemp(char * __template) throw() __attribute((__nonnull__(1))); 
# 688 "/usr/include/stdlib.h" 3
extern int mkstemp(char * __template) __attribute((__nonnull__(1))); 
# 698 "/usr/include/stdlib.h" 3
extern int mkstemp64(char * __template) __attribute((__nonnull__(1))); 
# 710 "/usr/include/stdlib.h" 3
extern int mkstemps(char * __template, int __suffixlen) __attribute((__nonnull__(1))); 
# 720 "/usr/include/stdlib.h" 3
extern int mkstemps64(char * __template, int __suffixlen)
# 721
 __attribute((__nonnull__(1))); 
# 731 "/usr/include/stdlib.h" 3
extern char *mkdtemp(char * __template) throw() __attribute((__nonnull__(1))); 
# 742 "/usr/include/stdlib.h" 3
extern int mkostemp(char * __template, int __flags) __attribute((__nonnull__(1))); 
# 752 "/usr/include/stdlib.h" 3
extern int mkostemp64(char * __template, int __flags) __attribute((__nonnull__(1))); 
# 762 "/usr/include/stdlib.h" 3
extern int mkostemps(char * __template, int __suffixlen, int __flags)
# 763
 __attribute((__nonnull__(1))); 
# 774 "/usr/include/stdlib.h" 3
extern int mkostemps64(char * __template, int __suffixlen, int __flags)
# 775
 __attribute((__nonnull__(1))); 
# 784 "/usr/include/stdlib.h" 3
extern int system(const char * __command); 
# 790
extern char *canonicalize_file_name(const char * __name) throw()
# 791
 __attribute((__nonnull__(1))); 
# 800 "/usr/include/stdlib.h" 3
extern char *realpath(const char *__restrict__ __name, char *__restrict__ __resolved) throw(); 
# 808
typedef int (*__compar_fn_t)(const void *, const void *); 
# 811
typedef __compar_fn_t comparison_fn_t; 
# 815
typedef int (*__compar_d_fn_t)(const void *, const void *, void *); 
# 820
extern void *bsearch(const void * __key, const void * __base, size_t __nmemb, size_t __size, __compar_fn_t __compar)
# 822
 __attribute((__nonnull__(1, 2, 5))); 
# 830
extern void qsort(void * __base, size_t __nmemb, size_t __size, __compar_fn_t __compar)
# 831
 __attribute((__nonnull__(1, 4))); 
# 833
extern void qsort_r(void * __base, size_t __nmemb, size_t __size, __compar_d_fn_t __compar, void * __arg)
# 835
 __attribute((__nonnull__(1, 4))); 
# 840
extern int abs(int __x) throw() __attribute((const)); 
# 841
extern long labs(long __x) throw() __attribute((const)); 
# 844
__extension__ extern long long llabs(long long __x) throw()
# 845
 __attribute((const)); 
# 852
extern div_t div(int __numer, int __denom) throw()
# 853
 __attribute((const)); 
# 854
extern ldiv_t ldiv(long __numer, long __denom) throw()
# 855
 __attribute((const)); 
# 858
__extension__ extern lldiv_t lldiv(long long __numer, long long __denom) throw()
# 860
 __attribute((const)); 
# 872 "/usr/include/stdlib.h" 3
extern char *ecvt(double __value, int __ndigit, int *__restrict__ __decpt, int *__restrict__ __sign) throw()
# 873
 __attribute((__nonnull__(3, 4))); 
# 878
extern char *fcvt(double __value, int __ndigit, int *__restrict__ __decpt, int *__restrict__ __sign) throw()
# 879
 __attribute((__nonnull__(3, 4))); 
# 884
extern char *gcvt(double __value, int __ndigit, char * __buf) throw()
# 885
 __attribute((__nonnull__(3))); 
# 890
extern char *qecvt(long double __value, int __ndigit, int *__restrict__ __decpt, int *__restrict__ __sign) throw()
# 892
 __attribute((__nonnull__(3, 4))); 
# 893
extern char *qfcvt(long double __value, int __ndigit, int *__restrict__ __decpt, int *__restrict__ __sign) throw()
# 895
 __attribute((__nonnull__(3, 4))); 
# 896
extern char *qgcvt(long double __value, int __ndigit, char * __buf) throw()
# 897
 __attribute((__nonnull__(3))); 
# 902
extern int ecvt_r(double __value, int __ndigit, int *__restrict__ __decpt, int *__restrict__ __sign, char *__restrict__ __buf, size_t __len) throw()
# 904
 __attribute((__nonnull__(3, 4, 5))); 
# 905
extern int fcvt_r(double __value, int __ndigit, int *__restrict__ __decpt, int *__restrict__ __sign, char *__restrict__ __buf, size_t __len) throw()
# 907
 __attribute((__nonnull__(3, 4, 5))); 
# 909
extern int qecvt_r(long double __value, int __ndigit, int *__restrict__ __decpt, int *__restrict__ __sign, char *__restrict__ __buf, size_t __len) throw()
# 912
 __attribute((__nonnull__(3, 4, 5))); 
# 913
extern int qfcvt_r(long double __value, int __ndigit, int *__restrict__ __decpt, int *__restrict__ __sign, char *__restrict__ __buf, size_t __len) throw()
# 916
 __attribute((__nonnull__(3, 4, 5))); 
# 922
extern int mblen(const char * __s, size_t __n) throw(); 
# 925
extern int mbtowc(wchar_t *__restrict__ __pwc, const char *__restrict__ __s, size_t __n) throw(); 
# 929
extern int wctomb(char * __s, wchar_t __wchar) throw(); 
# 933
extern size_t mbstowcs(wchar_t *__restrict__ __pwcs, const char *__restrict__ __s, size_t __n) throw(); 
# 936
extern size_t wcstombs(char *__restrict__ __s, const wchar_t *__restrict__ __pwcs, size_t __n) throw(); 
# 946
extern int rpmatch(const char * __response) throw() __attribute((__nonnull__(1))); 
# 957 "/usr/include/stdlib.h" 3
extern int getsubopt(char **__restrict__ __optionp, char *const *__restrict__ __tokens, char **__restrict__ __valuep) throw()
# 960
 __attribute((__nonnull__(1, 2, 3))); 
# 968
extern int posix_openpt(int __oflag); 
# 976
extern int grantpt(int __fd) throw(); 
# 980
extern int unlockpt(int __fd) throw(); 
# 985
extern char *ptsname(int __fd) throw(); 
# 992
extern int ptsname_r(int __fd, char * __buf, size_t __buflen) throw()
# 993
 __attribute((__nonnull__(2))); 
# 996
extern int getpt(); 
# 1003
extern int getloadavg(double  __loadavg[], int __nelem) throw()
# 1004
 __attribute((__nonnull__(1))); 
# 1023 "/usr/include/stdlib.h" 3
}
# 46 "/usr/include/c++/8/bits/std_abs.h" 3
extern "C++" {
# 48
namespace std __attribute((__visibility__("default"))) { 
# 52
using ::abs;
# 56
inline long abs(long __i) { return __builtin_labs(__i); } 
# 61
inline long long abs(long long __x) { return __builtin_llabs(__x); } 
# 70
constexpr double abs(double __x) 
# 71
{ return __builtin_fabs(__x); } 
# 74
constexpr float abs(float __x) 
# 75
{ return __builtin_fabsf(__x); } 
# 78
constexpr long double abs(long double __x) 
# 79
{ return __builtin_fabsl(__x); } 
# 84
constexpr __int128_t abs(__int128_t __x) { return (__x >= (0)) ? __x : (-__x); } 
# 107 "/usr/include/c++/8/bits/std_abs.h" 3
}
# 108
}
# 77 "/usr/include/c++/8/cmath" 3
extern "C++" {
# 79
namespace std __attribute((__visibility__("default"))) { 
# 83
using ::acos;
# 87
constexpr float acos(float __x) 
# 88
{ return __builtin_acosf(__x); } 
# 91
constexpr long double acos(long double __x) 
# 92
{ return __builtin_acosl(__x); } 
# 95
template< class _Tp> constexpr typename __gnu_cxx::__enable_if< __is_integer< _Tp> ::__value, double> ::__type 
# 99
acos(_Tp __x) 
# 100
{ return __builtin_acos(__x); } 
# 102
using ::asin;
# 106
constexpr float asin(float __x) 
# 107
{ return __builtin_asinf(__x); } 
# 110
constexpr long double asin(long double __x) 
# 111
{ return __builtin_asinl(__x); } 
# 114
template< class _Tp> constexpr typename __gnu_cxx::__enable_if< __is_integer< _Tp> ::__value, double> ::__type 
# 118
asin(_Tp __x) 
# 119
{ return __builtin_asin(__x); } 
# 121
using ::atan;
# 125
constexpr float atan(float __x) 
# 126
{ return __builtin_atanf(__x); } 
# 129
constexpr long double atan(long double __x) 
# 130
{ return __builtin_atanl(__x); } 
# 133
template< class _Tp> constexpr typename __gnu_cxx::__enable_if< __is_integer< _Tp> ::__value, double> ::__type 
# 137
atan(_Tp __x) 
# 138
{ return __builtin_atan(__x); } 
# 140
using ::atan2;
# 144
constexpr float atan2(float __y, float __x) 
# 145
{ return __builtin_atan2f(__y, __x); } 
# 148
constexpr long double atan2(long double __y, long double __x) 
# 149
{ return __builtin_atan2l(__y, __x); } 
# 152
template< class _Tp, class _Up> constexpr typename __gnu_cxx::__promote_2< _Tp, _Up> ::__type 
# 155
atan2(_Tp __y, _Up __x) 
# 156
{ 
# 157
typedef typename __gnu_cxx::__promote_2< _Tp, _Up> ::__type __type; 
# 158
return atan2((__type)__y, (__type)__x); 
# 159
} 
# 161
using ::ceil;
# 165
constexpr float ceil(float __x) 
# 166
{ return __builtin_ceilf(__x); } 
# 169
constexpr long double ceil(long double __x) 
# 170
{ return __builtin_ceill(__x); } 
# 173
template< class _Tp> constexpr typename __gnu_cxx::__enable_if< __is_integer< _Tp> ::__value, double> ::__type 
# 177
ceil(_Tp __x) 
# 178
{ return __builtin_ceil(__x); } 
# 180
using ::cos;
# 184
constexpr float cos(float __x) 
# 185
{ return __builtin_cosf(__x); } 
# 188
constexpr long double cos(long double __x) 
# 189
{ return __builtin_cosl(__x); } 
# 192
template< class _Tp> constexpr typename __gnu_cxx::__enable_if< __is_integer< _Tp> ::__value, double> ::__type 
# 196
cos(_Tp __x) 
# 197
{ return __builtin_cos(__x); } 
# 199
using ::cosh;
# 203
constexpr float cosh(float __x) 
# 204
{ return __builtin_coshf(__x); } 
# 207
constexpr long double cosh(long double __x) 
# 208
{ return __builtin_coshl(__x); } 
# 211
template< class _Tp> constexpr typename __gnu_cxx::__enable_if< __is_integer< _Tp> ::__value, double> ::__type 
# 215
cosh(_Tp __x) 
# 216
{ return __builtin_cosh(__x); } 
# 218
using ::exp;
# 222
constexpr float exp(float __x) 
# 223
{ return __builtin_expf(__x); } 
# 226
constexpr long double exp(long double __x) 
# 227
{ return __builtin_expl(__x); } 
# 230
template< class _Tp> constexpr typename __gnu_cxx::__enable_if< __is_integer< _Tp> ::__value, double> ::__type 
# 234
exp(_Tp __x) 
# 235
{ return __builtin_exp(__x); } 
# 237
using ::fabs;
# 241
constexpr float fabs(float __x) 
# 242
{ return __builtin_fabsf(__x); } 
# 245
constexpr long double fabs(long double __x) 
# 246
{ return __builtin_fabsl(__x); } 
# 249
template< class _Tp> constexpr typename __gnu_cxx::__enable_if< __is_integer< _Tp> ::__value, double> ::__type 
# 253
fabs(_Tp __x) 
# 254
{ return __builtin_fabs(__x); } 
# 256
using ::floor;
# 260
constexpr float floor(float __x) 
# 261
{ return __builtin_floorf(__x); } 
# 264
constexpr long double floor(long double __x) 
# 265
{ return __builtin_floorl(__x); } 
# 268
template< class _Tp> constexpr typename __gnu_cxx::__enable_if< __is_integer< _Tp> ::__value, double> ::__type 
# 272
floor(_Tp __x) 
# 273
{ return __builtin_floor(__x); } 
# 275
using ::fmod;
# 279
constexpr float fmod(float __x, float __y) 
# 280
{ return __builtin_fmodf(__x, __y); } 
# 283
constexpr long double fmod(long double __x, long double __y) 
# 284
{ return __builtin_fmodl(__x, __y); } 
# 287
template< class _Tp, class _Up> constexpr typename __gnu_cxx::__promote_2< _Tp, _Up> ::__type 
# 290
fmod(_Tp __x, _Up __y) 
# 291
{ 
# 292
typedef typename __gnu_cxx::__promote_2< _Tp, _Up> ::__type __type; 
# 293
return fmod((__type)__x, (__type)__y); 
# 294
} 
# 296
using ::frexp;
# 300
inline float frexp(float __x, int *__exp) 
# 301
{ return __builtin_frexpf(__x, __exp); } 
# 304
inline long double frexp(long double __x, int *__exp) 
# 305
{ return __builtin_frexpl(__x, __exp); } 
# 308
template< class _Tp> constexpr typename __gnu_cxx::__enable_if< __is_integer< _Tp> ::__value, double> ::__type 
# 312
frexp(_Tp __x, int *__exp) 
# 313
{ return __builtin_frexp(__x, __exp); } 
# 315
using ::ldexp;
# 319
constexpr float ldexp(float __x, int __exp) 
# 320
{ return __builtin_ldexpf(__x, __exp); } 
# 323
constexpr long double ldexp(long double __x, int __exp) 
# 324
{ return __builtin_ldexpl(__x, __exp); } 
# 327
template< class _Tp> constexpr typename __gnu_cxx::__enable_if< __is_integer< _Tp> ::__value, double> ::__type 
# 331
ldexp(_Tp __x, int __exp) 
# 332
{ return __builtin_ldexp(__x, __exp); } 
# 334
using ::log;
# 338
constexpr float log(float __x) 
# 339
{ return __builtin_logf(__x); } 
# 342
constexpr long double log(long double __x) 
# 343
{ return __builtin_logl(__x); } 
# 346
template< class _Tp> constexpr typename __gnu_cxx::__enable_if< __is_integer< _Tp> ::__value, double> ::__type 
# 350
log(_Tp __x) 
# 351
{ return __builtin_log(__x); } 
# 353
using ::log10;
# 357
constexpr float log10(float __x) 
# 358
{ return __builtin_log10f(__x); } 
# 361
constexpr long double log10(long double __x) 
# 362
{ return __builtin_log10l(__x); } 
# 365
template< class _Tp> constexpr typename __gnu_cxx::__enable_if< __is_integer< _Tp> ::__value, double> ::__type 
# 369
log10(_Tp __x) 
# 370
{ return __builtin_log10(__x); } 
# 372
using ::modf;
# 376
inline float modf(float __x, float *__iptr) 
# 377
{ return __builtin_modff(__x, __iptr); } 
# 380
inline long double modf(long double __x, long double *__iptr) 
# 381
{ return __builtin_modfl(__x, __iptr); } 
# 384
using ::pow;
# 388
constexpr float pow(float __x, float __y) 
# 389
{ return __builtin_powf(__x, __y); } 
# 392
constexpr long double pow(long double __x, long double __y) 
# 393
{ return __builtin_powl(__x, __y); } 
# 412 "/usr/include/c++/8/cmath" 3
template< class _Tp, class _Up> constexpr typename __gnu_cxx::__promote_2< _Tp, _Up> ::__type 
# 415
pow(_Tp __x, _Up __y) 
# 416
{ 
# 417
typedef typename __gnu_cxx::__promote_2< _Tp, _Up> ::__type __type; 
# 418
return pow((__type)__x, (__type)__y); 
# 419
} 
# 421
using ::sin;
# 425
constexpr float sin(float __x) 
# 426
{ return __builtin_sinf(__x); } 
# 429
constexpr long double sin(long double __x) 
# 430
{ return __builtin_sinl(__x); } 
# 433
template< class _Tp> constexpr typename __gnu_cxx::__enable_if< __is_integer< _Tp> ::__value, double> ::__type 
# 437
sin(_Tp __x) 
# 438
{ return __builtin_sin(__x); } 
# 440
using ::sinh;
# 444
constexpr float sinh(float __x) 
# 445
{ return __builtin_sinhf(__x); } 
# 448
constexpr long double sinh(long double __x) 
# 449
{ return __builtin_sinhl(__x); } 
# 452
template< class _Tp> constexpr typename __gnu_cxx::__enable_if< __is_integer< _Tp> ::__value, double> ::__type 
# 456
sinh(_Tp __x) 
# 457
{ return __builtin_sinh(__x); } 
# 459
using ::sqrt;
# 463
constexpr float sqrt(float __x) 
# 464
{ return __builtin_sqrtf(__x); } 
# 467
constexpr long double sqrt(long double __x) 
# 468
{ return __builtin_sqrtl(__x); } 
# 471
template< class _Tp> constexpr typename __gnu_cxx::__enable_if< __is_integer< _Tp> ::__value, double> ::__type 
# 475
sqrt(_Tp __x) 
# 476
{ return __builtin_sqrt(__x); } 
# 478
using ::tan;
# 482
constexpr float tan(float __x) 
# 483
{ return __builtin_tanf(__x); } 
# 486
constexpr long double tan(long double __x) 
# 487
{ return __builtin_tanl(__x); } 
# 490
template< class _Tp> constexpr typename __gnu_cxx::__enable_if< __is_integer< _Tp> ::__value, double> ::__type 
# 494
tan(_Tp __x) 
# 495
{ return __builtin_tan(__x); } 
# 497
using ::tanh;
# 501
constexpr float tanh(float __x) 
# 502
{ return __builtin_tanhf(__x); } 
# 505
constexpr long double tanh(long double __x) 
# 506
{ return __builtin_tanhl(__x); } 
# 509
template< class _Tp> constexpr typename __gnu_cxx::__enable_if< __is_integer< _Tp> ::__value, double> ::__type 
# 513
tanh(_Tp __x) 
# 514
{ return __builtin_tanh(__x); } 
# 537 "/usr/include/c++/8/cmath" 3
constexpr int fpclassify(float __x) 
# 538
{ return __builtin_fpclassify(0, 1, 4, 3, 2, __x); 
# 539
} 
# 542
constexpr int fpclassify(double __x) 
# 543
{ return __builtin_fpclassify(0, 1, 4, 3, 2, __x); 
# 544
} 
# 547
constexpr int fpclassify(long double __x) 
# 548
{ return __builtin_fpclassify(0, 1, 4, 3, 2, __x); 
# 549
} 
# 553
template< class _Tp> constexpr typename __gnu_cxx::__enable_if< __is_integer< _Tp> ::__value, int> ::__type 
# 556
fpclassify(_Tp __x) 
# 557
{ return (__x != 0) ? 4 : 2; } 
# 562
constexpr bool isfinite(float __x) 
# 563
{ return __builtin_isfinite(__x); } 
# 566
constexpr bool isfinite(double __x) 
# 567
{ return __builtin_isfinite(__x); } 
# 570
constexpr bool isfinite(long double __x) 
# 571
{ return __builtin_isfinite(__x); } 
# 575
template< class _Tp> constexpr typename __gnu_cxx::__enable_if< __is_integer< _Tp> ::__value, bool> ::__type 
# 578
isfinite(_Tp __x) 
# 579
{ return true; } 
# 584
constexpr bool isinf(float __x) 
# 585
{ return __builtin_isinf(__x); } 
# 592
constexpr bool isinf(double __x) 
# 593
{ return __builtin_isinf(__x); } 
# 597
constexpr bool isinf(long double __x) 
# 598
{ return __builtin_isinf(__x); } 
# 602
template< class _Tp> constexpr typename __gnu_cxx::__enable_if< __is_integer< _Tp> ::__value, bool> ::__type 
# 605
isinf(_Tp __x) 
# 606
{ return false; } 
# 611
constexpr bool isnan(float __x) 
# 612
{ return __builtin_isnan(__x); } 
# 619
constexpr bool isnan(double __x) 
# 620
{ return __builtin_isnan(__x); } 
# 624
constexpr bool isnan(long double __x) 
# 625
{ return __builtin_isnan(__x); } 
# 629
template< class _Tp> constexpr typename __gnu_cxx::__enable_if< __is_integer< _Tp> ::__value, bool> ::__type 
# 632
isnan(_Tp __x) 
# 633
{ return false; } 
# 638
constexpr bool isnormal(float __x) 
# 639
{ return __builtin_isnormal(__x); } 
# 642
constexpr bool isnormal(double __x) 
# 643
{ return __builtin_isnormal(__x); } 
# 646
constexpr bool isnormal(long double __x) 
# 647
{ return __builtin_isnormal(__x); } 
# 651
template< class _Tp> constexpr typename __gnu_cxx::__enable_if< __is_integer< _Tp> ::__value, bool> ::__type 
# 654
isnormal(_Tp __x) 
# 655
{ return (__x != 0) ? true : false; } 
# 661
constexpr bool signbit(float __x) 
# 662
{ return __builtin_signbit(__x); } 
# 665
constexpr bool signbit(double __x) 
# 666
{ return __builtin_signbit(__x); } 
# 669
constexpr bool signbit(long double __x) 
# 670
{ return __builtin_signbit(__x); } 
# 674
template< class _Tp> constexpr typename __gnu_cxx::__enable_if< __is_integer< _Tp> ::__value, bool> ::__type 
# 677
signbit(_Tp __x) 
# 678
{ return (__x < 0) ? true : false; } 
# 683
constexpr bool isgreater(float __x, float __y) 
# 684
{ return __builtin_isgreater(__x, __y); } 
# 687
constexpr bool isgreater(double __x, double __y) 
# 688
{ return __builtin_isgreater(__x, __y); } 
# 691
constexpr bool isgreater(long double __x, long double __y) 
# 692
{ return __builtin_isgreater(__x, __y); } 
# 696
template< class _Tp, class _Up> constexpr typename __gnu_cxx::__enable_if< __is_arithmetic< _Tp> ::__value && __is_arithmetic< _Up> ::__value, bool> ::__type 
# 700
isgreater(_Tp __x, _Up __y) 
# 701
{ 
# 702
typedef typename __gnu_cxx::__promote_2< _Tp, _Up> ::__type __type; 
# 703
return __builtin_isgreater((__type)__x, (__type)__y); 
# 704
} 
# 709
constexpr bool isgreaterequal(float __x, float __y) 
# 710
{ return __builtin_isgreaterequal(__x, __y); } 
# 713
constexpr bool isgreaterequal(double __x, double __y) 
# 714
{ return __builtin_isgreaterequal(__x, __y); } 
# 717
constexpr bool isgreaterequal(long double __x, long double __y) 
# 718
{ return __builtin_isgreaterequal(__x, __y); } 
# 722
template< class _Tp, class _Up> constexpr typename __gnu_cxx::__enable_if< __is_arithmetic< _Tp> ::__value && __is_arithmetic< _Up> ::__value, bool> ::__type 
# 726
isgreaterequal(_Tp __x, _Up __y) 
# 727
{ 
# 728
typedef typename __gnu_cxx::__promote_2< _Tp, _Up> ::__type __type; 
# 729
return __builtin_isgreaterequal((__type)__x, (__type)__y); 
# 730
} 
# 735
constexpr bool isless(float __x, float __y) 
# 736
{ return __builtin_isless(__x, __y); } 
# 739
constexpr bool isless(double __x, double __y) 
# 740
{ return __builtin_isless(__x, __y); } 
# 743
constexpr bool isless(long double __x, long double __y) 
# 744
{ return __builtin_isless(__x, __y); } 
# 748
template< class _Tp, class _Up> constexpr typename __gnu_cxx::__enable_if< __is_arithmetic< _Tp> ::__value && __is_arithmetic< _Up> ::__value, bool> ::__type 
# 752
isless(_Tp __x, _Up __y) 
# 753
{ 
# 754
typedef typename __gnu_cxx::__promote_2< _Tp, _Up> ::__type __type; 
# 755
return __builtin_isless((__type)__x, (__type)__y); 
# 756
} 
# 761
constexpr bool islessequal(float __x, float __y) 
# 762
{ return __builtin_islessequal(__x, __y); } 
# 765
constexpr bool islessequal(double __x, double __y) 
# 766
{ return __builtin_islessequal(__x, __y); } 
# 769
constexpr bool islessequal(long double __x, long double __y) 
# 770
{ return __builtin_islessequal(__x, __y); } 
# 774
template< class _Tp, class _Up> constexpr typename __gnu_cxx::__enable_if< __is_arithmetic< _Tp> ::__value && __is_arithmetic< _Up> ::__value, bool> ::__type 
# 778
islessequal(_Tp __x, _Up __y) 
# 779
{ 
# 780
typedef typename __gnu_cxx::__promote_2< _Tp, _Up> ::__type __type; 
# 781
return __builtin_islessequal((__type)__x, (__type)__y); 
# 782
} 
# 787
constexpr bool islessgreater(float __x, float __y) 
# 788
{ return __builtin_islessgreater(__x, __y); } 
# 791
constexpr bool islessgreater(double __x, double __y) 
# 792
{ return __builtin_islessgreater(__x, __y); } 
# 795
constexpr bool islessgreater(long double __x, long double __y) 
# 796
{ return __builtin_islessgreater(__x, __y); } 
# 800
template< class _Tp, class _Up> constexpr typename __gnu_cxx::__enable_if< __is_arithmetic< _Tp> ::__value && __is_arithmetic< _Up> ::__value, bool> ::__type 
# 804
islessgreater(_Tp __x, _Up __y) 
# 805
{ 
# 806
typedef typename __gnu_cxx::__promote_2< _Tp, _Up> ::__type __type; 
# 807
return __builtin_islessgreater((__type)__x, (__type)__y); 
# 808
} 
# 813
constexpr bool isunordered(float __x, float __y) 
# 814
{ return __builtin_isunordered(__x, __y); } 
# 817
constexpr bool isunordered(double __x, double __y) 
# 818
{ return __builtin_isunordered(__x, __y); } 
# 821
constexpr bool isunordered(long double __x, long double __y) 
# 822
{ return __builtin_isunordered(__x, __y); } 
# 826
template< class _Tp, class _Up> constexpr typename __gnu_cxx::__enable_if< __is_arithmetic< _Tp> ::__value && __is_arithmetic< _Up> ::__value, bool> ::__type 
# 830
isunordered(_Tp __x, _Up __y) 
# 831
{ 
# 832
typedef typename __gnu_cxx::__promote_2< _Tp, _Up> ::__type __type; 
# 833
return __builtin_isunordered((__type)__x, (__type)__y); 
# 834
} 
# 1065 "/usr/include/c++/8/cmath" 3
using ::double_t;
# 1066
using ::float_t;
# 1069
using ::acosh;
# 1070
using ::acoshf;
# 1071
using ::acoshl;
# 1073
using ::asinh;
# 1074
using ::asinhf;
# 1075
using ::asinhl;
# 1077
using ::atanh;
# 1078
using ::atanhf;
# 1079
using ::atanhl;
# 1081
using ::cbrt;
# 1082
using ::cbrtf;
# 1083
using ::cbrtl;
# 1085
using ::copysign;
# 1086
using ::copysignf;
# 1087
using ::copysignl;
# 1089
using ::erf;
# 1090
using ::erff;
# 1091
using ::erfl;
# 1093
using ::erfc;
# 1094
using ::erfcf;
# 1095
using ::erfcl;
# 1097
using ::exp2;
# 1098
using ::exp2f;
# 1099
using ::exp2l;
# 1101
using ::expm1;
# 1102
using ::expm1f;
# 1103
using ::expm1l;
# 1105
using ::fdim;
# 1106
using ::fdimf;
# 1107
using ::fdiml;
# 1109
using ::fma;
# 1110
using ::fmaf;
# 1111
using ::fmal;
# 1113
using ::fmax;
# 1114
using ::fmaxf;
# 1115
using ::fmaxl;
# 1117
using ::fmin;
# 1118
using ::fminf;
# 1119
using ::fminl;
# 1121
using ::hypot;
# 1122
using ::hypotf;
# 1123
using ::hypotl;
# 1125
using ::ilogb;
# 1126
using ::ilogbf;
# 1127
using ::ilogbl;
# 1129
using ::lgamma;
# 1130
using ::lgammaf;
# 1131
using ::lgammal;
# 1134
using ::llrint;
# 1135
using ::llrintf;
# 1136
using ::llrintl;
# 1138
using ::llround;
# 1139
using ::llroundf;
# 1140
using ::llroundl;
# 1143
using ::log1p;
# 1144
using ::log1pf;
# 1145
using ::log1pl;
# 1147
using ::log2;
# 1148
using ::log2f;
# 1149
using ::log2l;
# 1151
using ::logb;
# 1152
using ::logbf;
# 1153
using ::logbl;
# 1155
using ::lrint;
# 1156
using ::lrintf;
# 1157
using ::lrintl;
# 1159
using ::lround;
# 1160
using ::lroundf;
# 1161
using ::lroundl;
# 1163
using ::nan;
# 1164
using ::nanf;
# 1165
using ::nanl;
# 1167
using ::nearbyint;
# 1168
using ::nearbyintf;
# 1169
using ::nearbyintl;
# 1171
using ::nextafter;
# 1172
using ::nextafterf;
# 1173
using ::nextafterl;
# 1175
using ::nexttoward;
# 1176
using ::nexttowardf;
# 1177
using ::nexttowardl;
# 1179
using ::remainder;
# 1180
using ::remainderf;
# 1181
using ::remainderl;
# 1183
using ::remquo;
# 1184
using ::remquof;
# 1185
using ::remquol;
# 1187
using ::rint;
# 1188
using ::rintf;
# 1189
using ::rintl;
# 1191
using ::round;
# 1192
using ::roundf;
# 1193
using ::roundl;
# 1195
using ::scalbln;
# 1196
using ::scalblnf;
# 1197
using ::scalblnl;
# 1199
using ::scalbn;
# 1200
using ::scalbnf;
# 1201
using ::scalbnl;
# 1203
using ::tgamma;
# 1204
using ::tgammaf;
# 1205
using ::tgammal;
# 1207
using ::trunc;
# 1208
using ::truncf;
# 1209
using ::truncl;
# 1214
constexpr float acosh(float __x) 
# 1215
{ return __builtin_acoshf(__x); } 
# 1218
constexpr long double acosh(long double __x) 
# 1219
{ return __builtin_acoshl(__x); } 
# 1223
template< class _Tp> constexpr typename __gnu_cxx::__enable_if< __is_integer< _Tp> ::__value, double> ::__type 
# 1226
acosh(_Tp __x) 
# 1227
{ return __builtin_acosh(__x); } 
# 1232
constexpr float asinh(float __x) 
# 1233
{ return __builtin_asinhf(__x); } 
# 1236
constexpr long double asinh(long double __x) 
# 1237
{ return __builtin_asinhl(__x); } 
# 1241
template< class _Tp> constexpr typename __gnu_cxx::__enable_if< __is_integer< _Tp> ::__value, double> ::__type 
# 1244
asinh(_Tp __x) 
# 1245
{ return __builtin_asinh(__x); } 
# 1250
constexpr float atanh(float __x) 
# 1251
{ return __builtin_atanhf(__x); } 
# 1254
constexpr long double atanh(long double __x) 
# 1255
{ return __builtin_atanhl(__x); } 
# 1259
template< class _Tp> constexpr typename __gnu_cxx::__enable_if< __is_integer< _Tp> ::__value, double> ::__type 
# 1262
atanh(_Tp __x) 
# 1263
{ return __builtin_atanh(__x); } 
# 1268
constexpr float cbrt(float __x) 
# 1269
{ return __builtin_cbrtf(__x); } 
# 1272
constexpr long double cbrt(long double __x) 
# 1273
{ return __builtin_cbrtl(__x); } 
# 1277
template< class _Tp> constexpr typename __gnu_cxx::__enable_if< __is_integer< _Tp> ::__value, double> ::__type 
# 1280
cbrt(_Tp __x) 
# 1281
{ return __builtin_cbrt(__x); } 
# 1286
constexpr float copysign(float __x, float __y) 
# 1287
{ return __builtin_copysignf(__x, __y); } 
# 1290
constexpr long double copysign(long double __x, long double __y) 
# 1291
{ return __builtin_copysignl(__x, __y); } 
# 1295
template< class _Tp, class _Up> constexpr typename __gnu_cxx::__promote_2< _Tp, _Up> ::__type 
# 1297
copysign(_Tp __x, _Up __y) 
# 1298
{ 
# 1299
typedef typename __gnu_cxx::__promote_2< _Tp, _Up> ::__type __type; 
# 1300
return copysign((__type)__x, (__type)__y); 
# 1301
} 
# 1306
constexpr float erf(float __x) 
# 1307
{ return __builtin_erff(__x); } 
# 1310
constexpr long double erf(long double __x) 
# 1311
{ return __builtin_erfl(__x); } 
# 1315
template< class _Tp> constexpr typename __gnu_cxx::__enable_if< __is_integer< _Tp> ::__value, double> ::__type 
# 1318
erf(_Tp __x) 
# 1319
{ return __builtin_erf(__x); } 
# 1324
constexpr float erfc(float __x) 
# 1325
{ return __builtin_erfcf(__x); } 
# 1328
constexpr long double erfc(long double __x) 
# 1329
{ return __builtin_erfcl(__x); } 
# 1333
template< class _Tp> constexpr typename __gnu_cxx::__enable_if< __is_integer< _Tp> ::__value, double> ::__type 
# 1336
erfc(_Tp __x) 
# 1337
{ return __builtin_erfc(__x); } 
# 1342
constexpr float exp2(float __x) 
# 1343
{ return __builtin_exp2f(__x); } 
# 1346
constexpr long double exp2(long double __x) 
# 1347
{ return __builtin_exp2l(__x); } 
# 1351
template< class _Tp> constexpr typename __gnu_cxx::__enable_if< __is_integer< _Tp> ::__value, double> ::__type 
# 1354
exp2(_Tp __x) 
# 1355
{ return __builtin_exp2(__x); } 
# 1360
constexpr float expm1(float __x) 
# 1361
{ return __builtin_expm1f(__x); } 
# 1364
constexpr long double expm1(long double __x) 
# 1365
{ return __builtin_expm1l(__x); } 
# 1369
template< class _Tp> constexpr typename __gnu_cxx::__enable_if< __is_integer< _Tp> ::__value, double> ::__type 
# 1372
expm1(_Tp __x) 
# 1373
{ return __builtin_expm1(__x); } 
# 1378
constexpr float fdim(float __x, float __y) 
# 1379
{ return __builtin_fdimf(__x, __y); } 
# 1382
constexpr long double fdim(long double __x, long double __y) 
# 1383
{ return __builtin_fdiml(__x, __y); } 
# 1387
template< class _Tp, class _Up> constexpr typename __gnu_cxx::__promote_2< _Tp, _Up> ::__type 
# 1389
fdim(_Tp __x, _Up __y) 
# 1390
{ 
# 1391
typedef typename __gnu_cxx::__promote_2< _Tp, _Up> ::__type __type; 
# 1392
return fdim((__type)__x, (__type)__y); 
# 1393
} 
# 1398
constexpr float fma(float __x, float __y, float __z) 
# 1399
{ return __builtin_fmaf(__x, __y, __z); } 
# 1402
constexpr long double fma(long double __x, long double __y, long double __z) 
# 1403
{ return __builtin_fmal(__x, __y, __z); } 
# 1407
template< class _Tp, class _Up, class _Vp> constexpr typename __gnu_cxx::__promote_3< _Tp, _Up, _Vp> ::__type 
# 1409
fma(_Tp __x, _Up __y, _Vp __z) 
# 1410
{ 
# 1411
typedef typename __gnu_cxx::__promote_3< _Tp, _Up, _Vp> ::__type __type; 
# 1412
return fma((__type)__x, (__type)__y, (__type)__z); 
# 1413
} 
# 1418
constexpr float fmax(float __x, float __y) 
# 1419
{ return __builtin_fmaxf(__x, __y); } 
# 1422
constexpr long double fmax(long double __x, long double __y) 
# 1423
{ return __builtin_fmaxl(__x, __y); } 
# 1427
template< class _Tp, class _Up> constexpr typename __gnu_cxx::__promote_2< _Tp, _Up> ::__type 
# 1429
fmax(_Tp __x, _Up __y) 
# 1430
{ 
# 1431
typedef typename __gnu_cxx::__promote_2< _Tp, _Up> ::__type __type; 
# 1432
return fmax((__type)__x, (__type)__y); 
# 1433
} 
# 1438
constexpr float fmin(float __x, float __y) 
# 1439
{ return __builtin_fminf(__x, __y); } 
# 1442
constexpr long double fmin(long double __x, long double __y) 
# 1443
{ return __builtin_fminl(__x, __y); } 
# 1447
template< class _Tp, class _Up> constexpr typename __gnu_cxx::__promote_2< _Tp, _Up> ::__type 
# 1449
fmin(_Tp __x, _Up __y) 
# 1450
{ 
# 1451
typedef typename __gnu_cxx::__promote_2< _Tp, _Up> ::__type __type; 
# 1452
return fmin((__type)__x, (__type)__y); 
# 1453
} 
# 1458
constexpr float hypot(float __x, float __y) 
# 1459
{ return __builtin_hypotf(__x, __y); } 
# 1462
constexpr long double hypot(long double __x, long double __y) 
# 1463
{ return __builtin_hypotl(__x, __y); } 
# 1467
template< class _Tp, class _Up> constexpr typename __gnu_cxx::__promote_2< _Tp, _Up> ::__type 
# 1469
hypot(_Tp __x, _Up __y) 
# 1470
{ 
# 1471
typedef typename __gnu_cxx::__promote_2< _Tp, _Up> ::__type __type; 
# 1472
return hypot((__type)__x, (__type)__y); 
# 1473
} 
# 1478
constexpr int ilogb(float __x) 
# 1479
{ return __builtin_ilogbf(__x); } 
# 1482
constexpr int ilogb(long double __x) 
# 1483
{ return __builtin_ilogbl(__x); } 
# 1487
template< class _Tp> constexpr typename __gnu_cxx::__enable_if< __is_integer< _Tp> ::__value, int> ::__type 
# 1491
ilogb(_Tp __x) 
# 1492
{ return __builtin_ilogb(__x); } 
# 1497
constexpr float lgamma(float __x) 
# 1498
{ return __builtin_lgammaf(__x); } 
# 1501
constexpr long double lgamma(long double __x) 
# 1502
{ return __builtin_lgammal(__x); } 
# 1506
template< class _Tp> constexpr typename __gnu_cxx::__enable_if< __is_integer< _Tp> ::__value, double> ::__type 
# 1509
lgamma(_Tp __x) 
# 1510
{ return __builtin_lgamma(__x); } 
# 1515
constexpr long long llrint(float __x) 
# 1516
{ return __builtin_llrintf(__x); } 
# 1519
constexpr long long llrint(long double __x) 
# 1520
{ return __builtin_llrintl(__x); } 
# 1524
template< class _Tp> constexpr typename __gnu_cxx::__enable_if< __is_integer< _Tp> ::__value, long long> ::__type 
# 1527
llrint(_Tp __x) 
# 1528
{ return __builtin_llrint(__x); } 
# 1533
constexpr long long llround(float __x) 
# 1534
{ return __builtin_llroundf(__x); } 
# 1537
constexpr long long llround(long double __x) 
# 1538
{ return __builtin_llroundl(__x); } 
# 1542
template< class _Tp> constexpr typename __gnu_cxx::__enable_if< __is_integer< _Tp> ::__value, long long> ::__type 
# 1545
llround(_Tp __x) 
# 1546
{ return __builtin_llround(__x); } 
# 1551
constexpr float log1p(float __x) 
# 1552
{ return __builtin_log1pf(__x); } 
# 1555
constexpr long double log1p(long double __x) 
# 1556
{ return __builtin_log1pl(__x); } 
# 1560
template< class _Tp> constexpr typename __gnu_cxx::__enable_if< __is_integer< _Tp> ::__value, double> ::__type 
# 1563
log1p(_Tp __x) 
# 1564
{ return __builtin_log1p(__x); } 
# 1570
constexpr float log2(float __x) 
# 1571
{ return __builtin_log2f(__x); } 
# 1574
constexpr long double log2(long double __x) 
# 1575
{ return __builtin_log2l(__x); } 
# 1579
template< class _Tp> constexpr typename __gnu_cxx::__enable_if< __is_integer< _Tp> ::__value, double> ::__type 
# 1582
log2(_Tp __x) 
# 1583
{ return __builtin_log2(__x); } 
# 1588
constexpr float logb(float __x) 
# 1589
{ return __builtin_logbf(__x); } 
# 1592
constexpr long double logb(long double __x) 
# 1593
{ return __builtin_logbl(__x); } 
# 1597
template< class _Tp> constexpr typename __gnu_cxx::__enable_if< __is_integer< _Tp> ::__value, double> ::__type 
# 1600
logb(_Tp __x) 
# 1601
{ return __builtin_logb(__x); } 
# 1606
constexpr long lrint(float __x) 
# 1607
{ return __builtin_lrintf(__x); } 
# 1610
constexpr long lrint(long double __x) 
# 1611
{ return __builtin_lrintl(__x); } 
# 1615
template< class _Tp> constexpr typename __gnu_cxx::__enable_if< __is_integer< _Tp> ::__value, long> ::__type 
# 1618
lrint(_Tp __x) 
# 1619
{ return __builtin_lrint(__x); } 
# 1624
constexpr long lround(float __x) 
# 1625
{ return __builtin_lroundf(__x); } 
# 1628
constexpr long lround(long double __x) 
# 1629
{ return __builtin_lroundl(__x); } 
# 1633
template< class _Tp> constexpr typename __gnu_cxx::__enable_if< __is_integer< _Tp> ::__value, long> ::__type 
# 1636
lround(_Tp __x) 
# 1637
{ return __builtin_lround(__x); } 
# 1642
constexpr float nearbyint(float __x) 
# 1643
{ return __builtin_nearbyintf(__x); } 
# 1646
constexpr long double nearbyint(long double __x) 
# 1647
{ return __builtin_nearbyintl(__x); } 
# 1651
template< class _Tp> constexpr typename __gnu_cxx::__enable_if< __is_integer< _Tp> ::__value, double> ::__type 
# 1654
nearbyint(_Tp __x) 
# 1655
{ return __builtin_nearbyint(__x); } 
# 1660
constexpr float nextafter(float __x, float __y) 
# 1661
{ return __builtin_nextafterf(__x, __y); } 
# 1664
constexpr long double nextafter(long double __x, long double __y) 
# 1665
{ return __builtin_nextafterl(__x, __y); } 
# 1669
template< class _Tp, class _Up> constexpr typename __gnu_cxx::__promote_2< _Tp, _Up> ::__type 
# 1671
nextafter(_Tp __x, _Up __y) 
# 1672
{ 
# 1673
typedef typename __gnu_cxx::__promote_2< _Tp, _Up> ::__type __type; 
# 1674
return nextafter((__type)__x, (__type)__y); 
# 1675
} 
# 1680
constexpr float nexttoward(float __x, long double __y) 
# 1681
{ return __builtin_nexttowardf(__x, __y); } 
# 1684
constexpr long double nexttoward(long double __x, long double __y) 
# 1685
{ return __builtin_nexttowardl(__x, __y); } 
# 1689
template< class _Tp> constexpr typename __gnu_cxx::__enable_if< __is_integer< _Tp> ::__value, double> ::__type 
# 1692
nexttoward(_Tp __x, long double __y) 
# 1693
{ return __builtin_nexttoward(__x, __y); } 
# 1698
constexpr float remainder(float __x, float __y) 
# 1699
{ return __builtin_remainderf(__x, __y); } 
# 1702
constexpr long double remainder(long double __x, long double __y) 
# 1703
{ return __builtin_remainderl(__x, __y); } 
# 1707
template< class _Tp, class _Up> constexpr typename __gnu_cxx::__promote_2< _Tp, _Up> ::__type 
# 1709
remainder(_Tp __x, _Up __y) 
# 1710
{ 
# 1711
typedef typename __gnu_cxx::__promote_2< _Tp, _Up> ::__type __type; 
# 1712
return remainder((__type)__x, (__type)__y); 
# 1713
} 
# 1718
inline float remquo(float __x, float __y, int *__pquo) 
# 1719
{ return __builtin_remquof(__x, __y, __pquo); } 
# 1722
inline long double remquo(long double __x, long double __y, int *__pquo) 
# 1723
{ return __builtin_remquol(__x, __y, __pquo); } 
# 1727
template< class _Tp, class _Up> inline typename __gnu_cxx::__promote_2< _Tp, _Up> ::__type 
# 1729
remquo(_Tp __x, _Up __y, int *__pquo) 
# 1730
{ 
# 1731
typedef typename __gnu_cxx::__promote_2< _Tp, _Up> ::__type __type; 
# 1732
return remquo((__type)__x, (__type)__y, __pquo); 
# 1733
} 
# 1738
constexpr float rint(float __x) 
# 1739
{ return __builtin_rintf(__x); } 
# 1742
constexpr long double rint(long double __x) 
# 1743
{ return __builtin_rintl(__x); } 
# 1747
template< class _Tp> constexpr typename __gnu_cxx::__enable_if< __is_integer< _Tp> ::__value, double> ::__type 
# 1750
rint(_Tp __x) 
# 1751
{ return __builtin_rint(__x); } 
# 1756
constexpr float round(float __x) 
# 1757
{ return __builtin_roundf(__x); } 
# 1760
constexpr long double round(long double __x) 
# 1761
{ return __builtin_roundl(__x); } 
# 1765
template< class _Tp> constexpr typename __gnu_cxx::__enable_if< __is_integer< _Tp> ::__value, double> ::__type 
# 1768
round(_Tp __x) 
# 1769
{ return __builtin_round(__x); } 
# 1774
constexpr float scalbln(float __x, long __ex) 
# 1775
{ return __builtin_scalblnf(__x, __ex); } 
# 1778
constexpr long double scalbln(long double __x, long __ex) 
# 1779
{ return __builtin_scalblnl(__x, __ex); } 
# 1783
template< class _Tp> constexpr typename __gnu_cxx::__enable_if< __is_integer< _Tp> ::__value, double> ::__type 
# 1786
scalbln(_Tp __x, long __ex) 
# 1787
{ return __builtin_scalbln(__x, __ex); } 
# 1792
constexpr float scalbn(float __x, int __ex) 
# 1793
{ return __builtin_scalbnf(__x, __ex); } 
# 1796
constexpr long double scalbn(long double __x, int __ex) 
# 1797
{ return __builtin_scalbnl(__x, __ex); } 
# 1801
template< class _Tp> constexpr typename __gnu_cxx::__enable_if< __is_integer< _Tp> ::__value, double> ::__type 
# 1804
scalbn(_Tp __x, int __ex) 
# 1805
{ return __builtin_scalbn(__x, __ex); } 
# 1810
constexpr float tgamma(float __x) 
# 1811
{ return __builtin_tgammaf(__x); } 
# 1814
constexpr long double tgamma(long double __x) 
# 1815
{ return __builtin_tgammal(__x); } 
# 1819
template< class _Tp> constexpr typename __gnu_cxx::__enable_if< __is_integer< _Tp> ::__value, double> ::__type 
# 1822
tgamma(_Tp __x) 
# 1823
{ return __builtin_tgamma(__x); } 
# 1828
constexpr float trunc(float __x) 
# 1829
{ return __builtin_truncf(__x); } 
# 1832
constexpr long double trunc(long double __x) 
# 1833
{ return __builtin_truncl(__x); } 
# 1837
template< class _Tp> constexpr typename __gnu_cxx::__enable_if< __is_integer< _Tp> ::__value, double> ::__type 
# 1840
trunc(_Tp __x) 
# 1841
{ return __builtin_trunc(__x); } 
# 1889 "/usr/include/c++/8/cmath" 3
}
# 1895
}
# 38 "/usr/include/c++/8/math.h" 3
using std::abs;
# 39
using std::acos;
# 40
using std::asin;
# 41
using std::atan;
# 42
using std::atan2;
# 43
using std::cos;
# 44
using std::sin;
# 45
using std::tan;
# 46
using std::cosh;
# 47
using std::sinh;
# 48
using std::tanh;
# 49
using std::exp;
# 50
using std::frexp;
# 51
using std::ldexp;
# 52
using std::log;
# 53
using std::log10;
# 54
using std::modf;
# 55
using std::pow;
# 56
using std::sqrt;
# 57
using std::ceil;
# 58
using std::fabs;
# 59
using std::floor;
# 60
using std::fmod;
# 63
using std::fpclassify;
# 64
using std::isfinite;
# 65
using std::isinf;
# 66
using std::isnan;
# 67
using std::isnormal;
# 68
using std::signbit;
# 69
using std::isgreater;
# 70
using std::isgreaterequal;
# 71
using std::isless;
# 72
using std::islessequal;
# 73
using std::islessgreater;
# 74
using std::isunordered;
# 78
using std::acosh;
# 79
using std::asinh;
# 80
using std::atanh;
# 81
using std::cbrt;
# 82
using std::copysign;
# 83
using std::erf;
# 84
using std::erfc;
# 85
using std::exp2;
# 86
using std::expm1;
# 87
using std::fdim;
# 88
using std::fma;
# 89
using std::fmax;
# 90
using std::fmin;
# 91
using std::hypot;
# 92
using std::ilogb;
# 93
using std::lgamma;
# 94
using std::llrint;
# 95
using std::llround;
# 96
using std::log1p;
# 97
using std::log2;
# 98
using std::logb;
# 99
using std::lrint;
# 100
using std::lround;
# 101
using std::nearbyint;
# 102
using std::nextafter;
# 103
using std::nexttoward;
# 104
using std::remainder;
# 105
using std::remquo;
# 106
using std::rint;
# 107
using std::round;
# 108
using std::scalbln;
# 109
using std::scalbn;
# 110
using std::tgamma;
# 111
using std::trunc;
# 121 "/usr/include/c++/8/cstdlib" 3
extern "C++" {
# 123
namespace std __attribute((__visibility__("default"))) { 
# 127
using ::div_t;
# 128
using ::ldiv_t;
# 130
using ::abort;
# 134
using ::atexit;
# 137
using ::at_quick_exit;
# 140
using ::atof;
# 141
using ::atoi;
# 142
using ::atol;
# 143
using ::bsearch;
# 144
using ::calloc;
# 145
using ::div;
# 146
using ::exit;
# 147
using ::free;
# 148
using ::getenv;
# 149
using ::labs;
# 150
using ::ldiv;
# 151
using ::malloc;
# 153
using ::mblen;
# 154
using ::mbstowcs;
# 155
using ::mbtowc;
# 157
using ::qsort;
# 160
using ::quick_exit;
# 163
using ::rand;
# 164
using ::realloc;
# 165
using ::srand;
# 166
using ::strtod;
# 167
using ::strtol;
# 168
using ::strtoul;
# 169
using ::system;
# 171
using ::wcstombs;
# 172
using ::wctomb;
# 177
inline ldiv_t div(long __i, long __j) { return ldiv(__i, __j); } 
# 182
}
# 195 "/usr/include/c++/8/cstdlib" 3
namespace __gnu_cxx __attribute((__visibility__("default"))) { 
# 200
using ::lldiv_t;
# 206
using ::_Exit;
# 210
using ::llabs;
# 213
inline lldiv_t div(long long __n, long long __d) 
# 214
{ lldiv_t __q; (__q.quot) = (__n / __d); (__q.rem) = (__n % __d); return __q; } 
# 216
using ::lldiv;
# 227 "/usr/include/c++/8/cstdlib" 3
using ::atoll;
# 228
using ::strtoll;
# 229
using ::strtoull;
# 231
using ::strtof;
# 232
using ::strtold;
# 235
}
# 237
namespace std { 
# 240
using __gnu_cxx::lldiv_t;
# 242
using __gnu_cxx::_Exit;
# 244
using __gnu_cxx::llabs;
# 245
using __gnu_cxx::div;
# 246
using __gnu_cxx::lldiv;
# 248
using __gnu_cxx::atoll;
# 249
using __gnu_cxx::strtof;
# 250
using __gnu_cxx::strtoll;
# 251
using __gnu_cxx::strtoull;
# 252
using __gnu_cxx::strtold;
# 253
}
# 257
}
# 38 "/usr/include/c++/8/stdlib.h" 3
using std::abort;
# 39
using std::atexit;
# 40
using std::exit;
# 43
using std::at_quick_exit;
# 46
using std::quick_exit;
# 54
using std::abs;
# 55
using std::atof;
# 56
using std::atoi;
# 57
using std::atol;
# 58
using std::bsearch;
# 59
using std::calloc;
# 60
using std::div;
# 61
using std::free;
# 62
using std::getenv;
# 63
using std::labs;
# 64
using std::ldiv;
# 65
using std::malloc;
# 67
using std::mblen;
# 68
using std::mbstowcs;
# 69
using std::mbtowc;
# 71
using std::qsort;
# 72
using std::rand;
# 73
using std::realloc;
# 74
using std::srand;
# 75
using std::strtod;
# 76
using std::strtol;
# 77
using std::strtoul;
# 78
using std::system;
# 80
using std::wcstombs;
# 81
using std::wctomb;
# 8934 "/usr/include/crt/math_functions.h" 3
namespace std { 
# 8935
constexpr bool signbit(float x); 
# 8936
constexpr bool signbit(double x); 
# 8937
constexpr bool signbit(long double x); 
# 8938
constexpr bool isfinite(float x); 
# 8939
constexpr bool isfinite(double x); 
# 8940
constexpr bool isfinite(long double x); 
# 8941
constexpr bool isnan(float x); 
# 8946
constexpr bool isnan(double x); 
# 8948
constexpr bool isnan(long double x); 
# 8949
constexpr bool isinf(float x); 
# 8954
constexpr bool isinf(double x); 
# 8956
constexpr bool isinf(long double x); 
# 8957
}
# 9098 "/usr/include/crt/math_functions.h" 3
namespace std { 
# 9100
template< class T> extern T __pow_helper(T, int); 
# 9101
template< class T> extern T __cmath_power(T, unsigned); 
# 9102
}
# 9104
using std::abs;
# 9105
using std::fabs;
# 9106
using std::ceil;
# 9107
using std::floor;
# 9108
using std::sqrt;
# 9110
using std::pow;
# 9112
using std::log;
# 9113
using std::log10;
# 9114
using std::fmod;
# 9115
using std::modf;
# 9116
using std::exp;
# 9117
using std::frexp;
# 9118
using std::ldexp;
# 9119
using std::asin;
# 9120
using std::sin;
# 9121
using std::sinh;
# 9122
using std::acos;
# 9123
using std::cos;
# 9124
using std::cosh;
# 9125
using std::atan;
# 9126
using std::atan2;
# 9127
using std::tan;
# 9128
using std::tanh;
# 9493 "/usr/include/crt/math_functions.h" 3
namespace std { 
# 9502 "/usr/include/crt/math_functions.h" 3
extern inline long long abs(long long); 
# 9512 "/usr/include/crt/math_functions.h" 3
extern inline long abs(long); 
# 9513
extern constexpr float abs(float); 
# 9514
extern constexpr double abs(double); 
# 9515
extern constexpr float fabs(float); 
# 9516
extern constexpr float ceil(float); 
# 9517
extern constexpr float floor(float); 
# 9518
extern constexpr float sqrt(float); 
# 9519
extern constexpr float pow(float, float); 
# 9524
template< class _Tp, class _Up> extern constexpr typename __gnu_cxx::__promote_2< _Tp, _Up> ::__type pow(_Tp, _Up); 
# 9534
extern constexpr float log(float); 
# 9535
extern constexpr float log10(float); 
# 9536
extern constexpr float fmod(float, float); 
# 9537
extern inline float modf(float, float *); 
# 9538
extern constexpr float exp(float); 
# 9539
extern inline float frexp(float, int *); 
# 9540
extern constexpr float ldexp(float, int); 
# 9541
extern constexpr float asin(float); 
# 9542
extern constexpr float sin(float); 
# 9543
extern constexpr float sinh(float); 
# 9544
extern constexpr float acos(float); 
# 9545
extern constexpr float cos(float); 
# 9546
extern constexpr float cosh(float); 
# 9547
extern constexpr float atan(float); 
# 9548
extern constexpr float atan2(float, float); 
# 9549
extern constexpr float tan(float); 
# 9550
extern constexpr float tanh(float); 
# 9624 "/usr/include/crt/math_functions.h" 3
}
# 9725 "/usr/include/crt/math_functions.h" 3
namespace std { 
# 9726
constexpr float logb(float a); 
# 9727
constexpr int ilogb(float a); 
# 9728
constexpr float scalbn(float a, int b); 
# 9729
constexpr float scalbln(float a, long b); 
# 9730
constexpr float exp2(float a); 
# 9731
constexpr float expm1(float a); 
# 9732
constexpr float log2(float a); 
# 9733
constexpr float log1p(float a); 
# 9734
constexpr float acosh(float a); 
# 9735
constexpr float asinh(float a); 
# 9736
constexpr float atanh(float a); 
# 9737
constexpr float hypot(float a, float b); 
# 9738
constexpr float cbrt(float a); 
# 9739
constexpr float erf(float a); 
# 9740
constexpr float erfc(float a); 
# 9741
constexpr float lgamma(float a); 
# 9742
constexpr float tgamma(float a); 
# 9743
constexpr float copysign(float a, float b); 
# 9744
constexpr float nextafter(float a, float b); 
# 9745
constexpr float remainder(float a, float b); 
# 9746
inline float remquo(float a, float b, int * quo); 
# 9747
constexpr float round(float a); 
# 9748
constexpr long lround(float a); 
# 9749
constexpr long long llround(float a); 
# 9750
constexpr float trunc(float a); 
# 9751
constexpr float rint(float a); 
# 9752
constexpr long lrint(float a); 
# 9753
constexpr long long llrint(float a); 
# 9754
constexpr float nearbyint(float a); 
# 9755
constexpr float fdim(float a, float b); 
# 9756
constexpr float fma(float a, float b, float c); 
# 9757
constexpr float fmax(float a, float b); 
# 9758
constexpr float fmin(float a, float b); 
# 9759
}
# 9864 "/usr/include/crt/math_functions.h" 3
static inline float exp10(float a); 
# 9866
static inline float rsqrt(float a); 
# 9868
static inline float rcbrt(float a); 
# 9870
static inline float sinpi(float a); 
# 9872
static inline float cospi(float a); 
# 9874
static inline void sincospi(float a, float * sptr, float * cptr); 
# 9876
static inline void sincos(float a, float * sptr, float * cptr); 
# 9878
static inline float j0(float a); 
# 9880
static inline float j1(float a); 
# 9882
static inline float jn(int n, float a); 
# 9884
static inline float y0(float a); 
# 9886
static inline float y1(float a); 
# 9888
static inline float yn(int n, float a); 
# 9890
static inline float cyl_bessel_i0(float a); 
# 9892
static inline float cyl_bessel_i1(float a); 
# 9894
static inline float erfinv(float a); 
# 9896
static inline float erfcinv(float a); 
# 9898
static inline float normcdfinv(float a); 
# 9900
static inline float normcdf(float a); 
# 9902
static inline float erfcx(float a); 
# 9904
static inline double copysign(double a, float b); 
# 9906
static inline double copysign(float a, double b); 
# 9908
static inline unsigned min(unsigned a, unsigned b); 
# 9910
static inline unsigned min(int a, unsigned b); 
# 9912
static inline unsigned min(unsigned a, int b); 
# 9914
static inline long min(long a, long b); 
# 9916
static inline unsigned long min(unsigned long a, unsigned long b); 
# 9918
static inline unsigned long min(long a, unsigned long b); 
# 9920
static inline unsigned long min(unsigned long a, long b); 
# 9922
static inline long long min(long long a, long long b); 
# 9924
static inline unsigned long long min(unsigned long long a, unsigned long long b); 
# 9926
static inline unsigned long long min(long long a, unsigned long long b); 
# 9928
static inline unsigned long long min(unsigned long long a, long long b); 
# 9930
static inline float min(float a, float b); 
# 9932
static inline double min(double a, double b); 
# 9934
static inline double min(float a, double b); 
# 9936
static inline double min(double a, float b); 
# 9938
static inline unsigned max(unsigned a, unsigned b); 
# 9940
static inline unsigned max(int a, unsigned b); 
# 9942
static inline unsigned max(unsigned a, int b); 
# 9944
static inline long max(long a, long b); 
# 9946
static inline unsigned long max(unsigned long a, unsigned long b); 
# 9948
static inline unsigned long max(long a, unsigned long b); 
# 9950
static inline unsigned long max(unsigned long a, long b); 
# 9952
static inline long long max(long long a, long long b); 
# 9954
static inline unsigned long long max(unsigned long long a, unsigned long long b); 
# 9956
static inline unsigned long long max(long long a, unsigned long long b); 
# 9958
static inline unsigned long long max(unsigned long long a, long long b); 
# 9960
static inline float max(float a, float b); 
# 9962
static inline double max(double a, double b); 
# 9964
static inline double max(float a, double b); 
# 9966
static inline double max(double a, float b); 
# 756 "/usr/include/crt/math_functions.hpp" 3
static inline float exp10(float a) 
# 757
{ 
# 758
return exp10f(a); 
# 759
} 
# 761
static inline float rsqrt(float a) 
# 762
{ 
# 763
return rsqrtf(a); 
# 764
} 
# 766
static inline float rcbrt(float a) 
# 767
{ 
# 768
return rcbrtf(a); 
# 769
} 
# 771
static inline float sinpi(float a) 
# 772
{ 
# 773
return sinpif(a); 
# 774
} 
# 776
static inline float cospi(float a) 
# 777
{ 
# 778
return cospif(a); 
# 779
} 
# 781
static inline void sincospi(float a, float *sptr, float *cptr) 
# 782
{ 
# 783
sincospif(a, sptr, cptr); 
# 784
} 
# 786
static inline void sincos(float a, float *sptr, float *cptr) 
# 787
{ 
# 788
sincosf(a, sptr, cptr); 
# 789
} 
# 791
static inline float j0(float a) 
# 792
{ 
# 793
return j0f(a); 
# 794
} 
# 796
static inline float j1(float a) 
# 797
{ 
# 798
return j1f(a); 
# 799
} 
# 801
static inline float jn(int n, float a) 
# 802
{ 
# 803
return jnf(n, a); 
# 804
} 
# 806
static inline float y0(float a) 
# 807
{ 
# 808
return y0f(a); 
# 809
} 
# 811
static inline float y1(float a) 
# 812
{ 
# 813
return y1f(a); 
# 814
} 
# 816
static inline float yn(int n, float a) 
# 817
{ 
# 818
return ynf(n, a); 
# 819
} 
# 821
static inline float cyl_bessel_i0(float a) 
# 822
{ 
# 823
return cyl_bessel_i0f(a); 
# 824
} 
# 826
static inline float cyl_bessel_i1(float a) 
# 827
{ 
# 828
return cyl_bessel_i1f(a); 
# 829
} 
# 831
static inline float erfinv(float a) 
# 832
{ 
# 833
return erfinvf(a); 
# 834
} 
# 836
static inline float erfcinv(float a) 
# 837
{ 
# 838
return erfcinvf(a); 
# 839
} 
# 841
static inline float normcdfinv(float a) 
# 842
{ 
# 843
return normcdfinvf(a); 
# 844
} 
# 846
static inline float normcdf(float a) 
# 847
{ 
# 848
return normcdff(a); 
# 849
} 
# 851
static inline float erfcx(float a) 
# 852
{ 
# 853
return erfcxf(a); 
# 854
} 
# 856
static inline double copysign(double a, float b) 
# 857
{ 
# 858
return copysign(a, (double)b); 
# 859
} 
# 861
static inline double copysign(float a, double b) 
# 862
{ 
# 863
return copysign((double)a, b); 
# 864
} 
# 866
static inline unsigned min(unsigned a, unsigned b) 
# 867
{ 
# 868
return umin(a, b); 
# 869
} 
# 871
static inline unsigned min(int a, unsigned b) 
# 872
{ 
# 873
return umin((unsigned)a, b); 
# 874
} 
# 876
static inline unsigned min(unsigned a, int b) 
# 877
{ 
# 878
return umin(a, (unsigned)b); 
# 879
} 
# 881
static inline long min(long a, long b) 
# 882
{ 
# 888
if (sizeof(long) == sizeof(int)) { 
# 892
return (long)min((int)a, (int)b); 
# 893
} else { 
# 894
return (long)llmin((long long)a, (long long)b); 
# 895
}  
# 896
} 
# 898
static inline unsigned long min(unsigned long a, unsigned long b) 
# 899
{ 
# 903
if (sizeof(unsigned long) == sizeof(unsigned)) { 
# 907
return (unsigned long)umin((unsigned)a, (unsigned)b); 
# 908
} else { 
# 909
return (unsigned long)ullmin((unsigned long long)a, (unsigned long long)b); 
# 910
}  
# 911
} 
# 913
static inline unsigned long min(long a, unsigned long b) 
# 914
{ 
# 918
if (sizeof(unsigned long) == sizeof(unsigned)) { 
# 922
return (unsigned long)umin((unsigned)a, (unsigned)b); 
# 923
} else { 
# 924
return (unsigned long)ullmin((unsigned long long)a, (unsigned long long)b); 
# 925
}  
# 926
} 
# 928
static inline unsigned long min(unsigned long a, long b) 
# 929
{ 
# 933
if (sizeof(unsigned long) == sizeof(unsigned)) { 
# 937
return (unsigned long)umin((unsigned)a, (unsigned)b); 
# 938
} else { 
# 939
return (unsigned long)ullmin((unsigned long long)a, (unsigned long long)b); 
# 940
}  
# 941
} 
# 943
static inline long long min(long long a, long long b) 
# 944
{ 
# 945
return llmin(a, b); 
# 946
} 
# 948
static inline unsigned long long min(unsigned long long a, unsigned long long b) 
# 949
{ 
# 950
return ullmin(a, b); 
# 951
} 
# 953
static inline unsigned long long min(long long a, unsigned long long b) 
# 954
{ 
# 955
return ullmin((unsigned long long)a, b); 
# 956
} 
# 958
static inline unsigned long long min(unsigned long long a, long long b) 
# 959
{ 
# 960
return ullmin(a, (unsigned long long)b); 
# 961
} 
# 963
static inline float min(float a, float b) 
# 964
{ 
# 965
return fminf(a, b); 
# 966
} 
# 968
static inline double min(double a, double b) 
# 969
{ 
# 970
return fmin(a, b); 
# 971
} 
# 973
static inline double min(float a, double b) 
# 974
{ 
# 975
return fmin((double)a, b); 
# 976
} 
# 978
static inline double min(double a, float b) 
# 979
{ 
# 980
return fmin(a, (double)b); 
# 981
} 
# 983
static inline unsigned max(unsigned a, unsigned b) 
# 984
{ 
# 985
return umax(a, b); 
# 986
} 
# 988
static inline unsigned max(int a, unsigned b) 
# 989
{ 
# 990
return umax((unsigned)a, b); 
# 991
} 
# 993
static inline unsigned max(unsigned a, int b) 
# 994
{ 
# 995
return umax(a, (unsigned)b); 
# 996
} 
# 998
static inline long max(long a, long b) 
# 999
{ 
# 1004
if (sizeof(long) == sizeof(int)) { 
# 1008
return (long)max((int)a, (int)b); 
# 1009
} else { 
# 1010
return (long)llmax((long long)a, (long long)b); 
# 1011
}  
# 1012
} 
# 1014
static inline unsigned long max(unsigned long a, unsigned long b) 
# 1015
{ 
# 1019
if (sizeof(unsigned long) == sizeof(unsigned)) { 
# 1023
return (unsigned long)umax((unsigned)a, (unsigned)b); 
# 1024
} else { 
# 1025
return (unsigned long)ullmax((unsigned long long)a, (unsigned long long)b); 
# 1026
}  
# 1027
} 
# 1029
static inline unsigned long max(long a, unsigned long b) 
# 1030
{ 
# 1034
if (sizeof(unsigned long) == sizeof(unsigned)) { 
# 1038
return (unsigned long)umax((unsigned)a, (unsigned)b); 
# 1039
} else { 
# 1040
return (unsigned long)ullmax((unsigned long long)a, (unsigned long long)b); 
# 1041
}  
# 1042
} 
# 1044
static inline unsigned long max(unsigned long a, long b) 
# 1045
{ 
# 1049
if (sizeof(unsigned long) == sizeof(unsigned)) { 
# 1053
return (unsigned long)umax((unsigned)a, (unsigned)b); 
# 1054
} else { 
# 1055
return (unsigned long)ullmax((unsigned long long)a, (unsigned long long)b); 
# 1056
}  
# 1057
} 
# 1059
static inline long long max(long long a, long long b) 
# 1060
{ 
# 1061
return llmax(a, b); 
# 1062
} 
# 1064
static inline unsigned long long max(unsigned long long a, unsigned long long b) 
# 1065
{ 
# 1066
return ullmax(a, b); 
# 1067
} 
# 1069
static inline unsigned long long max(long long a, unsigned long long b) 
# 1070
{ 
# 1071
return ullmax((unsigned long long)a, b); 
# 1072
} 
# 1074
static inline unsigned long long max(unsigned long long a, long long b) 
# 1075
{ 
# 1076
return ullmax(a, (unsigned long long)b); 
# 1077
} 
# 1079
static inline float max(float a, float b) 
# 1080
{ 
# 1081
return fmaxf(a, b); 
# 1082
} 
# 1084
static inline double max(double a, double b) 
# 1085
{ 
# 1086
return fmax(a, b); 
# 1087
} 
# 1089
static inline double max(float a, double b) 
# 1090
{ 
# 1091
return fmax((double)a, b); 
# 1092
} 
# 1094
static inline double max(double a, float b) 
# 1095
{ 
# 1096
return fmax(a, (double)b); 
# 1097
} 
# 1108 "/usr/include/crt/math_functions.hpp" 3
inline int min(int a, int b) 
# 1109
{ 
# 1110
return (a < b) ? a : b; 
# 1111
} 
# 1113
inline unsigned umin(unsigned a, unsigned b) 
# 1114
{ 
# 1115
return (a < b) ? a : b; 
# 1116
} 
# 1118
inline long long llmin(long long a, long long b) 
# 1119
{ 
# 1120
return (a < b) ? a : b; 
# 1121
} 
# 1123
inline unsigned long long ullmin(unsigned long long a, unsigned long long 
# 1124
b) 
# 1125
{ 
# 1126
return (a < b) ? a : b; 
# 1127
} 
# 1129
inline int max(int a, int b) 
# 1130
{ 
# 1131
return (a > b) ? a : b; 
# 1132
} 
# 1134
inline unsigned umax(unsigned a, unsigned b) 
# 1135
{ 
# 1136
return (a > b) ? a : b; 
# 1137
} 
# 1139
inline long long llmax(long long a, long long b) 
# 1140
{ 
# 1141
return (a > b) ? a : b; 
# 1142
} 
# 1144
inline unsigned long long ullmax(unsigned long long a, unsigned long long 
# 1145
b) 
# 1146
{ 
# 1147
return (a > b) ? a : b; 
# 1148
} 
# 74 "/usr/include/cuda_surface_types.h" 3
template< class T, int dim = 1> 
# 75
struct surface : public surfaceReference { 
# 78
surface() 
# 79
{ 
# 80
(channelDesc) = cudaCreateChannelDesc< T> (); 
# 81
} 
# 83
surface(cudaChannelFormatDesc desc) 
# 84
{ 
# 85
(channelDesc) = desc; 
# 86
} 
# 88
}; 
# 90
template< int dim> 
# 91
struct surface< void, dim>  : public surfaceReference { 
# 94
surface() 
# 95
{ 
# 96
(channelDesc) = cudaCreateChannelDesc< void> (); 
# 97
} 
# 99
}; 
# 74 "/usr/include/cuda_texture_types.h" 3
template< class T, int texType = 1, cudaTextureReadMode mode = cudaReadModeElementType> 
# 75
struct texture : public textureReference { 
# 78
texture(int norm = 0, cudaTextureFilterMode 
# 79
fMode = cudaFilterModePoint, cudaTextureAddressMode 
# 80
aMode = cudaAddressModeClamp) 
# 81
{ 
# 82
(normalized) = norm; 
# 83
(filterMode) = fMode; 
# 84
((addressMode)[0]) = aMode; 
# 85
((addressMode)[1]) = aMode; 
# 86
((addressMode)[2]) = aMode; 
# 87
(channelDesc) = cudaCreateChannelDesc< T> (); 
# 88
(sRGB) = 0; 
# 89
} 
# 91
texture(int norm, cudaTextureFilterMode 
# 92
fMode, cudaTextureAddressMode 
# 93
aMode, cudaChannelFormatDesc 
# 94
desc) 
# 95
{ 
# 96
(normalized) = norm; 
# 97
(filterMode) = fMode; 
# 98
((addressMode)[0]) = aMode; 
# 99
((addressMode)[1]) = aMode; 
# 100
((addressMode)[2]) = aMode; 
# 101
(channelDesc) = desc; 
# 102
(sRGB) = 0; 
# 103
} 
# 105
}; 
# 89 "/usr/include/crt/device_functions.h" 3
extern "C" {
# 3217 "/usr/include/crt/device_functions.h" 3
}
# 3225
__attribute__((unused)) static inline int mulhi(int a, int b); 
# 3227
__attribute__((unused)) static inline unsigned mulhi(unsigned a, unsigned b); 
# 3229
__attribute__((unused)) static inline unsigned mulhi(int a, unsigned b); 
# 3231
__attribute__((unused)) static inline unsigned mulhi(unsigned a, int b); 
# 3233
__attribute__((unused)) static inline long long mul64hi(long long a, long long b); 
# 3235
__attribute__((unused)) static inline unsigned long long mul64hi(unsigned long long a, unsigned long long b); 
# 3237
__attribute__((unused)) static inline unsigned long long mul64hi(long long a, unsigned long long b); 
# 3239
__attribute__((unused)) static inline unsigned long long mul64hi(unsigned long long a, long long b); 
# 3241
__attribute__((unused)) static inline int float_as_int(float a); 
# 3243
__attribute__((unused)) static inline float int_as_float(int a); 
# 3245
__attribute__((unused)) static inline unsigned float_as_uint(float a); 
# 3247
__attribute__((unused)) static inline float uint_as_float(unsigned a); 
# 3249
__attribute__((unused)) static inline float saturate(float a); 
# 3251
__attribute__((unused)) static inline int mul24(int a, int b); 
# 3253
__attribute__((unused)) static inline unsigned umul24(unsigned a, unsigned b); 
# 3255
__attribute__((unused)) static inline int float2int(float a, cudaRoundMode mode = cudaRoundZero); 
# 3257
__attribute__((unused)) static inline unsigned float2uint(float a, cudaRoundMode mode = cudaRoundZero); 
# 3259
__attribute__((unused)) static inline float int2float(int a, cudaRoundMode mode = cudaRoundNearest); 
# 3261
__attribute__((unused)) static inline float uint2float(unsigned a, cudaRoundMode mode = cudaRoundNearest); 
# 90 "/usr/include/crt/device_functions.hpp" 3
__attribute__((unused)) static inline int mulhi(int a, int b) 
# 91
{int volatile ___ = 1;(void)a;(void)b;
# 93
::exit(___);}
#if 0
# 91
{ 
# 92
return __mulhi(a, b); 
# 93
} 
#endif
# 95 "/usr/include/crt/device_functions.hpp" 3
__attribute__((unused)) static inline unsigned mulhi(unsigned a, unsigned b) 
# 96
{int volatile ___ = 1;(void)a;(void)b;
# 98
::exit(___);}
#if 0
# 96
{ 
# 97
return __umulhi(a, b); 
# 98
} 
#endif
# 100 "/usr/include/crt/device_functions.hpp" 3
__attribute__((unused)) static inline unsigned mulhi(int a, unsigned b) 
# 101
{int volatile ___ = 1;(void)a;(void)b;
# 103
::exit(___);}
#if 0
# 101
{ 
# 102
return __umulhi((unsigned)a, b); 
# 103
} 
#endif
# 105 "/usr/include/crt/device_functions.hpp" 3
__attribute__((unused)) static inline unsigned mulhi(unsigned a, int b) 
# 106
{int volatile ___ = 1;(void)a;(void)b;
# 108
::exit(___);}
#if 0
# 106
{ 
# 107
return __umulhi(a, (unsigned)b); 
# 108
} 
#endif
# 110 "/usr/include/crt/device_functions.hpp" 3
__attribute__((unused)) static inline long long mul64hi(long long a, long long b) 
# 111
{int volatile ___ = 1;(void)a;(void)b;
# 113
::exit(___);}
#if 0
# 111
{ 
# 112
return __mul64hi(a, b); 
# 113
} 
#endif
# 115 "/usr/include/crt/device_functions.hpp" 3
__attribute__((unused)) static inline unsigned long long mul64hi(unsigned long long a, unsigned long long b) 
# 116
{int volatile ___ = 1;(void)a;(void)b;
# 118
::exit(___);}
#if 0
# 116
{ 
# 117
return __umul64hi(a, b); 
# 118
} 
#endif
# 120 "/usr/include/crt/device_functions.hpp" 3
__attribute__((unused)) static inline unsigned long long mul64hi(long long a, unsigned long long b) 
# 121
{int volatile ___ = 1;(void)a;(void)b;
# 123
::exit(___);}
#if 0
# 121
{ 
# 122
return __umul64hi((unsigned long long)a, b); 
# 123
} 
#endif
# 125 "/usr/include/crt/device_functions.hpp" 3
__attribute__((unused)) static inline unsigned long long mul64hi(unsigned long long a, long long b) 
# 126
{int volatile ___ = 1;(void)a;(void)b;
# 128
::exit(___);}
#if 0
# 126
{ 
# 127
return __umul64hi(a, (unsigned long long)b); 
# 128
} 
#endif
# 130 "/usr/include/crt/device_functions.hpp" 3
__attribute__((unused)) static inline int float_as_int(float a) 
# 131
{int volatile ___ = 1;(void)a;
# 133
::exit(___);}
#if 0
# 131
{ 
# 132
return __float_as_int(a); 
# 133
} 
#endif
# 135 "/usr/include/crt/device_functions.hpp" 3
__attribute__((unused)) static inline float int_as_float(int a) 
# 136
{int volatile ___ = 1;(void)a;
# 138
::exit(___);}
#if 0
# 136
{ 
# 137
return __int_as_float(a); 
# 138
} 
#endif
# 140 "/usr/include/crt/device_functions.hpp" 3
__attribute__((unused)) static inline unsigned float_as_uint(float a) 
# 141
{int volatile ___ = 1;(void)a;
# 143
::exit(___);}
#if 0
# 141
{ 
# 142
return __float_as_uint(a); 
# 143
} 
#endif
# 145 "/usr/include/crt/device_functions.hpp" 3
__attribute__((unused)) static inline float uint_as_float(unsigned a) 
# 146
{int volatile ___ = 1;(void)a;
# 148
::exit(___);}
#if 0
# 146
{ 
# 147
return __uint_as_float(a); 
# 148
} 
#endif
# 149 "/usr/include/crt/device_functions.hpp" 3
__attribute__((unused)) static inline float saturate(float a) 
# 150
{int volatile ___ = 1;(void)a;
# 152
::exit(___);}
#if 0
# 150
{ 
# 151
return __saturatef(a); 
# 152
} 
#endif
# 154 "/usr/include/crt/device_functions.hpp" 3
__attribute__((unused)) static inline int mul24(int a, int b) 
# 155
{int volatile ___ = 1;(void)a;(void)b;
# 157
::exit(___);}
#if 0
# 155
{ 
# 156
return __mul24(a, b); 
# 157
} 
#endif
# 159 "/usr/include/crt/device_functions.hpp" 3
__attribute__((unused)) static inline unsigned umul24(unsigned a, unsigned b) 
# 160
{int volatile ___ = 1;(void)a;(void)b;
# 162
::exit(___);}
#if 0
# 160
{ 
# 161
return __umul24(a, b); 
# 162
} 
#endif
# 164 "/usr/include/crt/device_functions.hpp" 3
__attribute__((unused)) static inline int float2int(float a, cudaRoundMode mode) 
# 165
{int volatile ___ = 1;(void)a;(void)mode;
# 170
::exit(___);}
#if 0
# 165
{ 
# 166
return (mode == (cudaRoundNearest)) ? __float2int_rn(a) : ((mode == (cudaRoundPosInf)) ? __float2int_ru(a) : ((mode == (cudaRoundMinInf)) ? __float2int_rd(a) : __float2int_rz(a))); 
# 170
} 
#endif
# 172 "/usr/include/crt/device_functions.hpp" 3
__attribute__((unused)) static inline unsigned float2uint(float a, cudaRoundMode mode) 
# 173
{int volatile ___ = 1;(void)a;(void)mode;
# 178
::exit(___);}
#if 0
# 173
{ 
# 174
return (mode == (cudaRoundNearest)) ? __float2uint_rn(a) : ((mode == (cudaRoundPosInf)) ? __float2uint_ru(a) : ((mode == (cudaRoundMinInf)) ? __float2uint_rd(a) : __float2uint_rz(a))); 
# 178
} 
#endif
# 180 "/usr/include/crt/device_functions.hpp" 3
__attribute__((unused)) static inline float int2float(int a, cudaRoundMode mode) 
# 181
{int volatile ___ = 1;(void)a;(void)mode;
# 186
::exit(___);}
#if 0
# 181
{ 
# 182
return (mode == (cudaRoundZero)) ? __int2float_rz(a) : ((mode == (cudaRoundPosInf)) ? __int2float_ru(a) : ((mode == (cudaRoundMinInf)) ? __int2float_rd(a) : __int2float_rn(a))); 
# 186
} 
#endif
# 188 "/usr/include/crt/device_functions.hpp" 3
__attribute__((unused)) static inline float uint2float(unsigned a, cudaRoundMode mode) 
# 189
{int volatile ___ = 1;(void)a;(void)mode;
# 194
::exit(___);}
#if 0
# 189
{ 
# 190
return (mode == (cudaRoundZero)) ? __uint2float_rz(a) : ((mode == (cudaRoundPosInf)) ? __uint2float_ru(a) : ((mode == (cudaRoundMinInf)) ? __uint2float_rd(a) : __uint2float_rn(a))); 
# 194
} 
#endif
# 106 "/usr/include/device_atomic_functions.h" 3
__attribute__((unused)) static inline int atomicAdd(int *address, int val) {int volatile ___ = 1;(void)address;(void)val;::exit(___);}
#if 0
# 106
{ } 
#endif
# 108 "/usr/include/device_atomic_functions.h" 3
__attribute__((unused)) static inline unsigned atomicAdd(unsigned *address, unsigned val) {int volatile ___ = 1;(void)address;(void)val;::exit(___);}
#if 0
# 108
{ } 
#endif
# 110 "/usr/include/device_atomic_functions.h" 3
__attribute__((unused)) static inline int atomicSub(int *address, int val) {int volatile ___ = 1;(void)address;(void)val;::exit(___);}
#if 0
# 110
{ } 
#endif
# 112 "/usr/include/device_atomic_functions.h" 3
__attribute__((unused)) static inline unsigned atomicSub(unsigned *address, unsigned val) {int volatile ___ = 1;(void)address;(void)val;::exit(___);}
#if 0
# 112
{ } 
#endif
# 114 "/usr/include/device_atomic_functions.h" 3
__attribute__((unused)) static inline int atomicExch(int *address, int val) {int volatile ___ = 1;(void)address;(void)val;::exit(___);}
#if 0
# 114
{ } 
#endif
# 116 "/usr/include/device_atomic_functions.h" 3
__attribute__((unused)) static inline unsigned atomicExch(unsigned *address, unsigned val) {int volatile ___ = 1;(void)address;(void)val;::exit(___);}
#if 0
# 116
{ } 
#endif
# 118 "/usr/include/device_atomic_functions.h" 3
__attribute__((unused)) static inline float atomicExch(float *address, float val) {int volatile ___ = 1;(void)address;(void)val;::exit(___);}
#if 0
# 118
{ } 
#endif
# 120 "/usr/include/device_atomic_functions.h" 3
__attribute__((unused)) static inline int atomicMin(int *address, int val) {int volatile ___ = 1;(void)address;(void)val;::exit(___);}
#if 0
# 120
{ } 
#endif
# 122 "/usr/include/device_atomic_functions.h" 3
__attribute__((unused)) static inline unsigned atomicMin(unsigned *address, unsigned val) {int volatile ___ = 1;(void)address;(void)val;::exit(___);}
#if 0
# 122
{ } 
#endif
# 124 "/usr/include/device_atomic_functions.h" 3
__attribute__((unused)) static inline int atomicMax(int *address, int val) {int volatile ___ = 1;(void)address;(void)val;::exit(___);}
#if 0
# 124
{ } 
#endif
# 126 "/usr/include/device_atomic_functions.h" 3
__attribute__((unused)) static inline unsigned atomicMax(unsigned *address, unsigned val) {int volatile ___ = 1;(void)address;(void)val;::exit(___);}
#if 0
# 126
{ } 
#endif
# 128 "/usr/include/device_atomic_functions.h" 3
__attribute__((unused)) static inline unsigned atomicInc(unsigned *address, unsigned val) {int volatile ___ = 1;(void)address;(void)val;::exit(___);}
#if 0
# 128
{ } 
#endif
# 130 "/usr/include/device_atomic_functions.h" 3
__attribute__((unused)) static inline unsigned atomicDec(unsigned *address, unsigned val) {int volatile ___ = 1;(void)address;(void)val;::exit(___);}
#if 0
# 130
{ } 
#endif
# 132 "/usr/include/device_atomic_functions.h" 3
__attribute__((unused)) static inline int atomicAnd(int *address, int val) {int volatile ___ = 1;(void)address;(void)val;::exit(___);}
#if 0
# 132
{ } 
#endif
# 134 "/usr/include/device_atomic_functions.h" 3
__attribute__((unused)) static inline unsigned atomicAnd(unsigned *address, unsigned val) {int volatile ___ = 1;(void)address;(void)val;::exit(___);}
#if 0
# 134
{ } 
#endif
# 136 "/usr/include/device_atomic_functions.h" 3
__attribute__((unused)) static inline int atomicOr(int *address, int val) {int volatile ___ = 1;(void)address;(void)val;::exit(___);}
#if 0
# 136
{ } 
#endif
# 138 "/usr/include/device_atomic_functions.h" 3
__attribute__((unused)) static inline unsigned atomicOr(unsigned *address, unsigned val) {int volatile ___ = 1;(void)address;(void)val;::exit(___);}
#if 0
# 138
{ } 
#endif
# 140 "/usr/include/device_atomic_functions.h" 3
__attribute__((unused)) static inline int atomicXor(int *address, int val) {int volatile ___ = 1;(void)address;(void)val;::exit(___);}
#if 0
# 140
{ } 
#endif
# 142 "/usr/include/device_atomic_functions.h" 3
__attribute__((unused)) static inline unsigned atomicXor(unsigned *address, unsigned val) {int volatile ___ = 1;(void)address;(void)val;::exit(___);}
#if 0
# 142
{ } 
#endif
# 144 "/usr/include/device_atomic_functions.h" 3
__attribute__((unused)) static inline int atomicCAS(int *address, int compare, int val) {int volatile ___ = 1;(void)address;(void)compare;(void)val;::exit(___);}
#if 0
# 144
{ } 
#endif
# 146 "/usr/include/device_atomic_functions.h" 3
__attribute__((unused)) static inline unsigned atomicCAS(unsigned *address, unsigned compare, unsigned val) {int volatile ___ = 1;(void)address;(void)compare;(void)val;::exit(___);}
#if 0
# 146
{ } 
#endif
# 171 "/usr/include/device_atomic_functions.h" 3
extern "C" {
# 180
}
# 189 "/usr/include/device_atomic_functions.h" 3
__attribute__((unused)) static inline unsigned long long atomicAdd(unsigned long long *address, unsigned long long val) {int volatile ___ = 1;(void)address;(void)val;::exit(___);}
#if 0
# 189
{ } 
#endif
# 191 "/usr/include/device_atomic_functions.h" 3
__attribute__((unused)) static inline unsigned long long atomicExch(unsigned long long *address, unsigned long long val) {int volatile ___ = 1;(void)address;(void)val;::exit(___);}
#if 0
# 191
{ } 
#endif
# 193 "/usr/include/device_atomic_functions.h" 3
__attribute__((unused)) static inline unsigned long long atomicCAS(unsigned long long *address, unsigned long long compare, unsigned long long val) {int volatile ___ = 1;(void)address;(void)compare;(void)val;::exit(___);}
#if 0
# 193
{ } 
#endif
# 195 "/usr/include/device_atomic_functions.h" 3
__attribute((deprecated("__any() is deprecated in favor of __any_sync() and may be removed in a future release (Use -Wno-deprecated-declarations to suppr" "ess this warning)."))) __attribute__((unused)) static inline bool any(bool cond) {int volatile ___ = 1;(void)cond;::exit(___);}
#if 0
# 195
{ } 
#endif
# 197 "/usr/include/device_atomic_functions.h" 3
__attribute((deprecated("__all() is deprecated in favor of __all_sync() and may be removed in a future release (Use -Wno-deprecated-declarations to suppr" "ess this warning)."))) __attribute__((unused)) static inline bool all(bool cond) {int volatile ___ = 1;(void)cond;::exit(___);}
#if 0
# 197
{ } 
#endif
# 87 "/usr/include/crt/device_double_functions.h" 3
extern "C" {
# 1139 "/usr/include/crt/device_double_functions.h" 3
}
# 1147
__attribute__((unused)) static inline double fma(double a, double b, double c, cudaRoundMode mode); 
# 1149
__attribute__((unused)) static inline double dmul(double a, double b, cudaRoundMode mode = cudaRoundNearest); 
# 1151
__attribute__((unused)) static inline double dadd(double a, double b, cudaRoundMode mode = cudaRoundNearest); 
# 1153
__attribute__((unused)) static inline double dsub(double a, double b, cudaRoundMode mode = cudaRoundNearest); 
# 1155
__attribute__((unused)) static inline int double2int(double a, cudaRoundMode mode = cudaRoundZero); 
# 1157
__attribute__((unused)) static inline unsigned double2uint(double a, cudaRoundMode mode = cudaRoundZero); 
# 1159
__attribute__((unused)) static inline long long double2ll(double a, cudaRoundMode mode = cudaRoundZero); 
# 1161
__attribute__((unused)) static inline unsigned long long double2ull(double a, cudaRoundMode mode = cudaRoundZero); 
# 1163
__attribute__((unused)) static inline double ll2double(long long a, cudaRoundMode mode = cudaRoundNearest); 
# 1165
__attribute__((unused)) static inline double ull2double(unsigned long long a, cudaRoundMode mode = cudaRoundNearest); 
# 1167
__attribute__((unused)) static inline double int2double(int a, cudaRoundMode mode = cudaRoundNearest); 
# 1169
__attribute__((unused)) static inline double uint2double(unsigned a, cudaRoundMode mode = cudaRoundNearest); 
# 1171
__attribute__((unused)) static inline double float2double(float a, cudaRoundMode mode = cudaRoundNearest); 
# 93 "/usr/include/crt/device_double_functions.hpp" 3
__attribute__((unused)) static inline double fma(double a, double b, double c, cudaRoundMode mode) 
# 94
{int volatile ___ = 1;(void)a;(void)b;(void)c;(void)mode;
# 99
::exit(___);}
#if 0
# 94
{ 
# 95
return (mode == (cudaRoundZero)) ? __fma_rz(a, b, c) : ((mode == (cudaRoundPosInf)) ? __fma_ru(a, b, c) : ((mode == (cudaRoundMinInf)) ? __fma_rd(a, b, c) : __fma_rn(a, b, c))); 
# 99
} 
#endif
# 101 "/usr/include/crt/device_double_functions.hpp" 3
__attribute__((unused)) static inline double dmul(double a, double b, cudaRoundMode mode) 
# 102
{int volatile ___ = 1;(void)a;(void)b;(void)mode;
# 107
::exit(___);}
#if 0
# 102
{ 
# 103
return (mode == (cudaRoundZero)) ? __dmul_rz(a, b) : ((mode == (cudaRoundPosInf)) ? __dmul_ru(a, b) : ((mode == (cudaRoundMinInf)) ? __dmul_rd(a, b) : __dmul_rn(a, b))); 
# 107
} 
#endif
# 109 "/usr/include/crt/device_double_functions.hpp" 3
__attribute__((unused)) static inline double dadd(double a, double b, cudaRoundMode mode) 
# 110
{int volatile ___ = 1;(void)a;(void)b;(void)mode;
# 115
::exit(___);}
#if 0
# 110
{ 
# 111
return (mode == (cudaRoundZero)) ? __dadd_rz(a, b) : ((mode == (cudaRoundPosInf)) ? __dadd_ru(a, b) : ((mode == (cudaRoundMinInf)) ? __dadd_rd(a, b) : __dadd_rn(a, b))); 
# 115
} 
#endif
# 117 "/usr/include/crt/device_double_functions.hpp" 3
__attribute__((unused)) static inline double dsub(double a, double b, cudaRoundMode mode) 
# 118
{int volatile ___ = 1;(void)a;(void)b;(void)mode;
# 123
::exit(___);}
#if 0
# 118
{ 
# 119
return (mode == (cudaRoundZero)) ? __dsub_rz(a, b) : ((mode == (cudaRoundPosInf)) ? __dsub_ru(a, b) : ((mode == (cudaRoundMinInf)) ? __dsub_rd(a, b) : __dsub_rn(a, b))); 
# 123
} 
#endif
# 125 "/usr/include/crt/device_double_functions.hpp" 3
__attribute__((unused)) static inline int double2int(double a, cudaRoundMode mode) 
# 126
{int volatile ___ = 1;(void)a;(void)mode;
# 131
::exit(___);}
#if 0
# 126
{ 
# 127
return (mode == (cudaRoundNearest)) ? __double2int_rn(a) : ((mode == (cudaRoundPosInf)) ? __double2int_ru(a) : ((mode == (cudaRoundMinInf)) ? __double2int_rd(a) : __double2int_rz(a))); 
# 131
} 
#endif
# 133 "/usr/include/crt/device_double_functions.hpp" 3
__attribute__((unused)) static inline unsigned double2uint(double a, cudaRoundMode mode) 
# 134
{int volatile ___ = 1;(void)a;(void)mode;
# 139
::exit(___);}
#if 0
# 134
{ 
# 135
return (mode == (cudaRoundNearest)) ? __double2uint_rn(a) : ((mode == (cudaRoundPosInf)) ? __double2uint_ru(a) : ((mode == (cudaRoundMinInf)) ? __double2uint_rd(a) : __double2uint_rz(a))); 
# 139
} 
#endif
# 141 "/usr/include/crt/device_double_functions.hpp" 3
__attribute__((unused)) static inline long long double2ll(double a, cudaRoundMode mode) 
# 142
{int volatile ___ = 1;(void)a;(void)mode;
# 147
::exit(___);}
#if 0
# 142
{ 
# 143
return (mode == (cudaRoundNearest)) ? __double2ll_rn(a) : ((mode == (cudaRoundPosInf)) ? __double2ll_ru(a) : ((mode == (cudaRoundMinInf)) ? __double2ll_rd(a) : __double2ll_rz(a))); 
# 147
} 
#endif
# 149 "/usr/include/crt/device_double_functions.hpp" 3
__attribute__((unused)) static inline unsigned long long double2ull(double a, cudaRoundMode mode) 
# 150
{int volatile ___ = 1;(void)a;(void)mode;
# 155
::exit(___);}
#if 0
# 150
{ 
# 151
return (mode == (cudaRoundNearest)) ? __double2ull_rn(a) : ((mode == (cudaRoundPosInf)) ? __double2ull_ru(a) : ((mode == (cudaRoundMinInf)) ? __double2ull_rd(a) : __double2ull_rz(a))); 
# 155
} 
#endif
# 157 "/usr/include/crt/device_double_functions.hpp" 3
__attribute__((unused)) static inline double ll2double(long long a, cudaRoundMode mode) 
# 158
{int volatile ___ = 1;(void)a;(void)mode;
# 163
::exit(___);}
#if 0
# 158
{ 
# 159
return (mode == (cudaRoundZero)) ? __ll2double_rz(a) : ((mode == (cudaRoundPosInf)) ? __ll2double_ru(a) : ((mode == (cudaRoundMinInf)) ? __ll2double_rd(a) : __ll2double_rn(a))); 
# 163
} 
#endif
# 165 "/usr/include/crt/device_double_functions.hpp" 3
__attribute__((unused)) static inline double ull2double(unsigned long long a, cudaRoundMode mode) 
# 166
{int volatile ___ = 1;(void)a;(void)mode;
# 171
::exit(___);}
#if 0
# 166
{ 
# 167
return (mode == (cudaRoundZero)) ? __ull2double_rz(a) : ((mode == (cudaRoundPosInf)) ? __ull2double_ru(a) : ((mode == (cudaRoundMinInf)) ? __ull2double_rd(a) : __ull2double_rn(a))); 
# 171
} 
#endif
# 173 "/usr/include/crt/device_double_functions.hpp" 3
__attribute__((unused)) static inline double int2double(int a, cudaRoundMode mode) 
# 174
{int volatile ___ = 1;(void)a;(void)mode;
# 176
::exit(___);}
#if 0
# 174
{ 
# 175
return (double)a; 
# 176
} 
#endif
# 178 "/usr/include/crt/device_double_functions.hpp" 3
__attribute__((unused)) static inline double uint2double(unsigned a, cudaRoundMode mode) 
# 179
{int volatile ___ = 1;(void)a;(void)mode;
# 181
::exit(___);}
#if 0
# 179
{ 
# 180
return (double)a; 
# 181
} 
#endif
# 183 "/usr/include/crt/device_double_functions.hpp" 3
__attribute__((unused)) static inline double float2double(float a, cudaRoundMode mode) 
# 184
{int volatile ___ = 1;(void)a;(void)mode;
# 186
::exit(___);}
#if 0
# 184
{ 
# 185
return (double)a; 
# 186
} 
#endif
# 89 "/usr/include/sm_20_atomic_functions.h" 3
__attribute__((unused)) static inline float atomicAdd(float *address, float val) {int volatile ___ = 1;(void)address;(void)val;::exit(___);}
#if 0
# 89
{ } 
#endif
# 100 "/usr/include/sm_32_atomic_functions.h" 3
__attribute__((unused)) static inline long long atomicMin(long long *address, long long val) {int volatile ___ = 1;(void)address;(void)val;::exit(___);}
#if 0
# 100
{ } 
#endif
# 102 "/usr/include/sm_32_atomic_functions.h" 3
__attribute__((unused)) static inline long long atomicMax(long long *address, long long val) {int volatile ___ = 1;(void)address;(void)val;::exit(___);}
#if 0
# 102
{ } 
#endif
# 104 "/usr/include/sm_32_atomic_functions.h" 3
__attribute__((unused)) static inline long long atomicAnd(long long *address, long long val) {int volatile ___ = 1;(void)address;(void)val;::exit(___);}
#if 0
# 104
{ } 
#endif
# 106 "/usr/include/sm_32_atomic_functions.h" 3
__attribute__((unused)) static inline long long atomicOr(long long *address, long long val) {int volatile ___ = 1;(void)address;(void)val;::exit(___);}
#if 0
# 106
{ } 
#endif
# 108 "/usr/include/sm_32_atomic_functions.h" 3
__attribute__((unused)) static inline long long atomicXor(long long *address, long long val) {int volatile ___ = 1;(void)address;(void)val;::exit(___);}
#if 0
# 108
{ } 
#endif
# 110 "/usr/include/sm_32_atomic_functions.h" 3
__attribute__((unused)) static inline unsigned long long atomicMin(unsigned long long *address, unsigned long long val) {int volatile ___ = 1;(void)address;(void)val;::exit(___);}
#if 0
# 110
{ } 
#endif
# 112 "/usr/include/sm_32_atomic_functions.h" 3
__attribute__((unused)) static inline unsigned long long atomicMax(unsigned long long *address, unsigned long long val) {int volatile ___ = 1;(void)address;(void)val;::exit(___);}
#if 0
# 112
{ } 
#endif
# 114 "/usr/include/sm_32_atomic_functions.h" 3
__attribute__((unused)) static inline unsigned long long atomicAnd(unsigned long long *address, unsigned long long val) {int volatile ___ = 1;(void)address;(void)val;::exit(___);}
#if 0
# 114
{ } 
#endif
# 116 "/usr/include/sm_32_atomic_functions.h" 3
__attribute__((unused)) static inline unsigned long long atomicOr(unsigned long long *address, unsigned long long val) {int volatile ___ = 1;(void)address;(void)val;::exit(___);}
#if 0
# 116
{ } 
#endif
# 118 "/usr/include/sm_32_atomic_functions.h" 3
__attribute__((unused)) static inline unsigned long long atomicXor(unsigned long long *address, unsigned long long val) {int volatile ___ = 1;(void)address;(void)val;::exit(___);}
#if 0
# 118
{ } 
#endif
# 303 "/usr/include/sm_60_atomic_functions.h" 3
__attribute__((unused)) static inline double atomicAdd(double *address, double val) {int volatile ___ = 1;(void)address;(void)val;::exit(___);}
#if 0
# 303
{ } 
#endif
# 306 "/usr/include/sm_60_atomic_functions.h" 3
__attribute__((unused)) static inline int atomicAdd_block(int *address, int val) {int volatile ___ = 1;(void)address;(void)val;::exit(___);}
#if 0
# 306
{ } 
#endif
# 309 "/usr/include/sm_60_atomic_functions.h" 3
__attribute__((unused)) static inline int atomicAdd_system(int *address, int val) {int volatile ___ = 1;(void)address;(void)val;::exit(___);}
#if 0
# 309
{ } 
#endif
# 312 "/usr/include/sm_60_atomic_functions.h" 3
__attribute__((unused)) static inline unsigned atomicAdd_block(unsigned *address, unsigned val) {int volatile ___ = 1;(void)address;(void)val;::exit(___);}
#if 0
# 312
{ } 
#endif
# 315 "/usr/include/sm_60_atomic_functions.h" 3
__attribute__((unused)) static inline unsigned atomicAdd_system(unsigned *address, unsigned val) {int volatile ___ = 1;(void)address;(void)val;::exit(___);}
#if 0
# 315
{ } 
#endif
# 318 "/usr/include/sm_60_atomic_functions.h" 3
__attribute__((unused)) static inline unsigned long long atomicAdd_block(unsigned long long *address, unsigned long long val) {int volatile ___ = 1;(void)address;(void)val;::exit(___);}
#if 0
# 318
{ } 
#endif
# 321 "/usr/include/sm_60_atomic_functions.h" 3
__attribute__((unused)) static inline unsigned long long atomicAdd_system(unsigned long long *address, unsigned long long val) {int volatile ___ = 1;(void)address;(void)val;::exit(___);}
#if 0
# 321
{ } 
#endif
# 324 "/usr/include/sm_60_atomic_functions.h" 3
__attribute__((unused)) static inline float atomicAdd_block(float *address, float val) {int volatile ___ = 1;(void)address;(void)val;::exit(___);}
#if 0
# 324
{ } 
#endif
# 327 "/usr/include/sm_60_atomic_functions.h" 3
__attribute__((unused)) static inline float atomicAdd_system(float *address, float val) {int volatile ___ = 1;(void)address;(void)val;::exit(___);}
#if 0
# 327
{ } 
#endif
# 330 "/usr/include/sm_60_atomic_functions.h" 3
__attribute__((unused)) static inline double atomicAdd_block(double *address, double val) {int volatile ___ = 1;(void)address;(void)val;::exit(___);}
#if 0
# 330
{ } 
#endif
# 333 "/usr/include/sm_60_atomic_functions.h" 3
__attribute__((unused)) static inline double atomicAdd_system(double *address, double val) {int volatile ___ = 1;(void)address;(void)val;::exit(___);}
#if 0
# 333
{ } 
#endif
# 336 "/usr/include/sm_60_atomic_functions.h" 3
__attribute__((unused)) static inline int atomicSub_block(int *address, int val) {int volatile ___ = 1;(void)address;(void)val;::exit(___);}
#if 0
# 336
{ } 
#endif
# 339 "/usr/include/sm_60_atomic_functions.h" 3
__attribute__((unused)) static inline int atomicSub_system(int *address, int val) {int volatile ___ = 1;(void)address;(void)val;::exit(___);}
#if 0
# 339
{ } 
#endif
# 342 "/usr/include/sm_60_atomic_functions.h" 3
__attribute__((unused)) static inline unsigned atomicSub_block(unsigned *address, unsigned val) {int volatile ___ = 1;(void)address;(void)val;::exit(___);}
#if 0
# 342
{ } 
#endif
# 345 "/usr/include/sm_60_atomic_functions.h" 3
__attribute__((unused)) static inline unsigned atomicSub_system(unsigned *address, unsigned val) {int volatile ___ = 1;(void)address;(void)val;::exit(___);}
#if 0
# 345
{ } 
#endif
# 348 "/usr/include/sm_60_atomic_functions.h" 3
__attribute__((unused)) static inline int atomicExch_block(int *address, int val) {int volatile ___ = 1;(void)address;(void)val;::exit(___);}
#if 0
# 348
{ } 
#endif
# 351 "/usr/include/sm_60_atomic_functions.h" 3
__attribute__((unused)) static inline int atomicExch_system(int *address, int val) {int volatile ___ = 1;(void)address;(void)val;::exit(___);}
#if 0
# 351
{ } 
#endif
# 354 "/usr/include/sm_60_atomic_functions.h" 3
__attribute__((unused)) static inline unsigned atomicExch_block(unsigned *address, unsigned val) {int volatile ___ = 1;(void)address;(void)val;::exit(___);}
#if 0
# 354
{ } 
#endif
# 357 "/usr/include/sm_60_atomic_functions.h" 3
__attribute__((unused)) static inline unsigned atomicExch_system(unsigned *address, unsigned val) {int volatile ___ = 1;(void)address;(void)val;::exit(___);}
#if 0
# 357
{ } 
#endif
# 360 "/usr/include/sm_60_atomic_functions.h" 3
__attribute__((unused)) static inline unsigned long long atomicExch_block(unsigned long long *address, unsigned long long val) {int volatile ___ = 1;(void)address;(void)val;::exit(___);}
#if 0
# 360
{ } 
#endif
# 363 "/usr/include/sm_60_atomic_functions.h" 3
__attribute__((unused)) static inline unsigned long long atomicExch_system(unsigned long long *address, unsigned long long val) {int volatile ___ = 1;(void)address;(void)val;::exit(___);}
#if 0
# 363
{ } 
#endif
# 366 "/usr/include/sm_60_atomic_functions.h" 3
__attribute__((unused)) static inline float atomicExch_block(float *address, float val) {int volatile ___ = 1;(void)address;(void)val;::exit(___);}
#if 0
# 366
{ } 
#endif
# 369 "/usr/include/sm_60_atomic_functions.h" 3
__attribute__((unused)) static inline float atomicExch_system(float *address, float val) {int volatile ___ = 1;(void)address;(void)val;::exit(___);}
#if 0
# 369
{ } 
#endif
# 372 "/usr/include/sm_60_atomic_functions.h" 3
__attribute__((unused)) static inline int atomicMin_block(int *address, int val) {int volatile ___ = 1;(void)address;(void)val;::exit(___);}
#if 0
# 372
{ } 
#endif
# 375 "/usr/include/sm_60_atomic_functions.h" 3
__attribute__((unused)) static inline int atomicMin_system(int *address, int val) {int volatile ___ = 1;(void)address;(void)val;::exit(___);}
#if 0
# 375
{ } 
#endif
# 378 "/usr/include/sm_60_atomic_functions.h" 3
__attribute__((unused)) static inline long long atomicMin_block(long long *address, long long val) {int volatile ___ = 1;(void)address;(void)val;::exit(___);}
#if 0
# 378
{ } 
#endif
# 381 "/usr/include/sm_60_atomic_functions.h" 3
__attribute__((unused)) static inline long long atomicMin_system(long long *address, long long val) {int volatile ___ = 1;(void)address;(void)val;::exit(___);}
#if 0
# 381
{ } 
#endif
# 384 "/usr/include/sm_60_atomic_functions.h" 3
__attribute__((unused)) static inline unsigned atomicMin_block(unsigned *address, unsigned val) {int volatile ___ = 1;(void)address;(void)val;::exit(___);}
#if 0
# 384
{ } 
#endif
# 387 "/usr/include/sm_60_atomic_functions.h" 3
__attribute__((unused)) static inline unsigned atomicMin_system(unsigned *address, unsigned val) {int volatile ___ = 1;(void)address;(void)val;::exit(___);}
#if 0
# 387
{ } 
#endif
# 390 "/usr/include/sm_60_atomic_functions.h" 3
__attribute__((unused)) static inline unsigned long long atomicMin_block(unsigned long long *address, unsigned long long val) {int volatile ___ = 1;(void)address;(void)val;::exit(___);}
#if 0
# 390
{ } 
#endif
# 393 "/usr/include/sm_60_atomic_functions.h" 3
__attribute__((unused)) static inline unsigned long long atomicMin_system(unsigned long long *address, unsigned long long val) {int volatile ___ = 1;(void)address;(void)val;::exit(___);}
#if 0
# 393
{ } 
#endif
# 396 "/usr/include/sm_60_atomic_functions.h" 3
__attribute__((unused)) static inline int atomicMax_block(int *address, int val) {int volatile ___ = 1;(void)address;(void)val;::exit(___);}
#if 0
# 396
{ } 
#endif
# 399 "/usr/include/sm_60_atomic_functions.h" 3
__attribute__((unused)) static inline int atomicMax_system(int *address, int val) {int volatile ___ = 1;(void)address;(void)val;::exit(___);}
#if 0
# 399
{ } 
#endif
# 402 "/usr/include/sm_60_atomic_functions.h" 3
__attribute__((unused)) static inline long long atomicMax_block(long long *address, long long val) {int volatile ___ = 1;(void)address;(void)val;::exit(___);}
#if 0
# 402
{ } 
#endif
# 405 "/usr/include/sm_60_atomic_functions.h" 3
__attribute__((unused)) static inline long long atomicMax_system(long long *address, long long val) {int volatile ___ = 1;(void)address;(void)val;::exit(___);}
#if 0
# 405
{ } 
#endif
# 408 "/usr/include/sm_60_atomic_functions.h" 3
__attribute__((unused)) static inline unsigned atomicMax_block(unsigned *address, unsigned val) {int volatile ___ = 1;(void)address;(void)val;::exit(___);}
#if 0
# 408
{ } 
#endif
# 411 "/usr/include/sm_60_atomic_functions.h" 3
__attribute__((unused)) static inline unsigned atomicMax_system(unsigned *address, unsigned val) {int volatile ___ = 1;(void)address;(void)val;::exit(___);}
#if 0
# 411
{ } 
#endif
# 414 "/usr/include/sm_60_atomic_functions.h" 3
__attribute__((unused)) static inline unsigned long long atomicMax_block(unsigned long long *address, unsigned long long val) {int volatile ___ = 1;(void)address;(void)val;::exit(___);}
#if 0
# 414
{ } 
#endif
# 417 "/usr/include/sm_60_atomic_functions.h" 3
__attribute__((unused)) static inline unsigned long long atomicMax_system(unsigned long long *address, unsigned long long val) {int volatile ___ = 1;(void)address;(void)val;::exit(___);}
#if 0
# 417
{ } 
#endif
# 420 "/usr/include/sm_60_atomic_functions.h" 3
__attribute__((unused)) static inline unsigned atomicInc_block(unsigned *address, unsigned val) {int volatile ___ = 1;(void)address;(void)val;::exit(___);}
#if 0
# 420
{ } 
#endif
# 423 "/usr/include/sm_60_atomic_functions.h" 3
__attribute__((unused)) static inline unsigned atomicInc_system(unsigned *address, unsigned val) {int volatile ___ = 1;(void)address;(void)val;::exit(___);}
#if 0
# 423
{ } 
#endif
# 426 "/usr/include/sm_60_atomic_functions.h" 3
__attribute__((unused)) static inline unsigned atomicDec_block(unsigned *address, unsigned val) {int volatile ___ = 1;(void)address;(void)val;::exit(___);}
#if 0
# 426
{ } 
#endif
# 429 "/usr/include/sm_60_atomic_functions.h" 3
__attribute__((unused)) static inline unsigned atomicDec_system(unsigned *address, unsigned val) {int volatile ___ = 1;(void)address;(void)val;::exit(___);}
#if 0
# 429
{ } 
#endif
# 432 "/usr/include/sm_60_atomic_functions.h" 3
__attribute__((unused)) static inline int atomicCAS_block(int *address, int compare, int val) {int volatile ___ = 1;(void)address;(void)compare;(void)val;::exit(___);}
#if 0
# 432
{ } 
#endif
# 435 "/usr/include/sm_60_atomic_functions.h" 3
__attribute__((unused)) static inline int atomicCAS_system(int *address, int compare, int val) {int volatile ___ = 1;(void)address;(void)compare;(void)val;::exit(___);}
#if 0
# 435
{ } 
#endif
# 438 "/usr/include/sm_60_atomic_functions.h" 3
__attribute__((unused)) static inline unsigned atomicCAS_block(unsigned *address, unsigned compare, unsigned 
# 439
val) {int volatile ___ = 1;(void)address;(void)compare;(void)val;::exit(___);}
#if 0
# 439
{ } 
#endif
# 442 "/usr/include/sm_60_atomic_functions.h" 3
__attribute__((unused)) static inline unsigned atomicCAS_system(unsigned *address, unsigned compare, unsigned 
# 443
val) {int volatile ___ = 1;(void)address;(void)compare;(void)val;::exit(___);}
#if 0
# 443
{ } 
#endif
# 446 "/usr/include/sm_60_atomic_functions.h" 3
__attribute__((unused)) static inline unsigned long long atomicCAS_block(unsigned long long *address, unsigned long long 
# 447
compare, unsigned long long 
# 448
val) {int volatile ___ = 1;(void)address;(void)compare;(void)val;::exit(___);}
#if 0
# 448
{ } 
#endif
# 451 "/usr/include/sm_60_atomic_functions.h" 3
__attribute__((unused)) static inline unsigned long long atomicCAS_system(unsigned long long *address, unsigned long long 
# 452
compare, unsigned long long 
# 453
val) {int volatile ___ = 1;(void)address;(void)compare;(void)val;::exit(___);}
#if 0
# 453
{ } 
#endif
# 456 "/usr/include/sm_60_atomic_functions.h" 3
__attribute__((unused)) static inline int atomicAnd_block(int *address, int val) {int volatile ___ = 1;(void)address;(void)val;::exit(___);}
#if 0
# 456
{ } 
#endif
# 459 "/usr/include/sm_60_atomic_functions.h" 3
__attribute__((unused)) static inline int atomicAnd_system(int *address, int val) {int volatile ___ = 1;(void)address;(void)val;::exit(___);}
#if 0
# 459
{ } 
#endif
# 462 "/usr/include/sm_60_atomic_functions.h" 3
__attribute__((unused)) static inline long long atomicAnd_block(long long *address, long long val) {int volatile ___ = 1;(void)address;(void)val;::exit(___);}
#if 0
# 462
{ } 
#endif
# 465 "/usr/include/sm_60_atomic_functions.h" 3
__attribute__((unused)) static inline long long atomicAnd_system(long long *address, long long val) {int volatile ___ = 1;(void)address;(void)val;::exit(___);}
#if 0
# 465
{ } 
#endif
# 468 "/usr/include/sm_60_atomic_functions.h" 3
__attribute__((unused)) static inline unsigned atomicAnd_block(unsigned *address, unsigned val) {int volatile ___ = 1;(void)address;(void)val;::exit(___);}
#if 0
# 468
{ } 
#endif
# 471 "/usr/include/sm_60_atomic_functions.h" 3
__attribute__((unused)) static inline unsigned atomicAnd_system(unsigned *address, unsigned val) {int volatile ___ = 1;(void)address;(void)val;::exit(___);}
#if 0
# 471
{ } 
#endif
# 474 "/usr/include/sm_60_atomic_functions.h" 3
__attribute__((unused)) static inline unsigned long long atomicAnd_block(unsigned long long *address, unsigned long long val) {int volatile ___ = 1;(void)address;(void)val;::exit(___);}
#if 0
# 474
{ } 
#endif
# 477 "/usr/include/sm_60_atomic_functions.h" 3
__attribute__((unused)) static inline unsigned long long atomicAnd_system(unsigned long long *address, unsigned long long val) {int volatile ___ = 1;(void)address;(void)val;::exit(___);}
#if 0
# 477
{ } 
#endif
# 480 "/usr/include/sm_60_atomic_functions.h" 3
__attribute__((unused)) static inline int atomicOr_block(int *address, int val) {int volatile ___ = 1;(void)address;(void)val;::exit(___);}
#if 0
# 480
{ } 
#endif
# 483 "/usr/include/sm_60_atomic_functions.h" 3
__attribute__((unused)) static inline int atomicOr_system(int *address, int val) {int volatile ___ = 1;(void)address;(void)val;::exit(___);}
#if 0
# 483
{ } 
#endif
# 486 "/usr/include/sm_60_atomic_functions.h" 3
__attribute__((unused)) static inline long long atomicOr_block(long long *address, long long val) {int volatile ___ = 1;(void)address;(void)val;::exit(___);}
#if 0
# 486
{ } 
#endif
# 489 "/usr/include/sm_60_atomic_functions.h" 3
__attribute__((unused)) static inline long long atomicOr_system(long long *address, long long val) {int volatile ___ = 1;(void)address;(void)val;::exit(___);}
#if 0
# 489
{ } 
#endif
# 492 "/usr/include/sm_60_atomic_functions.h" 3
__attribute__((unused)) static inline unsigned atomicOr_block(unsigned *address, unsigned val) {int volatile ___ = 1;(void)address;(void)val;::exit(___);}
#if 0
# 492
{ } 
#endif
# 495 "/usr/include/sm_60_atomic_functions.h" 3
__attribute__((unused)) static inline unsigned atomicOr_system(unsigned *address, unsigned val) {int volatile ___ = 1;(void)address;(void)val;::exit(___);}
#if 0
# 495
{ } 
#endif
# 498 "/usr/include/sm_60_atomic_functions.h" 3
__attribute__((unused)) static inline unsigned long long atomicOr_block(unsigned long long *address, unsigned long long val) {int volatile ___ = 1;(void)address;(void)val;::exit(___);}
#if 0
# 498
{ } 
#endif
# 501 "/usr/include/sm_60_atomic_functions.h" 3
__attribute__((unused)) static inline unsigned long long atomicOr_system(unsigned long long *address, unsigned long long val) {int volatile ___ = 1;(void)address;(void)val;::exit(___);}
#if 0
# 501
{ } 
#endif
# 504 "/usr/include/sm_60_atomic_functions.h" 3
__attribute__((unused)) static inline int atomicXor_block(int *address, int val) {int volatile ___ = 1;(void)address;(void)val;::exit(___);}
#if 0
# 504
{ } 
#endif
# 507 "/usr/include/sm_60_atomic_functions.h" 3
__attribute__((unused)) static inline int atomicXor_system(int *address, int val) {int volatile ___ = 1;(void)address;(void)val;::exit(___);}
#if 0
# 507
{ } 
#endif
# 510 "/usr/include/sm_60_atomic_functions.h" 3
__attribute__((unused)) static inline long long atomicXor_block(long long *address, long long val) {int volatile ___ = 1;(void)address;(void)val;::exit(___);}
#if 0
# 510
{ } 
#endif
# 513 "/usr/include/sm_60_atomic_functions.h" 3
__attribute__((unused)) static inline long long atomicXor_system(long long *address, long long val) {int volatile ___ = 1;(void)address;(void)val;::exit(___);}
#if 0
# 513
{ } 
#endif
# 516 "/usr/include/sm_60_atomic_functions.h" 3
__attribute__((unused)) static inline unsigned atomicXor_block(unsigned *address, unsigned val) {int volatile ___ = 1;(void)address;(void)val;::exit(___);}
#if 0
# 516
{ } 
#endif
# 519 "/usr/include/sm_60_atomic_functions.h" 3
__attribute__((unused)) static inline unsigned atomicXor_system(unsigned *address, unsigned val) {int volatile ___ = 1;(void)address;(void)val;::exit(___);}
#if 0
# 519
{ } 
#endif
# 522 "/usr/include/sm_60_atomic_functions.h" 3
__attribute__((unused)) static inline unsigned long long atomicXor_block(unsigned long long *address, unsigned long long val) {int volatile ___ = 1;(void)address;(void)val;::exit(___);}
#if 0
# 522
{ } 
#endif
# 525 "/usr/include/sm_60_atomic_functions.h" 3
__attribute__((unused)) static inline unsigned long long atomicXor_system(unsigned long long *address, unsigned long long val) {int volatile ___ = 1;(void)address;(void)val;::exit(___);}
#if 0
# 525
{ } 
#endif
# 90 "/usr/include/sm_20_intrinsics.h" 3
extern "C" {
# 1475 "/usr/include/sm_20_intrinsics.h" 3
}
# 1482
__attribute((deprecated("__ballot() is deprecated in favor of __ballot_sync() and may be removed in a future release (Use -Wno-deprecated-declarations to" " suppress this warning)."))) __attribute__((unused)) static inline unsigned ballot(bool pred) {int volatile ___ = 1;(void)pred;::exit(___);}
#if 0
# 1482
{ } 
#endif
# 1484 "/usr/include/sm_20_intrinsics.h" 3
__attribute__((unused)) static inline int syncthreads_count(bool pred) {int volatile ___ = 1;(void)pred;::exit(___);}
#if 0
# 1484
{ } 
#endif
# 1486 "/usr/include/sm_20_intrinsics.h" 3
__attribute__((unused)) static inline bool syncthreads_and(bool pred) {int volatile ___ = 1;(void)pred;::exit(___);}
#if 0
# 1486
{ } 
#endif
# 1488 "/usr/include/sm_20_intrinsics.h" 3
__attribute__((unused)) static inline bool syncthreads_or(bool pred) {int volatile ___ = 1;(void)pred;::exit(___);}
#if 0
# 1488
{ } 
#endif
# 1493 "/usr/include/sm_20_intrinsics.h" 3
__attribute__((unused)) static inline unsigned __isGlobal(const void *ptr) {int volatile ___ = 1;(void)ptr;::exit(___);}
#if 0
# 1493
{ } 
#endif
# 1494 "/usr/include/sm_20_intrinsics.h" 3
__attribute__((unused)) static inline unsigned __isShared(const void *ptr) {int volatile ___ = 1;(void)ptr;::exit(___);}
#if 0
# 1494
{ } 
#endif
# 1495 "/usr/include/sm_20_intrinsics.h" 3
__attribute__((unused)) static inline unsigned __isConstant(const void *ptr) {int volatile ___ = 1;(void)ptr;::exit(___);}
#if 0
# 1495
{ } 
#endif
# 1496 "/usr/include/sm_20_intrinsics.h" 3
__attribute__((unused)) static inline unsigned __isLocal(const void *ptr) {int volatile ___ = 1;(void)ptr;::exit(___);}
#if 0
# 1496
{ } 
#endif
# 102 "/usr/include/sm_30_intrinsics.h" 3
__attribute__((unused)) static inline unsigned __fns(unsigned mask, unsigned base, int offset) {int volatile ___ = 1;(void)mask;(void)base;(void)offset;::exit(___);}
#if 0
# 102
{ } 
#endif
# 103 "/usr/include/sm_30_intrinsics.h" 3
__attribute__((unused)) static inline void __barrier_sync(unsigned id) {int volatile ___ = 1;(void)id;::exit(___);}
#if 0
# 103
{ } 
#endif
# 104 "/usr/include/sm_30_intrinsics.h" 3
__attribute__((unused)) static inline void __barrier_sync_count(unsigned id, unsigned cnt) {int volatile ___ = 1;(void)id;(void)cnt;::exit(___);}
#if 0
# 104
{ } 
#endif
# 105 "/usr/include/sm_30_intrinsics.h" 3
__attribute__((unused)) static inline void __syncwarp(unsigned mask = 4294967295U) {int volatile ___ = 1;(void)mask;::exit(___);}
#if 0
# 105
{ } 
#endif
# 106 "/usr/include/sm_30_intrinsics.h" 3
__attribute__((unused)) static inline int __all_sync(unsigned mask, int pred) {int volatile ___ = 1;(void)mask;(void)pred;::exit(___);}
#if 0
# 106
{ } 
#endif
# 107 "/usr/include/sm_30_intrinsics.h" 3
__attribute__((unused)) static inline int __any_sync(unsigned mask, int pred) {int volatile ___ = 1;(void)mask;(void)pred;::exit(___);}
#if 0
# 107
{ } 
#endif
# 108 "/usr/include/sm_30_intrinsics.h" 3
__attribute__((unused)) static inline int __uni_sync(unsigned mask, int pred) {int volatile ___ = 1;(void)mask;(void)pred;::exit(___);}
#if 0
# 108
{ } 
#endif
# 109 "/usr/include/sm_30_intrinsics.h" 3
__attribute__((unused)) static inline unsigned __ballot_sync(unsigned mask, int pred) {int volatile ___ = 1;(void)mask;(void)pred;::exit(___);}
#if 0
# 109
{ } 
#endif
# 110 "/usr/include/sm_30_intrinsics.h" 3
__attribute__((unused)) static inline unsigned __activemask() {int volatile ___ = 1;::exit(___);}
#if 0
# 110
{ } 
#endif
# 119 "/usr/include/sm_30_intrinsics.h" 3
__attribute((deprecated("__shfl() is deprecated in favor of __shfl_sync() and may be removed in a future release (Use -Wno-deprecated-declarations to sup" "press this warning)."))) __attribute__((unused)) static inline int __shfl(int var, int srcLane, int width = 32) {int volatile ___ = 1;(void)var;(void)srcLane;(void)width;::exit(___);}
#if 0
# 119
{ } 
#endif
# 120 "/usr/include/sm_30_intrinsics.h" 3
__attribute((deprecated("__shfl() is deprecated in favor of __shfl_sync() and may be removed in a future release (Use -Wno-deprecated-declarations to sup" "press this warning)."))) __attribute__((unused)) static inline unsigned __shfl(unsigned var, int srcLane, int width = 32) {int volatile ___ = 1;(void)var;(void)srcLane;(void)width;::exit(___);}
#if 0
# 120
{ } 
#endif
# 121 "/usr/include/sm_30_intrinsics.h" 3
__attribute((deprecated("__shfl_up() is deprecated in favor of __shfl_up_sync() and may be removed in a future release (Use -Wno-deprecated-declarations " "to suppress this warning)."))) __attribute__((unused)) static inline int __shfl_up(int var, unsigned delta, int width = 32) {int volatile ___ = 1;(void)var;(void)delta;(void)width;::exit(___);}
#if 0
# 121
{ } 
#endif
# 122 "/usr/include/sm_30_intrinsics.h" 3
__attribute((deprecated("__shfl_up() is deprecated in favor of __shfl_up_sync() and may be removed in a future release (Use -Wno-deprecated-declarations " "to suppress this warning)."))) __attribute__((unused)) static inline unsigned __shfl_up(unsigned var, unsigned delta, int width = 32) {int volatile ___ = 1;(void)var;(void)delta;(void)width;::exit(___);}
#if 0
# 122
{ } 
#endif
# 123 "/usr/include/sm_30_intrinsics.h" 3
__attribute((deprecated("__shfl_down() is deprecated in favor of __shfl_down_sync() and may be removed in a future release (Use -Wno-deprecated-declarati" "ons to suppress this warning)."))) __attribute__((unused)) static inline int __shfl_down(int var, unsigned delta, int width = 32) {int volatile ___ = 1;(void)var;(void)delta;(void)width;::exit(___);}
#if 0
# 123
{ } 
#endif
# 124 "/usr/include/sm_30_intrinsics.h" 3
__attribute((deprecated("__shfl_down() is deprecated in favor of __shfl_down_sync() and may be removed in a future release (Use -Wno-deprecated-declarati" "ons to suppress this warning)."))) __attribute__((unused)) static inline unsigned __shfl_down(unsigned var, unsigned delta, int width = 32) {int volatile ___ = 1;(void)var;(void)delta;(void)width;::exit(___);}
#if 0
# 124
{ } 
#endif
# 125 "/usr/include/sm_30_intrinsics.h" 3
__attribute((deprecated("__shfl_xor() is deprecated in favor of __shfl_xor_sync() and may be removed in a future release (Use -Wno-deprecated-declaration" "s to suppress this warning)."))) __attribute__((unused)) static inline int __shfl_xor(int var, int laneMask, int width = 32) {int volatile ___ = 1;(void)var;(void)laneMask;(void)width;::exit(___);}
#if 0
# 125
{ } 
#endif
# 126 "/usr/include/sm_30_intrinsics.h" 3
__attribute((deprecated("__shfl_xor() is deprecated in favor of __shfl_xor_sync() and may be removed in a future release (Use -Wno-deprecated-declaration" "s to suppress this warning)."))) __attribute__((unused)) static inline unsigned __shfl_xor(unsigned var, int laneMask, int width = 32) {int volatile ___ = 1;(void)var;(void)laneMask;(void)width;::exit(___);}
#if 0
# 126
{ } 
#endif
# 127 "/usr/include/sm_30_intrinsics.h" 3
__attribute((deprecated("__shfl() is deprecated in favor of __shfl_sync() and may be removed in a future release (Use -Wno-deprecated-declarations to sup" "press this warning)."))) __attribute__((unused)) static inline float __shfl(float var, int srcLane, int width = 32) {int volatile ___ = 1;(void)var;(void)srcLane;(void)width;::exit(___);}
#if 0
# 127
{ } 
#endif
# 128 "/usr/include/sm_30_intrinsics.h" 3
__attribute((deprecated("__shfl_up() is deprecated in favor of __shfl_up_sync() and may be removed in a future release (Use -Wno-deprecated-declarations " "to suppress this warning)."))) __attribute__((unused)) static inline float __shfl_up(float var, unsigned delta, int width = 32) {int volatile ___ = 1;(void)var;(void)delta;(void)width;::exit(___);}
#if 0
# 128
{ } 
#endif
# 129 "/usr/include/sm_30_intrinsics.h" 3
__attribute((deprecated("__shfl_down() is deprecated in favor of __shfl_down_sync() and may be removed in a future release (Use -Wno-deprecated-declarati" "ons to suppress this warning)."))) __attribute__((unused)) static inline float __shfl_down(float var, unsigned delta, int width = 32) {int volatile ___ = 1;(void)var;(void)delta;(void)width;::exit(___);}
#if 0
# 129
{ } 
#endif
# 130 "/usr/include/sm_30_intrinsics.h" 3
__attribute((deprecated("__shfl_xor() is deprecated in favor of __shfl_xor_sync() and may be removed in a future release (Use -Wno-deprecated-declaration" "s to suppress this warning)."))) __attribute__((unused)) static inline float __shfl_xor(float var, int laneMask, int width = 32) {int volatile ___ = 1;(void)var;(void)laneMask;(void)width;::exit(___);}
#if 0
# 130
{ } 
#endif
# 133 "/usr/include/sm_30_intrinsics.h" 3
__attribute__((unused)) static inline int __shfl_sync(unsigned mask, int var, int srcLane, int width = 32) {int volatile ___ = 1;(void)mask;(void)var;(void)srcLane;(void)width;::exit(___);}
#if 0
# 133
{ } 
#endif
# 134 "/usr/include/sm_30_intrinsics.h" 3
__attribute__((unused)) static inline unsigned __shfl_sync(unsigned mask, unsigned var, int srcLane, int width = 32) {int volatile ___ = 1;(void)mask;(void)var;(void)srcLane;(void)width;::exit(___);}
#if 0
# 134
{ } 
#endif
# 135 "/usr/include/sm_30_intrinsics.h" 3
__attribute__((unused)) static inline int __shfl_up_sync(unsigned mask, int var, unsigned delta, int width = 32) {int volatile ___ = 1;(void)mask;(void)var;(void)delta;(void)width;::exit(___);}
#if 0
# 135
{ } 
#endif
# 136 "/usr/include/sm_30_intrinsics.h" 3
__attribute__((unused)) static inline unsigned __shfl_up_sync(unsigned mask, unsigned var, unsigned delta, int width = 32) {int volatile ___ = 1;(void)mask;(void)var;(void)delta;(void)width;::exit(___);}
#if 0
# 136
{ } 
#endif
# 137 "/usr/include/sm_30_intrinsics.h" 3
__attribute__((unused)) static inline int __shfl_down_sync(unsigned mask, int var, unsigned delta, int width = 32) {int volatile ___ = 1;(void)mask;(void)var;(void)delta;(void)width;::exit(___);}
#if 0
# 137
{ } 
#endif
# 138 "/usr/include/sm_30_intrinsics.h" 3
__attribute__((unused)) static inline unsigned __shfl_down_sync(unsigned mask, unsigned var, unsigned delta, int width = 32) {int volatile ___ = 1;(void)mask;(void)var;(void)delta;(void)width;::exit(___);}
#if 0
# 138
{ } 
#endif
# 139 "/usr/include/sm_30_intrinsics.h" 3
__attribute__((unused)) static inline int __shfl_xor_sync(unsigned mask, int var, int laneMask, int width = 32) {int volatile ___ = 1;(void)mask;(void)var;(void)laneMask;(void)width;::exit(___);}
#if 0
# 139
{ } 
#endif
# 140 "/usr/include/sm_30_intrinsics.h" 3
__attribute__((unused)) static inline unsigned __shfl_xor_sync(unsigned mask, unsigned var, int laneMask, int width = 32) {int volatile ___ = 1;(void)mask;(void)var;(void)laneMask;(void)width;::exit(___);}
#if 0
# 140
{ } 
#endif
# 141 "/usr/include/sm_30_intrinsics.h" 3
__attribute__((unused)) static inline float __shfl_sync(unsigned mask, float var, int srcLane, int width = 32) {int volatile ___ = 1;(void)mask;(void)var;(void)srcLane;(void)width;::exit(___);}
#if 0
# 141
{ } 
#endif
# 142 "/usr/include/sm_30_intrinsics.h" 3
__attribute__((unused)) static inline float __shfl_up_sync(unsigned mask, float var, unsigned delta, int width = 32) {int volatile ___ = 1;(void)mask;(void)var;(void)delta;(void)width;::exit(___);}
#if 0
# 142
{ } 
#endif
# 143 "/usr/include/sm_30_intrinsics.h" 3
__attribute__((unused)) static inline float __shfl_down_sync(unsigned mask, float var, unsigned delta, int width = 32) {int volatile ___ = 1;(void)mask;(void)var;(void)delta;(void)width;::exit(___);}
#if 0
# 143
{ } 
#endif
# 144 "/usr/include/sm_30_intrinsics.h" 3
__attribute__((unused)) static inline float __shfl_xor_sync(unsigned mask, float var, int laneMask, int width = 32) {int volatile ___ = 1;(void)mask;(void)var;(void)laneMask;(void)width;::exit(___);}
#if 0
# 144
{ } 
#endif
# 148 "/usr/include/sm_30_intrinsics.h" 3
__attribute((deprecated("__shfl() is deprecated in favor of __shfl_sync() and may be removed in a future release (Use -Wno-deprecated-declarations to sup" "press this warning)."))) __attribute__((unused)) static inline unsigned long long __shfl(unsigned long long var, int srcLane, int width = 32) {int volatile ___ = 1;(void)var;(void)srcLane;(void)width;::exit(___);}
#if 0
# 148
{ } 
#endif
# 149 "/usr/include/sm_30_intrinsics.h" 3
__attribute((deprecated("__shfl() is deprecated in favor of __shfl_sync() and may be removed in a future release (Use -Wno-deprecated-declarations to sup" "press this warning)."))) __attribute__((unused)) static inline long long __shfl(long long var, int srcLane, int width = 32) {int volatile ___ = 1;(void)var;(void)srcLane;(void)width;::exit(___);}
#if 0
# 149
{ } 
#endif
# 150 "/usr/include/sm_30_intrinsics.h" 3
__attribute((deprecated("__shfl_up() is deprecated in favor of __shfl_up_sync() and may be removed in a future release (Use -Wno-deprecated-declarations " "to suppress this warning)."))) __attribute__((unused)) static inline long long __shfl_up(long long var, unsigned delta, int width = 32) {int volatile ___ = 1;(void)var;(void)delta;(void)width;::exit(___);}
#if 0
# 150
{ } 
#endif
# 151 "/usr/include/sm_30_intrinsics.h" 3
__attribute((deprecated("__shfl_up() is deprecated in favor of __shfl_up_sync() and may be removed in a future release (Use -Wno-deprecated-declarations " "to suppress this warning)."))) __attribute__((unused)) static inline unsigned long long __shfl_up(unsigned long long var, unsigned delta, int width = 32) {int volatile ___ = 1;(void)var;(void)delta;(void)width;::exit(___);}
#if 0
# 151
{ } 
#endif
# 152 "/usr/include/sm_30_intrinsics.h" 3
__attribute((deprecated("__shfl_down() is deprecated in favor of __shfl_down_sync() and may be removed in a future release (Use -Wno-deprecated-declarati" "ons to suppress this warning)."))) __attribute__((unused)) static inline long long __shfl_down(long long var, unsigned delta, int width = 32) {int volatile ___ = 1;(void)var;(void)delta;(void)width;::exit(___);}
#if 0
# 152
{ } 
#endif
# 153 "/usr/include/sm_30_intrinsics.h" 3
__attribute((deprecated("__shfl_down() is deprecated in favor of __shfl_down_sync() and may be removed in a future release (Use -Wno-deprecated-declarati" "ons to suppress this warning)."))) __attribute__((unused)) static inline unsigned long long __shfl_down(unsigned long long var, unsigned delta, int width = 32) {int volatile ___ = 1;(void)var;(void)delta;(void)width;::exit(___);}
#if 0
# 153
{ } 
#endif
# 154 "/usr/include/sm_30_intrinsics.h" 3
__attribute((deprecated("__shfl_xor() is deprecated in favor of __shfl_xor_sync() and may be removed in a future release (Use -Wno-deprecated-declaration" "s to suppress this warning)."))) __attribute__((unused)) static inline long long __shfl_xor(long long var, int laneMask, int width = 32) {int volatile ___ = 1;(void)var;(void)laneMask;(void)width;::exit(___);}
#if 0
# 154
{ } 
#endif
# 155 "/usr/include/sm_30_intrinsics.h" 3
__attribute((deprecated("__shfl_xor() is deprecated in favor of __shfl_xor_sync() and may be removed in a future release (Use -Wno-deprecated-declaration" "s to suppress this warning)."))) __attribute__((unused)) static inline unsigned long long __shfl_xor(unsigned long long var, int laneMask, int width = 32) {int volatile ___ = 1;(void)var;(void)laneMask;(void)width;::exit(___);}
#if 0
# 155
{ } 
#endif
# 156 "/usr/include/sm_30_intrinsics.h" 3
__attribute((deprecated("__shfl() is deprecated in favor of __shfl_sync() and may be removed in a future release (Use -Wno-deprecated-declarations to sup" "press this warning)."))) __attribute__((unused)) static inline double __shfl(double var, int srcLane, int width = 32) {int volatile ___ = 1;(void)var;(void)srcLane;(void)width;::exit(___);}
#if 0
# 156
{ } 
#endif
# 157 "/usr/include/sm_30_intrinsics.h" 3
__attribute((deprecated("__shfl_up() is deprecated in favor of __shfl_up_sync() and may be removed in a future release (Use -Wno-deprecated-declarations " "to suppress this warning)."))) __attribute__((unused)) static inline double __shfl_up(double var, unsigned delta, int width = 32) {int volatile ___ = 1;(void)var;(void)delta;(void)width;::exit(___);}
#if 0
# 157
{ } 
#endif
# 158 "/usr/include/sm_30_intrinsics.h" 3
__attribute((deprecated("__shfl_down() is deprecated in favor of __shfl_down_sync() and may be removed in a future release (Use -Wno-deprecated-declarati" "ons to suppress this warning)."))) __attribute__((unused)) static inline double __shfl_down(double var, unsigned delta, int width = 32) {int volatile ___ = 1;(void)var;(void)delta;(void)width;::exit(___);}
#if 0
# 158
{ } 
#endif
# 159 "/usr/include/sm_30_intrinsics.h" 3
__attribute((deprecated("__shfl_xor() is deprecated in favor of __shfl_xor_sync() and may be removed in a future release (Use -Wno-deprecated-declaration" "s to suppress this warning)."))) __attribute__((unused)) static inline double __shfl_xor(double var, int laneMask, int width = 32) {int volatile ___ = 1;(void)var;(void)laneMask;(void)width;::exit(___);}
#if 0
# 159
{ } 
#endif
# 162 "/usr/include/sm_30_intrinsics.h" 3
__attribute__((unused)) static inline long long __shfl_sync(unsigned mask, long long var, int srcLane, int width = 32) {int volatile ___ = 1;(void)mask;(void)var;(void)srcLane;(void)width;::exit(___);}
#if 0
# 162
{ } 
#endif
# 163 "/usr/include/sm_30_intrinsics.h" 3
__attribute__((unused)) static inline unsigned long long __shfl_sync(unsigned mask, unsigned long long var, int srcLane, int width = 32) {int volatile ___ = 1;(void)mask;(void)var;(void)srcLane;(void)width;::exit(___);}
#if 0
# 163
{ } 
#endif
# 164 "/usr/include/sm_30_intrinsics.h" 3
__attribute__((unused)) static inline long long __shfl_up_sync(unsigned mask, long long var, unsigned delta, int width = 32) {int volatile ___ = 1;(void)mask;(void)var;(void)delta;(void)width;::exit(___);}
#if 0
# 164
{ } 
#endif
# 165 "/usr/include/sm_30_intrinsics.h" 3
__attribute__((unused)) static inline unsigned long long __shfl_up_sync(unsigned mask, unsigned long long var, unsigned delta, int width = 32) {int volatile ___ = 1;(void)mask;(void)var;(void)delta;(void)width;::exit(___);}
#if 0
# 165
{ } 
#endif
# 166 "/usr/include/sm_30_intrinsics.h" 3
__attribute__((unused)) static inline long long __shfl_down_sync(unsigned mask, long long var, unsigned delta, int width = 32) {int volatile ___ = 1;(void)mask;(void)var;(void)delta;(void)width;::exit(___);}
#if 0
# 166
{ } 
#endif
# 167 "/usr/include/sm_30_intrinsics.h" 3
__attribute__((unused)) static inline unsigned long long __shfl_down_sync(unsigned mask, unsigned long long var, unsigned delta, int width = 32) {int volatile ___ = 1;(void)mask;(void)var;(void)delta;(void)width;::exit(___);}
#if 0
# 167
{ } 
#endif
# 168 "/usr/include/sm_30_intrinsics.h" 3
__attribute__((unused)) static inline long long __shfl_xor_sync(unsigned mask, long long var, int laneMask, int width = 32) {int volatile ___ = 1;(void)mask;(void)var;(void)laneMask;(void)width;::exit(___);}
#if 0
# 168
{ } 
#endif
# 169 "/usr/include/sm_30_intrinsics.h" 3
__attribute__((unused)) static inline unsigned long long __shfl_xor_sync(unsigned mask, unsigned long long var, int laneMask, int width = 32) {int volatile ___ = 1;(void)mask;(void)var;(void)laneMask;(void)width;::exit(___);}
#if 0
# 169
{ } 
#endif
# 170 "/usr/include/sm_30_intrinsics.h" 3
__attribute__((unused)) static inline double __shfl_sync(unsigned mask, double var, int srcLane, int width = 32) {int volatile ___ = 1;(void)mask;(void)var;(void)srcLane;(void)width;::exit(___);}
#if 0
# 170
{ } 
#endif
# 171 "/usr/include/sm_30_intrinsics.h" 3
__attribute__((unused)) static inline double __shfl_up_sync(unsigned mask, double var, unsigned delta, int width = 32) {int volatile ___ = 1;(void)mask;(void)var;(void)delta;(void)width;::exit(___);}
#if 0
# 171
{ } 
#endif
# 172 "/usr/include/sm_30_intrinsics.h" 3
__attribute__((unused)) static inline double __shfl_down_sync(unsigned mask, double var, unsigned delta, int width = 32) {int volatile ___ = 1;(void)mask;(void)var;(void)delta;(void)width;::exit(___);}
#if 0
# 172
{ } 
#endif
# 173 "/usr/include/sm_30_intrinsics.h" 3
__attribute__((unused)) static inline double __shfl_xor_sync(unsigned mask, double var, int laneMask, int width = 32) {int volatile ___ = 1;(void)mask;(void)var;(void)laneMask;(void)width;::exit(___);}
#if 0
# 173
{ } 
#endif
# 177 "/usr/include/sm_30_intrinsics.h" 3
__attribute((deprecated("__shfl() is deprecated in favor of __shfl_sync() and may be removed in a future release (Use -Wno-deprecated-declarations to sup" "press this warning)."))) __attribute__((unused)) static inline long __shfl(long var, int srcLane, int width = 32) {int volatile ___ = 1;(void)var;(void)srcLane;(void)width;::exit(___);}
#if 0
# 177
{ } 
#endif
# 178 "/usr/include/sm_30_intrinsics.h" 3
__attribute((deprecated("__shfl() is deprecated in favor of __shfl_sync() and may be removed in a future release (Use -Wno-deprecated-declarations to sup" "press this warning)."))) __attribute__((unused)) static inline unsigned long __shfl(unsigned long var, int srcLane, int width = 32) {int volatile ___ = 1;(void)var;(void)srcLane;(void)width;::exit(___);}
#if 0
# 178
{ } 
#endif
# 179 "/usr/include/sm_30_intrinsics.h" 3
__attribute((deprecated("__shfl_up() is deprecated in favor of __shfl_up_sync() and may be removed in a future release (Use -Wno-deprecated-declarations " "to suppress this warning)."))) __attribute__((unused)) static inline long __shfl_up(long var, unsigned delta, int width = 32) {int volatile ___ = 1;(void)var;(void)delta;(void)width;::exit(___);}
#if 0
# 179
{ } 
#endif
# 180 "/usr/include/sm_30_intrinsics.h" 3
__attribute((deprecated("__shfl_up() is deprecated in favor of __shfl_up_sync() and may be removed in a future release (Use -Wno-deprecated-declarations " "to suppress this warning)."))) __attribute__((unused)) static inline unsigned long __shfl_up(unsigned long var, unsigned delta, int width = 32) {int volatile ___ = 1;(void)var;(void)delta;(void)width;::exit(___);}
#if 0
# 180
{ } 
#endif
# 181 "/usr/include/sm_30_intrinsics.h" 3
__attribute((deprecated("__shfl_down() is deprecated in favor of __shfl_down_sync() and may be removed in a future release (Use -Wno-deprecated-declarati" "ons to suppress this warning)."))) __attribute__((unused)) static inline long __shfl_down(long var, unsigned delta, int width = 32) {int volatile ___ = 1;(void)var;(void)delta;(void)width;::exit(___);}
#if 0
# 181
{ } 
#endif
# 182 "/usr/include/sm_30_intrinsics.h" 3
__attribute((deprecated("__shfl_down() is deprecated in favor of __shfl_down_sync() and may be removed in a future release (Use -Wno-deprecated-declarati" "ons to suppress this warning)."))) __attribute__((unused)) static inline unsigned long __shfl_down(unsigned long var, unsigned delta, int width = 32) {int volatile ___ = 1;(void)var;(void)delta;(void)width;::exit(___);}
#if 0
# 182
{ } 
#endif
# 183 "/usr/include/sm_30_intrinsics.h" 3
__attribute((deprecated("__shfl_xor() is deprecated in favor of __shfl_xor_sync() and may be removed in a future release (Use -Wno-deprecated-declaration" "s to suppress this warning)."))) __attribute__((unused)) static inline long __shfl_xor(long var, int laneMask, int width = 32) {int volatile ___ = 1;(void)var;(void)laneMask;(void)width;::exit(___);}
#if 0
# 183
{ } 
#endif
# 184 "/usr/include/sm_30_intrinsics.h" 3
__attribute((deprecated("__shfl_xor() is deprecated in favor of __shfl_xor_sync() and may be removed in a future release (Use -Wno-deprecated-declaration" "s to suppress this warning)."))) __attribute__((unused)) static inline unsigned long __shfl_xor(unsigned long var, int laneMask, int width = 32) {int volatile ___ = 1;(void)var;(void)laneMask;(void)width;::exit(___);}
#if 0
# 184
{ } 
#endif
# 187 "/usr/include/sm_30_intrinsics.h" 3
__attribute__((unused)) static inline long __shfl_sync(unsigned mask, long var, int srcLane, int width = 32) {int volatile ___ = 1;(void)mask;(void)var;(void)srcLane;(void)width;::exit(___);}
#if 0
# 187
{ } 
#endif
# 188 "/usr/include/sm_30_intrinsics.h" 3
__attribute__((unused)) static inline unsigned long __shfl_sync(unsigned mask, unsigned long var, int srcLane, int width = 32) {int volatile ___ = 1;(void)mask;(void)var;(void)srcLane;(void)width;::exit(___);}
#if 0
# 188
{ } 
#endif
# 189 "/usr/include/sm_30_intrinsics.h" 3
__attribute__((unused)) static inline long __shfl_up_sync(unsigned mask, long var, unsigned delta, int width = 32) {int volatile ___ = 1;(void)mask;(void)var;(void)delta;(void)width;::exit(___);}
#if 0
# 189
{ } 
#endif
# 190 "/usr/include/sm_30_intrinsics.h" 3
__attribute__((unused)) static inline unsigned long __shfl_up_sync(unsigned mask, unsigned long var, unsigned delta, int width = 32) {int volatile ___ = 1;(void)mask;(void)var;(void)delta;(void)width;::exit(___);}
#if 0
# 190
{ } 
#endif
# 191 "/usr/include/sm_30_intrinsics.h" 3
__attribute__((unused)) static inline long __shfl_down_sync(unsigned mask, long var, unsigned delta, int width = 32) {int volatile ___ = 1;(void)mask;(void)var;(void)delta;(void)width;::exit(___);}
#if 0
# 191
{ } 
#endif
# 192 "/usr/include/sm_30_intrinsics.h" 3
__attribute__((unused)) static inline unsigned long __shfl_down_sync(unsigned mask, unsigned long var, unsigned delta, int width = 32) {int volatile ___ = 1;(void)mask;(void)var;(void)delta;(void)width;::exit(___);}
#if 0
# 192
{ } 
#endif
# 193 "/usr/include/sm_30_intrinsics.h" 3
__attribute__((unused)) static inline long __shfl_xor_sync(unsigned mask, long var, int laneMask, int width = 32) {int volatile ___ = 1;(void)mask;(void)var;(void)laneMask;(void)width;::exit(___);}
#if 0
# 193
{ } 
#endif
# 194 "/usr/include/sm_30_intrinsics.h" 3
__attribute__((unused)) static inline unsigned long __shfl_xor_sync(unsigned mask, unsigned long var, int laneMask, int width = 32) {int volatile ___ = 1;(void)mask;(void)var;(void)laneMask;(void)width;::exit(___);}
#if 0
# 194
{ } 
#endif
# 87 "/usr/include/sm_32_intrinsics.h" 3
__attribute__((unused)) static inline long __ldg(const long *ptr) {int volatile ___ = 1;(void)ptr;::exit(___);}
#if 0
# 87
{ } 
#endif
# 88 "/usr/include/sm_32_intrinsics.h" 3
__attribute__((unused)) static inline unsigned long __ldg(const unsigned long *ptr) {int volatile ___ = 1;(void)ptr;::exit(___);}
#if 0
# 88
{ } 
#endif
# 90 "/usr/include/sm_32_intrinsics.h" 3
__attribute__((unused)) static inline char __ldg(const char *ptr) {int volatile ___ = 1;(void)ptr;::exit(___);}
#if 0
# 90
{ } 
#endif
# 91 "/usr/include/sm_32_intrinsics.h" 3
__attribute__((unused)) static inline signed char __ldg(const signed char *ptr) {int volatile ___ = 1;(void)ptr;::exit(___);}
#if 0
# 91
{ } 
#endif
# 92 "/usr/include/sm_32_intrinsics.h" 3
__attribute__((unused)) static inline short __ldg(const short *ptr) {int volatile ___ = 1;(void)ptr;::exit(___);}
#if 0
# 92
{ } 
#endif
# 93 "/usr/include/sm_32_intrinsics.h" 3
__attribute__((unused)) static inline int __ldg(const int *ptr) {int volatile ___ = 1;(void)ptr;::exit(___);}
#if 0
# 93
{ } 
#endif
# 94 "/usr/include/sm_32_intrinsics.h" 3
__attribute__((unused)) static inline long long __ldg(const long long *ptr) {int volatile ___ = 1;(void)ptr;::exit(___);}
#if 0
# 94
{ } 
#endif
# 95 "/usr/include/sm_32_intrinsics.h" 3
__attribute__((unused)) static inline char2 __ldg(const char2 *ptr) {int volatile ___ = 1;(void)ptr;::exit(___);}
#if 0
# 95
{ } 
#endif
# 96 "/usr/include/sm_32_intrinsics.h" 3
__attribute__((unused)) static inline char4 __ldg(const char4 *ptr) {int volatile ___ = 1;(void)ptr;::exit(___);}
#if 0
# 96
{ } 
#endif
# 97 "/usr/include/sm_32_intrinsics.h" 3
__attribute__((unused)) static inline short2 __ldg(const short2 *ptr) {int volatile ___ = 1;(void)ptr;::exit(___);}
#if 0
# 97
{ } 
#endif
# 98 "/usr/include/sm_32_intrinsics.h" 3
__attribute__((unused)) static inline short4 __ldg(const short4 *ptr) {int volatile ___ = 1;(void)ptr;::exit(___);}
#if 0
# 98
{ } 
#endif
# 99 "/usr/include/sm_32_intrinsics.h" 3
__attribute__((unused)) static inline int2 __ldg(const int2 *ptr) {int volatile ___ = 1;(void)ptr;::exit(___);}
#if 0
# 99
{ } 
#endif
# 100 "/usr/include/sm_32_intrinsics.h" 3
__attribute__((unused)) static inline int4 __ldg(const int4 *ptr) {int volatile ___ = 1;(void)ptr;::exit(___);}
#if 0
# 100
{ } 
#endif
# 101 "/usr/include/sm_32_intrinsics.h" 3
__attribute__((unused)) static inline longlong2 __ldg(const longlong2 *ptr) {int volatile ___ = 1;(void)ptr;::exit(___);}
#if 0
# 101
{ } 
#endif
# 103 "/usr/include/sm_32_intrinsics.h" 3
__attribute__((unused)) static inline unsigned char __ldg(const unsigned char *ptr) {int volatile ___ = 1;(void)ptr;::exit(___);}
#if 0
# 103
{ } 
#endif
# 104 "/usr/include/sm_32_intrinsics.h" 3
__attribute__((unused)) static inline unsigned short __ldg(const unsigned short *ptr) {int volatile ___ = 1;(void)ptr;::exit(___);}
#if 0
# 104
{ } 
#endif
# 105 "/usr/include/sm_32_intrinsics.h" 3
__attribute__((unused)) static inline unsigned __ldg(const unsigned *ptr) {int volatile ___ = 1;(void)ptr;::exit(___);}
#if 0
# 105
{ } 
#endif
# 106 "/usr/include/sm_32_intrinsics.h" 3
__attribute__((unused)) static inline unsigned long long __ldg(const unsigned long long *ptr) {int volatile ___ = 1;(void)ptr;::exit(___);}
#if 0
# 106
{ } 
#endif
# 107 "/usr/include/sm_32_intrinsics.h" 3
__attribute__((unused)) static inline uchar2 __ldg(const uchar2 *ptr) {int volatile ___ = 1;(void)ptr;::exit(___);}
#if 0
# 107
{ } 
#endif
# 108 "/usr/include/sm_32_intrinsics.h" 3
__attribute__((unused)) static inline uchar4 __ldg(const uchar4 *ptr) {int volatile ___ = 1;(void)ptr;::exit(___);}
#if 0
# 108
{ } 
#endif
# 109 "/usr/include/sm_32_intrinsics.h" 3
__attribute__((unused)) static inline ushort2 __ldg(const ushort2 *ptr) {int volatile ___ = 1;(void)ptr;::exit(___);}
#if 0
# 109
{ } 
#endif
# 110 "/usr/include/sm_32_intrinsics.h" 3
__attribute__((unused)) static inline ushort4 __ldg(const ushort4 *ptr) {int volatile ___ = 1;(void)ptr;::exit(___);}
#if 0
# 110
{ } 
#endif
# 111 "/usr/include/sm_32_intrinsics.h" 3
__attribute__((unused)) static inline uint2 __ldg(const uint2 *ptr) {int volatile ___ = 1;(void)ptr;::exit(___);}
#if 0
# 111
{ } 
#endif
# 112 "/usr/include/sm_32_intrinsics.h" 3
__attribute__((unused)) static inline uint4 __ldg(const uint4 *ptr) {int volatile ___ = 1;(void)ptr;::exit(___);}
#if 0
# 112
{ } 
#endif
# 113 "/usr/include/sm_32_intrinsics.h" 3
__attribute__((unused)) static inline ulonglong2 __ldg(const ulonglong2 *ptr) {int volatile ___ = 1;(void)ptr;::exit(___);}
#if 0
# 113
{ } 
#endif
# 115 "/usr/include/sm_32_intrinsics.h" 3
__attribute__((unused)) static inline float __ldg(const float *ptr) {int volatile ___ = 1;(void)ptr;::exit(___);}
#if 0
# 115
{ } 
#endif
# 116 "/usr/include/sm_32_intrinsics.h" 3
__attribute__((unused)) static inline double __ldg(const double *ptr) {int volatile ___ = 1;(void)ptr;::exit(___);}
#if 0
# 116
{ } 
#endif
# 117 "/usr/include/sm_32_intrinsics.h" 3
__attribute__((unused)) static inline float2 __ldg(const float2 *ptr) {int volatile ___ = 1;(void)ptr;::exit(___);}
#if 0
# 117
{ } 
#endif
# 118 "/usr/include/sm_32_intrinsics.h" 3
__attribute__((unused)) static inline float4 __ldg(const float4 *ptr) {int volatile ___ = 1;(void)ptr;::exit(___);}
#if 0
# 118
{ } 
#endif
# 119 "/usr/include/sm_32_intrinsics.h" 3
__attribute__((unused)) static inline double2 __ldg(const double2 *ptr) {int volatile ___ = 1;(void)ptr;::exit(___);}
#if 0
# 119
{ } 
#endif
# 123 "/usr/include/sm_32_intrinsics.h" 3
__attribute__((unused)) static inline long __ldcg(const long *ptr) {int volatile ___ = 1;(void)ptr;::exit(___);}
#if 0
# 123
{ } 
#endif
# 124 "/usr/include/sm_32_intrinsics.h" 3
__attribute__((unused)) static inline unsigned long __ldcg(const unsigned long *ptr) {int volatile ___ = 1;(void)ptr;::exit(___);}
#if 0
# 124
{ } 
#endif
# 126 "/usr/include/sm_32_intrinsics.h" 3
__attribute__((unused)) static inline char __ldcg(const char *ptr) {int volatile ___ = 1;(void)ptr;::exit(___);}
#if 0
# 126
{ } 
#endif
# 127 "/usr/include/sm_32_intrinsics.h" 3
__attribute__((unused)) static inline signed char __ldcg(const signed char *ptr) {int volatile ___ = 1;(void)ptr;::exit(___);}
#if 0
# 127
{ } 
#endif
# 128 "/usr/include/sm_32_intrinsics.h" 3
__attribute__((unused)) static inline short __ldcg(const short *ptr) {int volatile ___ = 1;(void)ptr;::exit(___);}
#if 0
# 128
{ } 
#endif
# 129 "/usr/include/sm_32_intrinsics.h" 3
__attribute__((unused)) static inline int __ldcg(const int *ptr) {int volatile ___ = 1;(void)ptr;::exit(___);}
#if 0
# 129
{ } 
#endif
# 130 "/usr/include/sm_32_intrinsics.h" 3
__attribute__((unused)) static inline long long __ldcg(const long long *ptr) {int volatile ___ = 1;(void)ptr;::exit(___);}
#if 0
# 130
{ } 
#endif
# 131 "/usr/include/sm_32_intrinsics.h" 3
__attribute__((unused)) static inline char2 __ldcg(const char2 *ptr) {int volatile ___ = 1;(void)ptr;::exit(___);}
#if 0
# 131
{ } 
#endif
# 132 "/usr/include/sm_32_intrinsics.h" 3
__attribute__((unused)) static inline char4 __ldcg(const char4 *ptr) {int volatile ___ = 1;(void)ptr;::exit(___);}
#if 0
# 132
{ } 
#endif
# 133 "/usr/include/sm_32_intrinsics.h" 3
__attribute__((unused)) static inline short2 __ldcg(const short2 *ptr) {int volatile ___ = 1;(void)ptr;::exit(___);}
#if 0
# 133
{ } 
#endif
# 134 "/usr/include/sm_32_intrinsics.h" 3
__attribute__((unused)) static inline short4 __ldcg(const short4 *ptr) {int volatile ___ = 1;(void)ptr;::exit(___);}
#if 0
# 134
{ } 
#endif
# 135 "/usr/include/sm_32_intrinsics.h" 3
__attribute__((unused)) static inline int2 __ldcg(const int2 *ptr) {int volatile ___ = 1;(void)ptr;::exit(___);}
#if 0
# 135
{ } 
#endif
# 136 "/usr/include/sm_32_intrinsics.h" 3
__attribute__((unused)) static inline int4 __ldcg(const int4 *ptr) {int volatile ___ = 1;(void)ptr;::exit(___);}
#if 0
# 136
{ } 
#endif
# 137 "/usr/include/sm_32_intrinsics.h" 3
__attribute__((unused)) static inline longlong2 __ldcg(const longlong2 *ptr) {int volatile ___ = 1;(void)ptr;::exit(___);}
#if 0
# 137
{ } 
#endif
# 139 "/usr/include/sm_32_intrinsics.h" 3
__attribute__((unused)) static inline unsigned char __ldcg(const unsigned char *ptr) {int volatile ___ = 1;(void)ptr;::exit(___);}
#if 0
# 139
{ } 
#endif
# 140 "/usr/include/sm_32_intrinsics.h" 3
__attribute__((unused)) static inline unsigned short __ldcg(const unsigned short *ptr) {int volatile ___ = 1;(void)ptr;::exit(___);}
#if 0
# 140
{ } 
#endif
# 141 "/usr/include/sm_32_intrinsics.h" 3
__attribute__((unused)) static inline unsigned __ldcg(const unsigned *ptr) {int volatile ___ = 1;(void)ptr;::exit(___);}
#if 0
# 141
{ } 
#endif
# 142 "/usr/include/sm_32_intrinsics.h" 3
__attribute__((unused)) static inline unsigned long long __ldcg(const unsigned long long *ptr) {int volatile ___ = 1;(void)ptr;::exit(___);}
#if 0
# 142
{ } 
#endif
# 143 "/usr/include/sm_32_intrinsics.h" 3
__attribute__((unused)) static inline uchar2 __ldcg(const uchar2 *ptr) {int volatile ___ = 1;(void)ptr;::exit(___);}
#if 0
# 143
{ } 
#endif
# 144 "/usr/include/sm_32_intrinsics.h" 3
__attribute__((unused)) static inline uchar4 __ldcg(const uchar4 *ptr) {int volatile ___ = 1;(void)ptr;::exit(___);}
#if 0
# 144
{ } 
#endif
# 145 "/usr/include/sm_32_intrinsics.h" 3
__attribute__((unused)) static inline ushort2 __ldcg(const ushort2 *ptr) {int volatile ___ = 1;(void)ptr;::exit(___);}
#if 0
# 145
{ } 
#endif
# 146 "/usr/include/sm_32_intrinsics.h" 3
__attribute__((unused)) static inline ushort4 __ldcg(const ushort4 *ptr) {int volatile ___ = 1;(void)ptr;::exit(___);}
#if 0
# 146
{ } 
#endif
# 147 "/usr/include/sm_32_intrinsics.h" 3
__attribute__((unused)) static inline uint2 __ldcg(const uint2 *ptr) {int volatile ___ = 1;(void)ptr;::exit(___);}
#if 0
# 147
{ } 
#endif
# 148 "/usr/include/sm_32_intrinsics.h" 3
__attribute__((unused)) static inline uint4 __ldcg(const uint4 *ptr) {int volatile ___ = 1;(void)ptr;::exit(___);}
#if 0
# 148
{ } 
#endif
# 149 "/usr/include/sm_32_intrinsics.h" 3
__attribute__((unused)) static inline ulonglong2 __ldcg(const ulonglong2 *ptr) {int volatile ___ = 1;(void)ptr;::exit(___);}
#if 0
# 149
{ } 
#endif
# 151 "/usr/include/sm_32_intrinsics.h" 3
__attribute__((unused)) static inline float __ldcg(const float *ptr) {int volatile ___ = 1;(void)ptr;::exit(___);}
#if 0
# 151
{ } 
#endif
# 152 "/usr/include/sm_32_intrinsics.h" 3
__attribute__((unused)) static inline double __ldcg(const double *ptr) {int volatile ___ = 1;(void)ptr;::exit(___);}
#if 0
# 152
{ } 
#endif
# 153 "/usr/include/sm_32_intrinsics.h" 3
__attribute__((unused)) static inline float2 __ldcg(const float2 *ptr) {int volatile ___ = 1;(void)ptr;::exit(___);}
#if 0
# 153
{ } 
#endif
# 154 "/usr/include/sm_32_intrinsics.h" 3
__attribute__((unused)) static inline float4 __ldcg(const float4 *ptr) {int volatile ___ = 1;(void)ptr;::exit(___);}
#if 0
# 154
{ } 
#endif
# 155 "/usr/include/sm_32_intrinsics.h" 3
__attribute__((unused)) static inline double2 __ldcg(const double2 *ptr) {int volatile ___ = 1;(void)ptr;::exit(___);}
#if 0
# 155
{ } 
#endif
# 159 "/usr/include/sm_32_intrinsics.h" 3
__attribute__((unused)) static inline long __ldca(const long *ptr) {int volatile ___ = 1;(void)ptr;::exit(___);}
#if 0
# 159
{ } 
#endif
# 160 "/usr/include/sm_32_intrinsics.h" 3
__attribute__((unused)) static inline unsigned long __ldca(const unsigned long *ptr) {int volatile ___ = 1;(void)ptr;::exit(___);}
#if 0
# 160
{ } 
#endif
# 162 "/usr/include/sm_32_intrinsics.h" 3
__attribute__((unused)) static inline char __ldca(const char *ptr) {int volatile ___ = 1;(void)ptr;::exit(___);}
#if 0
# 162
{ } 
#endif
# 163 "/usr/include/sm_32_intrinsics.h" 3
__attribute__((unused)) static inline signed char __ldca(const signed char *ptr) {int volatile ___ = 1;(void)ptr;::exit(___);}
#if 0
# 163
{ } 
#endif
# 164 "/usr/include/sm_32_intrinsics.h" 3
__attribute__((unused)) static inline short __ldca(const short *ptr) {int volatile ___ = 1;(void)ptr;::exit(___);}
#if 0
# 164
{ } 
#endif
# 165 "/usr/include/sm_32_intrinsics.h" 3
__attribute__((unused)) static inline int __ldca(const int *ptr) {int volatile ___ = 1;(void)ptr;::exit(___);}
#if 0
# 165
{ } 
#endif
# 166 "/usr/include/sm_32_intrinsics.h" 3
__attribute__((unused)) static inline long long __ldca(const long long *ptr) {int volatile ___ = 1;(void)ptr;::exit(___);}
#if 0
# 166
{ } 
#endif
# 167 "/usr/include/sm_32_intrinsics.h" 3
__attribute__((unused)) static inline char2 __ldca(const char2 *ptr) {int volatile ___ = 1;(void)ptr;::exit(___);}
#if 0
# 167
{ } 
#endif
# 168 "/usr/include/sm_32_intrinsics.h" 3
__attribute__((unused)) static inline char4 __ldca(const char4 *ptr) {int volatile ___ = 1;(void)ptr;::exit(___);}
#if 0
# 168
{ } 
#endif
# 169 "/usr/include/sm_32_intrinsics.h" 3
__attribute__((unused)) static inline short2 __ldca(const short2 *ptr) {int volatile ___ = 1;(void)ptr;::exit(___);}
#if 0
# 169
{ } 
#endif
# 170 "/usr/include/sm_32_intrinsics.h" 3
__attribute__((unused)) static inline short4 __ldca(const short4 *ptr) {int volatile ___ = 1;(void)ptr;::exit(___);}
#if 0
# 170
{ } 
#endif
# 171 "/usr/include/sm_32_intrinsics.h" 3
__attribute__((unused)) static inline int2 __ldca(const int2 *ptr) {int volatile ___ = 1;(void)ptr;::exit(___);}
#if 0
# 171
{ } 
#endif
# 172 "/usr/include/sm_32_intrinsics.h" 3
__attribute__((unused)) static inline int4 __ldca(const int4 *ptr) {int volatile ___ = 1;(void)ptr;::exit(___);}
#if 0
# 172
{ } 
#endif
# 173 "/usr/include/sm_32_intrinsics.h" 3
__attribute__((unused)) static inline longlong2 __ldca(const longlong2 *ptr) {int volatile ___ = 1;(void)ptr;::exit(___);}
#if 0
# 173
{ } 
#endif
# 175 "/usr/include/sm_32_intrinsics.h" 3
__attribute__((unused)) static inline unsigned char __ldca(const unsigned char *ptr) {int volatile ___ = 1;(void)ptr;::exit(___);}
#if 0
# 175
{ } 
#endif
# 176 "/usr/include/sm_32_intrinsics.h" 3
__attribute__((unused)) static inline unsigned short __ldca(const unsigned short *ptr) {int volatile ___ = 1;(void)ptr;::exit(___);}
#if 0
# 176
{ } 
#endif
# 177 "/usr/include/sm_32_intrinsics.h" 3
__attribute__((unused)) static inline unsigned __ldca(const unsigned *ptr) {int volatile ___ = 1;(void)ptr;::exit(___);}
#if 0
# 177
{ } 
#endif
# 178 "/usr/include/sm_32_intrinsics.h" 3
__attribute__((unused)) static inline unsigned long long __ldca(const unsigned long long *ptr) {int volatile ___ = 1;(void)ptr;::exit(___);}
#if 0
# 178
{ } 
#endif
# 179 "/usr/include/sm_32_intrinsics.h" 3
__attribute__((unused)) static inline uchar2 __ldca(const uchar2 *ptr) {int volatile ___ = 1;(void)ptr;::exit(___);}
#if 0
# 179
{ } 
#endif
# 180 "/usr/include/sm_32_intrinsics.h" 3
__attribute__((unused)) static inline uchar4 __ldca(const uchar4 *ptr) {int volatile ___ = 1;(void)ptr;::exit(___);}
#if 0
# 180
{ } 
#endif
# 181 "/usr/include/sm_32_intrinsics.h" 3
__attribute__((unused)) static inline ushort2 __ldca(const ushort2 *ptr) {int volatile ___ = 1;(void)ptr;::exit(___);}
#if 0
# 181
{ } 
#endif
# 182 "/usr/include/sm_32_intrinsics.h" 3
__attribute__((unused)) static inline ushort4 __ldca(const ushort4 *ptr) {int volatile ___ = 1;(void)ptr;::exit(___);}
#if 0
# 182
{ } 
#endif
# 183 "/usr/include/sm_32_intrinsics.h" 3
__attribute__((unused)) static inline uint2 __ldca(const uint2 *ptr) {int volatile ___ = 1;(void)ptr;::exit(___);}
#if 0
# 183
{ } 
#endif
# 184 "/usr/include/sm_32_intrinsics.h" 3
__attribute__((unused)) static inline uint4 __ldca(const uint4 *ptr) {int volatile ___ = 1;(void)ptr;::exit(___);}
#if 0
# 184
{ } 
#endif
# 185 "/usr/include/sm_32_intrinsics.h" 3
__attribute__((unused)) static inline ulonglong2 __ldca(const ulonglong2 *ptr) {int volatile ___ = 1;(void)ptr;::exit(___);}
#if 0
# 185
{ } 
#endif
# 187 "/usr/include/sm_32_intrinsics.h" 3
__attribute__((unused)) static inline float __ldca(const float *ptr) {int volatile ___ = 1;(void)ptr;::exit(___);}
#if 0
# 187
{ } 
#endif
# 188 "/usr/include/sm_32_intrinsics.h" 3
__attribute__((unused)) static inline double __ldca(const double *ptr) {int volatile ___ = 1;(void)ptr;::exit(___);}
#if 0
# 188
{ } 
#endif
# 189 "/usr/include/sm_32_intrinsics.h" 3
__attribute__((unused)) static inline float2 __ldca(const float2 *ptr) {int volatile ___ = 1;(void)ptr;::exit(___);}
#if 0
# 189
{ } 
#endif
# 190 "/usr/include/sm_32_intrinsics.h" 3
__attribute__((unused)) static inline float4 __ldca(const float4 *ptr) {int volatile ___ = 1;(void)ptr;::exit(___);}
#if 0
# 190
{ } 
#endif
# 191 "/usr/include/sm_32_intrinsics.h" 3
__attribute__((unused)) static inline double2 __ldca(const double2 *ptr) {int volatile ___ = 1;(void)ptr;::exit(___);}
#if 0
# 191
{ } 
#endif
# 195 "/usr/include/sm_32_intrinsics.h" 3
__attribute__((unused)) static inline long __ldcs(const long *ptr) {int volatile ___ = 1;(void)ptr;::exit(___);}
#if 0
# 195
{ } 
#endif
# 196 "/usr/include/sm_32_intrinsics.h" 3
__attribute__((unused)) static inline unsigned long __ldcs(const unsigned long *ptr) {int volatile ___ = 1;(void)ptr;::exit(___);}
#if 0
# 196
{ } 
#endif
# 198 "/usr/include/sm_32_intrinsics.h" 3
__attribute__((unused)) static inline char __ldcs(const char *ptr) {int volatile ___ = 1;(void)ptr;::exit(___);}
#if 0
# 198
{ } 
#endif
# 199 "/usr/include/sm_32_intrinsics.h" 3
__attribute__((unused)) static inline signed char __ldcs(const signed char *ptr) {int volatile ___ = 1;(void)ptr;::exit(___);}
#if 0
# 199
{ } 
#endif
# 200 "/usr/include/sm_32_intrinsics.h" 3
__attribute__((unused)) static inline short __ldcs(const short *ptr) {int volatile ___ = 1;(void)ptr;::exit(___);}
#if 0
# 200
{ } 
#endif
# 201 "/usr/include/sm_32_intrinsics.h" 3
__attribute__((unused)) static inline int __ldcs(const int *ptr) {int volatile ___ = 1;(void)ptr;::exit(___);}
#if 0
# 201
{ } 
#endif
# 202 "/usr/include/sm_32_intrinsics.h" 3
__attribute__((unused)) static inline long long __ldcs(const long long *ptr) {int volatile ___ = 1;(void)ptr;::exit(___);}
#if 0
# 202
{ } 
#endif
# 203 "/usr/include/sm_32_intrinsics.h" 3
__attribute__((unused)) static inline char2 __ldcs(const char2 *ptr) {int volatile ___ = 1;(void)ptr;::exit(___);}
#if 0
# 203
{ } 
#endif
# 204 "/usr/include/sm_32_intrinsics.h" 3
__attribute__((unused)) static inline char4 __ldcs(const char4 *ptr) {int volatile ___ = 1;(void)ptr;::exit(___);}
#if 0
# 204
{ } 
#endif
# 205 "/usr/include/sm_32_intrinsics.h" 3
__attribute__((unused)) static inline short2 __ldcs(const short2 *ptr) {int volatile ___ = 1;(void)ptr;::exit(___);}
#if 0
# 205
{ } 
#endif
# 206 "/usr/include/sm_32_intrinsics.h" 3
__attribute__((unused)) static inline short4 __ldcs(const short4 *ptr) {int volatile ___ = 1;(void)ptr;::exit(___);}
#if 0
# 206
{ } 
#endif
# 207 "/usr/include/sm_32_intrinsics.h" 3
__attribute__((unused)) static inline int2 __ldcs(const int2 *ptr) {int volatile ___ = 1;(void)ptr;::exit(___);}
#if 0
# 207
{ } 
#endif
# 208 "/usr/include/sm_32_intrinsics.h" 3
__attribute__((unused)) static inline int4 __ldcs(const int4 *ptr) {int volatile ___ = 1;(void)ptr;::exit(___);}
#if 0
# 208
{ } 
#endif
# 209 "/usr/include/sm_32_intrinsics.h" 3
__attribute__((unused)) static inline longlong2 __ldcs(const longlong2 *ptr) {int volatile ___ = 1;(void)ptr;::exit(___);}
#if 0
# 209
{ } 
#endif
# 211 "/usr/include/sm_32_intrinsics.h" 3
__attribute__((unused)) static inline unsigned char __ldcs(const unsigned char *ptr) {int volatile ___ = 1;(void)ptr;::exit(___);}
#if 0
# 211
{ } 
#endif
# 212 "/usr/include/sm_32_intrinsics.h" 3
__attribute__((unused)) static inline unsigned short __ldcs(const unsigned short *ptr) {int volatile ___ = 1;(void)ptr;::exit(___);}
#if 0
# 212
{ } 
#endif
# 213 "/usr/include/sm_32_intrinsics.h" 3
__attribute__((unused)) static inline unsigned __ldcs(const unsigned *ptr) {int volatile ___ = 1;(void)ptr;::exit(___);}
#if 0
# 213
{ } 
#endif
# 214 "/usr/include/sm_32_intrinsics.h" 3
__attribute__((unused)) static inline unsigned long long __ldcs(const unsigned long long *ptr) {int volatile ___ = 1;(void)ptr;::exit(___);}
#if 0
# 214
{ } 
#endif
# 215 "/usr/include/sm_32_intrinsics.h" 3
__attribute__((unused)) static inline uchar2 __ldcs(const uchar2 *ptr) {int volatile ___ = 1;(void)ptr;::exit(___);}
#if 0
# 215
{ } 
#endif
# 216 "/usr/include/sm_32_intrinsics.h" 3
__attribute__((unused)) static inline uchar4 __ldcs(const uchar4 *ptr) {int volatile ___ = 1;(void)ptr;::exit(___);}
#if 0
# 216
{ } 
#endif
# 217 "/usr/include/sm_32_intrinsics.h" 3
__attribute__((unused)) static inline ushort2 __ldcs(const ushort2 *ptr) {int volatile ___ = 1;(void)ptr;::exit(___);}
#if 0
# 217
{ } 
#endif
# 218 "/usr/include/sm_32_intrinsics.h" 3
__attribute__((unused)) static inline ushort4 __ldcs(const ushort4 *ptr) {int volatile ___ = 1;(void)ptr;::exit(___);}
#if 0
# 218
{ } 
#endif
# 219 "/usr/include/sm_32_intrinsics.h" 3
__attribute__((unused)) static inline uint2 __ldcs(const uint2 *ptr) {int volatile ___ = 1;(void)ptr;::exit(___);}
#if 0
# 219
{ } 
#endif
# 220 "/usr/include/sm_32_intrinsics.h" 3
__attribute__((unused)) static inline uint4 __ldcs(const uint4 *ptr) {int volatile ___ = 1;(void)ptr;::exit(___);}
#if 0
# 220
{ } 
#endif
# 221 "/usr/include/sm_32_intrinsics.h" 3
__attribute__((unused)) static inline ulonglong2 __ldcs(const ulonglong2 *ptr) {int volatile ___ = 1;(void)ptr;::exit(___);}
#if 0
# 221
{ } 
#endif
# 223 "/usr/include/sm_32_intrinsics.h" 3
__attribute__((unused)) static inline float __ldcs(const float *ptr) {int volatile ___ = 1;(void)ptr;::exit(___);}
#if 0
# 223
{ } 
#endif
# 224 "/usr/include/sm_32_intrinsics.h" 3
__attribute__((unused)) static inline double __ldcs(const double *ptr) {int volatile ___ = 1;(void)ptr;::exit(___);}
#if 0
# 224
{ } 
#endif
# 225 "/usr/include/sm_32_intrinsics.h" 3
__attribute__((unused)) static inline float2 __ldcs(const float2 *ptr) {int volatile ___ = 1;(void)ptr;::exit(___);}
#if 0
# 225
{ } 
#endif
# 226 "/usr/include/sm_32_intrinsics.h" 3
__attribute__((unused)) static inline float4 __ldcs(const float4 *ptr) {int volatile ___ = 1;(void)ptr;::exit(___);}
#if 0
# 226
{ } 
#endif
# 227 "/usr/include/sm_32_intrinsics.h" 3
__attribute__((unused)) static inline double2 __ldcs(const double2 *ptr) {int volatile ___ = 1;(void)ptr;::exit(___);}
#if 0
# 227
{ } 
#endif
# 244 "/usr/include/sm_32_intrinsics.h" 3
__attribute__((unused)) static inline unsigned __funnelshift_l(unsigned lo, unsigned hi, unsigned shift) {int volatile ___ = 1;(void)lo;(void)hi;(void)shift;::exit(___);}
#if 0
# 244
{ } 
#endif
# 256 "/usr/include/sm_32_intrinsics.h" 3
__attribute__((unused)) static inline unsigned __funnelshift_lc(unsigned lo, unsigned hi, unsigned shift) {int volatile ___ = 1;(void)lo;(void)hi;(void)shift;::exit(___);}
#if 0
# 256
{ } 
#endif
# 269 "/usr/include/sm_32_intrinsics.h" 3
__attribute__((unused)) static inline unsigned __funnelshift_r(unsigned lo, unsigned hi, unsigned shift) {int volatile ___ = 1;(void)lo;(void)hi;(void)shift;::exit(___);}
#if 0
# 269
{ } 
#endif
# 281 "/usr/include/sm_32_intrinsics.h" 3
__attribute__((unused)) static inline unsigned __funnelshift_rc(unsigned lo, unsigned hi, unsigned shift) {int volatile ___ = 1;(void)lo;(void)hi;(void)shift;::exit(___);}
#if 0
# 281
{ } 
#endif
# 89 "/usr/include/sm_61_intrinsics.h" 3
__attribute__((unused)) static inline int __dp2a_lo(int srcA, int srcB, int c) {int volatile ___ = 1;(void)srcA;(void)srcB;(void)c;::exit(___);}
#if 0
# 89
{ } 
#endif
# 90 "/usr/include/sm_61_intrinsics.h" 3
__attribute__((unused)) static inline unsigned __dp2a_lo(unsigned srcA, unsigned srcB, unsigned c) {int volatile ___ = 1;(void)srcA;(void)srcB;(void)c;::exit(___);}
#if 0
# 90
{ } 
#endif
# 92 "/usr/include/sm_61_intrinsics.h" 3
__attribute__((unused)) static inline int __dp2a_lo(short2 srcA, char4 srcB, int c) {int volatile ___ = 1;(void)srcA;(void)srcB;(void)c;::exit(___);}
#if 0
# 92
{ } 
#endif
# 93 "/usr/include/sm_61_intrinsics.h" 3
__attribute__((unused)) static inline unsigned __dp2a_lo(ushort2 srcA, uchar4 srcB, unsigned c) {int volatile ___ = 1;(void)srcA;(void)srcB;(void)c;::exit(___);}
#if 0
# 93
{ } 
#endif
# 95 "/usr/include/sm_61_intrinsics.h" 3
__attribute__((unused)) static inline int __dp2a_hi(int srcA, int srcB, int c) {int volatile ___ = 1;(void)srcA;(void)srcB;(void)c;::exit(___);}
#if 0
# 95
{ } 
#endif
# 96 "/usr/include/sm_61_intrinsics.h" 3
__attribute__((unused)) static inline unsigned __dp2a_hi(unsigned srcA, unsigned srcB, unsigned c) {int volatile ___ = 1;(void)srcA;(void)srcB;(void)c;::exit(___);}
#if 0
# 96
{ } 
#endif
# 98 "/usr/include/sm_61_intrinsics.h" 3
__attribute__((unused)) static inline int __dp2a_hi(short2 srcA, char4 srcB, int c) {int volatile ___ = 1;(void)srcA;(void)srcB;(void)c;::exit(___);}
#if 0
# 98
{ } 
#endif
# 99 "/usr/include/sm_61_intrinsics.h" 3
__attribute__((unused)) static inline unsigned __dp2a_hi(ushort2 srcA, uchar4 srcB, unsigned c) {int volatile ___ = 1;(void)srcA;(void)srcB;(void)c;::exit(___);}
#if 0
# 99
{ } 
#endif
# 106 "/usr/include/sm_61_intrinsics.h" 3
__attribute__((unused)) static inline int __dp4a(int srcA, int srcB, int c) {int volatile ___ = 1;(void)srcA;(void)srcB;(void)c;::exit(___);}
#if 0
# 106
{ } 
#endif
# 107 "/usr/include/sm_61_intrinsics.h" 3
__attribute__((unused)) static inline unsigned __dp4a(unsigned srcA, unsigned srcB, unsigned c) {int volatile ___ = 1;(void)srcA;(void)srcB;(void)c;::exit(___);}
#if 0
# 107
{ } 
#endif
# 109 "/usr/include/sm_61_intrinsics.h" 3
__attribute__((unused)) static inline int __dp4a(char4 srcA, char4 srcB, int c) {int volatile ___ = 1;(void)srcA;(void)srcB;(void)c;::exit(___);}
#if 0
# 109
{ } 
#endif
# 110 "/usr/include/sm_61_intrinsics.h" 3
__attribute__((unused)) static inline unsigned __dp4a(uchar4 srcA, uchar4 srcB, unsigned c) {int volatile ___ = 1;(void)srcA;(void)srcB;(void)c;::exit(___);}
#if 0
# 110
{ } 
#endif
# 93 "/usr/include/crt/sm_70_rt.h" 3
__attribute__((unused)) static inline unsigned __match_any_sync(unsigned mask, unsigned value) {int volatile ___ = 1;(void)mask;(void)value;::exit(___);}
#if 0
# 93
{ } 
#endif
# 94 "/usr/include/crt/sm_70_rt.h" 3
__attribute__((unused)) static inline unsigned __match_any_sync(unsigned mask, int value) {int volatile ___ = 1;(void)mask;(void)value;::exit(___);}
#if 0
# 94
{ } 
#endif
# 95 "/usr/include/crt/sm_70_rt.h" 3
__attribute__((unused)) static inline unsigned __match_any_sync(unsigned mask, unsigned long value) {int volatile ___ = 1;(void)mask;(void)value;::exit(___);}
#if 0
# 95
{ } 
#endif
# 96 "/usr/include/crt/sm_70_rt.h" 3
__attribute__((unused)) static inline unsigned __match_any_sync(unsigned mask, long value) {int volatile ___ = 1;(void)mask;(void)value;::exit(___);}
#if 0
# 96
{ } 
#endif
# 97 "/usr/include/crt/sm_70_rt.h" 3
__attribute__((unused)) static inline unsigned __match_any_sync(unsigned mask, unsigned long long value) {int volatile ___ = 1;(void)mask;(void)value;::exit(___);}
#if 0
# 97
{ } 
#endif
# 98 "/usr/include/crt/sm_70_rt.h" 3
__attribute__((unused)) static inline unsigned __match_any_sync(unsigned mask, long long value) {int volatile ___ = 1;(void)mask;(void)value;::exit(___);}
#if 0
# 98
{ } 
#endif
# 99 "/usr/include/crt/sm_70_rt.h" 3
__attribute__((unused)) static inline unsigned __match_any_sync(unsigned mask, float value) {int volatile ___ = 1;(void)mask;(void)value;::exit(___);}
#if 0
# 99
{ } 
#endif
# 100 "/usr/include/crt/sm_70_rt.h" 3
__attribute__((unused)) static inline unsigned __match_any_sync(unsigned mask, double value) {int volatile ___ = 1;(void)mask;(void)value;::exit(___);}
#if 0
# 100
{ } 
#endif
# 102 "/usr/include/crt/sm_70_rt.h" 3
__attribute__((unused)) static inline unsigned __match_all_sync(unsigned mask, unsigned value, int *pred) {int volatile ___ = 1;(void)mask;(void)value;(void)pred;::exit(___);}
#if 0
# 102
{ } 
#endif
# 103 "/usr/include/crt/sm_70_rt.h" 3
__attribute__((unused)) static inline unsigned __match_all_sync(unsigned mask, int value, int *pred) {int volatile ___ = 1;(void)mask;(void)value;(void)pred;::exit(___);}
#if 0
# 103
{ } 
#endif
# 104 "/usr/include/crt/sm_70_rt.h" 3
__attribute__((unused)) static inline unsigned __match_all_sync(unsigned mask, unsigned long value, int *pred) {int volatile ___ = 1;(void)mask;(void)value;(void)pred;::exit(___);}
#if 0
# 104
{ } 
#endif
# 105 "/usr/include/crt/sm_70_rt.h" 3
__attribute__((unused)) static inline unsigned __match_all_sync(unsigned mask, long value, int *pred) {int volatile ___ = 1;(void)mask;(void)value;(void)pred;::exit(___);}
#if 0
# 105
{ } 
#endif
# 106 "/usr/include/crt/sm_70_rt.h" 3
__attribute__((unused)) static inline unsigned __match_all_sync(unsigned mask, unsigned long long value, int *pred) {int volatile ___ = 1;(void)mask;(void)value;(void)pred;::exit(___);}
#if 0
# 106
{ } 
#endif
# 107 "/usr/include/crt/sm_70_rt.h" 3
__attribute__((unused)) static inline unsigned __match_all_sync(unsigned mask, long long value, int *pred) {int volatile ___ = 1;(void)mask;(void)value;(void)pred;::exit(___);}
#if 0
# 107
{ } 
#endif
# 108 "/usr/include/crt/sm_70_rt.h" 3
__attribute__((unused)) static inline unsigned __match_all_sync(unsigned mask, float value, int *pred) {int volatile ___ = 1;(void)mask;(void)value;(void)pred;::exit(___);}
#if 0
# 108
{ } 
#endif
# 109 "/usr/include/crt/sm_70_rt.h" 3
__attribute__((unused)) static inline unsigned __match_all_sync(unsigned mask, double value, int *pred) {int volatile ___ = 1;(void)mask;(void)value;(void)pred;::exit(___);}
#if 0
# 109
{ } 
#endif
# 111 "/usr/include/crt/sm_70_rt.h" 3
__attribute__((unused)) static inline void __nanosleep(unsigned ns) {int volatile ___ = 1;(void)ns;::exit(___);}
#if 0
# 111
{ } 
#endif
# 113 "/usr/include/crt/sm_70_rt.h" 3
__attribute__((unused)) static inline unsigned short atomicCAS(unsigned short *address, unsigned short compare, unsigned short val) {int volatile ___ = 1;(void)address;(void)compare;(void)val;::exit(___);}
#if 0
# 113
{ } 
#endif
# 114 "/usr/include/surface_functions.h" 3
template< class T> 
# 115
__attribute((always_inline)) __attribute__((unused)) static inline void surf1Dread(T *res, surface< void, 1>  surf, int x, int s, cudaSurfaceBoundaryMode mode = cudaBoundaryModeTrap) 
# 116
{int volatile ___ = 1;(void)res;(void)surf;(void)x;(void)s;(void)mode;
# 120
::exit(___);}
#if 0
# 116
{ 
# 120
} 
#endif
# 122 "/usr/include/surface_functions.h" 3
template< class T> 
# 123
__attribute((always_inline)) __attribute__((unused)) static inline T surf1Dread(surface< void, 1>  surf, int x, cudaSurfaceBoundaryMode mode = cudaBoundaryModeTrap) 
# 124
{int volatile ___ = 1;(void)surf;(void)x;(void)mode;
# 130
::exit(___);}
#if 0
# 124
{ 
# 130
} 
#endif
# 132 "/usr/include/surface_functions.h" 3
template< class T> 
# 133
__attribute((always_inline)) __attribute__((unused)) static inline void surf1Dread(T *res, surface< void, 1>  surf, int x, cudaSurfaceBoundaryMode mode = cudaBoundaryModeTrap) 
# 134
{int volatile ___ = 1;(void)res;(void)surf;(void)x;(void)mode;
# 138
::exit(___);}
#if 0
# 134
{ 
# 138
} 
#endif
# 141 "/usr/include/surface_functions.h" 3
template< class T> 
# 142
__attribute((always_inline)) __attribute__((unused)) static inline void surf2Dread(T *res, surface< void, 2>  surf, int x, int y, int s, cudaSurfaceBoundaryMode mode = cudaBoundaryModeTrap) 
# 143
{int volatile ___ = 1;(void)res;(void)surf;(void)x;(void)y;(void)s;(void)mode;
# 147
::exit(___);}
#if 0
# 143
{ 
# 147
} 
#endif
# 149 "/usr/include/surface_functions.h" 3
template< class T> 
# 150
__attribute((always_inline)) __attribute__((unused)) static inline T surf2Dread(surface< void, 2>  surf, int x, int y, cudaSurfaceBoundaryMode mode = cudaBoundaryModeTrap) 
# 151
{int volatile ___ = 1;(void)surf;(void)x;(void)y;(void)mode;
# 157
::exit(___);}
#if 0
# 151
{ 
# 157
} 
#endif
# 159 "/usr/include/surface_functions.h" 3
template< class T> 
# 160
__attribute((always_inline)) __attribute__((unused)) static inline void surf2Dread(T *res, surface< void, 2>  surf, int x, int y, cudaSurfaceBoundaryMode mode = cudaBoundaryModeTrap) 
# 161
{int volatile ___ = 1;(void)res;(void)surf;(void)x;(void)y;(void)mode;
# 165
::exit(___);}
#if 0
# 161
{ 
# 165
} 
#endif
# 168 "/usr/include/surface_functions.h" 3
template< class T> 
# 169
__attribute((always_inline)) __attribute__((unused)) static inline void surf3Dread(T *res, surface< void, 3>  surf, int x, int y, int z, int s, cudaSurfaceBoundaryMode mode = cudaBoundaryModeTrap) 
# 170
{int volatile ___ = 1;(void)res;(void)surf;(void)x;(void)y;(void)z;(void)s;(void)mode;
# 174
::exit(___);}
#if 0
# 170
{ 
# 174
} 
#endif
# 176 "/usr/include/surface_functions.h" 3
template< class T> 
# 177
__attribute((always_inline)) __attribute__((unused)) static inline T surf3Dread(surface< void, 3>  surf, int x, int y, int z, cudaSurfaceBoundaryMode mode = cudaBoundaryModeTrap) 
# 178
{int volatile ___ = 1;(void)surf;(void)x;(void)y;(void)z;(void)mode;
# 184
::exit(___);}
#if 0
# 178
{ 
# 184
} 
#endif
# 186 "/usr/include/surface_functions.h" 3
template< class T> 
# 187
__attribute((always_inline)) __attribute__((unused)) static inline void surf3Dread(T *res, surface< void, 3>  surf, int x, int y, int z, cudaSurfaceBoundaryMode mode = cudaBoundaryModeTrap) 
# 188
{int volatile ___ = 1;(void)res;(void)surf;(void)x;(void)y;(void)z;(void)mode;
# 192
::exit(___);}
#if 0
# 188
{ 
# 192
} 
#endif
# 196 "/usr/include/surface_functions.h" 3
template< class T> 
# 197
__attribute((always_inline)) __attribute__((unused)) static inline void surf1DLayeredread(T *res, surface< void, 241>  surf, int x, int layer, int s, cudaSurfaceBoundaryMode mode = cudaBoundaryModeTrap) 
# 198
{int volatile ___ = 1;(void)res;(void)surf;(void)x;(void)layer;(void)s;(void)mode;
# 202
::exit(___);}
#if 0
# 198
{ 
# 202
} 
#endif
# 204 "/usr/include/surface_functions.h" 3
template< class T> 
# 205
__attribute((always_inline)) __attribute__((unused)) static inline T surf1DLayeredread(surface< void, 241>  surf, int x, int layer, cudaSurfaceBoundaryMode mode = cudaBoundaryModeTrap) 
# 206
{int volatile ___ = 1;(void)surf;(void)x;(void)layer;(void)mode;
# 212
::exit(___);}
#if 0
# 206
{ 
# 212
} 
#endif
# 215 "/usr/include/surface_functions.h" 3
template< class T> 
# 216
__attribute((always_inline)) __attribute__((unused)) static inline void surf1DLayeredread(T *res, surface< void, 241>  surf, int x, int layer, cudaSurfaceBoundaryMode mode = cudaBoundaryModeTrap) 
# 217
{int volatile ___ = 1;(void)res;(void)surf;(void)x;(void)layer;(void)mode;
# 221
::exit(___);}
#if 0
# 217
{ 
# 221
} 
#endif
# 224 "/usr/include/surface_functions.h" 3
template< class T> 
# 225
__attribute((always_inline)) __attribute__((unused)) static inline void surf2DLayeredread(T *res, surface< void, 242>  surf, int x, int y, int layer, int s, cudaSurfaceBoundaryMode mode = cudaBoundaryModeTrap) 
# 226
{int volatile ___ = 1;(void)res;(void)surf;(void)x;(void)y;(void)layer;(void)s;(void)mode;
# 230
::exit(___);}
#if 0
# 226
{ 
# 230
} 
#endif
# 232 "/usr/include/surface_functions.h" 3
template< class T> 
# 233
__attribute((always_inline)) __attribute__((unused)) static inline T surf2DLayeredread(surface< void, 242>  surf, int x, int y, int layer, cudaSurfaceBoundaryMode mode = cudaBoundaryModeTrap) 
# 234
{int volatile ___ = 1;(void)surf;(void)x;(void)y;(void)layer;(void)mode;
# 240
::exit(___);}
#if 0
# 234
{ 
# 240
} 
#endif
# 243 "/usr/include/surface_functions.h" 3
template< class T> 
# 244
__attribute((always_inline)) __attribute__((unused)) static inline void surf2DLayeredread(T *res, surface< void, 242>  surf, int x, int y, int layer, cudaSurfaceBoundaryMode mode = cudaBoundaryModeTrap) 
# 245
{int volatile ___ = 1;(void)res;(void)surf;(void)x;(void)y;(void)layer;(void)mode;
# 249
::exit(___);}
#if 0
# 245
{ 
# 249
} 
#endif
# 252 "/usr/include/surface_functions.h" 3
template< class T> 
# 253
__attribute((always_inline)) __attribute__((unused)) static inline void surfCubemapread(T *res, surface< void, 12>  surf, int x, int y, int face, int s, cudaSurfaceBoundaryMode mode = cudaBoundaryModeTrap) 
# 254
{int volatile ___ = 1;(void)res;(void)surf;(void)x;(void)y;(void)face;(void)s;(void)mode;
# 258
::exit(___);}
#if 0
# 254
{ 
# 258
} 
#endif
# 260 "/usr/include/surface_functions.h" 3
template< class T> 
# 261
__attribute((always_inline)) __attribute__((unused)) static inline T surfCubemapread(surface< void, 12>  surf, int x, int y, int face, cudaSurfaceBoundaryMode mode = cudaBoundaryModeTrap) 
# 262
{int volatile ___ = 1;(void)surf;(void)x;(void)y;(void)face;(void)mode;
# 269
::exit(___);}
#if 0
# 262
{ 
# 269
} 
#endif
# 271 "/usr/include/surface_functions.h" 3
template< class T> 
# 272
__attribute((always_inline)) __attribute__((unused)) static inline void surfCubemapread(T *res, surface< void, 12>  surf, int x, int y, int face, cudaSurfaceBoundaryMode mode = cudaBoundaryModeTrap) 
# 273
{int volatile ___ = 1;(void)res;(void)surf;(void)x;(void)y;(void)face;(void)mode;
# 277
::exit(___);}
#if 0
# 273
{ 
# 277
} 
#endif
# 280 "/usr/include/surface_functions.h" 3
template< class T> 
# 281
__attribute((always_inline)) __attribute__((unused)) static inline void surfCubemapLayeredread(T *res, surface< void, 252>  surf, int x, int y, int layerFace, int s, cudaSurfaceBoundaryMode mode = cudaBoundaryModeTrap) 
# 282
{int volatile ___ = 1;(void)res;(void)surf;(void)x;(void)y;(void)layerFace;(void)s;(void)mode;
# 286
::exit(___);}
#if 0
# 282
{ 
# 286
} 
#endif
# 288 "/usr/include/surface_functions.h" 3
template< class T> 
# 289
__attribute((always_inline)) __attribute__((unused)) static inline T surfCubemapLayeredread(surface< void, 252>  surf, int x, int y, int layerFace, cudaSurfaceBoundaryMode mode = cudaBoundaryModeTrap) 
# 290
{int volatile ___ = 1;(void)surf;(void)x;(void)y;(void)layerFace;(void)mode;
# 296
::exit(___);}
#if 0
# 290
{ 
# 296
} 
#endif
# 298 "/usr/include/surface_functions.h" 3
template< class T> 
# 299
__attribute((always_inline)) __attribute__((unused)) static inline void surfCubemapLayeredread(T *res, surface< void, 252>  surf, int x, int y, int layerFace, cudaSurfaceBoundaryMode mode = cudaBoundaryModeTrap) 
# 300
{int volatile ___ = 1;(void)res;(void)surf;(void)x;(void)y;(void)layerFace;(void)mode;
# 304
::exit(___);}
#if 0
# 300
{ 
# 304
} 
#endif
# 307 "/usr/include/surface_functions.h" 3
template< class T> 
# 308
__attribute((always_inline)) __attribute__((unused)) static inline void surf1Dwrite(T val, surface< void, 1>  surf, int x, int s, cudaSurfaceBoundaryMode mode = cudaBoundaryModeTrap) 
# 309
{int volatile ___ = 1;(void)val;(void)surf;(void)x;(void)s;(void)mode;
# 313
::exit(___);}
#if 0
# 309
{ 
# 313
} 
#endif
# 315 "/usr/include/surface_functions.h" 3
template< class T> 
# 316
__attribute((always_inline)) __attribute__((unused)) static inline void surf1Dwrite(T val, surface< void, 1>  surf, int x, cudaSurfaceBoundaryMode mode = cudaBoundaryModeTrap) 
# 317
{int volatile ___ = 1;(void)val;(void)surf;(void)x;(void)mode;
# 321
::exit(___);}
#if 0
# 317
{ 
# 321
} 
#endif
# 325 "/usr/include/surface_functions.h" 3
template< class T> 
# 326
__attribute((always_inline)) __attribute__((unused)) static inline void surf2Dwrite(T val, surface< void, 2>  surf, int x, int y, int s, cudaSurfaceBoundaryMode mode = cudaBoundaryModeTrap) 
# 327
{int volatile ___ = 1;(void)val;(void)surf;(void)x;(void)y;(void)s;(void)mode;
# 331
::exit(___);}
#if 0
# 327
{ 
# 331
} 
#endif
# 333 "/usr/include/surface_functions.h" 3
template< class T> 
# 334
__attribute((always_inline)) __attribute__((unused)) static inline void surf2Dwrite(T val, surface< void, 2>  surf, int x, int y, cudaSurfaceBoundaryMode mode = cudaBoundaryModeTrap) 
# 335
{int volatile ___ = 1;(void)val;(void)surf;(void)x;(void)y;(void)mode;
# 339
::exit(___);}
#if 0
# 335
{ 
# 339
} 
#endif
# 342 "/usr/include/surface_functions.h" 3
template< class T> 
# 343
__attribute((always_inline)) __attribute__((unused)) static inline void surf3Dwrite(T val, surface< void, 3>  surf, int x, int y, int z, int s, cudaSurfaceBoundaryMode mode = cudaBoundaryModeTrap) 
# 344
{int volatile ___ = 1;(void)val;(void)surf;(void)x;(void)y;(void)z;(void)s;(void)mode;
# 348
::exit(___);}
#if 0
# 344
{ 
# 348
} 
#endif
# 350 "/usr/include/surface_functions.h" 3
template< class T> 
# 351
__attribute((always_inline)) __attribute__((unused)) static inline void surf3Dwrite(T val, surface< void, 3>  surf, int x, int y, int z, cudaSurfaceBoundaryMode mode = cudaBoundaryModeTrap) 
# 352
{int volatile ___ = 1;(void)val;(void)surf;(void)x;(void)y;(void)z;(void)mode;
# 356
::exit(___);}
#if 0
# 352
{ 
# 356
} 
#endif
# 359 "/usr/include/surface_functions.h" 3
template< class T> 
# 360
__attribute((always_inline)) __attribute__((unused)) static inline void surf1DLayeredwrite(T val, surface< void, 241>  surf, int x, int layer, int s, cudaSurfaceBoundaryMode mode = cudaBoundaryModeTrap) 
# 361
{int volatile ___ = 1;(void)val;(void)surf;(void)x;(void)layer;(void)s;(void)mode;
# 365
::exit(___);}
#if 0
# 361
{ 
# 365
} 
#endif
# 367 "/usr/include/surface_functions.h" 3
template< class T> 
# 368
__attribute((always_inline)) __attribute__((unused)) static inline void surf1DLayeredwrite(T val, surface< void, 241>  surf, int x, int layer, cudaSurfaceBoundaryMode mode = cudaBoundaryModeTrap) 
# 369
{int volatile ___ = 1;(void)val;(void)surf;(void)x;(void)layer;(void)mode;
# 373
::exit(___);}
#if 0
# 369
{ 
# 373
} 
#endif
# 376 "/usr/include/surface_functions.h" 3
template< class T> 
# 377
__attribute((always_inline)) __attribute__((unused)) static inline void surf2DLayeredwrite(T val, surface< void, 242>  surf, int x, int y, int layer, int s, cudaSurfaceBoundaryMode mode = cudaBoundaryModeTrap) 
# 378
{int volatile ___ = 1;(void)val;(void)surf;(void)x;(void)y;(void)layer;(void)s;(void)mode;
# 382
::exit(___);}
#if 0
# 378
{ 
# 382
} 
#endif
# 384 "/usr/include/surface_functions.h" 3
template< class T> 
# 385
__attribute((always_inline)) __attribute__((unused)) static inline void surf2DLayeredwrite(T val, surface< void, 242>  surf, int x, int y, int layer, cudaSurfaceBoundaryMode mode = cudaBoundaryModeTrap) 
# 386
{int volatile ___ = 1;(void)val;(void)surf;(void)x;(void)y;(void)layer;(void)mode;
# 390
::exit(___);}
#if 0
# 386
{ 
# 390
} 
#endif
# 393 "/usr/include/surface_functions.h" 3
template< class T> 
# 394
__attribute((always_inline)) __attribute__((unused)) static inline void surfCubemapwrite(T val, surface< void, 12>  surf, int x, int y, int face, int s, cudaSurfaceBoundaryMode mode = cudaBoundaryModeTrap) 
# 395
{int volatile ___ = 1;(void)val;(void)surf;(void)x;(void)y;(void)face;(void)s;(void)mode;
# 399
::exit(___);}
#if 0
# 395
{ 
# 399
} 
#endif
# 401 "/usr/include/surface_functions.h" 3
template< class T> 
# 402
__attribute((always_inline)) __attribute__((unused)) static inline void surfCubemapwrite(T val, surface< void, 12>  surf, int x, int y, int face, cudaSurfaceBoundaryMode mode = cudaBoundaryModeTrap) 
# 403
{int volatile ___ = 1;(void)val;(void)surf;(void)x;(void)y;(void)face;(void)mode;
# 407
::exit(___);}
#if 0
# 403
{ 
# 407
} 
#endif
# 411 "/usr/include/surface_functions.h" 3
template< class T> 
# 412
__attribute((always_inline)) __attribute__((unused)) static inline void surfCubemapLayeredwrite(T val, surface< void, 252>  surf, int x, int y, int layerFace, int s, cudaSurfaceBoundaryMode mode = cudaBoundaryModeTrap) 
# 413
{int volatile ___ = 1;(void)val;(void)surf;(void)x;(void)y;(void)layerFace;(void)s;(void)mode;
# 417
::exit(___);}
#if 0
# 413
{ 
# 417
} 
#endif
# 419 "/usr/include/surface_functions.h" 3
template< class T> 
# 420
__attribute((always_inline)) __attribute__((unused)) static inline void surfCubemapLayeredwrite(T val, surface< void, 252>  surf, int x, int y, int layerFace, cudaSurfaceBoundaryMode mode = cudaBoundaryModeTrap) 
# 421
{int volatile ___ = 1;(void)val;(void)surf;(void)x;(void)y;(void)layerFace;(void)mode;
# 425
::exit(___);}
#if 0
# 421
{ 
# 425
} 
#endif
# 66 "/usr/include/texture_fetch_functions.h" 3
template< class T> 
# 67
struct __nv_tex_rmet_ret { }; 
# 69
template<> struct __nv_tex_rmet_ret< char>  { typedef char type; }; 
# 70
template<> struct __nv_tex_rmet_ret< signed char>  { typedef signed char type; }; 
# 71
template<> struct __nv_tex_rmet_ret< unsigned char>  { typedef unsigned char type; }; 
# 72
template<> struct __nv_tex_rmet_ret< char1>  { typedef char1 type; }; 
# 73
template<> struct __nv_tex_rmet_ret< uchar1>  { typedef uchar1 type; }; 
# 74
template<> struct __nv_tex_rmet_ret< char2>  { typedef char2 type; }; 
# 75
template<> struct __nv_tex_rmet_ret< uchar2>  { typedef uchar2 type; }; 
# 76
template<> struct __nv_tex_rmet_ret< char4>  { typedef char4 type; }; 
# 77
template<> struct __nv_tex_rmet_ret< uchar4>  { typedef uchar4 type; }; 
# 79
template<> struct __nv_tex_rmet_ret< short>  { typedef short type; }; 
# 80
template<> struct __nv_tex_rmet_ret< unsigned short>  { typedef unsigned short type; }; 
# 81
template<> struct __nv_tex_rmet_ret< short1>  { typedef short1 type; }; 
# 82
template<> struct __nv_tex_rmet_ret< ushort1>  { typedef ushort1 type; }; 
# 83
template<> struct __nv_tex_rmet_ret< short2>  { typedef short2 type; }; 
# 84
template<> struct __nv_tex_rmet_ret< ushort2>  { typedef ushort2 type; }; 
# 85
template<> struct __nv_tex_rmet_ret< short4>  { typedef short4 type; }; 
# 86
template<> struct __nv_tex_rmet_ret< ushort4>  { typedef ushort4 type; }; 
# 88
template<> struct __nv_tex_rmet_ret< int>  { typedef int type; }; 
# 89
template<> struct __nv_tex_rmet_ret< unsigned>  { typedef unsigned type; }; 
# 90
template<> struct __nv_tex_rmet_ret< int1>  { typedef int1 type; }; 
# 91
template<> struct __nv_tex_rmet_ret< uint1>  { typedef uint1 type; }; 
# 92
template<> struct __nv_tex_rmet_ret< int2>  { typedef int2 type; }; 
# 93
template<> struct __nv_tex_rmet_ret< uint2>  { typedef uint2 type; }; 
# 94
template<> struct __nv_tex_rmet_ret< int4>  { typedef int4 type; }; 
# 95
template<> struct __nv_tex_rmet_ret< uint4>  { typedef uint4 type; }; 
# 107 "/usr/include/texture_fetch_functions.h" 3
template<> struct __nv_tex_rmet_ret< float>  { typedef float type; }; 
# 108
template<> struct __nv_tex_rmet_ret< float1>  { typedef float1 type; }; 
# 109
template<> struct __nv_tex_rmet_ret< float2>  { typedef float2 type; }; 
# 110
template<> struct __nv_tex_rmet_ret< float4>  { typedef float4 type; }; 
# 113
template< class T> struct __nv_tex_rmet_cast { typedef T *type; }; 
# 125 "/usr/include/texture_fetch_functions.h" 3
template< class T> 
# 126
__attribute((always_inline)) __attribute__((unused)) static inline typename __nv_tex_rmet_ret< T> ::type tex1Dfetch(texture< T, 1, cudaReadModeElementType>  t, int x) 
# 127
{int volatile ___ = 1;(void)t;(void)x;
# 133
::exit(___);}
#if 0
# 127
{ 
# 133
} 
#endif
# 135 "/usr/include/texture_fetch_functions.h" 3
template< class T> 
# 136
struct __nv_tex_rmnf_ret { }; 
# 138
template<> struct __nv_tex_rmnf_ret< char>  { typedef float type; }; 
# 139
template<> struct __nv_tex_rmnf_ret< signed char>  { typedef float type; }; 
# 140
template<> struct __nv_tex_rmnf_ret< unsigned char>  { typedef float type; }; 
# 141
template<> struct __nv_tex_rmnf_ret< short>  { typedef float type; }; 
# 142
template<> struct __nv_tex_rmnf_ret< unsigned short>  { typedef float type; }; 
# 143
template<> struct __nv_tex_rmnf_ret< char1>  { typedef float1 type; }; 
# 144
template<> struct __nv_tex_rmnf_ret< uchar1>  { typedef float1 type; }; 
# 145
template<> struct __nv_tex_rmnf_ret< short1>  { typedef float1 type; }; 
# 146
template<> struct __nv_tex_rmnf_ret< ushort1>  { typedef float1 type; }; 
# 147
template<> struct __nv_tex_rmnf_ret< char2>  { typedef float2 type; }; 
# 148
template<> struct __nv_tex_rmnf_ret< uchar2>  { typedef float2 type; }; 
# 149
template<> struct __nv_tex_rmnf_ret< short2>  { typedef float2 type; }; 
# 150
template<> struct __nv_tex_rmnf_ret< ushort2>  { typedef float2 type; }; 
# 151
template<> struct __nv_tex_rmnf_ret< char4>  { typedef float4 type; }; 
# 152
template<> struct __nv_tex_rmnf_ret< uchar4>  { typedef float4 type; }; 
# 153
template<> struct __nv_tex_rmnf_ret< short4>  { typedef float4 type; }; 
# 154
template<> struct __nv_tex_rmnf_ret< ushort4>  { typedef float4 type; }; 
# 156
template< class T> 
# 157
__attribute((always_inline)) __attribute__((unused)) static inline typename __nv_tex_rmnf_ret< T> ::type tex1Dfetch(texture< T, 1, cudaReadModeNormalizedFloat>  t, int x) 
# 158
{int volatile ___ = 1;(void)t;(void)x;
# 165
::exit(___);}
#if 0
# 158
{ 
# 165
} 
#endif
# 168 "/usr/include/texture_fetch_functions.h" 3
template< class T> 
# 169
__attribute((always_inline)) __attribute__((unused)) static inline typename __nv_tex_rmet_ret< T> ::type tex1D(texture< T, 1, cudaReadModeElementType>  t, float x) 
# 170
{int volatile ___ = 1;(void)t;(void)x;
# 176
::exit(___);}
#if 0
# 170
{ 
# 176
} 
#endif
# 178 "/usr/include/texture_fetch_functions.h" 3
template< class T> 
# 179
__attribute((always_inline)) __attribute__((unused)) static inline typename __nv_tex_rmnf_ret< T> ::type tex1D(texture< T, 1, cudaReadModeNormalizedFloat>  t, float x) 
# 180
{int volatile ___ = 1;(void)t;(void)x;
# 187
::exit(___);}
#if 0
# 180
{ 
# 187
} 
#endif
# 191 "/usr/include/texture_fetch_functions.h" 3
template< class T> 
# 192
__attribute((always_inline)) __attribute__((unused)) static inline typename __nv_tex_rmet_ret< T> ::type tex2D(texture< T, 2, cudaReadModeElementType>  t, float x, float y) 
# 193
{int volatile ___ = 1;(void)t;(void)x;(void)y;
# 200
::exit(___);}
#if 0
# 193
{ 
# 200
} 
#endif
# 202 "/usr/include/texture_fetch_functions.h" 3
template< class T> 
# 203
__attribute((always_inline)) __attribute__((unused)) static inline typename __nv_tex_rmnf_ret< T> ::type tex2D(texture< T, 2, cudaReadModeNormalizedFloat>  t, float x, float y) 
# 204
{int volatile ___ = 1;(void)t;(void)x;(void)y;
# 211
::exit(___);}
#if 0
# 204
{ 
# 211
} 
#endif
# 215 "/usr/include/texture_fetch_functions.h" 3
template< class T> 
# 216
__attribute((always_inline)) __attribute__((unused)) static inline typename __nv_tex_rmet_ret< T> ::type tex1DLayered(texture< T, 241, cudaReadModeElementType>  t, float x, int layer) 
# 217
{int volatile ___ = 1;(void)t;(void)x;(void)layer;
# 223
::exit(___);}
#if 0
# 217
{ 
# 223
} 
#endif
# 225 "/usr/include/texture_fetch_functions.h" 3
template< class T> 
# 226
__attribute((always_inline)) __attribute__((unused)) static inline typename __nv_tex_rmnf_ret< T> ::type tex1DLayered(texture< T, 241, cudaReadModeNormalizedFloat>  t, float x, int layer) 
# 227
{int volatile ___ = 1;(void)t;(void)x;(void)layer;
# 234
::exit(___);}
#if 0
# 227
{ 
# 234
} 
#endif
# 238 "/usr/include/texture_fetch_functions.h" 3
template< class T> 
# 239
__attribute((always_inline)) __attribute__((unused)) static inline typename __nv_tex_rmet_ret< T> ::type tex2DLayered(texture< T, 242, cudaReadModeElementType>  t, float x, float y, int layer) 
# 240
{int volatile ___ = 1;(void)t;(void)x;(void)y;(void)layer;
# 246
::exit(___);}
#if 0
# 240
{ 
# 246
} 
#endif
# 248 "/usr/include/texture_fetch_functions.h" 3
template< class T> 
# 249
__attribute((always_inline)) __attribute__((unused)) static inline typename __nv_tex_rmnf_ret< T> ::type tex2DLayered(texture< T, 242, cudaReadModeNormalizedFloat>  t, float x, float y, int layer) 
# 250
{int volatile ___ = 1;(void)t;(void)x;(void)y;(void)layer;
# 257
::exit(___);}
#if 0
# 250
{ 
# 257
} 
#endif
# 260 "/usr/include/texture_fetch_functions.h" 3
template< class T> 
# 261
__attribute((always_inline)) __attribute__((unused)) static inline typename __nv_tex_rmet_ret< T> ::type tex3D(texture< T, 3, cudaReadModeElementType>  t, float x, float y, float z) 
# 262
{int volatile ___ = 1;(void)t;(void)x;(void)y;(void)z;
# 268
::exit(___);}
#if 0
# 262
{ 
# 268
} 
#endif
# 270 "/usr/include/texture_fetch_functions.h" 3
template< class T> 
# 271
__attribute((always_inline)) __attribute__((unused)) static inline typename __nv_tex_rmnf_ret< T> ::type tex3D(texture< T, 3, cudaReadModeNormalizedFloat>  t, float x, float y, float z) 
# 272
{int volatile ___ = 1;(void)t;(void)x;(void)y;(void)z;
# 279
::exit(___);}
#if 0
# 272
{ 
# 279
} 
#endif
# 282 "/usr/include/texture_fetch_functions.h" 3
template< class T> 
# 283
__attribute((always_inline)) __attribute__((unused)) static inline typename __nv_tex_rmet_ret< T> ::type texCubemap(texture< T, 12, cudaReadModeElementType>  t, float x, float y, float z) 
# 284
{int volatile ___ = 1;(void)t;(void)x;(void)y;(void)z;
# 290
::exit(___);}
#if 0
# 284
{ 
# 290
} 
#endif
# 292 "/usr/include/texture_fetch_functions.h" 3
template< class T> 
# 293
__attribute((always_inline)) __attribute__((unused)) static inline typename __nv_tex_rmnf_ret< T> ::type texCubemap(texture< T, 12, cudaReadModeNormalizedFloat>  t, float x, float y, float z) 
# 294
{int volatile ___ = 1;(void)t;(void)x;(void)y;(void)z;
# 301
::exit(___);}
#if 0
# 294
{ 
# 301
} 
#endif
# 304 "/usr/include/texture_fetch_functions.h" 3
template< class T> 
# 305
struct __nv_tex2dgather_ret { }; 
# 306
template<> struct __nv_tex2dgather_ret< char>  { typedef char4 type; }; 
# 307
template<> struct __nv_tex2dgather_ret< signed char>  { typedef char4 type; }; 
# 308
template<> struct __nv_tex2dgather_ret< char1>  { typedef char4 type; }; 
# 309
template<> struct __nv_tex2dgather_ret< char2>  { typedef char4 type; }; 
# 310
template<> struct __nv_tex2dgather_ret< char3>  { typedef char4 type; }; 
# 311
template<> struct __nv_tex2dgather_ret< char4>  { typedef char4 type; }; 
# 312
template<> struct __nv_tex2dgather_ret< unsigned char>  { typedef uchar4 type; }; 
# 313
template<> struct __nv_tex2dgather_ret< uchar1>  { typedef uchar4 type; }; 
# 314
template<> struct __nv_tex2dgather_ret< uchar2>  { typedef uchar4 type; }; 
# 315
template<> struct __nv_tex2dgather_ret< uchar3>  { typedef uchar4 type; }; 
# 316
template<> struct __nv_tex2dgather_ret< uchar4>  { typedef uchar4 type; }; 
# 318
template<> struct __nv_tex2dgather_ret< short>  { typedef short4 type; }; 
# 319
template<> struct __nv_tex2dgather_ret< short1>  { typedef short4 type; }; 
# 320
template<> struct __nv_tex2dgather_ret< short2>  { typedef short4 type; }; 
# 321
template<> struct __nv_tex2dgather_ret< short3>  { typedef short4 type; }; 
# 322
template<> struct __nv_tex2dgather_ret< short4>  { typedef short4 type; }; 
# 323
template<> struct __nv_tex2dgather_ret< unsigned short>  { typedef ushort4 type; }; 
# 324
template<> struct __nv_tex2dgather_ret< ushort1>  { typedef ushort4 type; }; 
# 325
template<> struct __nv_tex2dgather_ret< ushort2>  { typedef ushort4 type; }; 
# 326
template<> struct __nv_tex2dgather_ret< ushort3>  { typedef ushort4 type; }; 
# 327
template<> struct __nv_tex2dgather_ret< ushort4>  { typedef ushort4 type; }; 
# 329
template<> struct __nv_tex2dgather_ret< int>  { typedef int4 type; }; 
# 330
template<> struct __nv_tex2dgather_ret< int1>  { typedef int4 type; }; 
# 331
template<> struct __nv_tex2dgather_ret< int2>  { typedef int4 type; }; 
# 332
template<> struct __nv_tex2dgather_ret< int3>  { typedef int4 type; }; 
# 333
template<> struct __nv_tex2dgather_ret< int4>  { typedef int4 type; }; 
# 334
template<> struct __nv_tex2dgather_ret< unsigned>  { typedef uint4 type; }; 
# 335
template<> struct __nv_tex2dgather_ret< uint1>  { typedef uint4 type; }; 
# 336
template<> struct __nv_tex2dgather_ret< uint2>  { typedef uint4 type; }; 
# 337
template<> struct __nv_tex2dgather_ret< uint3>  { typedef uint4 type; }; 
# 338
template<> struct __nv_tex2dgather_ret< uint4>  { typedef uint4 type; }; 
# 340
template<> struct __nv_tex2dgather_ret< float>  { typedef float4 type; }; 
# 341
template<> struct __nv_tex2dgather_ret< float1>  { typedef float4 type; }; 
# 342
template<> struct __nv_tex2dgather_ret< float2>  { typedef float4 type; }; 
# 343
template<> struct __nv_tex2dgather_ret< float3>  { typedef float4 type; }; 
# 344
template<> struct __nv_tex2dgather_ret< float4>  { typedef float4 type; }; 
# 346
template< class T> 
# 347
__attribute((always_inline)) __attribute__((unused)) static inline typename __nv_tex2dgather_ret< T> ::type tex2Dgather(texture< T, 2, cudaReadModeElementType>  t, float x, float y, int comp = 0) 
# 348
{int volatile ___ = 1;(void)t;(void)x;(void)y;(void)comp;
# 355
::exit(___);}
#if 0
# 348
{ 
# 355
} 
#endif
# 358 "/usr/include/texture_fetch_functions.h" 3
template< class T> struct __nv_tex2dgather_rmnf_ret { }; 
# 359
template<> struct __nv_tex2dgather_rmnf_ret< char>  { typedef float4 type; }; 
# 360
template<> struct __nv_tex2dgather_rmnf_ret< signed char>  { typedef float4 type; }; 
# 361
template<> struct __nv_tex2dgather_rmnf_ret< unsigned char>  { typedef float4 type; }; 
# 362
template<> struct __nv_tex2dgather_rmnf_ret< char1>  { typedef float4 type; }; 
# 363
template<> struct __nv_tex2dgather_rmnf_ret< uchar1>  { typedef float4 type; }; 
# 364
template<> struct __nv_tex2dgather_rmnf_ret< char2>  { typedef float4 type; }; 
# 365
template<> struct __nv_tex2dgather_rmnf_ret< uchar2>  { typedef float4 type; }; 
# 366
template<> struct __nv_tex2dgather_rmnf_ret< char3>  { typedef float4 type; }; 
# 367
template<> struct __nv_tex2dgather_rmnf_ret< uchar3>  { typedef float4 type; }; 
# 368
template<> struct __nv_tex2dgather_rmnf_ret< char4>  { typedef float4 type; }; 
# 369
template<> struct __nv_tex2dgather_rmnf_ret< uchar4>  { typedef float4 type; }; 
# 370
template<> struct __nv_tex2dgather_rmnf_ret< signed short>  { typedef float4 type; }; 
# 371
template<> struct __nv_tex2dgather_rmnf_ret< unsigned short>  { typedef float4 type; }; 
# 372
template<> struct __nv_tex2dgather_rmnf_ret< short1>  { typedef float4 type; }; 
# 373
template<> struct __nv_tex2dgather_rmnf_ret< ushort1>  { typedef float4 type; }; 
# 374
template<> struct __nv_tex2dgather_rmnf_ret< short2>  { typedef float4 type; }; 
# 375
template<> struct __nv_tex2dgather_rmnf_ret< ushort2>  { typedef float4 type; }; 
# 376
template<> struct __nv_tex2dgather_rmnf_ret< short3>  { typedef float4 type; }; 
# 377
template<> struct __nv_tex2dgather_rmnf_ret< ushort3>  { typedef float4 type; }; 
# 378
template<> struct __nv_tex2dgather_rmnf_ret< short4>  { typedef float4 type; }; 
# 379
template<> struct __nv_tex2dgather_rmnf_ret< ushort4>  { typedef float4 type; }; 
# 381
template< class T> 
# 382
__attribute((always_inline)) __attribute__((unused)) static inline typename __nv_tex2dgather_rmnf_ret< T> ::type tex2Dgather(texture< T, 2, cudaReadModeNormalizedFloat>  t, float x, float y, int comp = 0) 
# 383
{int volatile ___ = 1;(void)t;(void)x;(void)y;(void)comp;
# 390
::exit(___);}
#if 0
# 383
{ 
# 390
} 
#endif
# 394 "/usr/include/texture_fetch_functions.h" 3
template< class T> 
# 395
__attribute((always_inline)) __attribute__((unused)) static inline typename __nv_tex_rmet_ret< T> ::type tex1DLod(texture< T, 1, cudaReadModeElementType>  t, float x, float level) 
# 396
{int volatile ___ = 1;(void)t;(void)x;(void)level;
# 402
::exit(___);}
#if 0
# 396
{ 
# 402
} 
#endif
# 404 "/usr/include/texture_fetch_functions.h" 3
template< class T> 
# 405
__attribute((always_inline)) __attribute__((unused)) static inline typename __nv_tex_rmnf_ret< T> ::type tex1DLod(texture< T, 1, cudaReadModeNormalizedFloat>  t, float x, float level) 
# 406
{int volatile ___ = 1;(void)t;(void)x;(void)level;
# 413
::exit(___);}
#if 0
# 406
{ 
# 413
} 
#endif
# 416 "/usr/include/texture_fetch_functions.h" 3
template< class T> 
# 417
__attribute((always_inline)) __attribute__((unused)) static inline typename __nv_tex_rmet_ret< T> ::type tex2DLod(texture< T, 2, cudaReadModeElementType>  t, float x, float y, float level) 
# 418
{int volatile ___ = 1;(void)t;(void)x;(void)y;(void)level;
# 424
::exit(___);}
#if 0
# 418
{ 
# 424
} 
#endif
# 426 "/usr/include/texture_fetch_functions.h" 3
template< class T> 
# 427
__attribute((always_inline)) __attribute__((unused)) static inline typename __nv_tex_rmnf_ret< T> ::type tex2DLod(texture< T, 2, cudaReadModeNormalizedFloat>  t, float x, float y, float level) 
# 428
{int volatile ___ = 1;(void)t;(void)x;(void)y;(void)level;
# 435
::exit(___);}
#if 0
# 428
{ 
# 435
} 
#endif
# 438 "/usr/include/texture_fetch_functions.h" 3
template< class T> 
# 439
__attribute((always_inline)) __attribute__((unused)) static inline typename __nv_tex_rmet_ret< T> ::type tex1DLayeredLod(texture< T, 241, cudaReadModeElementType>  t, float x, int layer, float level) 
# 440
{int volatile ___ = 1;(void)t;(void)x;(void)layer;(void)level;
# 446
::exit(___);}
#if 0
# 440
{ 
# 446
} 
#endif
# 448 "/usr/include/texture_fetch_functions.h" 3
template< class T> 
# 449
__attribute((always_inline)) __attribute__((unused)) static inline typename __nv_tex_rmnf_ret< T> ::type tex1DLayeredLod(texture< T, 241, cudaReadModeNormalizedFloat>  t, float x, int layer, float level) 
# 450
{int volatile ___ = 1;(void)t;(void)x;(void)layer;(void)level;
# 457
::exit(___);}
#if 0
# 450
{ 
# 457
} 
#endif
# 460 "/usr/include/texture_fetch_functions.h" 3
template< class T> 
# 461
__attribute((always_inline)) __attribute__((unused)) static inline typename __nv_tex_rmet_ret< T> ::type tex2DLayeredLod(texture< T, 242, cudaReadModeElementType>  t, float x, float y, int layer, float level) 
# 462
{int volatile ___ = 1;(void)t;(void)x;(void)y;(void)layer;(void)level;
# 468
::exit(___);}
#if 0
# 462
{ 
# 468
} 
#endif
# 470 "/usr/include/texture_fetch_functions.h" 3
template< class T> 
# 471
__attribute((always_inline)) __attribute__((unused)) static inline typename __nv_tex_rmnf_ret< T> ::type tex2DLayeredLod(texture< T, 242, cudaReadModeNormalizedFloat>  t, float x, float y, int layer, float level) 
# 472
{int volatile ___ = 1;(void)t;(void)x;(void)y;(void)layer;(void)level;
# 479
::exit(___);}
#if 0
# 472
{ 
# 479
} 
#endif
# 482 "/usr/include/texture_fetch_functions.h" 3
template< class T> 
# 483
__attribute((always_inline)) __attribute__((unused)) static inline typename __nv_tex_rmet_ret< T> ::type tex3DLod(texture< T, 3, cudaReadModeElementType>  t, float x, float y, float z, float level) 
# 484
{int volatile ___ = 1;(void)t;(void)x;(void)y;(void)z;(void)level;
# 490
::exit(___);}
#if 0
# 484
{ 
# 490
} 
#endif
# 492 "/usr/include/texture_fetch_functions.h" 3
template< class T> 
# 493
__attribute((always_inline)) __attribute__((unused)) static inline typename __nv_tex_rmnf_ret< T> ::type tex3DLod(texture< T, 3, cudaReadModeNormalizedFloat>  t, float x, float y, float z, float level) 
# 494
{int volatile ___ = 1;(void)t;(void)x;(void)y;(void)z;(void)level;
# 501
::exit(___);}
#if 0
# 494
{ 
# 501
} 
#endif
# 504 "/usr/include/texture_fetch_functions.h" 3
template< class T> 
# 505
__attribute((always_inline)) __attribute__((unused)) static inline typename __nv_tex_rmet_ret< T> ::type texCubemapLod(texture< T, 12, cudaReadModeElementType>  t, float x, float y, float z, float level) 
# 506
{int volatile ___ = 1;(void)t;(void)x;(void)y;(void)z;(void)level;
# 512
::exit(___);}
#if 0
# 506
{ 
# 512
} 
#endif
# 514 "/usr/include/texture_fetch_functions.h" 3
template< class T> 
# 515
__attribute((always_inline)) __attribute__((unused)) static inline typename __nv_tex_rmnf_ret< T> ::type texCubemapLod(texture< T, 12, cudaReadModeNormalizedFloat>  t, float x, float y, float z, float level) 
# 516
{int volatile ___ = 1;(void)t;(void)x;(void)y;(void)z;(void)level;
# 523
::exit(___);}
#if 0
# 516
{ 
# 523
} 
#endif
# 527 "/usr/include/texture_fetch_functions.h" 3
template< class T> 
# 528
__attribute((always_inline)) __attribute__((unused)) static inline typename __nv_tex_rmet_ret< T> ::type texCubemapLayered(texture< T, 252, cudaReadModeElementType>  t, float x, float y, float z, int layer) 
# 529
{int volatile ___ = 1;(void)t;(void)x;(void)y;(void)z;(void)layer;
# 535
::exit(___);}
#if 0
# 529
{ 
# 535
} 
#endif
# 537 "/usr/include/texture_fetch_functions.h" 3
template< class T> 
# 538
__attribute((always_inline)) __attribute__((unused)) static inline typename __nv_tex_rmnf_ret< T> ::type texCubemapLayered(texture< T, 252, cudaReadModeNormalizedFloat>  t, float x, float y, float z, int layer) 
# 539
{int volatile ___ = 1;(void)t;(void)x;(void)y;(void)z;(void)layer;
# 546
::exit(___);}
#if 0
# 539
{ 
# 546
} 
#endif
# 550 "/usr/include/texture_fetch_functions.h" 3
template< class T> 
# 551
__attribute((always_inline)) __attribute__((unused)) static inline typename __nv_tex_rmet_ret< T> ::type texCubemapLayeredLod(texture< T, 252, cudaReadModeElementType>  t, float x, float y, float z, int layer, float level) 
# 552
{int volatile ___ = 1;(void)t;(void)x;(void)y;(void)z;(void)layer;(void)level;
# 558
::exit(___);}
#if 0
# 552
{ 
# 558
} 
#endif
# 560 "/usr/include/texture_fetch_functions.h" 3
template< class T> 
# 561
__attribute((always_inline)) __attribute__((unused)) static inline typename __nv_tex_rmnf_ret< T> ::type texCubemapLayeredLod(texture< T, 252, cudaReadModeNormalizedFloat>  t, float x, float y, float z, int layer, float level) 
# 562
{int volatile ___ = 1;(void)t;(void)x;(void)y;(void)z;(void)layer;(void)level;
# 569
::exit(___);}
#if 0
# 562
{ 
# 569
} 
#endif
# 573 "/usr/include/texture_fetch_functions.h" 3
template< class T> 
# 574
__attribute((always_inline)) __attribute__((unused)) static inline typename __nv_tex_rmet_ret< T> ::type texCubemapGrad(texture< T, 12, cudaReadModeElementType>  t, float x, float y, float z, float4 dPdx, float4 dPdy) 
# 575
{int volatile ___ = 1;(void)t;(void)x;(void)y;(void)z;(void)dPdx;(void)dPdy;
# 581
::exit(___);}
#if 0
# 575
{ 
# 581
} 
#endif
# 583 "/usr/include/texture_fetch_functions.h" 3
template< class T> 
# 584
__attribute((always_inline)) __attribute__((unused)) static inline typename __nv_tex_rmnf_ret< T> ::type texCubemapGrad(texture< T, 12, cudaReadModeNormalizedFloat>  t, float x, float y, float z, float4 dPdx, float4 dPdy) 
# 585
{int volatile ___ = 1;(void)t;(void)x;(void)y;(void)z;(void)dPdx;(void)dPdy;
# 592
::exit(___);}
#if 0
# 585
{ 
# 592
} 
#endif
# 596 "/usr/include/texture_fetch_functions.h" 3
template< class T> 
# 597
__attribute((always_inline)) __attribute__((unused)) static inline typename __nv_tex_rmet_ret< T> ::type texCubemapLayeredGrad(texture< T, 252, cudaReadModeElementType>  t, float x, float y, float z, int layer, float4 dPdx, float4 dPdy) 
# 598
{int volatile ___ = 1;(void)t;(void)x;(void)y;(void)z;(void)layer;(void)dPdx;(void)dPdy;
# 604
::exit(___);}
#if 0
# 598
{ 
# 604
} 
#endif
# 606 "/usr/include/texture_fetch_functions.h" 3
template< class T> 
# 607
__attribute((always_inline)) __attribute__((unused)) static inline typename __nv_tex_rmnf_ret< T> ::type texCubemapLayeredGrad(texture< T, 252, cudaReadModeNormalizedFloat>  t, float x, float y, float z, int layer, float4 dPdx, float4 dPdy) 
# 608
{int volatile ___ = 1;(void)t;(void)x;(void)y;(void)z;(void)layer;(void)dPdx;(void)dPdy;
# 615
::exit(___);}
#if 0
# 608
{ 
# 615
} 
#endif
# 619 "/usr/include/texture_fetch_functions.h" 3
template< class T> 
# 620
__attribute((always_inline)) __attribute__((unused)) static inline typename __nv_tex_rmet_ret< T> ::type tex1DGrad(texture< T, 1, cudaReadModeElementType>  t, float x, float dPdx, float dPdy) 
# 621
{int volatile ___ = 1;(void)t;(void)x;(void)dPdx;(void)dPdy;
# 627
::exit(___);}
#if 0
# 621
{ 
# 627
} 
#endif
# 629 "/usr/include/texture_fetch_functions.h" 3
template< class T> 
# 630
__attribute((always_inline)) __attribute__((unused)) static inline typename __nv_tex_rmnf_ret< T> ::type tex1DGrad(texture< T, 1, cudaReadModeNormalizedFloat>  t, float x, float dPdx, float dPdy) 
# 631
{int volatile ___ = 1;(void)t;(void)x;(void)dPdx;(void)dPdy;
# 638
::exit(___);}
#if 0
# 631
{ 
# 638
} 
#endif
# 642 "/usr/include/texture_fetch_functions.h" 3
template< class T> 
# 643
__attribute((always_inline)) __attribute__((unused)) static inline typename __nv_tex_rmet_ret< T> ::type tex2DGrad(texture< T, 2, cudaReadModeElementType>  t, float x, float y, float2 dPdx, float2 dPdy) 
# 644
{int volatile ___ = 1;(void)t;(void)x;(void)y;(void)dPdx;(void)dPdy;
# 650
::exit(___);}
#if 0
# 644
{ 
# 650
} 
#endif
# 652 "/usr/include/texture_fetch_functions.h" 3
template< class T> 
# 653
__attribute((always_inline)) __attribute__((unused)) static inline typename __nv_tex_rmnf_ret< T> ::type tex2DGrad(texture< T, 2, cudaReadModeNormalizedFloat>  t, float x, float y, float2 dPdx, float2 dPdy) 
# 654
{int volatile ___ = 1;(void)t;(void)x;(void)y;(void)dPdx;(void)dPdy;
# 661
::exit(___);}
#if 0
# 654
{ 
# 661
} 
#endif
# 664 "/usr/include/texture_fetch_functions.h" 3
template< class T> 
# 665
__attribute((always_inline)) __attribute__((unused)) static inline typename __nv_tex_rmet_ret< T> ::type tex1DLayeredGrad(texture< T, 241, cudaReadModeElementType>  t, float x, int layer, float dPdx, float dPdy) 
# 666
{int volatile ___ = 1;(void)t;(void)x;(void)layer;(void)dPdx;(void)dPdy;
# 672
::exit(___);}
#if 0
# 666
{ 
# 672
} 
#endif
# 674 "/usr/include/texture_fetch_functions.h" 3
template< class T> 
# 675
__attribute((always_inline)) __attribute__((unused)) static inline typename __nv_tex_rmnf_ret< T> ::type tex1DLayeredGrad(texture< T, 241, cudaReadModeNormalizedFloat>  t, float x, int layer, float dPdx, float dPdy) 
# 676
{int volatile ___ = 1;(void)t;(void)x;(void)layer;(void)dPdx;(void)dPdy;
# 683
::exit(___);}
#if 0
# 676
{ 
# 683
} 
#endif
# 686 "/usr/include/texture_fetch_functions.h" 3
template< class T> 
# 687
__attribute((always_inline)) __attribute__((unused)) static inline typename __nv_tex_rmet_ret< T> ::type tex2DLayeredGrad(texture< T, 242, cudaReadModeElementType>  t, float x, float y, int layer, float2 dPdx, float2 dPdy) 
# 688
{int volatile ___ = 1;(void)t;(void)x;(void)y;(void)layer;(void)dPdx;(void)dPdy;
# 694
::exit(___);}
#if 0
# 688
{ 
# 694
} 
#endif
# 696 "/usr/include/texture_fetch_functions.h" 3
template< class T> 
# 697
__attribute((always_inline)) __attribute__((unused)) static inline typename __nv_tex_rmnf_ret< T> ::type tex2DLayeredGrad(texture< T, 242, cudaReadModeNormalizedFloat>  t, float x, float y, int layer, float2 dPdx, float2 dPdy) 
# 698
{int volatile ___ = 1;(void)t;(void)x;(void)y;(void)layer;(void)dPdx;(void)dPdy;
# 705
::exit(___);}
#if 0
# 698
{ 
# 705
} 
#endif
# 708 "/usr/include/texture_fetch_functions.h" 3
template< class T> 
# 709
__attribute((always_inline)) __attribute__((unused)) static inline typename __nv_tex_rmet_ret< T> ::type tex3DGrad(texture< T, 3, cudaReadModeElementType>  t, float x, float y, float z, float4 dPdx, float4 dPdy) 
# 710
{int volatile ___ = 1;(void)t;(void)x;(void)y;(void)z;(void)dPdx;(void)dPdy;
# 716
::exit(___);}
#if 0
# 710
{ 
# 716
} 
#endif
# 718 "/usr/include/texture_fetch_functions.h" 3
template< class T> 
# 719
__attribute((always_inline)) __attribute__((unused)) static inline typename __nv_tex_rmnf_ret< T> ::type tex3DGrad(texture< T, 3, cudaReadModeNormalizedFloat>  t, float x, float y, float z, float4 dPdx, float4 dPdy) 
# 720
{int volatile ___ = 1;(void)t;(void)x;(void)y;(void)z;(void)dPdx;(void)dPdy;
# 727
::exit(___);}
#if 0
# 720
{ 
# 727
} 
#endif
# 60 "/usr/include/texture_indirect_functions.h" 3
template< class T> struct __nv_itex_trait { }; 
# 61
template<> struct __nv_itex_trait< char>  { typedef void type; }; 
# 62
template<> struct __nv_itex_trait< signed char>  { typedef void type; }; 
# 63
template<> struct __nv_itex_trait< char1>  { typedef void type; }; 
# 64
template<> struct __nv_itex_trait< char2>  { typedef void type; }; 
# 65
template<> struct __nv_itex_trait< char4>  { typedef void type; }; 
# 66
template<> struct __nv_itex_trait< unsigned char>  { typedef void type; }; 
# 67
template<> struct __nv_itex_trait< uchar1>  { typedef void type; }; 
# 68
template<> struct __nv_itex_trait< uchar2>  { typedef void type; }; 
# 69
template<> struct __nv_itex_trait< uchar4>  { typedef void type; }; 
# 70
template<> struct __nv_itex_trait< short>  { typedef void type; }; 
# 71
template<> struct __nv_itex_trait< short1>  { typedef void type; }; 
# 72
template<> struct __nv_itex_trait< short2>  { typedef void type; }; 
# 73
template<> struct __nv_itex_trait< short4>  { typedef void type; }; 
# 74
template<> struct __nv_itex_trait< unsigned short>  { typedef void type; }; 
# 75
template<> struct __nv_itex_trait< ushort1>  { typedef void type; }; 
# 76
template<> struct __nv_itex_trait< ushort2>  { typedef void type; }; 
# 77
template<> struct __nv_itex_trait< ushort4>  { typedef void type; }; 
# 78
template<> struct __nv_itex_trait< int>  { typedef void type; }; 
# 79
template<> struct __nv_itex_trait< int1>  { typedef void type; }; 
# 80
template<> struct __nv_itex_trait< int2>  { typedef void type; }; 
# 81
template<> struct __nv_itex_trait< int4>  { typedef void type; }; 
# 82
template<> struct __nv_itex_trait< unsigned>  { typedef void type; }; 
# 83
template<> struct __nv_itex_trait< uint1>  { typedef void type; }; 
# 84
template<> struct __nv_itex_trait< uint2>  { typedef void type; }; 
# 85
template<> struct __nv_itex_trait< uint4>  { typedef void type; }; 
# 96 "/usr/include/texture_indirect_functions.h" 3
template<> struct __nv_itex_trait< float>  { typedef void type; }; 
# 97
template<> struct __nv_itex_trait< float1>  { typedef void type; }; 
# 98
template<> struct __nv_itex_trait< float2>  { typedef void type; }; 
# 99
template<> struct __nv_itex_trait< float4>  { typedef void type; }; 
# 103
template< class T> __attribute__((unused)) static typename __nv_itex_trait< T> ::type 
# 104
tex1Dfetch(T *ptr, cudaTextureObject_t obj, int x) 
# 105
{int volatile ___ = 1;(void)ptr;(void)obj;(void)x;
# 109
::exit(___);}
#if 0
# 105
{ 
# 109
} 
#endif
# 111 "/usr/include/texture_indirect_functions.h" 3
template< class T> __attribute__((unused)) static T 
# 112
tex1Dfetch(cudaTextureObject_t texObject, int x) 
# 113
{int volatile ___ = 1;(void)texObject;(void)x;
# 119
::exit(___);}
#if 0
# 113
{ 
# 119
} 
#endif
# 121 "/usr/include/texture_indirect_functions.h" 3
template< class T> __attribute__((unused)) static typename __nv_itex_trait< T> ::type 
# 122
tex1D(T *ptr, cudaTextureObject_t obj, float x) 
# 123
{int volatile ___ = 1;(void)ptr;(void)obj;(void)x;
# 127
::exit(___);}
#if 0
# 123
{ 
# 127
} 
#endif
# 130 "/usr/include/texture_indirect_functions.h" 3
template< class T> __attribute__((unused)) static T 
# 131
tex1D(cudaTextureObject_t texObject, float x) 
# 132
{int volatile ___ = 1;(void)texObject;(void)x;
# 138
::exit(___);}
#if 0
# 132
{ 
# 138
} 
#endif
# 141 "/usr/include/texture_indirect_functions.h" 3
template< class T> __attribute__((unused)) static typename __nv_itex_trait< T> ::type 
# 142
tex2D(T *ptr, cudaTextureObject_t obj, float x, float y) 
# 143
{int volatile ___ = 1;(void)ptr;(void)obj;(void)x;(void)y;
# 147
::exit(___);}
#if 0
# 143
{ 
# 147
} 
#endif
# 149 "/usr/include/texture_indirect_functions.h" 3
template< class T> __attribute__((unused)) static T 
# 150
tex2D(cudaTextureObject_t texObject, float x, float y) 
# 151
{int volatile ___ = 1;(void)texObject;(void)x;(void)y;
# 157
::exit(___);}
#if 0
# 151
{ 
# 157
} 
#endif
# 159 "/usr/include/texture_indirect_functions.h" 3
template< class T> __attribute__((unused)) static typename __nv_itex_trait< T> ::type 
# 160
tex3D(T *ptr, cudaTextureObject_t obj, float x, float y, float z) 
# 161
{int volatile ___ = 1;(void)ptr;(void)obj;(void)x;(void)y;(void)z;
# 165
::exit(___);}
#if 0
# 161
{ 
# 165
} 
#endif
# 167 "/usr/include/texture_indirect_functions.h" 3
template< class T> __attribute__((unused)) static T 
# 168
tex3D(cudaTextureObject_t texObject, float x, float y, float z) 
# 169
{int volatile ___ = 1;(void)texObject;(void)x;(void)y;(void)z;
# 175
::exit(___);}
#if 0
# 169
{ 
# 175
} 
#endif
# 177 "/usr/include/texture_indirect_functions.h" 3
template< class T> __attribute__((unused)) static typename __nv_itex_trait< T> ::type 
# 178
tex1DLayered(T *ptr, cudaTextureObject_t obj, float x, int layer) 
# 179
{int volatile ___ = 1;(void)ptr;(void)obj;(void)x;(void)layer;
# 183
::exit(___);}
#if 0
# 179
{ 
# 183
} 
#endif
# 185 "/usr/include/texture_indirect_functions.h" 3
template< class T> __attribute__((unused)) static T 
# 186
tex1DLayered(cudaTextureObject_t texObject, float x, int layer) 
# 187
{int volatile ___ = 1;(void)texObject;(void)x;(void)layer;
# 193
::exit(___);}
#if 0
# 187
{ 
# 193
} 
#endif
# 195 "/usr/include/texture_indirect_functions.h" 3
template< class T> __attribute__((unused)) static typename __nv_itex_trait< T> ::type 
# 196
tex2DLayered(T *ptr, cudaTextureObject_t obj, float x, float y, int layer) 
# 197
{int volatile ___ = 1;(void)ptr;(void)obj;(void)x;(void)y;(void)layer;
# 201
::exit(___);}
#if 0
# 197
{ 
# 201
} 
#endif
# 203 "/usr/include/texture_indirect_functions.h" 3
template< class T> __attribute__((unused)) static T 
# 204
tex2DLayered(cudaTextureObject_t texObject, float x, float y, int layer) 
# 205
{int volatile ___ = 1;(void)texObject;(void)x;(void)y;(void)layer;
# 211
::exit(___);}
#if 0
# 205
{ 
# 211
} 
#endif
# 214 "/usr/include/texture_indirect_functions.h" 3
template< class T> __attribute__((unused)) static typename __nv_itex_trait< T> ::type 
# 215
texCubemap(T *ptr, cudaTextureObject_t obj, float x, float y, float z) 
# 216
{int volatile ___ = 1;(void)ptr;(void)obj;(void)x;(void)y;(void)z;
# 220
::exit(___);}
#if 0
# 216
{ 
# 220
} 
#endif
# 223 "/usr/include/texture_indirect_functions.h" 3
template< class T> __attribute__((unused)) static T 
# 224
texCubemap(cudaTextureObject_t texObject, float x, float y, float z) 
# 225
{int volatile ___ = 1;(void)texObject;(void)x;(void)y;(void)z;
# 231
::exit(___);}
#if 0
# 225
{ 
# 231
} 
#endif
# 234 "/usr/include/texture_indirect_functions.h" 3
template< class T> __attribute__((unused)) static typename __nv_itex_trait< T> ::type 
# 235
texCubemapLayered(T *ptr, cudaTextureObject_t obj, float x, float y, float z, int layer) 
# 236
{int volatile ___ = 1;(void)ptr;(void)obj;(void)x;(void)y;(void)z;(void)layer;
# 240
::exit(___);}
#if 0
# 236
{ 
# 240
} 
#endif
# 242 "/usr/include/texture_indirect_functions.h" 3
template< class T> __attribute__((unused)) static T 
# 243
texCubemapLayered(cudaTextureObject_t texObject, float x, float y, float z, int layer) 
# 244
{int volatile ___ = 1;(void)texObject;(void)x;(void)y;(void)z;(void)layer;
# 250
::exit(___);}
#if 0
# 244
{ 
# 250
} 
#endif
# 252 "/usr/include/texture_indirect_functions.h" 3
template< class T> __attribute__((unused)) static typename __nv_itex_trait< T> ::type 
# 253
tex2Dgather(T *ptr, cudaTextureObject_t obj, float x, float y, int comp = 0) 
# 254
{int volatile ___ = 1;(void)ptr;(void)obj;(void)x;(void)y;(void)comp;
# 258
::exit(___);}
#if 0
# 254
{ 
# 258
} 
#endif
# 260 "/usr/include/texture_indirect_functions.h" 3
template< class T> __attribute__((unused)) static T 
# 261
tex2Dgather(cudaTextureObject_t to, float x, float y, int comp = 0) 
# 262
{int volatile ___ = 1;(void)to;(void)x;(void)y;(void)comp;
# 268
::exit(___);}
#if 0
# 262
{ 
# 268
} 
#endif
# 272 "/usr/include/texture_indirect_functions.h" 3
template< class T> __attribute__((unused)) static typename __nv_itex_trait< T> ::type 
# 273
tex1DLod(T *ptr, cudaTextureObject_t obj, float x, float level) 
# 274
{int volatile ___ = 1;(void)ptr;(void)obj;(void)x;(void)level;
# 278
::exit(___);}
#if 0
# 274
{ 
# 278
} 
#endif
# 280 "/usr/include/texture_indirect_functions.h" 3
template< class T> __attribute__((unused)) static T 
# 281
tex1DLod(cudaTextureObject_t texObject, float x, float level) 
# 282
{int volatile ___ = 1;(void)texObject;(void)x;(void)level;
# 288
::exit(___);}
#if 0
# 282
{ 
# 288
} 
#endif
# 291 "/usr/include/texture_indirect_functions.h" 3
template< class T> __attribute__((unused)) static typename __nv_itex_trait< T> ::type 
# 292
tex2DLod(T *ptr, cudaTextureObject_t obj, float x, float y, float level) 
# 293
{int volatile ___ = 1;(void)ptr;(void)obj;(void)x;(void)y;(void)level;
# 297
::exit(___);}
#if 0
# 293
{ 
# 297
} 
#endif
# 299 "/usr/include/texture_indirect_functions.h" 3
template< class T> __attribute__((unused)) static T 
# 300
tex2DLod(cudaTextureObject_t texObject, float x, float y, float level) 
# 301
{int volatile ___ = 1;(void)texObject;(void)x;(void)y;(void)level;
# 307
::exit(___);}
#if 0
# 301
{ 
# 307
} 
#endif
# 310 "/usr/include/texture_indirect_functions.h" 3
template< class T> __attribute__((unused)) static typename __nv_itex_trait< T> ::type 
# 311
tex3DLod(T *ptr, cudaTextureObject_t obj, float x, float y, float z, float level) 
# 312
{int volatile ___ = 1;(void)ptr;(void)obj;(void)x;(void)y;(void)z;(void)level;
# 316
::exit(___);}
#if 0
# 312
{ 
# 316
} 
#endif
# 318 "/usr/include/texture_indirect_functions.h" 3
template< class T> __attribute__((unused)) static T 
# 319
tex3DLod(cudaTextureObject_t texObject, float x, float y, float z, float level) 
# 320
{int volatile ___ = 1;(void)texObject;(void)x;(void)y;(void)z;(void)level;
# 326
::exit(___);}
#if 0
# 320
{ 
# 326
} 
#endif
# 329 "/usr/include/texture_indirect_functions.h" 3
template< class T> __attribute__((unused)) static typename __nv_itex_trait< T> ::type 
# 330
tex1DLayeredLod(T *ptr, cudaTextureObject_t obj, float x, int layer, float level) 
# 331
{int volatile ___ = 1;(void)ptr;(void)obj;(void)x;(void)layer;(void)level;
# 335
::exit(___);}
#if 0
# 331
{ 
# 335
} 
#endif
# 337 "/usr/include/texture_indirect_functions.h" 3
template< class T> __attribute__((unused)) static T 
# 338
tex1DLayeredLod(cudaTextureObject_t texObject, float x, int layer, float level) 
# 339
{int volatile ___ = 1;(void)texObject;(void)x;(void)layer;(void)level;
# 345
::exit(___);}
#if 0
# 339
{ 
# 345
} 
#endif
# 348 "/usr/include/texture_indirect_functions.h" 3
template< class T> __attribute__((unused)) static typename __nv_itex_trait< T> ::type 
# 349
tex2DLayeredLod(T *ptr, cudaTextureObject_t obj, float x, float y, int layer, float level) 
# 350
{int volatile ___ = 1;(void)ptr;(void)obj;(void)x;(void)y;(void)layer;(void)level;
# 354
::exit(___);}
#if 0
# 350
{ 
# 354
} 
#endif
# 356 "/usr/include/texture_indirect_functions.h" 3
template< class T> __attribute__((unused)) static T 
# 357
tex2DLayeredLod(cudaTextureObject_t texObject, float x, float y, int layer, float level) 
# 358
{int volatile ___ = 1;(void)texObject;(void)x;(void)y;(void)layer;(void)level;
# 364
::exit(___);}
#if 0
# 358
{ 
# 364
} 
#endif
# 367 "/usr/include/texture_indirect_functions.h" 3
template< class T> __attribute__((unused)) static typename __nv_itex_trait< T> ::type 
# 368
texCubemapLod(T *ptr, cudaTextureObject_t obj, float x, float y, float z, float level) 
# 369
{int volatile ___ = 1;(void)ptr;(void)obj;(void)x;(void)y;(void)z;(void)level;
# 373
::exit(___);}
#if 0
# 369
{ 
# 373
} 
#endif
# 375 "/usr/include/texture_indirect_functions.h" 3
template< class T> __attribute__((unused)) static T 
# 376
texCubemapLod(cudaTextureObject_t texObject, float x, float y, float z, float level) 
# 377
{int volatile ___ = 1;(void)texObject;(void)x;(void)y;(void)z;(void)level;
# 383
::exit(___);}
#if 0
# 377
{ 
# 383
} 
#endif
# 386 "/usr/include/texture_indirect_functions.h" 3
template< class T> __attribute__((unused)) static typename __nv_itex_trait< T> ::type 
# 387
texCubemapGrad(T *ptr, cudaTextureObject_t obj, float x, float y, float z, float4 dPdx, float4 dPdy) 
# 388
{int volatile ___ = 1;(void)ptr;(void)obj;(void)x;(void)y;(void)z;(void)dPdx;(void)dPdy;
# 392
::exit(___);}
#if 0
# 388
{ 
# 392
} 
#endif
# 394 "/usr/include/texture_indirect_functions.h" 3
template< class T> __attribute__((unused)) static T 
# 395
texCubemapGrad(cudaTextureObject_t texObject, float x, float y, float z, float4 dPdx, float4 dPdy) 
# 396
{int volatile ___ = 1;(void)texObject;(void)x;(void)y;(void)z;(void)dPdx;(void)dPdy;
# 402
::exit(___);}
#if 0
# 396
{ 
# 402
} 
#endif
# 404 "/usr/include/texture_indirect_functions.h" 3
template< class T> __attribute__((unused)) static typename __nv_itex_trait< T> ::type 
# 405
texCubemapLayeredLod(T *ptr, cudaTextureObject_t obj, float x, float y, float z, int layer, float level) 
# 406
{int volatile ___ = 1;(void)ptr;(void)obj;(void)x;(void)y;(void)z;(void)layer;(void)level;
# 410
::exit(___);}
#if 0
# 406
{ 
# 410
} 
#endif
# 412 "/usr/include/texture_indirect_functions.h" 3
template< class T> __attribute__((unused)) static T 
# 413
texCubemapLayeredLod(cudaTextureObject_t texObject, float x, float y, float z, int layer, float level) 
# 414
{int volatile ___ = 1;(void)texObject;(void)x;(void)y;(void)z;(void)layer;(void)level;
# 420
::exit(___);}
#if 0
# 414
{ 
# 420
} 
#endif
# 422 "/usr/include/texture_indirect_functions.h" 3
template< class T> __attribute__((unused)) static typename __nv_itex_trait< T> ::type 
# 423
tex1DGrad(T *ptr, cudaTextureObject_t obj, float x, float dPdx, float dPdy) 
# 424
{int volatile ___ = 1;(void)ptr;(void)obj;(void)x;(void)dPdx;(void)dPdy;
# 428
::exit(___);}
#if 0
# 424
{ 
# 428
} 
#endif
# 430 "/usr/include/texture_indirect_functions.h" 3
template< class T> __attribute__((unused)) static T 
# 431
tex1DGrad(cudaTextureObject_t texObject, float x, float dPdx, float dPdy) 
# 432
{int volatile ___ = 1;(void)texObject;(void)x;(void)dPdx;(void)dPdy;
# 438
::exit(___);}
#if 0
# 432
{ 
# 438
} 
#endif
# 441 "/usr/include/texture_indirect_functions.h" 3
template< class T> __attribute__((unused)) static typename __nv_itex_trait< T> ::type 
# 442
tex2DGrad(T *ptr, cudaTextureObject_t obj, float x, float y, float2 dPdx, float2 dPdy) 
# 443
{int volatile ___ = 1;(void)ptr;(void)obj;(void)x;(void)y;(void)dPdx;(void)dPdy;
# 448
::exit(___);}
#if 0
# 443
{ 
# 448
} 
#endif
# 450 "/usr/include/texture_indirect_functions.h" 3
template< class T> __attribute__((unused)) static T 
# 451
tex2DGrad(cudaTextureObject_t texObject, float x, float y, float2 dPdx, float2 dPdy) 
# 452
{int volatile ___ = 1;(void)texObject;(void)x;(void)y;(void)dPdx;(void)dPdy;
# 458
::exit(___);}
#if 0
# 452
{ 
# 458
} 
#endif
# 461 "/usr/include/texture_indirect_functions.h" 3
template< class T> __attribute__((unused)) static typename __nv_itex_trait< T> ::type 
# 462
tex3DGrad(T *ptr, cudaTextureObject_t obj, float x, float y, float z, float4 dPdx, float4 dPdy) 
# 463
{int volatile ___ = 1;(void)ptr;(void)obj;(void)x;(void)y;(void)z;(void)dPdx;(void)dPdy;
# 467
::exit(___);}
#if 0
# 463
{ 
# 467
} 
#endif
# 469 "/usr/include/texture_indirect_functions.h" 3
template< class T> __attribute__((unused)) static T 
# 470
tex3DGrad(cudaTextureObject_t texObject, float x, float y, float z, float4 dPdx, float4 dPdy) 
# 471
{int volatile ___ = 1;(void)texObject;(void)x;(void)y;(void)z;(void)dPdx;(void)dPdy;
# 477
::exit(___);}
#if 0
# 471
{ 
# 477
} 
#endif
# 480 "/usr/include/texture_indirect_functions.h" 3
template< class T> __attribute__((unused)) static typename __nv_itex_trait< T> ::type 
# 481
tex1DLayeredGrad(T *ptr, cudaTextureObject_t obj, float x, int layer, float dPdx, float dPdy) 
# 482
{int volatile ___ = 1;(void)ptr;(void)obj;(void)x;(void)layer;(void)dPdx;(void)dPdy;
# 486
::exit(___);}
#if 0
# 482
{ 
# 486
} 
#endif
# 488 "/usr/include/texture_indirect_functions.h" 3
template< class T> __attribute__((unused)) static T 
# 489
tex1DLayeredGrad(cudaTextureObject_t texObject, float x, int layer, float dPdx, float dPdy) 
# 490
{int volatile ___ = 1;(void)texObject;(void)x;(void)layer;(void)dPdx;(void)dPdy;
# 496
::exit(___);}
#if 0
# 490
{ 
# 496
} 
#endif
# 499 "/usr/include/texture_indirect_functions.h" 3
template< class T> __attribute__((unused)) static typename __nv_itex_trait< T> ::type 
# 500
tex2DLayeredGrad(T *ptr, cudaTextureObject_t obj, float x, float y, int layer, float2 dPdx, float2 dPdy) 
# 501
{int volatile ___ = 1;(void)ptr;(void)obj;(void)x;(void)y;(void)layer;(void)dPdx;(void)dPdy;
# 505
::exit(___);}
#if 0
# 501
{ 
# 505
} 
#endif
# 507 "/usr/include/texture_indirect_functions.h" 3
template< class T> __attribute__((unused)) static T 
# 508
tex2DLayeredGrad(cudaTextureObject_t texObject, float x, float y, int layer, float2 dPdx, float2 dPdy) 
# 509
{int volatile ___ = 1;(void)texObject;(void)x;(void)y;(void)layer;(void)dPdx;(void)dPdy;
# 515
::exit(___);}
#if 0
# 509
{ 
# 515
} 
#endif
# 518 "/usr/include/texture_indirect_functions.h" 3
template< class T> __attribute__((unused)) static typename __nv_itex_trait< T> ::type 
# 519
texCubemapLayeredGrad(T *ptr, cudaTextureObject_t obj, float x, float y, float z, int layer, float4 dPdx, float4 dPdy) 
# 520
{int volatile ___ = 1;(void)ptr;(void)obj;(void)x;(void)y;(void)z;(void)layer;(void)dPdx;(void)dPdy;
# 524
::exit(___);}
#if 0
# 520
{ 
# 524
} 
#endif
# 526 "/usr/include/texture_indirect_functions.h" 3
template< class T> __attribute__((unused)) static T 
# 527
texCubemapLayeredGrad(cudaTextureObject_t texObject, float x, float y, float z, int layer, float4 dPdx, float4 dPdy) 
# 528
{int volatile ___ = 1;(void)texObject;(void)x;(void)y;(void)z;(void)layer;(void)dPdx;(void)dPdy;
# 534
::exit(___);}
#if 0
# 528
{ 
# 534
} 
#endif
# 59 "/usr/include/surface_indirect_functions.h" 3
template< class T> struct __nv_isurf_trait { }; 
# 60
template<> struct __nv_isurf_trait< char>  { typedef void type; }; 
# 61
template<> struct __nv_isurf_trait< signed char>  { typedef void type; }; 
# 62
template<> struct __nv_isurf_trait< char1>  { typedef void type; }; 
# 63
template<> struct __nv_isurf_trait< unsigned char>  { typedef void type; }; 
# 64
template<> struct __nv_isurf_trait< uchar1>  { typedef void type; }; 
# 65
template<> struct __nv_isurf_trait< short>  { typedef void type; }; 
# 66
template<> struct __nv_isurf_trait< short1>  { typedef void type; }; 
# 67
template<> struct __nv_isurf_trait< unsigned short>  { typedef void type; }; 
# 68
template<> struct __nv_isurf_trait< ushort1>  { typedef void type; }; 
# 69
template<> struct __nv_isurf_trait< int>  { typedef void type; }; 
# 70
template<> struct __nv_isurf_trait< int1>  { typedef void type; }; 
# 71
template<> struct __nv_isurf_trait< unsigned>  { typedef void type; }; 
# 72
template<> struct __nv_isurf_trait< uint1>  { typedef void type; }; 
# 73
template<> struct __nv_isurf_trait< long long>  { typedef void type; }; 
# 74
template<> struct __nv_isurf_trait< longlong1>  { typedef void type; }; 
# 75
template<> struct __nv_isurf_trait< unsigned long long>  { typedef void type; }; 
# 76
template<> struct __nv_isurf_trait< ulonglong1>  { typedef void type; }; 
# 77
template<> struct __nv_isurf_trait< float>  { typedef void type; }; 
# 78
template<> struct __nv_isurf_trait< float1>  { typedef void type; }; 
# 80
template<> struct __nv_isurf_trait< char2>  { typedef void type; }; 
# 81
template<> struct __nv_isurf_trait< uchar2>  { typedef void type; }; 
# 82
template<> struct __nv_isurf_trait< short2>  { typedef void type; }; 
# 83
template<> struct __nv_isurf_trait< ushort2>  { typedef void type; }; 
# 84
template<> struct __nv_isurf_trait< int2>  { typedef void type; }; 
# 85
template<> struct __nv_isurf_trait< uint2>  { typedef void type; }; 
# 86
template<> struct __nv_isurf_trait< longlong2>  { typedef void type; }; 
# 87
template<> struct __nv_isurf_trait< ulonglong2>  { typedef void type; }; 
# 88
template<> struct __nv_isurf_trait< float2>  { typedef void type; }; 
# 90
template<> struct __nv_isurf_trait< char4>  { typedef void type; }; 
# 91
template<> struct __nv_isurf_trait< uchar4>  { typedef void type; }; 
# 92
template<> struct __nv_isurf_trait< short4>  { typedef void type; }; 
# 93
template<> struct __nv_isurf_trait< ushort4>  { typedef void type; }; 
# 94
template<> struct __nv_isurf_trait< int4>  { typedef void type; }; 
# 95
template<> struct __nv_isurf_trait< uint4>  { typedef void type; }; 
# 96
template<> struct __nv_isurf_trait< float4>  { typedef void type; }; 
# 99
template< class T> __attribute__((unused)) static typename __nv_isurf_trait< T> ::type 
# 100
surf1Dread(T *ptr, cudaSurfaceObject_t obj, int x, cudaSurfaceBoundaryMode mode = cudaBoundaryModeTrap) 
# 101
{int volatile ___ = 1;(void)ptr;(void)obj;(void)x;(void)mode;
# 105
::exit(___);}
#if 0
# 101
{ 
# 105
} 
#endif
# 107 "/usr/include/surface_indirect_functions.h" 3
template< class T> __attribute__((unused)) static T 
# 108
surf1Dread(cudaSurfaceObject_t surfObject, int x, cudaSurfaceBoundaryMode boundaryMode = cudaBoundaryModeTrap) 
# 109
{int volatile ___ = 1;(void)surfObject;(void)x;(void)boundaryMode;
# 115
::exit(___);}
#if 0
# 109
{ 
# 115
} 
#endif
# 117 "/usr/include/surface_indirect_functions.h" 3
template< class T> __attribute__((unused)) static typename __nv_isurf_trait< T> ::type 
# 118
surf2Dread(T *ptr, cudaSurfaceObject_t obj, int x, int y, cudaSurfaceBoundaryMode mode = cudaBoundaryModeTrap) 
# 119
{int volatile ___ = 1;(void)ptr;(void)obj;(void)x;(void)y;(void)mode;
# 123
::exit(___);}
#if 0
# 119
{ 
# 123
} 
#endif
# 125 "/usr/include/surface_indirect_functions.h" 3
template< class T> __attribute__((unused)) static T 
# 126
surf2Dread(cudaSurfaceObject_t surfObject, int x, int y, cudaSurfaceBoundaryMode boundaryMode = cudaBoundaryModeTrap) 
# 127
{int volatile ___ = 1;(void)surfObject;(void)x;(void)y;(void)boundaryMode;
# 133
::exit(___);}
#if 0
# 127
{ 
# 133
} 
#endif
# 136 "/usr/include/surface_indirect_functions.h" 3
template< class T> __attribute__((unused)) static typename __nv_isurf_trait< T> ::type 
# 137
surf3Dread(T *ptr, cudaSurfaceObject_t obj, int x, int y, int z, cudaSurfaceBoundaryMode mode = cudaBoundaryModeTrap) 
# 138
{int volatile ___ = 1;(void)ptr;(void)obj;(void)x;(void)y;(void)z;(void)mode;
# 142
::exit(___);}
#if 0
# 138
{ 
# 142
} 
#endif
# 144 "/usr/include/surface_indirect_functions.h" 3
template< class T> __attribute__((unused)) static T 
# 145
surf3Dread(cudaSurfaceObject_t surfObject, int x, int y, int z, cudaSurfaceBoundaryMode boundaryMode = cudaBoundaryModeTrap) 
# 146
{int volatile ___ = 1;(void)surfObject;(void)x;(void)y;(void)z;(void)boundaryMode;
# 152
::exit(___);}
#if 0
# 146
{ 
# 152
} 
#endif
# 154 "/usr/include/surface_indirect_functions.h" 3
template< class T> __attribute__((unused)) static typename __nv_isurf_trait< T> ::type 
# 155
surf1DLayeredread(T *ptr, cudaSurfaceObject_t obj, int x, int layer, cudaSurfaceBoundaryMode mode = cudaBoundaryModeTrap) 
# 156
{int volatile ___ = 1;(void)ptr;(void)obj;(void)x;(void)layer;(void)mode;
# 160
::exit(___);}
#if 0
# 156
{ 
# 160
} 
#endif
# 162 "/usr/include/surface_indirect_functions.h" 3
template< class T> __attribute__((unused)) static T 
# 163
surf1DLayeredread(cudaSurfaceObject_t surfObject, int x, int layer, cudaSurfaceBoundaryMode boundaryMode = cudaBoundaryModeTrap) 
# 164
{int volatile ___ = 1;(void)surfObject;(void)x;(void)layer;(void)boundaryMode;
# 170
::exit(___);}
#if 0
# 164
{ 
# 170
} 
#endif
# 172 "/usr/include/surface_indirect_functions.h" 3
template< class T> __attribute__((unused)) static typename __nv_isurf_trait< T> ::type 
# 173
surf2DLayeredread(T *ptr, cudaSurfaceObject_t obj, int x, int y, int layer, cudaSurfaceBoundaryMode mode = cudaBoundaryModeTrap) 
# 174
{int volatile ___ = 1;(void)ptr;(void)obj;(void)x;(void)y;(void)layer;(void)mode;
# 178
::exit(___);}
#if 0
# 174
{ 
# 178
} 
#endif
# 180 "/usr/include/surface_indirect_functions.h" 3
template< class T> __attribute__((unused)) static T 
# 181
surf2DLayeredread(cudaSurfaceObject_t surfObject, int x, int y, int layer, cudaSurfaceBoundaryMode boundaryMode = cudaBoundaryModeTrap) 
# 182
{int volatile ___ = 1;(void)surfObject;(void)x;(void)y;(void)layer;(void)boundaryMode;
# 188
::exit(___);}
#if 0
# 182
{ 
# 188
} 
#endif
# 190 "/usr/include/surface_indirect_functions.h" 3
template< class T> __attribute__((unused)) static typename __nv_isurf_trait< T> ::type 
# 191
surfCubemapread(T *ptr, cudaSurfaceObject_t obj, int x, int y, int face, cudaSurfaceBoundaryMode mode = cudaBoundaryModeTrap) 
# 192
{int volatile ___ = 1;(void)ptr;(void)obj;(void)x;(void)y;(void)face;(void)mode;
# 196
::exit(___);}
#if 0
# 192
{ 
# 196
} 
#endif
# 198 "/usr/include/surface_indirect_functions.h" 3
template< class T> __attribute__((unused)) static T 
# 199
surfCubemapread(cudaSurfaceObject_t surfObject, int x, int y, int face, cudaSurfaceBoundaryMode boundaryMode = cudaBoundaryModeTrap) 
# 200
{int volatile ___ = 1;(void)surfObject;(void)x;(void)y;(void)face;(void)boundaryMode;
# 206
::exit(___);}
#if 0
# 200
{ 
# 206
} 
#endif
# 208 "/usr/include/surface_indirect_functions.h" 3
template< class T> __attribute__((unused)) static typename __nv_isurf_trait< T> ::type 
# 209
surfCubemapLayeredread(T *ptr, cudaSurfaceObject_t obj, int x, int y, int layerface, cudaSurfaceBoundaryMode mode = cudaBoundaryModeTrap) 
# 210
{int volatile ___ = 1;(void)ptr;(void)obj;(void)x;(void)y;(void)layerface;(void)mode;
# 214
::exit(___);}
#if 0
# 210
{ 
# 214
} 
#endif
# 216 "/usr/include/surface_indirect_functions.h" 3
template< class T> __attribute__((unused)) static T 
# 217
surfCubemapLayeredread(cudaSurfaceObject_t surfObject, int x, int y, int layerface, cudaSurfaceBoundaryMode boundaryMode = cudaBoundaryModeTrap) 
# 218
{int volatile ___ = 1;(void)surfObject;(void)x;(void)y;(void)layerface;(void)boundaryMode;
# 224
::exit(___);}
#if 0
# 218
{ 
# 224
} 
#endif
# 226 "/usr/include/surface_indirect_functions.h" 3
template< class T> __attribute__((unused)) static typename __nv_isurf_trait< T> ::type 
# 227
surf1Dwrite(T val, cudaSurfaceObject_t obj, int x, cudaSurfaceBoundaryMode mode = cudaBoundaryModeTrap) 
# 228
{int volatile ___ = 1;(void)val;(void)obj;(void)x;(void)mode;
# 232
::exit(___);}
#if 0
# 228
{ 
# 232
} 
#endif
# 234 "/usr/include/surface_indirect_functions.h" 3
template< class T> __attribute__((unused)) static typename __nv_isurf_trait< T> ::type 
# 235
surf2Dwrite(T val, cudaSurfaceObject_t obj, int x, int y, cudaSurfaceBoundaryMode mode = cudaBoundaryModeTrap) 
# 236
{int volatile ___ = 1;(void)val;(void)obj;(void)x;(void)y;(void)mode;
# 240
::exit(___);}
#if 0
# 236
{ 
# 240
} 
#endif
# 242 "/usr/include/surface_indirect_functions.h" 3
template< class T> __attribute__((unused)) static typename __nv_isurf_trait< T> ::type 
# 243
surf3Dwrite(T val, cudaSurfaceObject_t obj, int x, int y, int z, cudaSurfaceBoundaryMode mode = cudaBoundaryModeTrap) 
# 244
{int volatile ___ = 1;(void)val;(void)obj;(void)x;(void)y;(void)z;(void)mode;
# 248
::exit(___);}
#if 0
# 244
{ 
# 248
} 
#endif
# 250 "/usr/include/surface_indirect_functions.h" 3
template< class T> __attribute__((unused)) static typename __nv_isurf_trait< T> ::type 
# 251
surf1DLayeredwrite(T val, cudaSurfaceObject_t obj, int x, int layer, cudaSurfaceBoundaryMode mode = cudaBoundaryModeTrap) 
# 252
{int volatile ___ = 1;(void)val;(void)obj;(void)x;(void)layer;(void)mode;
# 256
::exit(___);}
#if 0
# 252
{ 
# 256
} 
#endif
# 258 "/usr/include/surface_indirect_functions.h" 3
template< class T> __attribute__((unused)) static typename __nv_isurf_trait< T> ::type 
# 259
surf2DLayeredwrite(T val, cudaSurfaceObject_t obj, int x, int y, int layer, cudaSurfaceBoundaryMode mode = cudaBoundaryModeTrap) 
# 260
{int volatile ___ = 1;(void)val;(void)obj;(void)x;(void)y;(void)layer;(void)mode;
# 264
::exit(___);}
#if 0
# 260
{ 
# 264
} 
#endif
# 266 "/usr/include/surface_indirect_functions.h" 3
template< class T> __attribute__((unused)) static typename __nv_isurf_trait< T> ::type 
# 267
surfCubemapwrite(T val, cudaSurfaceObject_t obj, int x, int y, int face, cudaSurfaceBoundaryMode mode = cudaBoundaryModeTrap) 
# 268
{int volatile ___ = 1;(void)val;(void)obj;(void)x;(void)y;(void)face;(void)mode;
# 272
::exit(___);}
#if 0
# 268
{ 
# 272
} 
#endif
# 274 "/usr/include/surface_indirect_functions.h" 3
template< class T> __attribute__((unused)) static typename __nv_isurf_trait< T> ::type 
# 275
surfCubemapLayeredwrite(T val, cudaSurfaceObject_t obj, int x, int y, int layerface, cudaSurfaceBoundaryMode mode = cudaBoundaryModeTrap) 
# 276
{int volatile ___ = 1;(void)val;(void)obj;(void)x;(void)y;(void)layerface;(void)mode;
# 280
::exit(___);}
#if 0
# 276
{ 
# 280
} 
#endif
# 3296 "/usr/include/crt/device_functions.h" 3
extern "C" unsigned __cudaPushCallConfiguration(dim3 gridDim, dim3 blockDim, size_t sharedMem = 0, CUstream_st * stream = 0); 
# 68 "/usr/include/device_launch_parameters.h" 3
extern "C" {
# 71
extern const uint3 __device_builtin_variable_threadIdx; 
# 72
extern const uint3 __device_builtin_variable_blockIdx; 
# 73
extern const dim3 __device_builtin_variable_blockDim; 
# 74
extern const dim3 __device_builtin_variable_gridDim; 
# 75
extern const int __device_builtin_variable_warpSize; 
# 80
}
# 199 "/usr/include/cuda_runtime.h" 3
template< class T> static inline cudaError_t 
# 200
cudaLaunchKernel(const T *
# 201
func, dim3 
# 202
gridDim, dim3 
# 203
blockDim, void **
# 204
args, size_t 
# 205
sharedMem = 0, cudaStream_t 
# 206
stream = 0) 
# 208
{ 
# 209
return ::cudaLaunchKernel((const void *)func, gridDim, blockDim, args, sharedMem, stream); 
# 210
} 
# 261 "/usr/include/cuda_runtime.h" 3
template< class T> static inline cudaError_t 
# 262
cudaLaunchCooperativeKernel(const T *
# 263
func, dim3 
# 264
gridDim, dim3 
# 265
blockDim, void **
# 266
args, size_t 
# 267
sharedMem = 0, cudaStream_t 
# 268
stream = 0) 
# 270
{ 
# 271
return ::cudaLaunchCooperativeKernel((const void *)func, gridDim, blockDim, args, sharedMem, stream); 
# 272
} 
# 305 "/usr/include/cuda_runtime.h" 3
static inline cudaError_t cudaEventCreate(cudaEvent_t *
# 306
event, unsigned 
# 307
flags) 
# 309
{ 
# 310
return ::cudaEventCreateWithFlags(event, flags); 
# 311
} 
# 370 "/usr/include/cuda_runtime.h" 3
static inline cudaError_t cudaMallocHost(void **
# 371
ptr, size_t 
# 372
size, unsigned 
# 373
flags) 
# 375
{ 
# 376
return ::cudaHostAlloc(ptr, size, flags); 
# 377
} 
# 379
template< class T> static inline cudaError_t 
# 380
cudaHostAlloc(T **
# 381
ptr, size_t 
# 382
size, unsigned 
# 383
flags) 
# 385
{ 
# 386
return ::cudaHostAlloc((void **)((void *)ptr), size, flags); 
# 387
} 
# 389
template< class T> static inline cudaError_t 
# 390
cudaHostGetDevicePointer(T **
# 391
pDevice, void *
# 392
pHost, unsigned 
# 393
flags) 
# 395
{ 
# 396
return ::cudaHostGetDevicePointer((void **)((void *)pDevice), pHost, flags); 
# 397
} 
# 499 "/usr/include/cuda_runtime.h" 3
template< class T> static inline cudaError_t 
# 500
cudaMallocManaged(T **
# 501
devPtr, size_t 
# 502
size, unsigned 
# 503
flags = 1) 
# 505
{ 
# 506
return ::cudaMallocManaged((void **)((void *)devPtr), size, flags); 
# 507
} 
# 589 "/usr/include/cuda_runtime.h" 3
template< class T> static inline cudaError_t 
# 590
cudaStreamAttachMemAsync(cudaStream_t 
# 591
stream, T *
# 592
devPtr, size_t 
# 593
length = 0, unsigned 
# 594
flags = 4) 
# 596
{ 
# 597
return ::cudaStreamAttachMemAsync(stream, (void *)devPtr, length, flags); 
# 598
} 
# 600
template< class T> inline cudaError_t 
# 601
cudaMalloc(T **
# 602
devPtr, size_t 
# 603
size) 
# 605
{ 
# 606
return ::cudaMalloc((void **)((void *)devPtr), size); 
# 607
} 
# 609
template< class T> static inline cudaError_t 
# 610
cudaMallocHost(T **
# 611
ptr, size_t 
# 612
size, unsigned 
# 613
flags = 0) 
# 615
{ 
# 616
return cudaMallocHost((void **)((void *)ptr), size, flags); 
# 617
} 
# 619
template< class T> static inline cudaError_t 
# 620
cudaMallocPitch(T **
# 621
devPtr, size_t *
# 622
pitch, size_t 
# 623
width, size_t 
# 624
height) 
# 626
{ 
# 627
return ::cudaMallocPitch((void **)((void *)devPtr), pitch, width, height); 
# 628
} 
# 667 "/usr/include/cuda_runtime.h" 3
template< class T> static inline cudaError_t 
# 668
cudaMemcpyToSymbol(const T &
# 669
symbol, const void *
# 670
src, size_t 
# 671
count, size_t 
# 672
offset = 0, cudaMemcpyKind 
# 673
kind = cudaMemcpyHostToDevice) 
# 675
{ 
# 676
return ::cudaMemcpyToSymbol((const void *)(&symbol), src, count, offset, kind); 
# 677
} 
# 721 "/usr/include/cuda_runtime.h" 3
template< class T> static inline cudaError_t 
# 722
cudaMemcpyToSymbolAsync(const T &
# 723
symbol, const void *
# 724
src, size_t 
# 725
count, size_t 
# 726
offset = 0, cudaMemcpyKind 
# 727
kind = cudaMemcpyHostToDevice, cudaStream_t 
# 728
stream = 0) 
# 730
{ 
# 731
return ::cudaMemcpyToSymbolAsync((const void *)(&symbol), src, count, offset, kind, stream); 
# 732
} 
# 769 "/usr/include/cuda_runtime.h" 3
template< class T> static inline cudaError_t 
# 770
cudaMemcpyFromSymbol(void *
# 771
dst, const T &
# 772
symbol, size_t 
# 773
count, size_t 
# 774
offset = 0, cudaMemcpyKind 
# 775
kind = cudaMemcpyDeviceToHost) 
# 777
{ 
# 778
return ::cudaMemcpyFromSymbol(dst, (const void *)(&symbol), count, offset, kind); 
# 779
} 
# 823 "/usr/include/cuda_runtime.h" 3
template< class T> static inline cudaError_t 
# 824
cudaMemcpyFromSymbolAsync(void *
# 825
dst, const T &
# 826
symbol, size_t 
# 827
count, size_t 
# 828
offset = 0, cudaMemcpyKind 
# 829
kind = cudaMemcpyDeviceToHost, cudaStream_t 
# 830
stream = 0) 
# 832
{ 
# 833
return ::cudaMemcpyFromSymbolAsync(dst, (const void *)(&symbol), count, offset, kind, stream); 
# 834
} 
# 859 "/usr/include/cuda_runtime.h" 3
template< class T> static inline cudaError_t 
# 860
cudaGetSymbolAddress(void **
# 861
devPtr, const T &
# 862
symbol) 
# 864
{ 
# 865
return ::cudaGetSymbolAddress(devPtr, (const void *)(&symbol)); 
# 866
} 
# 891 "/usr/include/cuda_runtime.h" 3
template< class T> static inline cudaError_t 
# 892
cudaGetSymbolSize(size_t *
# 893
size, const T &
# 894
symbol) 
# 896
{ 
# 897
return ::cudaGetSymbolSize(size, (const void *)(&symbol)); 
# 898
} 
# 935 "/usr/include/cuda_runtime.h" 3
template< class T, int dim, cudaTextureReadMode readMode> static inline cudaError_t 
# 936
cudaBindTexture(size_t *
# 937
offset, const texture< T, dim, readMode>  &
# 938
tex, const void *
# 939
devPtr, const cudaChannelFormatDesc &
# 940
desc, size_t 
# 941
size = ((2147483647) * 2U) + 1U) 
# 943
{ 
# 944
return ::cudaBindTexture(offset, &tex, devPtr, &desc, size); 
# 945
} 
# 981 "/usr/include/cuda_runtime.h" 3
template< class T, int dim, cudaTextureReadMode readMode> static inline cudaError_t 
# 982
cudaBindTexture(size_t *
# 983
offset, const texture< T, dim, readMode>  &
# 984
tex, const void *
# 985
devPtr, size_t 
# 986
size = ((2147483647) * 2U) + 1U) 
# 988
{ 
# 989
return cudaBindTexture(offset, tex, devPtr, (tex.channelDesc), size); 
# 990
} 
# 1038 "/usr/include/cuda_runtime.h" 3
template< class T, int dim, cudaTextureReadMode readMode> static inline cudaError_t 
# 1039
cudaBindTexture2D(size_t *
# 1040
offset, const texture< T, dim, readMode>  &
# 1041
tex, const void *
# 1042
devPtr, const cudaChannelFormatDesc &
# 1043
desc, size_t 
# 1044
width, size_t 
# 1045
height, size_t 
# 1046
pitch) 
# 1048
{ 
# 1049
return ::cudaBindTexture2D(offset, &tex, devPtr, &desc, width, height, pitch); 
# 1050
} 
# 1097 "/usr/include/cuda_runtime.h" 3
template< class T, int dim, cudaTextureReadMode readMode> static inline cudaError_t 
# 1098
cudaBindTexture2D(size_t *
# 1099
offset, const texture< T, dim, readMode>  &
# 1100
tex, const void *
# 1101
devPtr, size_t 
# 1102
width, size_t 
# 1103
height, size_t 
# 1104
pitch) 
# 1106
{ 
# 1107
return ::cudaBindTexture2D(offset, &tex, devPtr, &(tex.channelDesc), width, height, pitch); 
# 1108
} 
# 1140 "/usr/include/cuda_runtime.h" 3
template< class T, int dim, cudaTextureReadMode readMode> static inline cudaError_t 
# 1141
cudaBindTextureToArray(const texture< T, dim, readMode>  &
# 1142
tex, cudaArray_const_t 
# 1143
array, const cudaChannelFormatDesc &
# 1144
desc) 
# 1146
{ 
# 1147
return ::cudaBindTextureToArray(&tex, array, &desc); 
# 1148
} 
# 1179 "/usr/include/cuda_runtime.h" 3
template< class T, int dim, cudaTextureReadMode readMode> static inline cudaError_t 
# 1180
cudaBindTextureToArray(const texture< T, dim, readMode>  &
# 1181
tex, cudaArray_const_t 
# 1182
array) 
# 1184
{ 
# 1185
cudaChannelFormatDesc desc; 
# 1186
cudaError_t err = ::cudaGetChannelDesc(&desc, array); 
# 1188
return (err == (cudaSuccess)) ? cudaBindTextureToArray(tex, array, desc) : err; 
# 1189
} 
# 1221 "/usr/include/cuda_runtime.h" 3
template< class T, int dim, cudaTextureReadMode readMode> static inline cudaError_t 
# 1222
cudaBindTextureToMipmappedArray(const texture< T, dim, readMode>  &
# 1223
tex, cudaMipmappedArray_const_t 
# 1224
mipmappedArray, const cudaChannelFormatDesc &
# 1225
desc) 
# 1227
{ 
# 1228
return ::cudaBindTextureToMipmappedArray(&tex, mipmappedArray, &desc); 
# 1229
} 
# 1260 "/usr/include/cuda_runtime.h" 3
template< class T, int dim, cudaTextureReadMode readMode> static inline cudaError_t 
# 1261
cudaBindTextureToMipmappedArray(const texture< T, dim, readMode>  &
# 1262
tex, cudaMipmappedArray_const_t 
# 1263
mipmappedArray) 
# 1265
{ 
# 1266
cudaChannelFormatDesc desc; 
# 1267
cudaArray_t levelArray; 
# 1268
cudaError_t err = ::cudaGetMipmappedArrayLevel(&levelArray, mipmappedArray, 0); 
# 1270
if (err != (cudaSuccess)) { 
# 1271
return err; 
# 1272
}  
# 1273
err = ::cudaGetChannelDesc(&desc, levelArray); 
# 1275
return (err == (cudaSuccess)) ? cudaBindTextureToMipmappedArray(tex, mipmappedArray, desc) : err; 
# 1276
} 
# 1303 "/usr/include/cuda_runtime.h" 3
template< class T, int dim, cudaTextureReadMode readMode> static inline cudaError_t 
# 1304
cudaUnbindTexture(const texture< T, dim, readMode>  &
# 1305
tex) 
# 1307
{ 
# 1308
return ::cudaUnbindTexture(&tex); 
# 1309
} 
# 1339 "/usr/include/cuda_runtime.h" 3
template< class T, int dim, cudaTextureReadMode readMode> static inline cudaError_t 
# 1340
cudaGetTextureAlignmentOffset(size_t *
# 1341
offset, const texture< T, dim, readMode>  &
# 1342
tex) 
# 1344
{ 
# 1345
return ::cudaGetTextureAlignmentOffset(offset, &tex); 
# 1346
} 
# 1391 "/usr/include/cuda_runtime.h" 3
template< class T> static inline cudaError_t 
# 1392
cudaFuncSetCacheConfig(T *
# 1393
func, cudaFuncCache 
# 1394
cacheConfig) 
# 1396
{ 
# 1397
return ::cudaFuncSetCacheConfig((const void *)func, cacheConfig); 
# 1398
} 
# 1400
template< class T> static inline cudaError_t 
# 1401
cudaFuncSetSharedMemConfig(T *
# 1402
func, cudaSharedMemConfig 
# 1403
config) 
# 1405
{ 
# 1406
return ::cudaFuncSetSharedMemConfig((const void *)func, config); 
# 1407
} 
# 1436 "/usr/include/cuda_runtime.h" 3
template< class T> inline cudaError_t 
# 1437
cudaOccupancyMaxActiveBlocksPerMultiprocessor(int *
# 1438
numBlocks, T 
# 1439
func, int 
# 1440
blockSize, size_t 
# 1441
dynamicSMemSize) 
# 1442
{ 
# 1443
return ::cudaOccupancyMaxActiveBlocksPerMultiprocessorWithFlags(numBlocks, (const void *)func, blockSize, dynamicSMemSize, 0); 
# 1444
} 
# 1487 "/usr/include/cuda_runtime.h" 3
template< class T> inline cudaError_t 
# 1488
cudaOccupancyMaxActiveBlocksPerMultiprocessorWithFlags(int *
# 1489
numBlocks, T 
# 1490
func, int 
# 1491
blockSize, size_t 
# 1492
dynamicSMemSize, unsigned 
# 1493
flags) 
# 1494
{ 
# 1495
return ::cudaOccupancyMaxActiveBlocksPerMultiprocessorWithFlags(numBlocks, (const void *)func, blockSize, dynamicSMemSize, flags); 
# 1496
} 
# 1501
class __cudaOccupancyB2DHelper { 
# 1502
size_t n; 
# 1504
public: __cudaOccupancyB2DHelper(size_t n_) : n(n_) { } 
# 1505
size_t operator()(int) 
# 1506
{ 
# 1507
return n; 
# 1508
} 
# 1509
}; 
# 1556 "/usr/include/cuda_runtime.h" 3
template< class UnaryFunction, class T> static inline cudaError_t 
# 1557
cudaOccupancyMaxPotentialBlockSizeVariableSMemWithFlags(int *
# 1558
minGridSize, int *
# 1559
blockSize, T 
# 1560
func, UnaryFunction 
# 1561
blockSizeToDynamicSMemSize, int 
# 1562
blockSizeLimit = 0, unsigned 
# 1563
flags = 0) 
# 1564
{ 
# 1565
cudaError_t status; 
# 1568
int device; 
# 1569
cudaFuncAttributes attr; 
# 1572
int maxThreadsPerMultiProcessor; 
# 1573
int warpSize; 
# 1574
int devMaxThreadsPerBlock; 
# 1575
int multiProcessorCount; 
# 1576
int funcMaxThreadsPerBlock; 
# 1577
int occupancyLimit; 
# 1578
int granularity; 
# 1581
int maxBlockSize = 0; 
# 1582
int numBlocks = 0; 
# 1583
int maxOccupancy = 0; 
# 1586
int blockSizeToTryAligned; 
# 1587
int blockSizeToTry; 
# 1588
int blockSizeLimitAligned; 
# 1589
int occupancyInBlocks; 
# 1590
int occupancyInThreads; 
# 1591
size_t dynamicSMemSize; 
# 1597
if (((!minGridSize) || (!blockSize)) || (!func)) { 
# 1598
return cudaErrorInvalidValue; 
# 1599
}  
# 1605
status = ::cudaGetDevice(&device); 
# 1606
if (status != (cudaSuccess)) { 
# 1607
return status; 
# 1608
}  
# 1610
status = cudaDeviceGetAttribute(&maxThreadsPerMultiProcessor, cudaDevAttrMaxThreadsPerMultiProcessor, device); 
# 1614
if (status != (cudaSuccess)) { 
# 1615
return status; 
# 1616
}  
# 1618
status = cudaDeviceGetAttribute(&warpSize, cudaDevAttrWarpSize, device); 
# 1622
if (status != (cudaSuccess)) { 
# 1623
return status; 
# 1624
}  
# 1626
status = cudaDeviceGetAttribute(&devMaxThreadsPerBlock, cudaDevAttrMaxThreadsPerBlock, device); 
# 1630
if (status != (cudaSuccess)) { 
# 1631
return status; 
# 1632
}  
# 1634
status = cudaDeviceGetAttribute(&multiProcessorCount, cudaDevAttrMultiProcessorCount, device); 
# 1638
if (status != (cudaSuccess)) { 
# 1639
return status; 
# 1640
}  
# 1642
status = cudaFuncGetAttributes(&attr, func); 
# 1643
if (status != (cudaSuccess)) { 
# 1644
return status; 
# 1645
}  
# 1647
funcMaxThreadsPerBlock = (attr.maxThreadsPerBlock); 
# 1653
occupancyLimit = maxThreadsPerMultiProcessor; 
# 1654
granularity = warpSize; 
# 1656
if (blockSizeLimit == 0) { 
# 1657
blockSizeLimit = devMaxThreadsPerBlock; 
# 1658
}  
# 1660
if (devMaxThreadsPerBlock < blockSizeLimit) { 
# 1661
blockSizeLimit = devMaxThreadsPerBlock; 
# 1662
}  
# 1664
if (funcMaxThreadsPerBlock < blockSizeLimit) { 
# 1665
blockSizeLimit = funcMaxThreadsPerBlock; 
# 1666
}  
# 1668
blockSizeLimitAligned = (((blockSizeLimit + (granularity - 1)) / granularity) * granularity); 
# 1670
for (blockSizeToTryAligned = blockSizeLimitAligned; blockSizeToTryAligned > 0; blockSizeToTryAligned -= granularity) { 
# 1674
if (blockSizeLimit < blockSizeToTryAligned) { 
# 1675
blockSizeToTry = blockSizeLimit; 
# 1676
} else { 
# 1677
blockSizeToTry = blockSizeToTryAligned; 
# 1678
}  
# 1680
dynamicSMemSize = blockSizeToDynamicSMemSize(blockSizeToTry); 
# 1682
status = cudaOccupancyMaxActiveBlocksPerMultiprocessorWithFlags(&occupancyInBlocks, func, blockSizeToTry, dynamicSMemSize, flags); 
# 1689
if (status != (cudaSuccess)) { 
# 1690
return status; 
# 1691
}  
# 1693
occupancyInThreads = (blockSizeToTry * occupancyInBlocks); 
# 1695
if (occupancyInThreads > maxOccupancy) { 
# 1696
maxBlockSize = blockSizeToTry; 
# 1697
numBlocks = occupancyInBlocks; 
# 1698
maxOccupancy = occupancyInThreads; 
# 1699
}  
# 1703
if (occupancyLimit == maxOccupancy) { 
# 1704
break; 
# 1705
}  
# 1706
}  
# 1714
(*minGridSize) = (numBlocks * multiProcessorCount); 
# 1715
(*blockSize) = maxBlockSize; 
# 1717
return status; 
# 1718
} 
# 1751 "/usr/include/cuda_runtime.h" 3
template< class UnaryFunction, class T> static inline cudaError_t 
# 1752
cudaOccupancyMaxPotentialBlockSizeVariableSMem(int *
# 1753
minGridSize, int *
# 1754
blockSize, T 
# 1755
func, UnaryFunction 
# 1756
blockSizeToDynamicSMemSize, int 
# 1757
blockSizeLimit = 0) 
# 1758
{ 
# 1759
return cudaOccupancyMaxPotentialBlockSizeVariableSMemWithFlags(minGridSize, blockSize, func, blockSizeToDynamicSMemSize, blockSizeLimit, 0); 
# 1760
} 
# 1796 "/usr/include/cuda_runtime.h" 3
template< class T> static inline cudaError_t 
# 1797
cudaOccupancyMaxPotentialBlockSize(int *
# 1798
minGridSize, int *
# 1799
blockSize, T 
# 1800
func, size_t 
# 1801
dynamicSMemSize = 0, int 
# 1802
blockSizeLimit = 0) 
# 1803
{ 
# 1804
return cudaOccupancyMaxPotentialBlockSizeVariableSMemWithFlags(minGridSize, blockSize, func, ((__cudaOccupancyB2DHelper)(dynamicSMemSize)), blockSizeLimit, 0); 
# 1805
} 
# 1855 "/usr/include/cuda_runtime.h" 3
template< class T> static inline cudaError_t 
# 1856
cudaOccupancyMaxPotentialBlockSizeWithFlags(int *
# 1857
minGridSize, int *
# 1858
blockSize, T 
# 1859
func, size_t 
# 1860
dynamicSMemSize = 0, int 
# 1861
blockSizeLimit = 0, unsigned 
# 1862
flags = 0) 
# 1863
{ 
# 1864
return cudaOccupancyMaxPotentialBlockSizeVariableSMemWithFlags(minGridSize, blockSize, func, ((__cudaOccupancyB2DHelper)(dynamicSMemSize)), blockSizeLimit, flags); 
# 1865
} 
# 1896 "/usr/include/cuda_runtime.h" 3
template< class T> inline cudaError_t 
# 1897
cudaFuncGetAttributes(cudaFuncAttributes *
# 1898
attr, T *
# 1899
entry) 
# 1901
{ 
# 1902
return ::cudaFuncGetAttributes(attr, (const void *)entry); 
# 1903
} 
# 1941 "/usr/include/cuda_runtime.h" 3
template< class T> static inline cudaError_t 
# 1942
cudaFuncSetAttribute(T *
# 1943
entry, cudaFuncAttribute 
# 1944
attr, int 
# 1945
value) 
# 1947
{ 
# 1948
return ::cudaFuncSetAttribute((const void *)entry, attr, value); 
# 1949
} 
# 1973 "/usr/include/cuda_runtime.h" 3
template< class T, int dim> 
# 1974
__attribute((deprecated)) static inline cudaError_t cudaBindSurfaceToArray(const surface< T, dim>  &
# 1975
surf, cudaArray_const_t 
# 1976
array, const cudaChannelFormatDesc &
# 1977
desc) 
# 1979
{ 
# 1980
return ::cudaBindSurfaceToArray(&surf, array, &desc); 
# 1981
} 
# 2004 "/usr/include/cuda_runtime.h" 3
template< class T, int dim> 
# 2005
__attribute((deprecated)) static inline cudaError_t cudaBindSurfaceToArray(const surface< T, dim>  &
# 2006
surf, cudaArray_const_t 
# 2007
array) 
# 2009
{ 
# 2010
cudaChannelFormatDesc desc; 
# 2011
cudaError_t err = ::cudaGetChannelDesc(&desc, array); 
# 2013
return (err == (cudaSuccess)) ? cudaBindSurfaceToArray(surf, array, desc) : err; 
# 2014
} 
# 2025 "/usr/include/cuda_runtime.h" 3
#pragma GCC diagnostic pop
# 29 "/usr/include/stdio.h" 3
extern "C" {
# 40 "/usr/lib/gcc/x86_64-linux-gnu/8/include/stdarg.h" 3
typedef __builtin_va_list __gnuc_va_list; 
# 21 "/usr/include/x86_64-linux-gnu/bits/types/__mbstate_t.h" 3
typedef 
# 14
struct { 
# 15
int __count; 
# 17
union { 
# 18
unsigned __wch; 
# 19
char __wchb[4]; 
# 20
} __value; 
# 21
} __mbstate_t; 
# 14 "/usr/include/x86_64-linux-gnu/bits/types/__fpos_t.h" 3
typedef 
# 10
struct _G_fpos_t { 
# 12
__off_t __pos; 
# 13
__mbstate_t __state; 
# 14
} __fpos_t; 
# 14 "/usr/include/x86_64-linux-gnu/bits/types/__fpos64_t.h" 3
typedef 
# 10
struct _G_fpos64_t { 
# 12
__off64_t __pos; 
# 13
__mbstate_t __state; 
# 14
} __fpos64_t; 
# 4 "/usr/include/x86_64-linux-gnu/bits/types/__FILE.h" 3
struct _IO_FILE; 
# 5
typedef _IO_FILE __FILE; 
# 4 "/usr/include/x86_64-linux-gnu/bits/types/FILE.h" 3
struct _IO_FILE; 
# 7
typedef _IO_FILE FILE; 
# 35 "/usr/include/x86_64-linux-gnu/bits/types/struct_FILE.h" 3
struct _IO_FILE; 
# 36
struct _IO_marker; 
# 37
struct _IO_codecvt; 
# 38
struct _IO_wide_data; 
# 43
typedef void _IO_lock_t; 
# 49
struct _IO_FILE { 
# 51
int _flags; 
# 54
char *_IO_read_ptr; 
# 55
char *_IO_read_end; 
# 56
char *_IO_read_base; 
# 57
char *_IO_write_base; 
# 58
char *_IO_write_ptr; 
# 59
char *_IO_write_end; 
# 60
char *_IO_buf_base; 
# 61
char *_IO_buf_end; 
# 64
char *_IO_save_base; 
# 65
char *_IO_backup_base; 
# 66
char *_IO_save_end; 
# 68
_IO_marker *_markers; 
# 70
_IO_FILE *_chain; 
# 72
int _fileno; 
# 73
int _flags2; 
# 74
__off_t _old_offset; 
# 77
unsigned short _cur_column; 
# 78
signed char _vtable_offset; 
# 79
char _shortbuf[1]; 
# 81
_IO_lock_t *_lock; 
# 89
__off64_t _offset; 
# 91
_IO_codecvt *_codecvt; 
# 92
_IO_wide_data *_wide_data; 
# 93
_IO_FILE *_freeres_list; 
# 94
void *_freeres_buf; 
# 95
size_t __pad5; 
# 96
int _mode; 
# 98
char _unused2[(((15) * sizeof(int)) - ((4) * sizeof(void *))) - sizeof(size_t)]; 
# 99
}; 
# 27 "/usr/include/x86_64-linux-gnu/bits/types/cookie_io_functions_t.h" 3
typedef __ssize_t cookie_read_function_t(void * __cookie, char * __buf, size_t __nbytes); 
# 36
typedef __ssize_t cookie_write_function_t(void * __cookie, const char * __buf, size_t __nbytes); 
# 45
typedef int cookie_seek_function_t(void * __cookie, __off64_t * __pos, int __w); 
# 48
typedef int cookie_close_function_t(void * __cookie); 
# 61
typedef 
# 55
struct _IO_cookie_io_functions_t { 
# 57
cookie_read_function_t *read; 
# 58
cookie_write_function_t *write; 
# 59
cookie_seek_function_t *seek; 
# 60
cookie_close_function_t *close; 
# 61
} cookie_io_functions_t; 
# 52 "/usr/include/stdio.h" 3
typedef __gnuc_va_list va_list; 
# 84 "/usr/include/stdio.h" 3
typedef __fpos_t fpos_t; 
# 89
typedef __fpos64_t fpos64_t; 
# 137 "/usr/include/stdio.h" 3
extern FILE *stdin; 
# 138
extern FILE *stdout; 
# 139
extern FILE *stderr; 
# 146
extern int remove(const char * __filename) throw(); 
# 148
extern int rename(const char * __old, const char * __new) throw(); 
# 152
extern int renameat(int __oldfd, const char * __old, int __newfd, const char * __new) throw(); 
# 164 "/usr/include/stdio.h" 3
extern int renameat2(int __oldfd, const char * __old, int __newfd, const char * __new, unsigned __flags) throw(); 
# 173
extern FILE *tmpfile(); 
# 183 "/usr/include/stdio.h" 3
extern FILE *tmpfile64(); 
# 187
extern char *tmpnam(char * __s) throw(); 
# 192
extern char *tmpnam_r(char * __s) throw(); 
# 204 "/usr/include/stdio.h" 3
extern char *tempnam(const char * __dir, const char * __pfx) throw()
# 205
 __attribute((__malloc__)); 
# 213
extern int fclose(FILE * __stream); 
# 218
extern int fflush(FILE * __stream); 
# 227 "/usr/include/stdio.h" 3
extern int fflush_unlocked(FILE * __stream); 
# 237 "/usr/include/stdio.h" 3
extern int fcloseall(); 
# 246 "/usr/include/stdio.h" 3
extern FILE *fopen(const char *__restrict__ __filename, const char *__restrict__ __modes); 
# 252
extern FILE *freopen(const char *__restrict__ __filename, const char *__restrict__ __modes, FILE *__restrict__ __stream); 
# 270 "/usr/include/stdio.h" 3
extern FILE *fopen64(const char *__restrict__ __filename, const char *__restrict__ __modes); 
# 272
extern FILE *freopen64(const char *__restrict__ __filename, const char *__restrict__ __modes, FILE *__restrict__ __stream); 
# 279
extern FILE *fdopen(int __fd, const char * __modes) throw(); 
# 285
extern FILE *fopencookie(void *__restrict__ __magic_cookie, const char *__restrict__ __modes, cookie_io_functions_t __io_funcs) throw(); 
# 292
extern FILE *fmemopen(void * __s, size_t __len, const char * __modes) throw(); 
# 298
extern FILE *open_memstream(char ** __bufloc, size_t * __sizeloc) throw(); 
# 304
extern void setbuf(FILE *__restrict__ __stream, char *__restrict__ __buf) throw(); 
# 308
extern int setvbuf(FILE *__restrict__ __stream, char *__restrict__ __buf, int __modes, size_t __n) throw(); 
# 314
extern void setbuffer(FILE *__restrict__ __stream, char *__restrict__ __buf, size_t __size) throw(); 
# 318
extern void setlinebuf(FILE * __stream) throw(); 
# 326
extern int fprintf(FILE *__restrict__ __stream, const char *__restrict__ __format, ...); 
# 332
extern int printf(const char *__restrict__ __format, ...); 
# 334
extern int sprintf(char *__restrict__ __s, const char *__restrict__ __format, ...) throw(); 
# 341
extern int vfprintf(FILE *__restrict__ __s, const char *__restrict__ __format, __gnuc_va_list __arg); 
# 347
extern int vprintf(const char *__restrict__ __format, __gnuc_va_list __arg); 
# 349
extern int vsprintf(char *__restrict__ __s, const char *__restrict__ __format, __gnuc_va_list __arg) throw(); 
# 354
extern int snprintf(char *__restrict__ __s, size_t __maxlen, const char *__restrict__ __format, ...) throw()
# 356
 __attribute((__format__(__printf__, 3, 4))); 
# 358
extern int vsnprintf(char *__restrict__ __s, size_t __maxlen, const char *__restrict__ __format, __gnuc_va_list __arg) throw()
# 360
 __attribute((__format__(__printf__, 3, 0))); 
# 366
extern int vasprintf(char **__restrict__ __ptr, const char *__restrict__ __f, __gnuc_va_list __arg) throw()
# 368
 __attribute((__format__(__printf__, 2, 0))); 
# 369
extern int __asprintf(char **__restrict__ __ptr, const char *__restrict__ __fmt, ...) throw()
# 371
 __attribute((__format__(__printf__, 2, 3))); 
# 372
extern int asprintf(char **__restrict__ __ptr, const char *__restrict__ __fmt, ...) throw()
# 374
 __attribute((__format__(__printf__, 2, 3))); 
# 379
extern int vdprintf(int __fd, const char *__restrict__ __fmt, __gnuc_va_list __arg)
# 381
 __attribute((__format__(__printf__, 2, 0))); 
# 382
extern int dprintf(int __fd, const char *__restrict__ __fmt, ...)
# 383
 __attribute((__format__(__printf__, 2, 3))); 
# 391
extern int fscanf(FILE *__restrict__ __stream, const char *__restrict__ __format, ...) __asm__("__isoc99_fscanf"); 
# 397
extern int scanf(const char *__restrict__ __format, ...) __asm__("__isoc99_scanf"); 
# 399
extern int sscanf(const char *__restrict__ __s, const char *__restrict__ __format, ...) throw() __asm__("__isoc99_sscanf"); 
# 407
extern int fscanf(FILE *__restrict__ __stream, const char *__restrict__ __format, ...) __asm__("__isoc99_fscanf"); 
# 410
extern int scanf(const char *__restrict__ __format, ...) __asm__("__isoc99_scanf"); 
# 412
extern int sscanf(const char *__restrict__ __s, const char *__restrict__ __format, ...) throw() __asm__("__isoc99_sscanf"); 
# 432 "/usr/include/stdio.h" 3
extern int vfscanf(FILE *__restrict__ __s, const char *__restrict__ __format, __gnuc_va_list __arg) __asm__("__isoc99_vfscanf")
# 434
 __attribute((__format__(__scanf__, 2, 0))); 
# 440
extern int vscanf(const char *__restrict__ __format, __gnuc_va_list __arg) __asm__("__isoc99_vscanf")
# 441
 __attribute((__format__(__scanf__, 1, 0))); 
# 444
extern int vsscanf(const char *__restrict__ __s, const char *__restrict__ __format, __gnuc_va_list __arg) throw() __asm__("__isoc99_vsscanf")
# 446
 __attribute((__format__(__scanf__, 2, 0))); 
# 451
extern int vfscanf(FILE *__restrict__ __s, const char *__restrict__ __format, __gnuc_va_list __arg) __asm__("__isoc99_vfscanf")
# 455
 __attribute((__format__(__scanf__, 2, 0))); 
# 456
extern int vscanf(const char *__restrict__ __format, __gnuc_va_list __arg) __asm__("__isoc99_vscanf")
# 458
 __attribute((__format__(__scanf__, 1, 0))); 
# 459
extern int vsscanf(const char *__restrict__ __s, const char *__restrict__ __format, __gnuc_va_list __arg) throw() __asm__("__isoc99_vsscanf")
# 463
 __attribute((__format__(__scanf__, 2, 0))); 
# 485 "/usr/include/stdio.h" 3
extern int fgetc(FILE * __stream); 
# 486
extern int getc(FILE * __stream); 
# 492
extern int getchar(); 
# 499
extern int getc_unlocked(FILE * __stream); 
# 500
extern int getchar_unlocked(); 
# 510 "/usr/include/stdio.h" 3
extern int fgetc_unlocked(FILE * __stream); 
# 521 "/usr/include/stdio.h" 3
extern int fputc(int __c, FILE * __stream); 
# 522
extern int putc(int __c, FILE * __stream); 
# 528
extern int putchar(int __c); 
# 537 "/usr/include/stdio.h" 3
extern int fputc_unlocked(int __c, FILE * __stream); 
# 545
extern int putc_unlocked(int __c, FILE * __stream); 
# 546
extern int putchar_unlocked(int __c); 
# 553
extern int getw(FILE * __stream); 
# 556
extern int putw(int __w, FILE * __stream); 
# 564
extern char *fgets(char *__restrict__ __s, int __n, FILE *__restrict__ __stream); 
# 587 "/usr/include/stdio.h" 3
extern char *fgets_unlocked(char *__restrict__ __s, int __n, FILE *__restrict__ __stream); 
# 603 "/usr/include/stdio.h" 3
extern __ssize_t __getdelim(char **__restrict__ __lineptr, size_t *__restrict__ __n, int __delimiter, FILE *__restrict__ __stream); 
# 606
extern __ssize_t getdelim(char **__restrict__ __lineptr, size_t *__restrict__ __n, int __delimiter, FILE *__restrict__ __stream); 
# 616
extern __ssize_t getline(char **__restrict__ __lineptr, size_t *__restrict__ __n, FILE *__restrict__ __stream); 
# 626
extern int fputs(const char *__restrict__ __s, FILE *__restrict__ __stream); 
# 632
extern int puts(const char * __s); 
# 639
extern int ungetc(int __c, FILE * __stream); 
# 646
extern size_t fread(void *__restrict__ __ptr, size_t __size, size_t __n, FILE *__restrict__ __stream); 
# 652
extern size_t fwrite(const void *__restrict__ __ptr, size_t __size, size_t __n, FILE *__restrict__ __s); 
# 662 "/usr/include/stdio.h" 3
extern int fputs_unlocked(const char *__restrict__ __s, FILE *__restrict__ __stream); 
# 673 "/usr/include/stdio.h" 3
extern size_t fread_unlocked(void *__restrict__ __ptr, size_t __size, size_t __n, FILE *__restrict__ __stream); 
# 675
extern size_t fwrite_unlocked(const void *__restrict__ __ptr, size_t __size, size_t __n, FILE *__restrict__ __stream); 
# 684
extern int fseek(FILE * __stream, long __off, int __whence); 
# 689
extern long ftell(FILE * __stream); 
# 694
extern void rewind(FILE * __stream); 
# 707 "/usr/include/stdio.h" 3
extern int fseeko(FILE * __stream, __off_t __off, int __whence); 
# 712
extern __off_t ftello(FILE * __stream); 
# 731 "/usr/include/stdio.h" 3
extern int fgetpos(FILE *__restrict__ __stream, fpos_t *__restrict__ __pos); 
# 736
extern int fsetpos(FILE * __stream, const fpos_t * __pos); 
# 750 "/usr/include/stdio.h" 3
extern int fseeko64(FILE * __stream, __off64_t __off, int __whence); 
# 751
extern __off64_t ftello64(FILE * __stream); 
# 752
extern int fgetpos64(FILE *__restrict__ __stream, fpos64_t *__restrict__ __pos); 
# 753
extern int fsetpos64(FILE * __stream, const fpos64_t * __pos); 
# 757
extern void clearerr(FILE * __stream) throw(); 
# 759
extern int feof(FILE * __stream) throw(); 
# 761
extern int ferror(FILE * __stream) throw(); 
# 765
extern void clearerr_unlocked(FILE * __stream) throw(); 
# 766
extern int feof_unlocked(FILE * __stream) throw(); 
# 767
extern int ferror_unlocked(FILE * __stream) throw(); 
# 775
extern void perror(const char * __s); 
# 26 "/usr/include/x86_64-linux-gnu/bits/sys_errlist.h" 3
extern int sys_nerr; 
# 27
extern const char *const sys_errlist[]; 
# 30
extern int _sys_nerr; 
# 31
extern const char *const _sys_errlist[]; 
# 786 "/usr/include/stdio.h" 3
extern int fileno(FILE * __stream) throw(); 
# 791
extern int fileno_unlocked(FILE * __stream) throw(); 
# 800 "/usr/include/stdio.h" 3
extern FILE *popen(const char * __command, const char * __modes); 
# 806
extern int pclose(FILE * __stream); 
# 812
extern char *ctermid(char * __s) throw(); 
# 818
extern char *cuserid(char * __s); 
# 823
struct obstack; 
# 826
extern int obstack_printf(obstack *__restrict__ __obstack, const char *__restrict__ __format, ...) throw()
# 828
 __attribute((__format__(__printf__, 2, 3))); 
# 829
extern int obstack_vprintf(obstack *__restrict__ __obstack, const char *__restrict__ __format, __gnuc_va_list __args) throw()
# 832
 __attribute((__format__(__printf__, 2, 0))); 
# 840
extern void flockfile(FILE * __stream) throw(); 
# 844
extern int ftrylockfile(FILE * __stream) throw(); 
# 847
extern void funlockfile(FILE * __stream) throw(); 
# 858 "/usr/include/stdio.h" 3
extern int __uflow(FILE *); 
# 859
extern int __overflow(FILE *, int); 
# 873 "/usr/include/stdio.h" 3
}
# 50 "/usr/include/c++/8/bits/memoryfwd.h" 3
namespace std __attribute((__visibility__("default"))) { 
# 63 "/usr/include/c++/8/bits/memoryfwd.h" 3
template< class > class allocator; 
# 67
template<> class allocator< void> ; 
# 71
template< class , class > struct uses_allocator; 
# 78
}
# 42 "/usr/include/c++/8/bits/stringfwd.h" 3
namespace std __attribute((__visibility__("default"))) { 
# 52
template< class _CharT> struct char_traits; 
# 55
template<> struct char_traits< char> ; 
# 58
template<> struct char_traits< wchar_t> ; 
# 63
template<> struct char_traits< char16_t> ; 
# 64
template<> struct char_traits< char32_t> ; 
# 67
inline namespace __cxx11 { 
# 69
template< class _CharT, class _Traits = char_traits< _CharT> , class 
# 70
_Alloc = allocator< _CharT> > class basic_string; 
# 74
typedef basic_string< char>  string; 
# 78
typedef basic_string< wchar_t>  wstring; 
# 84
typedef basic_string< char16_t>  u16string; 
# 87
typedef basic_string< char32_t>  u32string; 
# 90
}
# 95
}
# 20 "/usr/include/x86_64-linux-gnu/bits/types/wint_t.h" 3
typedef unsigned wint_t; 
# 6 "/usr/include/x86_64-linux-gnu/bits/types/mbstate_t.h" 3
typedef __mbstate_t mbstate_t; 
# 79 "/usr/include/wchar.h" 3
extern "C" {
# 83
struct tm; 
# 87
extern wchar_t *wcscpy(wchar_t *__restrict__ __dest, const wchar_t *__restrict__ __src) throw()
# 89
 __attribute((__nonnull__(1, 2))); 
# 92
extern wchar_t *wcsncpy(wchar_t *__restrict__ __dest, const wchar_t *__restrict__ __src, size_t __n) throw()
# 94
 __attribute((__nonnull__(1, 2))); 
# 97
extern wchar_t *wcscat(wchar_t *__restrict__ __dest, const wchar_t *__restrict__ __src) throw()
# 99
 __attribute((__nonnull__(1, 2))); 
# 101
extern wchar_t *wcsncat(wchar_t *__restrict__ __dest, const wchar_t *__restrict__ __src, size_t __n) throw()
# 103
 __attribute((__nonnull__(1, 2))); 
# 106
extern int wcscmp(const wchar_t * __s1, const wchar_t * __s2) throw()
# 107
 __attribute((__pure__)) __attribute((__nonnull__(1, 2))); 
# 109
extern int wcsncmp(const wchar_t * __s1, const wchar_t * __s2, size_t __n) throw()
# 110
 __attribute((__pure__)) __attribute((__nonnull__(1, 2))); 
# 114
extern int wcscasecmp(const wchar_t * __s1, const wchar_t * __s2) throw(); 
# 117
extern int wcsncasecmp(const wchar_t * __s1, const wchar_t * __s2, size_t __n) throw(); 
# 122
extern int wcscasecmp_l(const wchar_t * __s1, const wchar_t * __s2, locale_t __loc) throw(); 
# 125
extern int wcsncasecmp_l(const wchar_t * __s1, const wchar_t * __s2, size_t __n, locale_t __loc) throw(); 
# 131
extern int wcscoll(const wchar_t * __s1, const wchar_t * __s2) throw(); 
# 135
extern size_t wcsxfrm(wchar_t *__restrict__ __s1, const wchar_t *__restrict__ __s2, size_t __n) throw(); 
# 144
extern int wcscoll_l(const wchar_t * __s1, const wchar_t * __s2, locale_t __loc) throw(); 
# 150
extern size_t wcsxfrm_l(wchar_t * __s1, const wchar_t * __s2, size_t __n, locale_t __loc) throw(); 
# 154
extern wchar_t *wcsdup(const wchar_t * __s) throw() __attribute((__malloc__)); 
# 159
extern "C++" wchar_t *wcschr(wchar_t * __wcs, wchar_t __wc) throw() __asm__("wcschr")
# 160
 __attribute((__pure__)); 
# 161
extern "C++" const wchar_t *wcschr(const wchar_t * __wcs, wchar_t __wc) throw() __asm__("wcschr")
# 162
 __attribute((__pure__)); 
# 169
extern "C++" wchar_t *wcsrchr(wchar_t * __wcs, wchar_t __wc) throw() __asm__("wcsrchr")
# 170
 __attribute((__pure__)); 
# 171
extern "C++" const wchar_t *wcsrchr(const wchar_t * __wcs, wchar_t __wc) throw() __asm__("wcsrchr")
# 172
 __attribute((__pure__)); 
# 181 "/usr/include/wchar.h" 3
extern wchar_t *wcschrnul(const wchar_t * __s, wchar_t __wc) throw()
# 182
 __attribute((__pure__)); 
# 187
extern size_t wcscspn(const wchar_t * __wcs, const wchar_t * __reject) throw()
# 188
 __attribute((__pure__)); 
# 191
extern size_t wcsspn(const wchar_t * __wcs, const wchar_t * __accept) throw()
# 192
 __attribute((__pure__)); 
# 195
extern "C++" wchar_t *wcspbrk(wchar_t * __wcs, const wchar_t * __accept) throw() __asm__("wcspbrk")
# 196
 __attribute((__pure__)); 
# 197
extern "C++" const wchar_t *wcspbrk(const wchar_t * __wcs, const wchar_t * __accept) throw() __asm__("wcspbrk")
# 199
 __attribute((__pure__)); 
# 206
extern "C++" wchar_t *wcsstr(wchar_t * __haystack, const wchar_t * __needle) throw() __asm__("wcsstr")
# 207
 __attribute((__pure__)); 
# 208
extern "C++" const wchar_t *wcsstr(const wchar_t * __haystack, const wchar_t * __needle) throw() __asm__("wcsstr")
# 210
 __attribute((__pure__)); 
# 217
extern wchar_t *wcstok(wchar_t *__restrict__ __s, const wchar_t *__restrict__ __delim, wchar_t **__restrict__ __ptr) throw(); 
# 222
extern size_t wcslen(const wchar_t * __s) throw() __attribute((__pure__)); 
# 227
extern "C++" wchar_t *wcswcs(wchar_t * __haystack, const wchar_t * __needle) throw() __asm__("wcswcs")
# 228
 __attribute((__pure__)); 
# 229
extern "C++" const wchar_t *wcswcs(const wchar_t * __haystack, const wchar_t * __needle) throw() __asm__("wcswcs")
# 231
 __attribute((__pure__)); 
# 240 "/usr/include/wchar.h" 3
extern size_t wcsnlen(const wchar_t * __s, size_t __maxlen) throw()
# 241
 __attribute((__pure__)); 
# 247
extern "C++" wchar_t *wmemchr(wchar_t * __s, wchar_t __c, size_t __n) throw() __asm__("wmemchr")
# 248
 __attribute((__pure__)); 
# 249
extern "C++" const wchar_t *wmemchr(const wchar_t * __s, wchar_t __c, size_t __n) throw() __asm__("wmemchr")
# 251
 __attribute((__pure__)); 
# 258
extern int wmemcmp(const wchar_t * __s1, const wchar_t * __s2, size_t __n) throw()
# 259
 __attribute((__pure__)); 
# 262
extern wchar_t *wmemcpy(wchar_t *__restrict__ __s1, const wchar_t *__restrict__ __s2, size_t __n) throw(); 
# 267
extern wchar_t *wmemmove(wchar_t * __s1, const wchar_t * __s2, size_t __n) throw(); 
# 271
extern wchar_t *wmemset(wchar_t * __s, wchar_t __c, size_t __n) throw(); 
# 276
extern wchar_t *wmempcpy(wchar_t *__restrict__ __s1, const wchar_t *__restrict__ __s2, size_t __n) throw(); 
# 284
extern wint_t btowc(int __c) throw(); 
# 288
extern int wctob(wint_t __c) throw(); 
# 292
extern int mbsinit(const mbstate_t * __ps) throw() __attribute((__pure__)); 
# 296
extern size_t mbrtowc(wchar_t *__restrict__ __pwc, const char *__restrict__ __s, size_t __n, mbstate_t *__restrict__ __p) throw(); 
# 301
extern size_t wcrtomb(char *__restrict__ __s, wchar_t __wc, mbstate_t *__restrict__ __ps) throw(); 
# 305
extern size_t __mbrlen(const char *__restrict__ __s, size_t __n, mbstate_t *__restrict__ __ps) throw(); 
# 307
extern size_t mbrlen(const char *__restrict__ __s, size_t __n, mbstate_t *__restrict__ __ps) throw(); 
# 337 "/usr/include/wchar.h" 3
extern size_t mbsrtowcs(wchar_t *__restrict__ __dst, const char **__restrict__ __src, size_t __len, mbstate_t *__restrict__ __ps) throw(); 
# 343
extern size_t wcsrtombs(char *__restrict__ __dst, const wchar_t **__restrict__ __src, size_t __len, mbstate_t *__restrict__ __ps) throw(); 
# 351
extern size_t mbsnrtowcs(wchar_t *__restrict__ __dst, const char **__restrict__ __src, size_t __nmc, size_t __len, mbstate_t *__restrict__ __ps) throw(); 
# 357
extern size_t wcsnrtombs(char *__restrict__ __dst, const wchar_t **__restrict__ __src, size_t __nwc, size_t __len, mbstate_t *__restrict__ __ps) throw(); 
# 367
extern int wcwidth(wchar_t __c) throw(); 
# 371
extern int wcswidth(const wchar_t * __s, size_t __n) throw(); 
# 377
extern double wcstod(const wchar_t *__restrict__ __nptr, wchar_t **__restrict__ __endptr) throw(); 
# 382
extern float wcstof(const wchar_t *__restrict__ __nptr, wchar_t **__restrict__ __endptr) throw(); 
# 384
extern long double wcstold(const wchar_t *__restrict__ __nptr, wchar_t **__restrict__ __endptr) throw(); 
# 396 "/usr/include/wchar.h" 3
extern _Float32 wcstof32(const wchar_t *__restrict__ __nptr, wchar_t **__restrict__ __endptr) throw(); 
# 401
extern _Float64 wcstof64(const wchar_t *__restrict__ __nptr, wchar_t **__restrict__ __endptr) throw(); 
# 411 "/usr/include/wchar.h" 3
extern _Float32x wcstof32x(const wchar_t *__restrict__ __nptr, wchar_t **__restrict__ __endptr) throw(); 
# 416
extern _Float64x wcstof64x(const wchar_t *__restrict__ __nptr, wchar_t **__restrict__ __endptr) throw(); 
# 428 "/usr/include/wchar.h" 3
extern long wcstol(const wchar_t *__restrict__ __nptr, wchar_t **__restrict__ __endptr, int __base) throw(); 
# 433
extern unsigned long wcstoul(const wchar_t *__restrict__ __nptr, wchar_t **__restrict__ __endptr, int __base) throw(); 
# 441
__extension__ extern long long wcstoll(const wchar_t *__restrict__ __nptr, wchar_t **__restrict__ __endptr, int __base) throw(); 
# 448
__extension__ extern unsigned long long wcstoull(const wchar_t *__restrict__ __nptr, wchar_t **__restrict__ __endptr, int __base) throw(); 
# 457
__extension__ extern long long wcstoq(const wchar_t *__restrict__ __nptr, wchar_t **__restrict__ __endptr, int __base) throw(); 
# 464
__extension__ extern unsigned long long wcstouq(const wchar_t *__restrict__ __nptr, wchar_t **__restrict__ __endptr, int __base) throw(); 
# 473
extern long wcstol_l(const wchar_t *__restrict__ __nptr, wchar_t **__restrict__ __endptr, int __base, locale_t __loc) throw(); 
# 477
extern unsigned long wcstoul_l(const wchar_t *__restrict__ __nptr, wchar_t **__restrict__ __endptr, int __base, locale_t __loc) throw(); 
# 482
__extension__ extern long long wcstoll_l(const wchar_t *__restrict__ __nptr, wchar_t **__restrict__ __endptr, int __base, locale_t __loc) throw(); 
# 487
__extension__ extern unsigned long long wcstoull_l(const wchar_t *__restrict__ __nptr, wchar_t **__restrict__ __endptr, int __base, locale_t __loc) throw(); 
# 492
extern double wcstod_l(const wchar_t *__restrict__ __nptr, wchar_t **__restrict__ __endptr, locale_t __loc) throw(); 
# 496
extern float wcstof_l(const wchar_t *__restrict__ __nptr, wchar_t **__restrict__ __endptr, locale_t __loc) throw(); 
# 500
extern long double wcstold_l(const wchar_t *__restrict__ __nptr, wchar_t **__restrict__ __endptr, locale_t __loc) throw(); 
# 511 "/usr/include/wchar.h" 3
extern _Float32 wcstof32_l(const wchar_t *__restrict__ __nptr, wchar_t **__restrict__ __endptr, locale_t __loc) throw(); 
# 517
extern _Float64 wcstof64_l(const wchar_t *__restrict__ __nptr, wchar_t **__restrict__ __endptr, locale_t __loc) throw(); 
# 529 "/usr/include/wchar.h" 3
extern _Float32x wcstof32x_l(const wchar_t *__restrict__ __nptr, wchar_t **__restrict__ __endptr, locale_t __loc) throw(); 
# 535
extern _Float64x wcstof64x_l(const wchar_t *__restrict__ __nptr, wchar_t **__restrict__ __endptr, locale_t __loc) throw(); 
# 551 "/usr/include/wchar.h" 3
extern wchar_t *wcpcpy(wchar_t *__restrict__ __dest, const wchar_t *__restrict__ __src) throw(); 
# 556
extern wchar_t *wcpncpy(wchar_t *__restrict__ __dest, const wchar_t *__restrict__ __src, size_t __n) throw(); 
# 567 "/usr/include/wchar.h" 3
extern __FILE *open_wmemstream(wchar_t ** __bufloc, size_t * __sizeloc) throw(); 
# 573
extern int fwide(__FILE * __fp, int __mode) throw(); 
# 580
extern int fwprintf(__FILE *__restrict__ __stream, const wchar_t *__restrict__ __format, ...); 
# 587
extern int wprintf(const wchar_t *__restrict__ __format, ...); 
# 590
extern int swprintf(wchar_t *__restrict__ __s, size_t __n, const wchar_t *__restrict__ __format, ...) throw(); 
# 598
extern int vfwprintf(__FILE *__restrict__ __s, const wchar_t *__restrict__ __format, __gnuc_va_list __arg); 
# 606
extern int vwprintf(const wchar_t *__restrict__ __format, __gnuc_va_list __arg); 
# 611
extern int vswprintf(wchar_t *__restrict__ __s, size_t __n, const wchar_t *__restrict__ __format, __gnuc_va_list __arg) throw(); 
# 621
extern int fwscanf(__FILE *__restrict__ __stream, const wchar_t *__restrict__ __format, ...) __asm__("__isoc99_fwscanf"); 
# 628
extern int wscanf(const wchar_t *__restrict__ __format, ...) __asm__("__isoc99_wscanf"); 
# 631
extern int swscanf(const wchar_t *__restrict__ __s, const wchar_t *__restrict__ __format, ...) throw() __asm__("__isoc99_swscanf"); 
# 640
extern int fwscanf(__FILE *__restrict__ __stream, const wchar_t *__restrict__ __format, ...) __asm__("__isoc99_fwscanf"); 
# 644
extern int wscanf(const wchar_t *__restrict__ __format, ...) __asm__("__isoc99_wscanf"); 
# 647
extern int swscanf(const wchar_t *__restrict__ __s, const wchar_t *__restrict__ __format, ...) throw() __asm__("__isoc99_swscanf"); 
# 671 "/usr/include/wchar.h" 3
extern int vfwscanf(__FILE *__restrict__ __s, const wchar_t *__restrict__ __format, __gnuc_va_list __arg) __asm__("__isoc99_vfwscanf"); 
# 679
extern int vwscanf(const wchar_t *__restrict__ __format, __gnuc_va_list __arg) __asm__("__isoc99_vwscanf"); 
# 683
extern int vswscanf(const wchar_t *__restrict__ __s, const wchar_t *__restrict__ __format, __gnuc_va_list __arg) throw() __asm__("__isoc99_vswscanf"); 
# 693
extern int vfwscanf(__FILE *__restrict__ __s, const wchar_t *__restrict__ __format, __gnuc_va_list __arg) __asm__("__isoc99_vfwscanf"); 
# 697
extern int vwscanf(const wchar_t *__restrict__ __format, __gnuc_va_list __arg) __asm__("__isoc99_vwscanf"); 
# 700
extern int vswscanf(const wchar_t *__restrict__ __s, const wchar_t *__restrict__ __format, __gnuc_va_list __arg) throw() __asm__("__isoc99_vswscanf"); 
# 726 "/usr/include/wchar.h" 3
extern wint_t fgetwc(__FILE * __stream); 
# 727
extern wint_t getwc(__FILE * __stream); 
# 733
extern wint_t getwchar(); 
# 740
extern wint_t fputwc(wchar_t __wc, __FILE * __stream); 
# 741
extern wint_t putwc(wchar_t __wc, __FILE * __stream); 
# 747
extern wint_t putwchar(wchar_t __wc); 
# 755
extern wchar_t *fgetws(wchar_t *__restrict__ __ws, int __n, __FILE *__restrict__ __stream); 
# 762
extern int fputws(const wchar_t *__restrict__ __ws, __FILE *__restrict__ __stream); 
# 770
extern wint_t ungetwc(wint_t __wc, __FILE * __stream); 
# 781 "/usr/include/wchar.h" 3
extern wint_t getwc_unlocked(__FILE * __stream); 
# 782
extern wint_t getwchar_unlocked(); 
# 790
extern wint_t fgetwc_unlocked(__FILE * __stream); 
# 798
extern wint_t fputwc_unlocked(wchar_t __wc, __FILE * __stream); 
# 807 "/usr/include/wchar.h" 3
extern wint_t putwc_unlocked(wchar_t __wc, __FILE * __stream); 
# 808
extern wint_t putwchar_unlocked(wchar_t __wc); 
# 817 "/usr/include/wchar.h" 3
extern wchar_t *fgetws_unlocked(wchar_t *__restrict__ __ws, int __n, __FILE *__restrict__ __stream); 
# 826
extern int fputws_unlocked(const wchar_t *__restrict__ __ws, __FILE *__restrict__ __stream); 
# 834
extern size_t wcsftime(wchar_t *__restrict__ __s, size_t __maxsize, const wchar_t *__restrict__ __format, const tm *__restrict__ __tp) throw(); 
# 841
extern size_t wcsftime_l(wchar_t *__restrict__ __s, size_t __maxsize, const wchar_t *__restrict__ __format, const tm *__restrict__ __tp, locale_t __loc) throw(); 
# 856 "/usr/include/wchar.h" 3
}
# 62 "/usr/include/c++/8/cwchar" 3
namespace std { 
# 64
using ::mbstate_t;
# 65
}
# 135 "/usr/include/c++/8/cwchar" 3
namespace std __attribute((__visibility__("default"))) { 
# 139
using ::wint_t;
# 141
using ::btowc;
# 142
using ::fgetwc;
# 143
using ::fgetws;
# 144
using ::fputwc;
# 145
using ::fputws;
# 146
using ::fwide;
# 147
using ::fwprintf;
# 148
using ::fwscanf;
# 149
using ::getwc;
# 150
using ::getwchar;
# 151
using ::mbrlen;
# 152
using ::mbrtowc;
# 153
using ::mbsinit;
# 154
using ::mbsrtowcs;
# 155
using ::putwc;
# 156
using ::putwchar;
# 158
using ::swprintf;
# 160
using ::swscanf;
# 161
using ::ungetwc;
# 162
using ::vfwprintf;
# 164
using ::vfwscanf;
# 167
using ::vswprintf;
# 170
using ::vswscanf;
# 172
using ::vwprintf;
# 174
using ::vwscanf;
# 176
using ::wcrtomb;
# 177
using ::wcscat;
# 178
using ::wcscmp;
# 179
using ::wcscoll;
# 180
using ::wcscpy;
# 181
using ::wcscspn;
# 182
using ::wcsftime;
# 183
using ::wcslen;
# 184
using ::wcsncat;
# 185
using ::wcsncmp;
# 186
using ::wcsncpy;
# 187
using ::wcsrtombs;
# 188
using ::wcsspn;
# 189
using ::wcstod;
# 191
using ::wcstof;
# 193
using ::wcstok;
# 194
using ::wcstol;
# 195
using ::wcstoul;
# 196
using ::wcsxfrm;
# 197
using ::wctob;
# 198
using ::wmemcmp;
# 199
using ::wmemcpy;
# 200
using ::wmemmove;
# 201
using ::wmemset;
# 202
using ::wprintf;
# 203
using ::wscanf;
# 204
using ::wcschr;
# 205
using ::wcspbrk;
# 206
using ::wcsrchr;
# 207
using ::wcsstr;
# 208
using ::wmemchr;
# 233 "/usr/include/c++/8/cwchar" 3
}
# 241
namespace __gnu_cxx { 
# 248
using ::wcstold;
# 257 "/usr/include/c++/8/cwchar" 3
using ::wcstoll;
# 258
using ::wcstoull;
# 260
}
# 262
namespace std { 
# 264
using __gnu_cxx::wcstold;
# 265
using __gnu_cxx::wcstoll;
# 266
using __gnu_cxx::wcstoull;
# 267
}
# 277 "/usr/include/c++/8/cwchar" 3
namespace std { 
# 297
}
# 68 "/usr/include/c++/8/bits/postypes.h" 3
namespace std __attribute((__visibility__("default"))) { 
# 88 "/usr/include/c++/8/bits/postypes.h" 3
typedef long streamoff; 
# 98 "/usr/include/c++/8/bits/postypes.h" 3
typedef ptrdiff_t streamsize; 
# 111 "/usr/include/c++/8/bits/postypes.h" 3
template< class _StateT> 
# 112
class fpos { 
# 115
streamoff _M_off; 
# 116
_StateT _M_state; 
# 123
public: fpos() : _M_off((0)), _M_state() 
# 124
{ } 
# 133 "/usr/include/c++/8/bits/postypes.h" 3
fpos(streamoff __off) : _M_off(__off), _M_state() 
# 134
{ } 
# 137
operator streamoff() const { return _M_off; } 
# 141
void state(_StateT __st) 
# 142
{ (_M_state) = __st; } 
# 146
_StateT state() const 
# 147
{ return _M_state; } 
# 154
fpos &operator+=(streamoff __off) 
# 155
{ 
# 156
(_M_off) += __off; 
# 157
return *this; 
# 158
} 
# 165
fpos &operator-=(streamoff __off) 
# 166
{ 
# 167
(_M_off) -= __off; 
# 168
return *this; 
# 169
} 
# 178
fpos operator+(streamoff __off) const 
# 179
{ 
# 180
fpos __pos(*this); 
# 181
__pos += __off; 
# 182
return __pos; 
# 183
} 
# 192
fpos operator-(streamoff __off) const 
# 193
{ 
# 194
fpos __pos(*this); 
# 195
__pos -= __off; 
# 196
return __pos; 
# 197
} 
# 205
streamoff operator-(const fpos &__other) const 
# 206
{ return (_M_off) - (__other._M_off); } 
# 207
}; 
# 214
template< class _StateT> inline bool 
# 216
operator==(const fpos< _StateT>  &__lhs, const fpos< _StateT>  &__rhs) 
# 217
{ return ((streamoff)__lhs) == ((streamoff)__rhs); } 
# 219
template< class _StateT> inline bool 
# 221
operator!=(const fpos< _StateT>  &__lhs, const fpos< _StateT>  &__rhs) 
# 222
{ return ((streamoff)__lhs) != ((streamoff)__rhs); } 
# 228
typedef fpos< __mbstate_t>  streampos; 
# 230
typedef fpos< __mbstate_t>  wstreampos; 
# 234
typedef fpos< __mbstate_t>  u16streampos; 
# 236
typedef fpos< __mbstate_t>  u32streampos; 
# 240
}
# 42 "/usr/include/c++/8/iosfwd" 3
namespace std __attribute((__visibility__("default"))) { 
# 74 "/usr/include/c++/8/iosfwd" 3
class ios_base; 
# 76
template< class _CharT, class _Traits = char_traits< _CharT> > class basic_ios; 
# 79
template< class _CharT, class _Traits = char_traits< _CharT> > class basic_streambuf; 
# 82
template< class _CharT, class _Traits = char_traits< _CharT> > class basic_istream; 
# 85
template< class _CharT, class _Traits = char_traits< _CharT> > class basic_ostream; 
# 88
template< class _CharT, class _Traits = char_traits< _CharT> > class basic_iostream; 
# 92
inline namespace __cxx11 { 
# 94
template< class _CharT, class _Traits = char_traits< _CharT> , class 
# 95
_Alloc = allocator< _CharT> > class basic_stringbuf; 
# 98
template< class _CharT, class _Traits = char_traits< _CharT> , class 
# 99
_Alloc = allocator< _CharT> > class basic_istringstream; 
# 102
template< class _CharT, class _Traits = char_traits< _CharT> , class 
# 103
_Alloc = allocator< _CharT> > class basic_ostringstream; 
# 106
template< class _CharT, class _Traits = char_traits< _CharT> , class 
# 107
_Alloc = allocator< _CharT> > class basic_stringstream; 
# 110
}
# 112
template< class _CharT, class _Traits = char_traits< _CharT> > class basic_filebuf; 
# 115
template< class _CharT, class _Traits = char_traits< _CharT> > class basic_ifstream; 
# 118
template< class _CharT, class _Traits = char_traits< _CharT> > class basic_ofstream; 
# 121
template< class _CharT, class _Traits = char_traits< _CharT> > class basic_fstream; 
# 124
template< class _CharT, class _Traits = char_traits< _CharT> > class istreambuf_iterator; 
# 127
template< class _CharT, class _Traits = char_traits< _CharT> > class ostreambuf_iterator; 
# 132
typedef basic_ios< char>  ios; 
# 135
typedef basic_streambuf< char>  streambuf; 
# 138
typedef basic_istream< char>  istream; 
# 141
typedef basic_ostream< char>  ostream; 
# 144
typedef basic_iostream< char>  iostream; 
# 147
typedef __cxx11::basic_stringbuf< char>  stringbuf; 
# 150
typedef __cxx11::basic_istringstream< char>  istringstream; 
# 153
typedef __cxx11::basic_ostringstream< char>  ostringstream; 
# 156
typedef __cxx11::basic_stringstream< char>  stringstream; 
# 159
typedef basic_filebuf< char>  filebuf; 
# 162
typedef basic_ifstream< char>  ifstream; 
# 165
typedef basic_ofstream< char>  ofstream; 
# 168
typedef basic_fstream< char>  fstream; 
# 172
typedef basic_ios< wchar_t>  wios; 
# 175
typedef basic_streambuf< wchar_t>  wstreambuf; 
# 178
typedef basic_istream< wchar_t>  wistream; 
# 181
typedef basic_ostream< wchar_t>  wostream; 
# 184
typedef basic_iostream< wchar_t>  wiostream; 
# 187
typedef __cxx11::basic_stringbuf< wchar_t>  wstringbuf; 
# 190
typedef __cxx11::basic_istringstream< wchar_t>  wistringstream; 
# 193
typedef __cxx11::basic_ostringstream< wchar_t>  wostringstream; 
# 196
typedef __cxx11::basic_stringstream< wchar_t>  wstringstream; 
# 199
typedef basic_filebuf< wchar_t>  wfilebuf; 
# 202
typedef basic_ifstream< wchar_t>  wifstream; 
# 205
typedef basic_ofstream< wchar_t>  wofstream; 
# 208
typedef basic_fstream< wchar_t>  wfstream; 
# 213
}
# 35 "/usr/include/c++/8/exception" 3
#pragma GCC visibility push ( default )
# 36 "/usr/include/c++/8/bits/exception.h" 3
#pragma GCC visibility push ( default )
# 40
extern "C++" {
# 42
namespace std { 
# 60 "/usr/include/c++/8/bits/exception.h" 3
class exception { 
# 63
public: exception() noexcept { } 
# 64
virtual ~exception() noexcept; 
# 69
virtual const char *what() const noexcept; 
# 70
}; 
# 72
}
# 74
}
# 76
#pragma GCC visibility pop
# 40 "/usr/include/c++/8/exception" 3
extern "C++" {
# 42
namespace std { 
# 46
class bad_exception : public exception { 
# 49
public: bad_exception() noexcept { } 
# 53
virtual ~bad_exception() noexcept; 
# 57
virtual const char *what() const noexcept; 
# 58
}; 
# 61
typedef void (*terminate_handler)(void); 
# 64
typedef void (*unexpected_handler)(void); 
# 67
terminate_handler set_terminate(terminate_handler) noexcept; 
# 71
terminate_handler get_terminate() noexcept; 
# 76
void terminate() noexcept __attribute((__noreturn__)); 
# 79
unexpected_handler set_unexpected(unexpected_handler) noexcept; 
# 83
unexpected_handler get_unexpected() noexcept; 
# 88
void unexpected() __attribute((__noreturn__)); 
# 102 "/usr/include/c++/8/exception" 3
bool uncaught_exception() noexcept __attribute((__pure__)); 
# 107
int uncaught_exceptions() noexcept __attribute((__pure__)); 
# 111
}
# 113
namespace __gnu_cxx { 
# 133 "/usr/include/c++/8/exception" 3
void __verbose_terminate_handler(); 
# 136
}
# 138
}
# 140
#pragma GCC visibility pop
# 34 "/usr/include/c++/8/bits/exception_ptr.h" 3
#pragma GCC visibility push ( default )
# 36 "/usr/include/c++/8/bits/cxxabi_init_exception.h" 3
#pragma GCC visibility push ( default )
# 50 "/usr/include/c++/8/bits/cxxabi_init_exception.h" 3
namespace std { 
# 52
class type_info; 
# 53
}
# 55
namespace __cxxabiv1 { 
# 57
struct __cxa_refcounted_exception; 
# 59
extern "C" {
# 63
void *__cxa_allocate_exception(size_t) noexcept; 
# 66
void __cxa_free_exception(void *) noexcept; 
# 70
__cxa_refcounted_exception *__cxa_init_primary_exception(void * object, std::type_info * tinfo, void (* dest)(void *)) noexcept; 
# 73
}
# 74
}
# 78
#pragma GCC visibility pop
# 37 "/usr/include/c++/8/bits/hash_bytes.h" 3
namespace std { 
# 47
size_t _Hash_bytes(const void * __ptr, size_t __len, size_t __seed); 
# 54
size_t _Fnv_hash_bytes(const void * __ptr, size_t __len, size_t __seed); 
# 57
}
# 39 "/usr/include/c++/8/typeinfo" 3
#pragma GCC visibility push ( default )
# 41
extern "C++" {
# 43
namespace __cxxabiv1 { 
# 45
class __class_type_info; 
# 46
}
# 80 "/usr/include/c++/8/typeinfo" 3
namespace std { 
# 88
class type_info { 
# 95
public: virtual ~type_info(); 
# 99
const char *name() const noexcept 
# 100
{ return (((__name)[0]) == ('*')) ? (__name) + 1 : (__name); } 
# 115 "/usr/include/c++/8/typeinfo" 3
bool before(const type_info &__arg) const noexcept 
# 116
{ return ((((__name)[0]) == ('*')) && (((__arg.__name)[0]) == ('*'))) ? (__name) < (__arg.__name) : (__builtin_strcmp(__name, __arg.__name) < 0); 
# 118
} 
# 120
bool operator==(const type_info &__arg) const noexcept 
# 121
{ 
# 122
return ((__name) == (__arg.__name)) || ((((__name)[0]) != ('*')) && (__builtin_strcmp(__name, __arg.__name) == 0)); 
# 125
} 
# 136 "/usr/include/c++/8/typeinfo" 3
bool operator!=(const type_info &__arg) const noexcept 
# 137
{ return !this->operator==(__arg); } 
# 140
size_t hash_code() const noexcept 
# 141
{ 
# 143
return _Hash_bytes(this->name(), __builtin_strlen(this->name()), static_cast< size_t>(3339675911UL)); 
# 148
} 
# 152
virtual bool __is_pointer_p() const; 
# 155
virtual bool __is_function_p() const; 
# 163
virtual bool __do_catch(const type_info * __thr_type, void ** __thr_obj, unsigned __outer) const; 
# 167
virtual bool __do_upcast(const __cxxabiv1::__class_type_info * __target, void ** __obj_ptr) const; 
# 171
protected: const char *__name; 
# 173
explicit type_info(const char *__n) : __name(__n) { } 
# 177
private: type_info &operator=(const type_info &); 
# 178
type_info(const type_info &); 
# 179
}; 
# 187
class bad_cast : public exception { 
# 190
public: bad_cast() noexcept { } 
# 194
virtual ~bad_cast() noexcept; 
# 197
virtual const char *what() const noexcept; 
# 198
}; 
# 204
class bad_typeid : public exception { 
# 207
public: bad_typeid() noexcept { } 
# 211
virtual ~bad_typeid() noexcept; 
# 214
virtual const char *what() const noexcept; 
# 215
}; 
# 216
}
# 218
}
# 220
#pragma GCC visibility pop
# 42 "/usr/include/c++/8/new" 3
#pragma GCC visibility push ( default )
# 44
extern "C++" {
# 46
namespace std { 
# 54
class bad_alloc : public exception { 
# 57
public: bad_alloc() throw() { } 
# 61
virtual ~bad_alloc() throw(); 
# 64
virtual const char *what() const throw(); 
# 65
}; 
# 68
class bad_array_new_length : public bad_alloc { 
# 71
public: bad_array_new_length() throw() { } 
# 75
virtual ~bad_array_new_length() throw(); 
# 78
virtual const char *what() const throw(); 
# 79
}; 
# 86
struct nothrow_t { 
# 89
explicit nothrow_t() = default;
# 91
}; 
# 93
extern const nothrow_t nothrow; 
# 97
typedef void (*new_handler)(void); 
# 101
new_handler set_new_handler(new_handler) throw(); 
# 105
new_handler get_new_handler() noexcept; 
# 107
}
# 120 "/usr/include/c++/8/new" 3
void *operator new(std::size_t)
# 121
 __attribute((__externally_visible__)); 
# 122
void *operator new[](std::size_t)
# 123
 __attribute((__externally_visible__)); 
# 124
void operator delete(void *) noexcept
# 125
 __attribute((__externally_visible__)); 
# 126
void operator delete[](void *) noexcept
# 127
 __attribute((__externally_visible__)); 
# 129
void operator delete(void *, std::size_t) noexcept
# 130
 __attribute((__externally_visible__)); 
# 131
void operator delete[](void *, std::size_t) noexcept
# 132
 __attribute((__externally_visible__)); 
# 134
void *operator new(std::size_t, const std::nothrow_t &) noexcept
# 135
 __attribute((__externally_visible__)); 
# 136
void *operator new[](std::size_t, const std::nothrow_t &) noexcept
# 137
 __attribute((__externally_visible__)); 
# 138
void operator delete(void *, const std::nothrow_t &) noexcept
# 139
 __attribute((__externally_visible__)); 
# 140
void operator delete[](void *, const std::nothrow_t &) noexcept
# 141
 __attribute((__externally_visible__)); 
# 168 "/usr/include/c++/8/new" 3
inline void *operator new(std::size_t, void *__p) noexcept 
# 169
{ return __p; } 
# 170
inline void *operator new[](std::size_t, void *__p) noexcept 
# 171
{ return __p; } 
# 174
inline void operator delete(void *, void *) noexcept { } 
# 175
inline void operator delete[](void *, void *) noexcept { } 
# 177
}
# 216 "/usr/include/c++/8/new" 3
#pragma GCC visibility pop
# 42 "/usr/include/c++/8/bits/exception_ptr.h" 3
extern "C++" {
# 44
namespace std { 
# 46
class type_info; 
# 52
namespace __exception_ptr { 
# 54
class exception_ptr; 
# 55
}
# 57
using __exception_ptr::exception_ptr;
# 63
__exception_ptr::exception_ptr current_exception() noexcept; 
# 65
template< class _Ex> __exception_ptr::exception_ptr make_exception_ptr(_Ex) noexcept; 
# 69
void rethrow_exception(__exception_ptr::exception_ptr) __attribute((__noreturn__)); 
# 71
namespace __exception_ptr { 
# 73
using std::rethrow_exception;
# 79
class exception_ptr { 
# 81
void *_M_exception_object; 
# 83
explicit exception_ptr(void * __e) noexcept; 
# 85
void _M_addref() noexcept; 
# 86
void _M_release() noexcept; 
# 88
void *_M_get() const noexcept __attribute((__pure__)); 
# 90
friend exception_ptr std::current_exception() noexcept; 
# 91
friend void std::rethrow_exception(__exception_ptr::exception_ptr); 
# 92
template< class _Ex> friend exception_ptr std::make_exception_ptr(_Ex) noexcept; 
# 96
public: exception_ptr() noexcept; 
# 98
exception_ptr(const exception_ptr &) noexcept; 
# 101
exception_ptr(nullptr_t) noexcept : _M_exception_object((0)) 
# 103
{ } 
# 105
exception_ptr(exception_ptr &&__o) noexcept : _M_exception_object(__o._M_exception_object) 
# 107
{ (__o._M_exception_object) = (0); } 
# 118 "/usr/include/c++/8/bits/exception_ptr.h" 3
exception_ptr &operator=(const exception_ptr &) noexcept; 
# 122
exception_ptr &operator=(exception_ptr &&__o) noexcept 
# 123
{ 
# 124
((exception_ptr)(static_cast< exception_ptr &&>(__o))).swap(*this); 
# 125
return *this; 
# 126
} 
# 129
~exception_ptr() noexcept; 
# 132
void swap(exception_ptr &) noexcept; 
# 144 "/usr/include/c++/8/bits/exception_ptr.h" 3
explicit operator bool() const 
# 145
{ return _M_exception_object; } 
# 149
friend bool operator==(const exception_ptr &, const exception_ptr &) noexcept
# 150
 __attribute((__pure__)); 
# 153
const type_info *__cxa_exception_type() const noexcept
# 154
 __attribute((__pure__)); 
# 155
}; 
# 158
bool operator==(const exception_ptr &, const exception_ptr &) noexcept
# 159
 __attribute((__pure__)); 
# 162
bool operator!=(const exception_ptr &, const exception_ptr &) noexcept
# 163
 __attribute((__pure__)); 
# 166
inline void swap(exception_ptr &__lhs, exception_ptr &__rhs) 
# 167
{ __lhs.swap(__rhs); } 
# 169
template< class _Ex> inline void 
# 171
__dest_thunk(void *__x) 
# 172
{ ((static_cast< _Ex *>(__x))->~_Ex()); } 
# 174
}
# 177
template< class _Ex> __exception_ptr::exception_ptr 
# 179
make_exception_ptr(_Ex __ex) noexcept 
# 180
{ 
# 182
void *__e = __cxxabiv1::__cxa_allocate_exception(sizeof(_Ex)); 
# 183
(void)__cxxabiv1::__cxa_init_primary_exception(__e, const_cast< type_info *>(&typeid(__ex)), __exception_ptr::__dest_thunk< _Ex> ); 
# 186
try 
# 187
{ 
# 188
::new (__e) (_Ex)(__ex); 
# 189
return ((__exception_ptr::exception_ptr)(__e)); 
# 190
} 
# 191
catch (...) 
# 192
{ 
# 193
__cxxabiv1::__cxa_free_exception(__e); 
# 194
return current_exception(); 
# 195
}  
# 208 "/usr/include/c++/8/bits/exception_ptr.h" 3
} 
# 211
}
# 213
}
# 215
#pragma GCC visibility pop
# 33 "/usr/include/c++/8/bits/nested_exception.h" 3
#pragma GCC visibility push ( default )
# 36 "/usr/include/c++/8/bits/move.h" 3
namespace std __attribute((__visibility__("default"))) { 
# 45
template< class _Tp> constexpr _Tp *
# 47
__addressof(_Tp &__r) noexcept 
# 48
{ return __builtin_addressof(__r); } 
# 53
}
# 40 "/usr/include/c++/8/type_traits" 3
namespace std __attribute((__visibility__("default"))) { 
# 56 "/usr/include/c++/8/type_traits" 3
template< class _Tp, _Tp __v> 
# 57
struct integral_constant { 
# 59
static constexpr _Tp value = (__v); 
# 60
typedef _Tp value_type; 
# 61
typedef integral_constant type; 
# 62
constexpr operator value_type() const noexcept { return value; } 
# 67
constexpr value_type operator()() const noexcept { return value; } 
# 69
}; 
# 71
template< class _Tp, _Tp __v> constexpr _Tp integral_constant< _Tp, __v> ::value; 
# 75
typedef integral_constant< bool, true>  true_type; 
# 78
typedef integral_constant< bool, false>  false_type; 
# 80
template< bool __v> using __bool_constant = integral_constant< bool, __v> ; 
# 91 "/usr/include/c++/8/type_traits" 3
template< bool , class , class > struct conditional; 
# 94
template< class ...> struct __or_; 
# 98
template<> struct __or_< >  : public false_type { 
# 100
}; 
# 102
template< class _B1> 
# 103
struct __or_< _B1>  : public _B1 { 
# 105
}; 
# 107
template< class _B1, class _B2> 
# 108
struct __or_< _B1, _B2>  : public conditional< _B1::value, _B1, _B2> ::type { 
# 110
}; 
# 112
template< class _B1, class _B2, class _B3, class ..._Bn> 
# 113
struct __or_< _B1, _B2, _B3, _Bn...>  : public conditional< _B1::value, _B1, std::__or_< _B2, _B3, _Bn...> > ::type { 
# 115
}; 
# 117
template< class ...> struct __and_; 
# 121
template<> struct __and_< >  : public true_type { 
# 123
}; 
# 125
template< class _B1> 
# 126
struct __and_< _B1>  : public _B1 { 
# 128
}; 
# 130
template< class _B1, class _B2> 
# 131
struct __and_< _B1, _B2>  : public conditional< _B1::value, _B2, _B1> ::type { 
# 133
}; 
# 135
template< class _B1, class _B2, class _B3, class ..._Bn> 
# 136
struct __and_< _B1, _B2, _B3, _Bn...>  : public conditional< _B1::value, std::__and_< _B2, _B3, _Bn...> , _B1> ::type { 
# 138
}; 
# 140
template< class _Pp> 
# 141
struct __not_ : public __bool_constant< !((bool)_Pp::value)>  { 
# 143
}; 
# 180 "/usr/include/c++/8/type_traits" 3
template< class _Tp> 
# 181
struct __success_type { 
# 182
typedef _Tp type; }; 
# 184
struct __failure_type { 
# 185
}; 
# 189
template< class > struct remove_cv; 
# 192
template< class > 
# 193
struct __is_void_helper : public false_type { 
# 194
}; 
# 197
template<> struct __is_void_helper< void>  : public true_type { 
# 198
}; 
# 201
template< class _Tp> 
# 202
struct is_void : public __is_void_helper< typename remove_cv< _Tp> ::type> ::type { 
# 204
}; 
# 206
template< class > 
# 207
struct __is_integral_helper : public false_type { 
# 208
}; 
# 211
template<> struct __is_integral_helper< bool>  : public true_type { 
# 212
}; 
# 215
template<> struct __is_integral_helper< char>  : public true_type { 
# 216
}; 
# 219
template<> struct __is_integral_helper< signed char>  : public true_type { 
# 220
}; 
# 223
template<> struct __is_integral_helper< unsigned char>  : public true_type { 
# 224
}; 
# 228
template<> struct __is_integral_helper< wchar_t>  : public true_type { 
# 229
}; 
# 233
template<> struct __is_integral_helper< char16_t>  : public true_type { 
# 234
}; 
# 237
template<> struct __is_integral_helper< char32_t>  : public true_type { 
# 238
}; 
# 241
template<> struct __is_integral_helper< short>  : public true_type { 
# 242
}; 
# 245
template<> struct __is_integral_helper< unsigned short>  : public true_type { 
# 246
}; 
# 249
template<> struct __is_integral_helper< int>  : public true_type { 
# 250
}; 
# 253
template<> struct __is_integral_helper< unsigned>  : public true_type { 
# 254
}; 
# 257
template<> struct __is_integral_helper< long>  : public true_type { 
# 258
}; 
# 261
template<> struct __is_integral_helper< unsigned long>  : public true_type { 
# 262
}; 
# 265
template<> struct __is_integral_helper< long long>  : public true_type { 
# 266
}; 
# 269
template<> struct __is_integral_helper< unsigned long long>  : public true_type { 
# 270
}; 
# 276
template<> struct __is_integral_helper< __int128_t>  : public true_type { 
# 277
}; 
# 280
template<> struct __is_integral_helper< __uint128_t>  : public true_type { 
# 281
}; 
# 312 "/usr/include/c++/8/type_traits" 3
template< class _Tp> 
# 313
struct is_integral : public __is_integral_helper< typename remove_cv< _Tp> ::type> ::type { 
# 315
}; 
# 317
template< class > 
# 318
struct __is_floating_point_helper : public false_type { 
# 319
}; 
# 322
template<> struct __is_floating_point_helper< float>  : public true_type { 
# 323
}; 
# 326
template<> struct __is_floating_point_helper< double>  : public true_type { 
# 327
}; 
# 330
template<> struct __is_floating_point_helper< long double>  : public true_type { 
# 331
}; 
# 340 "/usr/include/c++/8/type_traits" 3
template< class _Tp> 
# 341
struct is_floating_point : public __is_floating_point_helper< typename remove_cv< _Tp> ::type> ::type { 
# 343
}; 
# 346
template< class > 
# 347
struct is_array : public false_type { 
# 348
}; 
# 350
template< class _Tp, size_t _Size> 
# 351
struct is_array< _Tp [_Size]>  : public true_type { 
# 352
}; 
# 354
template< class _Tp> 
# 355
struct is_array< _Tp []>  : public true_type { 
# 356
}; 
# 358
template< class > 
# 359
struct __is_pointer_helper : public false_type { 
# 360
}; 
# 362
template< class _Tp> 
# 363
struct __is_pointer_helper< _Tp *>  : public true_type { 
# 364
}; 
# 367
template< class _Tp> 
# 368
struct is_pointer : public __is_pointer_helper< typename remove_cv< _Tp> ::type> ::type { 
# 370
}; 
# 373
template< class > 
# 374
struct is_lvalue_reference : public false_type { 
# 375
}; 
# 377
template< class _Tp> 
# 378
struct is_lvalue_reference< _Tp &>  : public true_type { 
# 379
}; 
# 382
template< class > 
# 383
struct is_rvalue_reference : public false_type { 
# 384
}; 
# 386
template< class _Tp> 
# 387
struct is_rvalue_reference< _Tp &&>  : public true_type { 
# 388
}; 
# 390
template< class > struct is_function; 
# 393
template< class > 
# 394
struct __is_member_object_pointer_helper : public false_type { 
# 395
}; 
# 397
template< class _Tp, class _Cp> 
# 398
struct __is_member_object_pointer_helper< _Tp (_Cp::*)>  : public integral_constant< bool, !is_function< _Tp> ::value>  { 
# 399
}; 
# 402
template< class _Tp> 
# 403
struct is_member_object_pointer : public __is_member_object_pointer_helper< typename remove_cv< _Tp> ::type> ::type { 
# 406
}; 
# 408
template< class > 
# 409
struct __is_member_function_pointer_helper : public false_type { 
# 410
}; 
# 412
template< class _Tp, class _Cp> 
# 413
struct __is_member_function_pointer_helper< _Tp (_Cp::*)>  : public integral_constant< bool, is_function< _Tp> ::value>  { 
# 414
}; 
# 417
template< class _Tp> 
# 418
struct is_member_function_pointer : public __is_member_function_pointer_helper< typename remove_cv< _Tp> ::type> ::type { 
# 421
}; 
# 424
template< class _Tp> 
# 425
struct is_enum : public integral_constant< bool, __is_enum(_Tp)>  { 
# 427
}; 
# 430
template< class _Tp> 
# 431
struct is_union : public integral_constant< bool, __is_union(_Tp)>  { 
# 433
}; 
# 436
template< class _Tp> 
# 437
struct is_class : public integral_constant< bool, __is_class(_Tp)>  { 
# 439
}; 
# 442
template< class > 
# 443
struct is_function : public false_type { 
# 444
}; 
# 446
template< class _Res, class ..._ArgTypes> 
# 447
struct is_function< _Res (_ArgTypes ...)>  : public true_type { 
# 448
}; 
# 450
template< class _Res, class ..._ArgTypes> 
# 451
struct is_function< _Res (_ArgTypes ...) &>  : public true_type { 
# 452
}; 
# 454
template< class _Res, class ..._ArgTypes> 
# 455
struct is_function< _Res (_ArgTypes ...) &&>  : public true_type { 
# 456
}; 
# 458
template< class _Res, class ..._ArgTypes> 
# 459
struct is_function< _Res (_ArgTypes ..., ...)>  : public true_type { 
# 460
}; 
# 462
template< class _Res, class ..._ArgTypes> 
# 463
struct is_function< _Res (_ArgTypes ..., ...) &>  : public true_type { 
# 464
}; 
# 466
template< class _Res, class ..._ArgTypes> 
# 467
struct is_function< _Res (_ArgTypes ..., ...) &&>  : public true_type { 
# 468
}; 
# 470
template< class _Res, class ..._ArgTypes> 
# 471
struct is_function< _Res (_ArgTypes ...) const>  : public true_type { 
# 472
}; 
# 474
template< class _Res, class ..._ArgTypes> 
# 475
struct is_function< _Res (_ArgTypes ...) const &>  : public true_type { 
# 476
}; 
# 478
template< class _Res, class ..._ArgTypes> 
# 479
struct is_function< _Res (_ArgTypes ...) const &&>  : public true_type { 
# 480
}; 
# 482
template< class _Res, class ..._ArgTypes> 
# 483
struct is_function< _Res (_ArgTypes ..., ...) const>  : public true_type { 
# 484
}; 
# 486
template< class _Res, class ..._ArgTypes> 
# 487
struct is_function< _Res (_ArgTypes ..., ...) const &>  : public true_type { 
# 488
}; 
# 490
template< class _Res, class ..._ArgTypes> 
# 491
struct is_function< _Res (_ArgTypes ..., ...) const &&>  : public true_type { 
# 492
}; 
# 494
template< class _Res, class ..._ArgTypes> 
# 495
struct is_function< _Res (_ArgTypes ...) volatile>  : public true_type { 
# 496
}; 
# 498
template< class _Res, class ..._ArgTypes> 
# 499
struct is_function< _Res (_ArgTypes ...) volatile &>  : public true_type { 
# 500
}; 
# 502
template< class _Res, class ..._ArgTypes> 
# 503
struct is_function< _Res (_ArgTypes ...) volatile &&>  : public true_type { 
# 504
}; 
# 506
template< class _Res, class ..._ArgTypes> 
# 507
struct is_function< _Res (_ArgTypes ..., ...) volatile>  : public true_type { 
# 508
}; 
# 510
template< class _Res, class ..._ArgTypes> 
# 511
struct is_function< _Res (_ArgTypes ..., ...) volatile &>  : public true_type { 
# 512
}; 
# 514
template< class _Res, class ..._ArgTypes> 
# 515
struct is_function< _Res (_ArgTypes ..., ...) volatile &&>  : public true_type { 
# 516
}; 
# 518
template< class _Res, class ..._ArgTypes> 
# 519
struct is_function< _Res (_ArgTypes ...) const volatile>  : public true_type { 
# 520
}; 
# 522
template< class _Res, class ..._ArgTypes> 
# 523
struct is_function< _Res (_ArgTypes ...) const volatile &>  : public true_type { 
# 524
}; 
# 526
template< class _Res, class ..._ArgTypes> 
# 527
struct is_function< _Res (_ArgTypes ...) const volatile &&>  : public true_type { 
# 528
}; 
# 530
template< class _Res, class ..._ArgTypes> 
# 531
struct is_function< _Res (_ArgTypes ..., ...) const volatile>  : public true_type { 
# 532
}; 
# 534
template< class _Res, class ..._ArgTypes> 
# 535
struct is_function< _Res (_ArgTypes ..., ...) const volatile &>  : public true_type { 
# 536
}; 
# 538
template< class _Res, class ..._ArgTypes> 
# 539
struct is_function< _Res (_ArgTypes ..., ...) const volatile &&>  : public true_type { 
# 540
}; 
# 544
template< class > 
# 545
struct __is_null_pointer_helper : public false_type { 
# 546
}; 
# 549
template<> struct __is_null_pointer_helper< nullptr_t>  : public true_type { 
# 550
}; 
# 553
template< class _Tp> 
# 554
struct is_null_pointer : public __is_null_pointer_helper< typename remove_cv< _Tp> ::type> ::type { 
# 556
}; 
# 559
template< class _Tp> 
# 560
struct __is_nullptr_t : public is_null_pointer< _Tp>  { 
# 562
}; 
# 567
template< class _Tp> 
# 568
struct is_reference : public __or_< is_lvalue_reference< _Tp> , is_rvalue_reference< _Tp> > ::type { 
# 571
}; 
# 574
template< class _Tp> 
# 575
struct is_arithmetic : public __or_< is_integral< _Tp> , is_floating_point< _Tp> > ::type { 
# 577
}; 
# 580
template< class _Tp> 
# 581
struct is_fundamental : public __or_< is_arithmetic< _Tp> , is_void< _Tp> , is_null_pointer< _Tp> > ::type { 
# 584
}; 
# 587
template< class _Tp> 
# 588
struct is_object : public __not_< __or_< is_function< _Tp> , is_reference< _Tp> , is_void< _Tp> > > ::type { 
# 591
}; 
# 593
template< class > struct is_member_pointer; 
# 597
template< class _Tp> 
# 598
struct is_scalar : public __or_< is_arithmetic< _Tp> , is_enum< _Tp> , is_pointer< _Tp> , is_member_pointer< _Tp> , is_null_pointer< _Tp> > ::type { 
# 601
}; 
# 604
template< class _Tp> 
# 605
struct is_compound : public integral_constant< bool, !is_fundamental< _Tp> ::value>  { 
# 606
}; 
# 608
template< class _Tp> 
# 609
struct __is_member_pointer_helper : public false_type { 
# 610
}; 
# 612
template< class _Tp, class _Cp> 
# 613
struct __is_member_pointer_helper< _Tp (_Cp::*)>  : public true_type { 
# 614
}; 
# 617
template< class _Tp> 
# 618
struct is_member_pointer : public __is_member_pointer_helper< typename remove_cv< _Tp> ::type> ::type { 
# 620
}; 
# 624
template< class _Tp> 
# 625
struct __is_referenceable : public __or_< is_object< _Tp> , is_reference< _Tp> > ::type { 
# 627
}; 
# 629
template< class _Res, class ..._Args> 
# 630
struct __is_referenceable< _Res (_Args ...)>  : public true_type { 
# 632
}; 
# 634
template< class _Res, class ..._Args> 
# 635
struct __is_referenceable< _Res (_Args ..., ...)>  : public true_type { 
# 637
}; 
# 642
template< class > 
# 643
struct is_const : public false_type { 
# 644
}; 
# 646
template< class _Tp> 
# 647
struct is_const< const _Tp>  : public true_type { 
# 648
}; 
# 651
template< class > 
# 652
struct is_volatile : public false_type { 
# 653
}; 
# 655
template< class _Tp> 
# 656
struct is_volatile< volatile _Tp>  : public true_type { 
# 657
}; 
# 660
template< class _Tp> 
# 661
struct is_trivial : public integral_constant< bool, __is_trivial(_Tp)>  { 
# 663
}; 
# 666
template< class _Tp> 
# 667
struct is_trivially_copyable : public integral_constant< bool, __is_trivially_copyable(_Tp)>  { 
# 669
}; 
# 672
template< class _Tp> 
# 673
struct is_standard_layout : public integral_constant< bool, __is_standard_layout(_Tp)>  { 
# 675
}; 
# 679
template< class _Tp> 
# 680
struct is_pod : public integral_constant< bool, __is_pod(_Tp)>  { 
# 682
}; 
# 685
template< class _Tp> 
# 686
struct is_literal_type : public integral_constant< bool, __is_literal_type(_Tp)>  { 
# 688
}; 
# 691
template< class _Tp> 
# 692
struct is_empty : public integral_constant< bool, __is_empty(_Tp)>  { 
# 694
}; 
# 697
template< class _Tp> 
# 698
struct is_polymorphic : public integral_constant< bool, __is_polymorphic(_Tp)>  { 
# 700
}; 
# 705
template< class _Tp> 
# 706
struct is_final : public integral_constant< bool, __is_final(_Tp)>  { 
# 708
}; 
# 712
template< class _Tp> 
# 713
struct is_abstract : public integral_constant< bool, __is_abstract(_Tp)>  { 
# 715
}; 
# 717
template< class _Tp, bool 
# 718
 = is_arithmetic< _Tp> ::value> 
# 719
struct __is_signed_helper : public false_type { 
# 720
}; 
# 722
template< class _Tp> 
# 723
struct __is_signed_helper< _Tp, true>  : public integral_constant< bool, ((_Tp)(-1)) < ((_Tp)0)>  { 
# 725
}; 
# 728
template< class _Tp> 
# 729
struct is_signed : public __is_signed_helper< _Tp> ::type { 
# 731
}; 
# 734
template< class _Tp> 
# 735
struct is_unsigned : public __and_< is_arithmetic< _Tp> , __not_< is_signed< _Tp> > >  { 
# 737
}; 
# 747 "/usr/include/c++/8/type_traits" 3
template< class _Tp, class _Up = _Tp &&> _Up __declval(int); 
# 751
template< class _Tp> _Tp __declval(long); 
# 755
template< class _Tp> auto declval() noexcept->__decltype((__declval< _Tp> (0))); 
# 758
template< class , unsigned  = 0U> struct extent; 
# 761
template< class > struct remove_all_extents; 
# 764
template< class _Tp> 
# 765
struct __is_array_known_bounds : public integral_constant< bool, (extent< _Tp> ::value > 0)>  { 
# 767
}; 
# 769
template< class _Tp> 
# 770
struct __is_array_unknown_bounds : public __and_< is_array< _Tp> , __not_< extent< _Tp> > >  { 
# 772
}; 
# 779
struct __do_is_destructible_impl { 
# 781
template< class _Tp, class  = __decltype(((declval< _Tp &> ().~_Tp())))> static true_type __test(int); 
# 784
template< class > static false_type __test(...); 
# 786
}; 
# 788
template< class _Tp> 
# 789
struct __is_destructible_impl : public __do_is_destructible_impl { 
# 792
typedef __decltype((__test< _Tp> (0))) type; 
# 793
}; 
# 795
template< class _Tp, bool 
# 796
 = __or_< is_void< _Tp> , __is_array_unknown_bounds< _Tp> , is_function< _Tp> > ::value, bool 
# 799
 = __or_< is_reference< _Tp> , is_scalar< _Tp> > ::value> struct __is_destructible_safe; 
# 802
template< class _Tp> 
# 803
struct __is_destructible_safe< _Tp, false, false>  : public __is_destructible_impl< typename remove_all_extents< _Tp> ::type> ::type { 
# 806
}; 
# 808
template< class _Tp> 
# 809
struct __is_destructible_safe< _Tp, true, false>  : public false_type { 
# 810
}; 
# 812
template< class _Tp> 
# 813
struct __is_destructible_safe< _Tp, false, true>  : public true_type { 
# 814
}; 
# 817
template< class _Tp> 
# 818
struct is_destructible : public __is_destructible_safe< _Tp> ::type { 
# 820
}; 
# 826
struct __do_is_nt_destructible_impl { 
# 828
template< class _Tp> static integral_constant< bool, noexcept((declval< _Tp &> ().~_Tp()))>  __test(int); 
# 832
template< class > static false_type __test(...); 
# 834
}; 
# 836
template< class _Tp> 
# 837
struct __is_nt_destructible_impl : public __do_is_nt_destructible_impl { 
# 840
typedef __decltype((__test< _Tp> (0))) type; 
# 841
}; 
# 843
template< class _Tp, bool 
# 844
 = __or_< is_void< _Tp> , __is_array_unknown_bounds< _Tp> , is_function< _Tp> > ::value, bool 
# 847
 = __or_< is_reference< _Tp> , is_scalar< _Tp> > ::value> struct __is_nt_destructible_safe; 
# 850
template< class _Tp> 
# 851
struct __is_nt_destructible_safe< _Tp, false, false>  : public __is_nt_destructible_impl< typename remove_all_extents< _Tp> ::type> ::type { 
# 854
}; 
# 856
template< class _Tp> 
# 857
struct __is_nt_destructible_safe< _Tp, true, false>  : public false_type { 
# 858
}; 
# 860
template< class _Tp> 
# 861
struct __is_nt_destructible_safe< _Tp, false, true>  : public true_type { 
# 862
}; 
# 865
template< class _Tp> 
# 866
struct is_nothrow_destructible : public __is_nt_destructible_safe< _Tp> ::type { 
# 868
}; 
# 871
template< class _Tp, class ..._Args> 
# 872
struct is_constructible : public __bool_constant< __is_constructible(_Tp, _Args...)>  { 
# 874
}; 
# 877
template< class _Tp> 
# 878
struct is_default_constructible : public is_constructible< _Tp> ::type { 
# 880
}; 
# 882
template< class _Tp, bool  = __is_referenceable< _Tp> ::value> struct __is_copy_constructible_impl; 
# 885
template< class _Tp> 
# 886
struct __is_copy_constructible_impl< _Tp, false>  : public false_type { 
# 887
}; 
# 889
template< class _Tp> 
# 890
struct __is_copy_constructible_impl< _Tp, true>  : public is_constructible< _Tp, const _Tp &>  { 
# 892
}; 
# 895
template< class _Tp> 
# 896
struct is_copy_constructible : public __is_copy_constructible_impl< _Tp>  { 
# 898
}; 
# 900
template< class _Tp, bool  = __is_referenceable< _Tp> ::value> struct __is_move_constructible_impl; 
# 903
template< class _Tp> 
# 904
struct __is_move_constructible_impl< _Tp, false>  : public false_type { 
# 905
}; 
# 907
template< class _Tp> 
# 908
struct __is_move_constructible_impl< _Tp, true>  : public is_constructible< _Tp, _Tp &&>  { 
# 910
}; 
# 913
template< class _Tp> 
# 914
struct is_move_constructible : public __is_move_constructible_impl< _Tp>  { 
# 916
}; 
# 918
template< class _Tp> 
# 919
struct __is_nt_default_constructible_atom : public integral_constant< bool, noexcept((_Tp()))>  { 
# 921
}; 
# 923
template< class _Tp, bool  = is_array< _Tp> ::value> struct __is_nt_default_constructible_impl; 
# 926
template< class _Tp> 
# 927
struct __is_nt_default_constructible_impl< _Tp, true>  : public __and_< __is_array_known_bounds< _Tp> , __is_nt_default_constructible_atom< typename remove_all_extents< _Tp> ::type> >  { 
# 931
}; 
# 933
template< class _Tp> 
# 934
struct __is_nt_default_constructible_impl< _Tp, false>  : public __is_nt_default_constructible_atom< _Tp>  { 
# 936
}; 
# 939
template< class _Tp> 
# 940
struct is_nothrow_default_constructible : public __and_< is_default_constructible< _Tp> , __is_nt_default_constructible_impl< _Tp> >  { 
# 943
}; 
# 945
template< class _Tp, class ..._Args> 
# 946
struct __is_nt_constructible_impl : public integral_constant< bool, noexcept((_Tp(declval< _Args> ()...)))>  { 
# 948
}; 
# 950
template< class _Tp, class _Arg> 
# 951
struct __is_nt_constructible_impl< _Tp, _Arg>  : public integral_constant< bool, noexcept((static_cast< _Tp>(declval< _Arg> ())))>  { 
# 954
}; 
# 956
template< class _Tp> 
# 957
struct __is_nt_constructible_impl< _Tp>  : public is_nothrow_default_constructible< _Tp>  { 
# 959
}; 
# 962
template< class _Tp, class ..._Args> 
# 963
struct is_nothrow_constructible : public __and_< is_constructible< _Tp, _Args...> , __is_nt_constructible_impl< _Tp, _Args...> >  { 
# 966
}; 
# 968
template< class _Tp, bool  = __is_referenceable< _Tp> ::value> struct __is_nothrow_copy_constructible_impl; 
# 971
template< class _Tp> 
# 972
struct __is_nothrow_copy_constructible_impl< _Tp, false>  : public false_type { 
# 973
}; 
# 975
template< class _Tp> 
# 976
struct __is_nothrow_copy_constructible_impl< _Tp, true>  : public is_nothrow_constructible< _Tp, const _Tp &>  { 
# 978
}; 
# 981
template< class _Tp> 
# 982
struct is_nothrow_copy_constructible : public __is_nothrow_copy_constructible_impl< _Tp>  { 
# 984
}; 
# 986
template< class _Tp, bool  = __is_referenceable< _Tp> ::value> struct __is_nothrow_move_constructible_impl; 
# 989
template< class _Tp> 
# 990
struct __is_nothrow_move_constructible_impl< _Tp, false>  : public false_type { 
# 991
}; 
# 993
template< class _Tp> 
# 994
struct __is_nothrow_move_constructible_impl< _Tp, true>  : public is_nothrow_constructible< _Tp, _Tp &&>  { 
# 996
}; 
# 999
template< class _Tp> 
# 1000
struct is_nothrow_move_constructible : public __is_nothrow_move_constructible_impl< _Tp>  { 
# 1002
}; 
# 1005
template< class _Tp, class _Up> 
# 1006
struct is_assignable : public __bool_constant< __is_assignable(_Tp, _Up)>  { 
# 1008
}; 
# 1010
template< class _Tp, bool  = __is_referenceable< _Tp> ::value> struct __is_copy_assignable_impl; 
# 1013
template< class _Tp> 
# 1014
struct __is_copy_assignable_impl< _Tp, false>  : public false_type { 
# 1015
}; 
# 1017
template< class _Tp> 
# 1018
struct __is_copy_assignable_impl< _Tp, true>  : public is_assignable< _Tp &, const _Tp &>  { 
# 1020
}; 
# 1023
template< class _Tp> 
# 1024
struct is_copy_assignable : public __is_copy_assignable_impl< _Tp>  { 
# 1026
}; 
# 1028
template< class _Tp, bool  = __is_referenceable< _Tp> ::value> struct __is_move_assignable_impl; 
# 1031
template< class _Tp> 
# 1032
struct __is_move_assignable_impl< _Tp, false>  : public false_type { 
# 1033
}; 
# 1035
template< class _Tp> 
# 1036
struct __is_move_assignable_impl< _Tp, true>  : public is_assignable< _Tp &, _Tp &&>  { 
# 1038
}; 
# 1041
template< class _Tp> 
# 1042
struct is_move_assignable : public __is_move_assignable_impl< _Tp>  { 
# 1044
}; 
# 1046
template< class _Tp, class _Up> 
# 1047
struct __is_nt_assignable_impl : public integral_constant< bool, noexcept((declval< _Tp> () = declval< _Up> ()))>  { 
# 1049
}; 
# 1052
template< class _Tp, class _Up> 
# 1053
struct is_nothrow_assignable : public __and_< is_assignable< _Tp, _Up> , __is_nt_assignable_impl< _Tp, _Up> >  { 
# 1056
}; 
# 1058
template< class _Tp, bool  = __is_referenceable< _Tp> ::value> struct __is_nt_copy_assignable_impl; 
# 1061
template< class _Tp> 
# 1062
struct __is_nt_copy_assignable_impl< _Tp, false>  : public false_type { 
# 1063
}; 
# 1065
template< class _Tp> 
# 1066
struct __is_nt_copy_assignable_impl< _Tp, true>  : public is_nothrow_assignable< _Tp &, const _Tp &>  { 
# 1068
}; 
# 1071
template< class _Tp> 
# 1072
struct is_nothrow_copy_assignable : public __is_nt_copy_assignable_impl< _Tp>  { 
# 1074
}; 
# 1076
template< class _Tp, bool  = __is_referenceable< _Tp> ::value> struct __is_nt_move_assignable_impl; 
# 1079
template< class _Tp> 
# 1080
struct __is_nt_move_assignable_impl< _Tp, false>  : public false_type { 
# 1081
}; 
# 1083
template< class _Tp> 
# 1084
struct __is_nt_move_assignable_impl< _Tp, true>  : public is_nothrow_assignable< _Tp &, _Tp &&>  { 
# 1086
}; 
# 1089
template< class _Tp> 
# 1090
struct is_nothrow_move_assignable : public __is_nt_move_assignable_impl< _Tp>  { 
# 1092
}; 
# 1095
template< class _Tp, class ..._Args> 
# 1096
struct is_trivially_constructible : public __and_< is_constructible< _Tp, _Args...> , __bool_constant< __is_trivially_constructible(_Tp, _Args...)> > ::type { 
# 1099
}; 
# 1102
template< class _Tp> 
# 1103
struct is_trivially_default_constructible : public is_trivially_constructible< _Tp> ::type { 
# 1105
}; 
# 1107
struct __do_is_implicitly_default_constructible_impl { 
# 1109
template< class _Tp> static void __helper(const _Tp &); 
# 1112
template< class _Tp> static true_type __test(const _Tp &, __decltype((__helper< const _Tp &> ({}))) * = 0); 
# 1116
static false_type __test(...); 
# 1117
}; 
# 1119
template< class _Tp> 
# 1120
struct __is_implicitly_default_constructible_impl : public __do_is_implicitly_default_constructible_impl { 
# 1123
typedef __decltype((__test(declval< _Tp> ()))) type; 
# 1124
}; 
# 1126
template< class _Tp> 
# 1127
struct __is_implicitly_default_constructible_safe : public __is_implicitly_default_constructible_impl< _Tp> ::type { 
# 1129
}; 
# 1131
template< class _Tp> 
# 1132
struct __is_implicitly_default_constructible : public __and_< is_default_constructible< _Tp> , __is_implicitly_default_constructible_safe< _Tp> >  { 
# 1135
}; 
# 1139
template< class _Tp, bool  = __is_referenceable< _Tp> ::value> struct __is_trivially_copy_constructible_impl; 
# 1142
template< class _Tp> 
# 1143
struct __is_trivially_copy_constructible_impl< _Tp, false>  : public false_type { 
# 1144
}; 
# 1146
template< class _Tp> 
# 1147
struct __is_trivially_copy_constructible_impl< _Tp, true>  : public __and_< is_copy_constructible< _Tp> , integral_constant< bool, __is_trivially_constructible(_Tp, const _Tp &)> >  { 
# 1151
}; 
# 1153
template< class _Tp> 
# 1154
struct is_trivially_copy_constructible : public __is_trivially_copy_constructible_impl< _Tp>  { 
# 1156
}; 
# 1160
template< class _Tp, bool  = __is_referenceable< _Tp> ::value> struct __is_trivially_move_constructible_impl; 
# 1163
template< class _Tp> 
# 1164
struct __is_trivially_move_constructible_impl< _Tp, false>  : public false_type { 
# 1165
}; 
# 1167
template< class _Tp> 
# 1168
struct __is_trivially_move_constructible_impl< _Tp, true>  : public __and_< is_move_constructible< _Tp> , integral_constant< bool, __is_trivially_constructible(_Tp, _Tp &&)> >  { 
# 1172
}; 
# 1174
template< class _Tp> 
# 1175
struct is_trivially_move_constructible : public __is_trivially_move_constructible_impl< _Tp>  { 
# 1177
}; 
# 1180
template< class _Tp, class _Up> 
# 1181
struct is_trivially_assignable : public __bool_constant< __is_trivially_assignable(_Tp, _Up)>  { 
# 1183
}; 
# 1187
template< class _Tp, bool  = __is_referenceable< _Tp> ::value> struct __is_trivially_copy_assignable_impl; 
# 1190
template< class _Tp> 
# 1191
struct __is_trivially_copy_assignable_impl< _Tp, false>  : public false_type { 
# 1192
}; 
# 1194
template< class _Tp> 
# 1195
struct __is_trivially_copy_assignable_impl< _Tp, true>  : public __and_< is_copy_assignable< _Tp> , integral_constant< bool, __is_trivially_assignable(_Tp &, const _Tp &)> >  { 
# 1199
}; 
# 1201
template< class _Tp> 
# 1202
struct is_trivially_copy_assignable : public __is_trivially_copy_assignable_impl< _Tp>  { 
# 1204
}; 
# 1208
template< class _Tp, bool  = __is_referenceable< _Tp> ::value> struct __is_trivially_move_assignable_impl; 
# 1211
template< class _Tp> 
# 1212
struct __is_trivially_move_assignable_impl< _Tp, false>  : public false_type { 
# 1213
}; 
# 1215
template< class _Tp> 
# 1216
struct __is_trivially_move_assignable_impl< _Tp, true>  : public __and_< is_move_assignable< _Tp> , integral_constant< bool, __is_trivially_assignable(_Tp &, _Tp &&)> >  { 
# 1220
}; 
# 1222
template< class _Tp> 
# 1223
struct is_trivially_move_assignable : public __is_trivially_move_assignable_impl< _Tp>  { 
# 1225
}; 
# 1228
template< class _Tp> 
# 1229
struct is_trivially_destructible : public __and_< is_destructible< _Tp> , integral_constant< bool, __has_trivial_destructor(_Tp)> >  { 
# 1232
}; 
# 1236
template< class _Tp> 
# 1237
struct has_virtual_destructor : public integral_constant< bool, __has_virtual_destructor(_Tp)>  { 
# 1239
}; 
# 1245
template< class _Tp> 
# 1246
struct alignment_of : public integral_constant< unsigned long, __alignof__(_Tp)>  { 
# 1247
}; 
# 1250
template< class > 
# 1251
struct rank : public integral_constant< unsigned long, 0UL>  { 
# 1252
}; 
# 1254
template< class _Tp, size_t _Size> 
# 1255
struct rank< _Tp [_Size]>  : public integral_constant< unsigned long, 1 + std::rank< _Tp> ::value>  { 
# 1256
}; 
# 1258
template< class _Tp> 
# 1259
struct rank< _Tp []>  : public integral_constant< unsigned long, 1 + std::rank< _Tp> ::value>  { 
# 1260
}; 
# 1263
template< class , unsigned _Uint> 
# 1264
struct extent : public integral_constant< unsigned long, 0UL>  { 
# 1265
}; 
# 1267
template< class _Tp, unsigned _Uint, size_t _Size> 
# 1268
struct extent< _Tp [_Size], _Uint>  : public integral_constant< unsigned long, (_Uint == (0)) ? _Size : std::extent< _Tp, _Uint - (1)> ::value>  { 
# 1272
}; 
# 1274
template< class _Tp, unsigned _Uint> 
# 1275
struct extent< _Tp [], _Uint>  : public integral_constant< unsigned long, (_Uint == (0)) ? 0 : std::extent< _Tp, _Uint - (1)> ::value>  { 
# 1279
}; 
# 1285
template< class , class > 
# 1286
struct is_same : public false_type { 
# 1287
}; 
# 1289
template< class _Tp> 
# 1290
struct is_same< _Tp, _Tp>  : public true_type { 
# 1291
}; 
# 1294
template< class _Base, class _Derived> 
# 1295
struct is_base_of : public integral_constant< bool, __is_base_of(_Base, _Derived)>  { 
# 1297
}; 
# 1299
template< class _From, class _To, bool 
# 1300
 = __or_< is_void< _From> , is_function< _To> , is_array< _To> > ::value> 
# 1302
struct __is_convertible_helper { 
# 1303
typedef typename is_void< _To> ::type type; }; 
# 1305
template< class _From, class _To> 
# 1306
class __is_convertible_helper< _From, _To, false>  { 
# 1308
template< class _To1> static void __test_aux(_To1); 
# 1311
template< class _From1, class _To1, class 
# 1312
 = __decltype((__test_aux< _To1> (std::declval< _From1> ())))> static true_type 
# 1311
__test(int); 
# 1316
template< class , class > static false_type __test(...); 
# 1321
public: typedef __decltype((__test< _From, _To> (0))) type; 
# 1322
}; 
# 1326
template< class _From, class _To> 
# 1327
struct is_convertible : public __is_convertible_helper< _From, _To> ::type { 
# 1329
}; 
# 1335
template< class _Tp> 
# 1336
struct remove_const { 
# 1337
typedef _Tp type; }; 
# 1339
template< class _Tp> 
# 1340
struct remove_const< const _Tp>  { 
# 1341
typedef _Tp type; }; 
# 1344
template< class _Tp> 
# 1345
struct remove_volatile { 
# 1346
typedef _Tp type; }; 
# 1348
template< class _Tp> 
# 1349
struct remove_volatile< volatile _Tp>  { 
# 1350
typedef _Tp type; }; 
# 1353
template< class _Tp> 
# 1354
struct remove_cv { 
# 1357
typedef typename remove_const< typename remove_volatile< _Tp> ::type> ::type type; 
# 1358
}; 
# 1361
template< class _Tp> 
# 1362
struct add_const { 
# 1363
typedef const _Tp type; }; 
# 1366
template< class _Tp> 
# 1367
struct add_volatile { 
# 1368
typedef volatile _Tp type; }; 
# 1371
template< class _Tp> 
# 1372
struct add_cv { 
# 1375
typedef typename add_const< typename add_volatile< _Tp> ::type> ::type type; 
# 1376
}; 
# 1383
template< class _Tp> using remove_const_t = typename remove_const< _Tp> ::type; 
# 1387
template< class _Tp> using remove_volatile_t = typename remove_volatile< _Tp> ::type; 
# 1391
template< class _Tp> using remove_cv_t = typename remove_cv< _Tp> ::type; 
# 1395
template< class _Tp> using add_const_t = typename add_const< _Tp> ::type; 
# 1399
template< class _Tp> using add_volatile_t = typename add_volatile< _Tp> ::type; 
# 1403
template< class _Tp> using add_cv_t = typename add_cv< _Tp> ::type; 
# 1410
template< class _Tp> 
# 1411
struct remove_reference { 
# 1412
typedef _Tp type; }; 
# 1414
template< class _Tp> 
# 1415
struct remove_reference< _Tp &>  { 
# 1416
typedef _Tp type; }; 
# 1418
template< class _Tp> 
# 1419
struct remove_reference< _Tp &&>  { 
# 1420
typedef _Tp type; }; 
# 1422
template< class _Tp, bool  = __is_referenceable< _Tp> ::value> 
# 1423
struct __add_lvalue_reference_helper { 
# 1424
typedef _Tp type; }; 
# 1426
template< class _Tp> 
# 1427
struct __add_lvalue_reference_helper< _Tp, true>  { 
# 1428
typedef _Tp &type; }; 
# 1431
template< class _Tp> 
# 1432
struct add_lvalue_reference : public __add_lvalue_reference_helper< _Tp>  { 
# 1434
}; 
# 1436
template< class _Tp, bool  = __is_referenceable< _Tp> ::value> 
# 1437
struct __add_rvalue_reference_helper { 
# 1438
typedef _Tp type; }; 
# 1440
template< class _Tp> 
# 1441
struct __add_rvalue_reference_helper< _Tp, true>  { 
# 1442
typedef _Tp &&type; }; 
# 1445
template< class _Tp> 
# 1446
struct add_rvalue_reference : public __add_rvalue_reference_helper< _Tp>  { 
# 1448
}; 
# 1452
template< class _Tp> using remove_reference_t = typename remove_reference< _Tp> ::type; 
# 1456
template< class _Tp> using add_lvalue_reference_t = typename add_lvalue_reference< _Tp> ::type; 
# 1460
template< class _Tp> using add_rvalue_reference_t = typename add_rvalue_reference< _Tp> ::type; 
# 1467
template< class _Unqualified, bool _IsConst, bool _IsVol> struct __cv_selector; 
# 1470
template< class _Unqualified> 
# 1471
struct __cv_selector< _Unqualified, false, false>  { 
# 1472
typedef _Unqualified __type; }; 
# 1474
template< class _Unqualified> 
# 1475
struct __cv_selector< _Unqualified, false, true>  { 
# 1476
typedef volatile _Unqualified __type; }; 
# 1478
template< class _Unqualified> 
# 1479
struct __cv_selector< _Unqualified, true, false>  { 
# 1480
typedef const _Unqualified __type; }; 
# 1482
template< class _Unqualified> 
# 1483
struct __cv_selector< _Unqualified, true, true>  { 
# 1484
typedef const volatile _Unqualified __type; }; 
# 1486
template< class _Qualified, class _Unqualified, bool 
# 1487
_IsConst = is_const< _Qualified> ::value, bool 
# 1488
_IsVol = is_volatile< _Qualified> ::value> 
# 1489
class __match_cv_qualifiers { 
# 1491
typedef __cv_selector< _Unqualified, _IsConst, _IsVol>  __match; 
# 1494
public: typedef typename __cv_selector< _Unqualified, _IsConst, _IsVol> ::__type __type; 
# 1495
}; 
# 1498
template< class _Tp> 
# 1499
struct __make_unsigned { 
# 1500
typedef _Tp __type; }; 
# 1503
template<> struct __make_unsigned< char>  { 
# 1504
typedef unsigned char __type; }; 
# 1507
template<> struct __make_unsigned< signed char>  { 
# 1508
typedef unsigned char __type; }; 
# 1511
template<> struct __make_unsigned< short>  { 
# 1512
typedef unsigned short __type; }; 
# 1515
template<> struct __make_unsigned< int>  { 
# 1516
typedef unsigned __type; }; 
# 1519
template<> struct __make_unsigned< long>  { 
# 1520
typedef unsigned long __type; }; 
# 1523
template<> struct __make_unsigned< long long>  { 
# 1524
typedef unsigned long long __type; }; 
# 1528
template<> struct __make_unsigned< __int128_t>  { 
# 1529
typedef __uint128_t __type; }; 
# 1548 "/usr/include/c++/8/type_traits" 3
template< class _Tp, bool 
# 1549
_IsInt = is_integral< _Tp> ::value, bool 
# 1550
_IsEnum = is_enum< _Tp> ::value> class __make_unsigned_selector; 
# 1553
template< class _Tp> 
# 1554
class __make_unsigned_selector< _Tp, true, false>  { 
# 1556
typedef __make_unsigned< typename remove_cv< _Tp> ::type>  __unsignedt; 
# 1557
typedef typename __make_unsigned< typename remove_cv< _Tp> ::type> ::__type __unsigned_type; 
# 1558
typedef __match_cv_qualifiers< _Tp, typename __make_unsigned< typename remove_cv< _Tp> ::type> ::__type>  __cv_unsigned; 
# 1561
public: typedef typename __match_cv_qualifiers< _Tp, typename __make_unsigned< typename remove_cv< _Tp> ::type> ::__type> ::__type __type; 
# 1562
}; 
# 1564
template< class _Tp> 
# 1565
class __make_unsigned_selector< _Tp, false, true>  { 
# 1568
typedef unsigned char __smallest; 
# 1569
static const bool __b0 = (sizeof(_Tp) <= sizeof(__smallest)); 
# 1570
static const bool __b1 = (sizeof(_Tp) <= sizeof(unsigned short)); 
# 1571
static const bool __b2 = (sizeof(_Tp) <= sizeof(unsigned)); 
# 1572
static const bool __b3 = (sizeof(_Tp) <= sizeof(unsigned long)); 
# 1573
typedef conditional< __b3, unsigned long, unsigned long long>  __cond3; 
# 1574
typedef typename conditional< __b3, unsigned long, unsigned long long> ::type __cond3_type; 
# 1575
typedef conditional< __b2, unsigned, typename conditional< __b3, unsigned long, unsigned long long> ::type>  __cond2; 
# 1576
typedef typename conditional< __b2, unsigned, typename conditional< __b3, unsigned long, unsigned long long> ::type> ::type __cond2_type; 
# 1577
typedef conditional< __b1, unsigned short, typename conditional< __b2, unsigned, typename conditional< __b3, unsigned long, unsigned long long> ::type> ::type>  __cond1; 
# 1578
typedef typename conditional< __b1, unsigned short, typename conditional< __b2, unsigned, typename conditional< __b3, unsigned long, unsigned long long> ::type> ::type> ::type __cond1_type; 
# 1581
typedef typename conditional< __b0, unsigned char, typename conditional< __b1, unsigned short, typename conditional< __b2, unsigned, typename conditional< __b3, unsigned long, unsigned long long> ::type> ::type> ::type> ::type __unsigned_type; 
# 1582
typedef __match_cv_qualifiers< _Tp, typename conditional< __b0, unsigned char, typename conditional< __b1, unsigned short, typename conditional< __b2, unsigned, typename conditional< __b3, unsigned long, unsigned long long> ::type> ::type> ::type> ::type>  __cv_unsigned; 
# 1585
public: typedef typename __match_cv_qualifiers< _Tp, typename conditional< __b0, unsigned char, typename conditional< __b1, unsigned short, typename conditional< __b2, unsigned, typename conditional< __b3, unsigned long, unsigned long long> ::type> ::type> ::type> ::type> ::__type __type; 
# 1586
}; 
# 1592
template< class _Tp> 
# 1593
struct make_unsigned { 
# 1594
typedef typename __make_unsigned_selector< _Tp> ::__type type; }; 
# 1598
template<> struct make_unsigned< bool> ; 
# 1602
template< class _Tp> 
# 1603
struct __make_signed { 
# 1604
typedef _Tp __type; }; 
# 1607
template<> struct __make_signed< char>  { 
# 1608
typedef signed char __type; }; 
# 1611
template<> struct __make_signed< unsigned char>  { 
# 1612
typedef signed char __type; }; 
# 1615
template<> struct __make_signed< unsigned short>  { 
# 1616
typedef signed short __type; }; 
# 1619
template<> struct __make_signed< unsigned>  { 
# 1620
typedef signed int __type; }; 
# 1623
template<> struct __make_signed< unsigned long>  { 
# 1624
typedef signed long __type; }; 
# 1627
template<> struct __make_signed< unsigned long long>  { 
# 1628
typedef signed long long __type; }; 
# 1632
template<> struct __make_signed< __uint128_t>  { 
# 1633
typedef __int128_t __type; }; 
# 1652 "/usr/include/c++/8/type_traits" 3
template< class _Tp, bool 
# 1653
_IsInt = is_integral< _Tp> ::value, bool 
# 1654
_IsEnum = is_enum< _Tp> ::value> class __make_signed_selector; 
# 1657
template< class _Tp> 
# 1658
class __make_signed_selector< _Tp, true, false>  { 
# 1660
typedef __make_signed< typename remove_cv< _Tp> ::type>  __signedt; 
# 1661
typedef typename __make_signed< typename remove_cv< _Tp> ::type> ::__type __signed_type; 
# 1662
typedef __match_cv_qualifiers< _Tp, typename __make_signed< typename remove_cv< _Tp> ::type> ::__type>  __cv_signed; 
# 1665
public: typedef typename __match_cv_qualifiers< _Tp, typename __make_signed< typename remove_cv< _Tp> ::type> ::__type> ::__type __type; 
# 1666
}; 
# 1668
template< class _Tp> 
# 1669
class __make_signed_selector< _Tp, false, true>  { 
# 1671
typedef typename __make_unsigned_selector< _Tp> ::__type __unsigned_type; 
# 1674
public: typedef typename std::__make_signed_selector< typename __make_unsigned_selector< _Tp> ::__type> ::__type __type; 
# 1675
}; 
# 1681
template< class _Tp> 
# 1682
struct make_signed { 
# 1683
typedef typename __make_signed_selector< _Tp> ::__type type; }; 
# 1687
template<> struct make_signed< bool> ; 
# 1691
template< class _Tp> using make_signed_t = typename make_signed< _Tp> ::type; 
# 1695
template< class _Tp> using make_unsigned_t = typename make_unsigned< _Tp> ::type; 
# 1702
template< class _Tp> 
# 1703
struct remove_extent { 
# 1704
typedef _Tp type; }; 
# 1706
template< class _Tp, size_t _Size> 
# 1707
struct remove_extent< _Tp [_Size]>  { 
# 1708
typedef _Tp type; }; 
# 1710
template< class _Tp> 
# 1711
struct remove_extent< _Tp []>  { 
# 1712
typedef _Tp type; }; 
# 1715
template< class _Tp> 
# 1716
struct remove_all_extents { 
# 1717
typedef _Tp type; }; 
# 1719
template< class _Tp, size_t _Size> 
# 1720
struct remove_all_extents< _Tp [_Size]>  { 
# 1721
typedef typename std::remove_all_extents< _Tp> ::type type; }; 
# 1723
template< class _Tp> 
# 1724
struct remove_all_extents< _Tp []>  { 
# 1725
typedef typename std::remove_all_extents< _Tp> ::type type; }; 
# 1729
template< class _Tp> using remove_extent_t = typename remove_extent< _Tp> ::type; 
# 1733
template< class _Tp> using remove_all_extents_t = typename remove_all_extents< _Tp> ::type; 
# 1739
template< class _Tp, class > 
# 1740
struct __remove_pointer_helper { 
# 1741
typedef _Tp type; }; 
# 1743
template< class _Tp, class _Up> 
# 1744
struct __remove_pointer_helper< _Tp, _Up *>  { 
# 1745
typedef _Up type; }; 
# 1748
template< class _Tp> 
# 1749
struct remove_pointer : public __remove_pointer_helper< _Tp, typename remove_cv< _Tp> ::type>  { 
# 1751
}; 
# 1754
template< class _Tp, bool  = __or_< __is_referenceable< _Tp> , is_void< _Tp> > ::value> 
# 1756
struct __add_pointer_helper { 
# 1757
typedef _Tp type; }; 
# 1759
template< class _Tp> 
# 1760
struct __add_pointer_helper< _Tp, true>  { 
# 1761
typedef typename remove_reference< _Tp> ::type *type; }; 
# 1763
template< class _Tp> 
# 1764
struct add_pointer : public __add_pointer_helper< _Tp>  { 
# 1766
}; 
# 1770
template< class _Tp> using remove_pointer_t = typename remove_pointer< _Tp> ::type; 
# 1774
template< class _Tp> using add_pointer_t = typename add_pointer< _Tp> ::type; 
# 1778
template< size_t _Len> 
# 1779
struct __aligned_storage_msa { 
# 1781
union __type { 
# 1783
unsigned char __data[_Len]; 
# 1784
struct __attribute((__aligned__)) { } __align; 
# 1785
}; 
# 1786
}; 
# 1798 "/usr/include/c++/8/type_traits" 3
template< size_t _Len, size_t _Align = __alignof__(typename __aligned_storage_msa< _Len> ::__type)> 
# 1800
struct aligned_storage { 
# 1802
union type { 
# 1804
unsigned char __data[_Len]; 
# 1805
struct __attribute((__aligned__(_Align))) { } __align; 
# 1806
}; 
# 1807
}; 
# 1809
template< class ..._Types> 
# 1810
struct __strictest_alignment { 
# 1812
static const size_t _S_alignment = (0); 
# 1813
static const size_t _S_size = (0); 
# 1814
}; 
# 1816
template< class _Tp, class ..._Types> 
# 1817
struct __strictest_alignment< _Tp, _Types...>  { 
# 1819
static const size_t _S_alignment = ((__alignof__(_Tp) > __strictest_alignment< _Types...> ::_S_alignment) ? __alignof__(_Tp) : __strictest_alignment< _Types...> ::_S_alignment); 
# 1822
static const size_t _S_size = ((sizeof(_Tp) > __strictest_alignment< _Types...> ::_S_size) ? sizeof(_Tp) : __strictest_alignment< _Types...> ::_S_size); 
# 1825
}; 
# 1837 "/usr/include/c++/8/type_traits" 3
template< size_t _Len, class ..._Types> 
# 1838
struct aligned_union { 
# 1841
static_assert((sizeof...(_Types) != (0)), "At least one type is required");
# 1843
private: using __strictest = __strictest_alignment< _Types...> ; 
# 1844
static const size_t _S_len = ((_Len > __strictest::_S_size) ? _Len : __strictest::_S_size); 
# 1848
public: static const size_t alignment_value = (__strictest::_S_alignment); 
# 1850
typedef typename aligned_storage< _S_len, alignment_value> ::type type; 
# 1851
}; 
# 1853
template< size_t _Len, class ..._Types> const size_t aligned_union< _Len, _Types...> ::alignment_value; 
# 1858
template< class _Up, bool 
# 1859
_IsArray = is_array< _Up> ::value, bool 
# 1860
_IsFunction = is_function< _Up> ::value> struct __decay_selector; 
# 1864
template< class _Up> 
# 1865
struct __decay_selector< _Up, false, false>  { 
# 1866
typedef typename remove_cv< _Up> ::type __type; }; 
# 1868
template< class _Up> 
# 1869
struct __decay_selector< _Up, true, false>  { 
# 1870
typedef typename remove_extent< _Up> ::type *__type; }; 
# 1872
template< class _Up> 
# 1873
struct __decay_selector< _Up, false, true>  { 
# 1874
typedef typename add_pointer< _Up> ::type __type; }; 
# 1877
template< class _Tp> 
# 1878
class decay { 
# 1880
typedef typename remove_reference< _Tp> ::type __remove_type; 
# 1883
public: typedef typename __decay_selector< typename remove_reference< _Tp> ::type> ::__type type; 
# 1884
}; 
# 1886
template< class _Tp> class reference_wrapper; 
# 1890
template< class _Tp> 
# 1891
struct __strip_reference_wrapper { 
# 1893
typedef _Tp __type; 
# 1894
}; 
# 1896
template< class _Tp> 
# 1897
struct __strip_reference_wrapper< reference_wrapper< _Tp> >  { 
# 1899
typedef _Tp &__type; 
# 1900
}; 
# 1902
template< class _Tp> 
# 1903
struct __decay_and_strip { 
# 1906
typedef typename __strip_reference_wrapper< typename decay< _Tp> ::type> ::__type __type; 
# 1907
}; 
# 1912
template< bool , class _Tp = void> 
# 1913
struct enable_if { 
# 1914
}; 
# 1917
template< class _Tp> 
# 1918
struct enable_if< true, _Tp>  { 
# 1919
typedef _Tp type; }; 
# 1921
template< class ..._Cond> using _Require = typename enable_if< __and_< _Cond...> ::value> ::type; 
# 1926
template< bool _Cond, class _Iftrue, class _Iffalse> 
# 1927
struct conditional { 
# 1928
typedef _Iftrue type; }; 
# 1931
template< class _Iftrue, class _Iffalse> 
# 1932
struct conditional< false, _Iftrue, _Iffalse>  { 
# 1933
typedef _Iffalse type; }; 
# 1936
template< class ..._Tp> struct common_type; 
# 1941
struct __do_common_type_impl { 
# 1943
template< class _Tp, class _Up> static __success_type< typename decay< __decltype((true ? std::declval< _Tp> () : std::declval< _Up> ()))> ::type>  _S_test(int); 
# 1948
template< class , class > static __failure_type _S_test(...); 
# 1950
}; 
# 1952
template< class _Tp, class _Up> 
# 1953
struct __common_type_impl : private __do_common_type_impl { 
# 1956
typedef __decltype((_S_test< _Tp, _Up> (0))) type; 
# 1957
}; 
# 1959
struct __do_member_type_wrapper { 
# 1961
template< class _Tp> static __success_type< typename _Tp::type>  _S_test(int); 
# 1964
template< class > static __failure_type _S_test(...); 
# 1966
}; 
# 1968
template< class _Tp> 
# 1969
struct __member_type_wrapper : private __do_member_type_wrapper { 
# 1972
typedef __decltype((_S_test< _Tp> (0))) type; 
# 1973
}; 
# 1975
template< class _CTp, class ..._Args> 
# 1976
struct __expanded_common_type_wrapper { 
# 1978
typedef common_type< typename _CTp::type, _Args...>  type; 
# 1979
}; 
# 1981
template< class ..._Args> 
# 1982
struct __expanded_common_type_wrapper< __failure_type, _Args...>  { 
# 1983
typedef __failure_type type; }; 
# 1986
template<> struct common_type< >  { 
# 1987
}; 
# 1989
template< class _Tp> 
# 1990
struct common_type< _Tp>  : public std::common_type< _Tp, _Tp>  { 
# 1992
}; 
# 1994
template< class _Tp, class _Up> 
# 1995
struct common_type< _Tp, _Up>  : public __common_type_impl< _Tp, _Up> ::type { 
# 1997
}; 
# 1999
template< class _Tp, class _Up, class ..._Vp> 
# 2000
struct common_type< _Tp, _Up, _Vp...>  : public __expanded_common_type_wrapper< typename __member_type_wrapper< std::common_type< _Tp, _Up> > ::type, _Vp...> ::type { 
# 2003
}; 
# 2006
template< class _Tp> 
# 2007
struct underlying_type { 
# 2009
typedef __underlying_type(_Tp) type; 
# 2010
}; 
# 2012
template< class _Tp> 
# 2013
struct __declval_protector { 
# 2015
static const bool __stop = false; 
# 2016
}; 
# 2018
template< class _Tp> auto 
# 2019
declval() noexcept->__decltype((__declval< _Tp> (0))) 
# 2020
{ 
# 2021
static_assert((__declval_protector< _Tp> ::__stop), "declval() must not be used!");
# 2023
return __declval< _Tp> (0); 
# 2024
} 
# 2036 "/usr/include/c++/8/type_traits" 3
template<> struct __make_unsigned< wchar_t>  { 
# 2038
using __type = __make_unsigned_selector< wchar_t, false, true> ::__type; 
# 2040
}; 
# 2043
template<> struct __make_signed< wchar_t>  { 
# 2045
using __type = __make_signed_selector< wchar_t, false, true> ::__type; 
# 2047
}; 
# 2051
template<> struct __make_unsigned< char16_t>  { 
# 2053
using __type = __make_unsigned_selector< char16_t, false, true> ::__type; 
# 2055
}; 
# 2058
template<> struct __make_signed< char16_t>  { 
# 2060
using __type = __make_signed_selector< char16_t, false, true> ::__type; 
# 2062
}; 
# 2065
template<> struct __make_unsigned< char32_t>  { 
# 2067
using __type = __make_unsigned_selector< char32_t, false, true> ::__type; 
# 2069
}; 
# 2072
template<> struct __make_signed< char32_t>  { 
# 2074
using __type = __make_signed_selector< char32_t, false, true> ::__type; 
# 2076
}; 
# 2080
template< class _Signature> class result_of; 
# 2087
struct __invoke_memfun_ref { }; 
# 2088
struct __invoke_memfun_deref { }; 
# 2089
struct __invoke_memobj_ref { }; 
# 2090
struct __invoke_memobj_deref { }; 
# 2091
struct __invoke_other { }; 
# 2094
template< class _Tp, class _Tag> 
# 2095
struct __result_of_success : public __success_type< _Tp>  { 
# 2096
using __invoke_type = _Tag; }; 
# 2099
struct __result_of_memfun_ref_impl { 
# 2101
template< class _Fp, class _Tp1, class ..._Args> static __result_of_success< __decltype(((std::declval< _Tp1> ().*std::declval< _Fp> ())(std::declval< _Args> ()...))), __invoke_memfun_ref>  _S_test(int); 
# 2106
template< class ...> static __failure_type _S_test(...); 
# 2108
}; 
# 2110
template< class _MemPtr, class _Arg, class ..._Args> 
# 2111
struct __result_of_memfun_ref : private __result_of_memfun_ref_impl { 
# 2114
typedef __decltype((_S_test< _MemPtr, _Arg, _Args...> (0))) type; 
# 2115
}; 
# 2118
struct __result_of_memfun_deref_impl { 
# 2120
template< class _Fp, class _Tp1, class ..._Args> static __result_of_success< __decltype((((*std::declval< _Tp1> ()).*std::declval< _Fp> ())(std::declval< _Args> ()...))), __invoke_memfun_deref>  _S_test(int); 
# 2125
template< class ...> static __failure_type _S_test(...); 
# 2127
}; 
# 2129
template< class _MemPtr, class _Arg, class ..._Args> 
# 2130
struct __result_of_memfun_deref : private __result_of_memfun_deref_impl { 
# 2133
typedef __decltype((_S_test< _MemPtr, _Arg, _Args...> (0))) type; 
# 2134
}; 
# 2137
struct __result_of_memobj_ref_impl { 
# 2139
template< class _Fp, class _Tp1> static __result_of_success< __decltype((std::declval< _Tp1> ().*std::declval< _Fp> ())), __invoke_memobj_ref>  _S_test(int); 
# 2144
template< class , class > static __failure_type _S_test(...); 
# 2146
}; 
# 2148
template< class _MemPtr, class _Arg> 
# 2149
struct __result_of_memobj_ref : private __result_of_memobj_ref_impl { 
# 2152
typedef __decltype((_S_test< _MemPtr, _Arg> (0))) type; 
# 2153
}; 
# 2156
struct __result_of_memobj_deref_impl { 
# 2158
template< class _Fp, class _Tp1> static __result_of_success< __decltype(((*std::declval< _Tp1> ()).*std::declval< _Fp> ())), __invoke_memobj_deref>  _S_test(int); 
# 2163
template< class , class > static __failure_type _S_test(...); 
# 2165
}; 
# 2167
template< class _MemPtr, class _Arg> 
# 2168
struct __result_of_memobj_deref : private __result_of_memobj_deref_impl { 
# 2171
typedef __decltype((_S_test< _MemPtr, _Arg> (0))) type; 
# 2172
}; 
# 2174
template< class _MemPtr, class _Arg> struct __result_of_memobj; 
# 2177
template< class _Res, class _Class, class _Arg> 
# 2178
struct __result_of_memobj< _Res (_Class::*), _Arg>  { 
# 2181
typedef typename remove_cv< typename remove_reference< _Arg> ::type> ::type _Argval; 
# 2182
typedef _Res (_Class::*_MemPtr); 
# 2187
typedef typename conditional< __or_< is_same< typename remove_cv< typename remove_reference< _Arg> ::type> ::type, _Class> , is_base_of< _Class, typename remove_cv< typename remove_reference< _Arg> ::type> ::type> > ::value, __result_of_memobj_ref< _Res (_Class::*), _Arg> , __result_of_memobj_deref< _Res (_Class::*), _Arg> > ::type::type type; 
# 2188
}; 
# 2190
template< class _MemPtr, class _Arg, class ..._Args> struct __result_of_memfun; 
# 2193
template< class _Res, class _Class, class _Arg, class ..._Args> 
# 2194
struct __result_of_memfun< _Res (_Class::*), _Arg, _Args...>  { 
# 2197
typedef typename remove_cv< typename remove_reference< _Arg> ::type> ::type _Argval; 
# 2198
typedef _Res (_Class::*_MemPtr); 
# 2203
typedef typename conditional< __or_< is_same< typename remove_cv< typename remove_reference< _Arg> ::type> ::type, _Class> , is_base_of< _Class, typename remove_cv< typename remove_reference< _Arg> ::type> ::type> > ::value, __result_of_memfun_ref< _Res (_Class::*), _Arg, _Args...> , __result_of_memfun_deref< _Res (_Class::*), _Arg, _Args...> > ::type::type type; 
# 2204
}; 
# 2211
template< class _Tp, class _Up = typename decay< _Tp> ::type> 
# 2212
struct __inv_unwrap { 
# 2214
using type = _Tp; 
# 2215
}; 
# 2217
template< class _Tp, class _Up> 
# 2218
struct __inv_unwrap< _Tp, reference_wrapper< _Up> >  { 
# 2220
using type = _Up &; 
# 2221
}; 
# 2223
template< bool , bool , class _Functor, class ..._ArgTypes> 
# 2224
struct __result_of_impl { 
# 2226
typedef __failure_type type; 
# 2227
}; 
# 2229
template< class _MemPtr, class _Arg> 
# 2230
struct __result_of_impl< true, false, _MemPtr, _Arg>  : public __result_of_memobj< typename decay< _MemPtr> ::type, typename __inv_unwrap< _Arg> ::type>  { 
# 2233
}; 
# 2235
template< class _MemPtr, class _Arg, class ..._Args> 
# 2236
struct __result_of_impl< false, true, _MemPtr, _Arg, _Args...>  : public __result_of_memfun< typename decay< _MemPtr> ::type, typename __inv_unwrap< _Arg> ::type, _Args...>  { 
# 2239
}; 
# 2242
struct __result_of_other_impl { 
# 2244
template< class _Fn, class ..._Args> static __result_of_success< __decltype((std::declval< _Fn> ()(std::declval< _Args> ()...))), __invoke_other>  _S_test(int); 
# 2249
template< class ...> static __failure_type _S_test(...); 
# 2251
}; 
# 2253
template< class _Functor, class ..._ArgTypes> 
# 2254
struct __result_of_impl< false, false, _Functor, _ArgTypes...>  : private __result_of_other_impl { 
# 2257
typedef __decltype((_S_test< _Functor, _ArgTypes...> (0))) type; 
# 2258
}; 
# 2261
template< class _Functor, class ..._ArgTypes> 
# 2262
struct __invoke_result : public __result_of_impl< is_member_object_pointer< typename remove_reference< _Functor> ::type> ::value, is_member_function_pointer< typename remove_reference< _Functor> ::type> ::value, _Functor, _ArgTypes...> ::type { 
# 2272
}; 
# 2274
template< class _Functor, class ..._ArgTypes> 
# 2275
struct result_of< _Functor (_ArgTypes ...)>  : public __invoke_result< _Functor, _ArgTypes...>  { 
# 2277
}; 
# 2281
template< size_t _Len, size_t _Align = __alignof__(typename __aligned_storage_msa< _Len> ::__type)> using aligned_storage_t = typename aligned_storage< _Len, _Align> ::type; 
# 2285
template< size_t _Len, class ..._Types> using aligned_union_t = typename aligned_union< _Len, _Types...> ::type; 
# 2289
template< class _Tp> using decay_t = typename decay< _Tp> ::type; 
# 2293
template< bool _Cond, class _Tp = void> using enable_if_t = typename enable_if< _Cond, _Tp> ::type; 
# 2297
template< bool _Cond, class _Iftrue, class _Iffalse> using conditional_t = typename conditional< _Cond, _Iftrue, _Iffalse> ::type; 
# 2301
template< class ..._Tp> using common_type_t = typename common_type< _Tp...> ::type; 
# 2305
template< class _Tp> using underlying_type_t = typename underlying_type< _Tp> ::type; 
# 2309
template< class _Tp> using result_of_t = typename result_of< _Tp> ::type; 
# 2314
template< bool _Cond, class _Tp = void> using __enable_if_t = typename enable_if< _Cond, _Tp> ::type; 
# 2318
template< class ...> using __void_t = void; 
# 2323
template< class ...> using void_t = void; 
# 2327
template< class _Default, class _AlwaysVoid, 
# 2328
template< class ...>  class _Op, class ..._Args> 
# 2329
struct __detector { 
# 2331
using value_t = false_type; 
# 2332
using type = _Default; 
# 2333
}; 
# 2336
template< class _Default, template< class ...>  class _Op, class ...
# 2337
_Args> 
# 2338
struct __detector< _Default, __void_t< _Op< _Args...> > , _Op, _Args...>  { 
# 2340
using value_t = true_type; 
# 2341
using type = _Op< _Args...> ; 
# 2342
}; 
# 2345
template< class _Default, template< class ...>  class _Op, class ...
# 2346
_Args> using __detected_or = __detector< _Default, void, _Op, _Args...> ; 
# 2350
template< class _Default, template< class ...>  class _Op, class ...
# 2351
_Args> using __detected_or_t = typename __detector< _Default, void, _Op, _Args...> ::type; 
# 2371 "/usr/include/c++/8/type_traits" 3
template< class _Tp> struct __is_swappable; 
# 2374
template< class _Tp> struct __is_nothrow_swappable; 
# 2377
template< class ..._Elements> class tuple; 
# 2380
template< class > 
# 2381
struct __is_tuple_like_impl : public false_type { 
# 2382
}; 
# 2384
template< class ..._Tps> 
# 2385
struct __is_tuple_like_impl< tuple< _Tps...> >  : public true_type { 
# 2386
}; 
# 2389
template< class _Tp> 
# 2390
struct __is_tuple_like : public __is_tuple_like_impl< typename remove_cv< typename remove_reference< _Tp> ::type> ::type> ::type { 
# 2393
}; 
# 2395
template< class _Tp> inline typename enable_if< __and_< __not_< __is_tuple_like< _Tp> > , is_move_constructible< _Tp> , is_move_assignable< _Tp> > ::value> ::type swap(_Tp &, _Tp &) noexcept(__and_< is_nothrow_move_constructible< _Tp> , is_nothrow_move_assignable< _Tp> > ::value); 
# 2404
template< class _Tp, size_t _Nm> inline typename enable_if< __is_swappable< _Tp> ::value> ::type swap(_Tp (& __a)[_Nm], _Tp (& __b)[_Nm]) noexcept(__is_nothrow_swappable< _Tp> ::value); 
# 2410
namespace __swappable_details { 
# 2411
using std::swap;
# 2413
struct __do_is_swappable_impl { 
# 2415
template< class _Tp, class 
# 2416
 = __decltype((swap(std::declval< _Tp &> (), std::declval< _Tp &> ())))> static true_type 
# 2415
__test(int); 
# 2419
template< class > static false_type __test(...); 
# 2421
}; 
# 2423
struct __do_is_nothrow_swappable_impl { 
# 2425
template< class _Tp> static __bool_constant< noexcept(swap(std::declval< _Tp &> (), std::declval< _Tp &> ()))>  __test(int); 
# 2430
template< class > static false_type __test(...); 
# 2432
}; 
# 2434
}
# 2436
template< class _Tp> 
# 2437
struct __is_swappable_impl : public __swappable_details::__do_is_swappable_impl { 
# 2440
typedef __decltype((__test< _Tp> (0))) type; 
# 2441
}; 
# 2443
template< class _Tp> 
# 2444
struct __is_nothrow_swappable_impl : public __swappable_details::__do_is_nothrow_swappable_impl { 
# 2447
typedef __decltype((__test< _Tp> (0))) type; 
# 2448
}; 
# 2450
template< class _Tp> 
# 2451
struct __is_swappable : public __is_swappable_impl< _Tp> ::type { 
# 2453
}; 
# 2455
template< class _Tp> 
# 2456
struct __is_nothrow_swappable : public __is_nothrow_swappable_impl< _Tp> ::type { 
# 2458
}; 
# 2465
template< class _Tp> 
# 2466
struct is_swappable : public __is_swappable_impl< _Tp> ::type { 
# 2468
}; 
# 2471
template< class _Tp> 
# 2472
struct is_nothrow_swappable : public __is_nothrow_swappable_impl< _Tp> ::type { 
# 2474
}; 
# 2478
template< class _Tp> constexpr bool 
# 2479
is_swappable_v = (is_swappable< _Tp> ::value); 
# 2483
template< class _Tp> constexpr bool 
# 2484
is_nothrow_swappable_v = (is_nothrow_swappable< _Tp> ::value); 
# 2488
namespace __swappable_with_details { 
# 2489
using std::swap;
# 2491
struct __do_is_swappable_with_impl { 
# 2493
template< class _Tp, class _Up, class 
# 2494
 = __decltype((swap(std::declval< _Tp> (), std::declval< _Up> ()))), class 
# 2496
 = __decltype((swap(std::declval< _Up> (), std::declval< _Tp> ())))> static true_type 
# 2493
__test(int); 
# 2499
template< class , class > static false_type __test(...); 
# 2501
}; 
# 2503
struct __do_is_nothrow_swappable_with_impl { 
# 2505
template< class _Tp, class _Up> static __bool_constant< noexcept(swap(std::declval< _Tp> (), std::declval< _Up> ())) && noexcept(swap(std::declval< _Up> (), std::declval< _Tp> ()))>  __test(int); 
# 2512
template< class , class > static false_type __test(...); 
# 2514
}; 
# 2516
}
# 2518
template< class _Tp, class _Up> 
# 2519
struct __is_swappable_with_impl : public __swappable_with_details::__do_is_swappable_with_impl { 
# 2522
typedef __decltype((__test< _Tp, _Up> (0))) type; 
# 2523
}; 
# 2526
template< class _Tp> 
# 2527
struct __is_swappable_with_impl< _Tp &, _Tp &>  : public __swappable_details::__do_is_swappable_impl { 
# 2530
typedef __decltype((__test< _Tp &> (0))) type; 
# 2531
}; 
# 2533
template< class _Tp, class _Up> 
# 2534
struct __is_nothrow_swappable_with_impl : public __swappable_with_details::__do_is_nothrow_swappable_with_impl { 
# 2537
typedef __decltype((__test< _Tp, _Up> (0))) type; 
# 2538
}; 
# 2541
template< class _Tp> 
# 2542
struct __is_nothrow_swappable_with_impl< _Tp &, _Tp &>  : public __swappable_details::__do_is_nothrow_swappable_impl { 
# 2545
typedef __decltype((__test< _Tp &> (0))) type; 
# 2546
}; 
# 2549
template< class _Tp, class _Up> 
# 2550
struct is_swappable_with : public __is_swappable_with_impl< _Tp, _Up> ::type { 
# 2552
}; 
# 2555
template< class _Tp, class _Up> 
# 2556
struct is_nothrow_swappable_with : public __is_nothrow_swappable_with_impl< _Tp, _Up> ::type { 
# 2558
}; 
# 2562
template< class _Tp, class _Up> constexpr bool 
# 2563
is_swappable_with_v = (is_swappable_with< _Tp, _Up> ::value); 
# 2567
template< class _Tp, class _Up> constexpr bool 
# 2568
is_nothrow_swappable_with_v = (is_nothrow_swappable_with< _Tp, _Up> ::value); 
# 2576
template< class _Result, class _Ret, class  = void> 
# 2577
struct __is_invocable_impl : public false_type { }; 
# 2579
template< class _Result, class _Ret> 
# 2580
struct __is_invocable_impl< _Result, _Ret, __void_t< typename _Result::type> >  : public __or_< is_void< _Ret> , is_convertible< typename _Result::type, _Ret> > ::type { 
# 2582
}; 
# 2584
template< class _Fn, class ..._ArgTypes> 
# 2585
struct __is_invocable : public __is_invocable_impl< __invoke_result< _Fn, _ArgTypes...> , void> ::type { 
# 2587
}; 
# 2589
template< class _Fn, class _Tp, class ..._Args> constexpr bool 
# 2590
__call_is_nt(__invoke_memfun_ref) 
# 2591
{ 
# 2592
using _Up = typename __inv_unwrap< _Tp> ::type; 
# 2593
return noexcept((std::declval< typename __inv_unwrap< _Tp> ::type> ().*std::declval< _Fn> ())(std::declval< _Args> ()...)); 
# 2595
} 
# 2597
template< class _Fn, class _Tp, class ..._Args> constexpr bool 
# 2598
__call_is_nt(__invoke_memfun_deref) 
# 2599
{ 
# 2600
return noexcept(((*std::declval< _Tp> ()).*std::declval< _Fn> ())(std::declval< _Args> ()...)); 
# 2602
} 
# 2604
template< class _Fn, class _Tp> constexpr bool 
# 2605
__call_is_nt(__invoke_memobj_ref) 
# 2606
{ 
# 2607
using _Up = typename __inv_unwrap< _Tp> ::type; 
# 2608
return noexcept((std::declval< typename __inv_unwrap< _Tp> ::type> ().*std::declval< _Fn> ())); 
# 2609
} 
# 2611
template< class _Fn, class _Tp> constexpr bool 
# 2612
__call_is_nt(__invoke_memobj_deref) 
# 2613
{ 
# 2614
return noexcept(((*std::declval< _Tp> ()).*std::declval< _Fn> ())); 
# 2615
} 
# 2617
template< class _Fn, class ..._Args> constexpr bool 
# 2618
__call_is_nt(__invoke_other) 
# 2619
{ 
# 2620
return noexcept(std::declval< _Fn> ()(std::declval< _Args> ()...)); 
# 2621
} 
# 2623
template< class _Result, class _Fn, class ..._Args> 
# 2624
struct __call_is_nothrow : public __bool_constant< std::__call_is_nt< _Fn, _Args...> (typename _Result::__invoke_type{})>  { 
# 2628
}; 
# 2630
template< class _Fn, class ..._Args> using __call_is_nothrow_ = __call_is_nothrow< __invoke_result< _Fn, _Args...> , _Fn, _Args...> ; 
# 2635
template< class _Fn, class ..._Args> 
# 2636
struct __is_nothrow_invocable : public __and_< __is_invocable< _Fn, _Args...> , __call_is_nothrow_< _Fn, _Args...> > ::type { 
# 2639
}; 
# 2641
struct __nonesuch { 
# 2642
__nonesuch() = delete;
# 2643
~__nonesuch() = delete;
# 2644
__nonesuch(const __nonesuch &) = delete;
# 2645
void operator=(const __nonesuch &) = delete;
# 2646
}; 
# 2937 "/usr/include/c++/8/type_traits" 3
}
# 57 "/usr/include/c++/8/bits/move.h" 3
namespace std __attribute((__visibility__("default"))) { 
# 72 "/usr/include/c++/8/bits/move.h" 3
template< class _Tp> constexpr _Tp &&
# 74
forward(typename remove_reference< _Tp> ::type &__t) noexcept 
# 75
{ return static_cast< _Tp &&>(__t); } 
# 83
template< class _Tp> constexpr _Tp &&
# 85
forward(typename remove_reference< _Tp> ::type &&__t) noexcept 
# 86
{ 
# 87
static_assert((!std::is_lvalue_reference< _Tp> ::value), "template argument substituting _Tp is an lvalue reference type");
# 89
return static_cast< _Tp &&>(__t); 
# 90
} 
# 97
template< class _Tp> constexpr typename remove_reference< _Tp> ::type &&
# 99
move(_Tp &&__t) noexcept 
# 100
{ return static_cast< typename remove_reference< _Tp> ::type &&>(__t); } 
# 103
template< class _Tp> 
# 104
struct __move_if_noexcept_cond : public __and_< __not_< is_nothrow_move_constructible< _Tp> > , is_copy_constructible< _Tp> > ::type { 
# 106
}; 
# 116 "/usr/include/c++/8/bits/move.h" 3
template< class _Tp> constexpr typename conditional< __move_if_noexcept_cond< _Tp> ::value, const _Tp &, _Tp &&> ::type 
# 119
move_if_noexcept(_Tp &__x) noexcept 
# 120
{ return std::move(__x); } 
# 136 "/usr/include/c++/8/bits/move.h" 3
template< class _Tp> inline _Tp *
# 138
addressof(_Tp &__r) noexcept 
# 139
{ return std::__addressof(__r); } 
# 143
template < typename _Tp >
    const _Tp * addressof ( const _Tp && ) = delete;
# 147
template< class _Tp, class _Up = _Tp> inline _Tp 
# 149
__exchange(_Tp &__obj, _Up &&__new_val) 
# 150
{ 
# 151
_Tp __old_val = std::move(__obj); 
# 152
__obj = std::forward< _Up> (__new_val); 
# 153
return __old_val; 
# 154
} 
# 176 "/usr/include/c++/8/bits/move.h" 3
template< class _Tp> inline typename enable_if< __and_< __not_< __is_tuple_like< _Tp> > , is_move_constructible< _Tp> , is_move_assignable< _Tp> > ::value> ::type 
# 182
swap(_Tp &__a, _Tp &__b) noexcept(__and_< is_nothrow_move_constructible< _Tp> , is_nothrow_move_assignable< _Tp> > ::value) 
# 189
{ 
# 193
_Tp __tmp = std::move(__a); 
# 194
__a = std::move(__b); 
# 195
__b = std::move(__tmp); 
# 196
} 
# 201
template< class _Tp, size_t _Nm> inline typename enable_if< __is_swappable< _Tp> ::value> ::type 
# 205
swap(_Tp (&__a)[_Nm], _Tp (&__b)[_Nm]) noexcept(__is_nothrow_swappable< _Tp> ::value) 
# 211
{ 
# 212
for (size_t __n = (0); __n < _Nm; ++__n) { 
# 213
swap(__a[__n], __b[__n]); }  
# 214
} 
# 218
}
# 42 "/usr/include/c++/8/bits/nested_exception.h" 3
extern "C++" {
# 44
namespace std { 
# 52
class nested_exception { 
# 54
__exception_ptr::exception_ptr _M_ptr; 
# 57
public: nested_exception() noexcept : _M_ptr(current_exception()) { } 
# 59
nested_exception(const nested_exception &) noexcept = default;
# 61
nested_exception &operator=(const nested_exception &) noexcept = default;
# 63
virtual ~nested_exception() noexcept; 
# 65
[[noreturn]] void 
# 67
rethrow_nested() const 
# 68
{ 
# 69
if ((_M_ptr)) { 
# 70
rethrow_exception(_M_ptr); }  
# 71
std::terminate(); 
# 72
} 
# 75
__exception_ptr::exception_ptr nested_ptr() const noexcept 
# 76
{ return _M_ptr; } 
# 77
}; 
# 79
template< class _Except> 
# 80
struct _Nested_exception : public _Except, public nested_exception { 
# 82
explicit _Nested_exception(const _Except &__ex) : _Except(__ex) 
# 84
{ } 
# 86
explicit _Nested_exception(_Except &&__ex) : _Except(static_cast< _Except &&>(__ex)) 
# 88
{ } 
# 89
}; 
# 94
template< class _Tp> 
# 95
[[noreturn]] inline void 
# 97
__throw_with_nested_impl(_Tp &&__t, true_type) 
# 98
{ 
# 99
using _Up = typename remove_reference< _Tp> ::type; 
# 100
throw _Nested_exception< typename remove_reference< _Tp> ::type> {std::forward< _Tp> (__t)}; 
# 101
} 
# 103
template< class _Tp> 
# 104
[[noreturn]] inline void 
# 106
__throw_with_nested_impl(_Tp &&__t, false_type) 
# 107
{ throw std::forward< _Tp> (__t); } 
# 111
template< class _Tp> 
# 112
[[noreturn]] inline void 
# 114
throw_with_nested(_Tp &&__t) 
# 115
{ 
# 116
using _Up = typename decay< _Tp> ::type; 
# 117
using _CopyConstructible = __and_< is_copy_constructible< typename decay< _Tp> ::type> , is_move_constructible< typename decay< _Tp> ::type> > ; 
# 119
static_assert((_CopyConstructible::value), "throw_with_nested argument must be CopyConstructible");
# 121
using __nest = __and_< is_class< typename decay< _Tp> ::type> , __bool_constant< !__is_final(typename decay< _Tp> ::type)> , __not_< is_base_of< nested_exception, typename decay< _Tp> ::type> > > ; 
# 123
std::__throw_with_nested_impl(std::forward< _Tp> (__t), __nest{}); 
# 124
} 
# 127
template< class _Tp> using __rethrow_if_nested_cond = typename enable_if< __and_< is_polymorphic< _Tp> , __or_< __not_< is_base_of< nested_exception, _Tp> > , is_convertible< _Tp *, nested_exception *> > > ::value> ::type; 
# 135
template< class _Ex> inline __rethrow_if_nested_cond< _Ex>  
# 137
__rethrow_if_nested_impl(const _Ex *__ptr) 
# 138
{ 
# 139
if (auto __ne_ptr = dynamic_cast< const nested_exception *>(__ptr)) { 
# 140
__ne_ptr->rethrow_nested(); }  
# 141
} 
# 145
inline void __rethrow_if_nested_impl(const void *) 
# 146
{ } 
# 149
template< class _Ex> inline void 
# 151
rethrow_if_nested(const _Ex &__ex) 
# 152
{ std::__rethrow_if_nested_impl(std::__addressof(__ex)); } 
# 155
}
# 157
}
# 161
#pragma GCC visibility pop
# 42 "/usr/include/c++/8/bits/functexcept.h" 3
namespace std __attribute((__visibility__("default"))) { 
# 48
void __throw_bad_exception() __attribute((__noreturn__)); 
# 52
void __throw_bad_alloc() __attribute((__noreturn__)); 
# 56
void __throw_bad_cast() __attribute((__noreturn__)); 
# 59
void __throw_bad_typeid() __attribute((__noreturn__)); 
# 63
void __throw_logic_error(const char *) __attribute((__noreturn__)); 
# 66
void __throw_domain_error(const char *) __attribute((__noreturn__)); 
# 69
void __throw_invalid_argument(const char *) __attribute((__noreturn__)); 
# 72
void __throw_length_error(const char *) __attribute((__noreturn__)); 
# 75
void __throw_out_of_range(const char *) __attribute((__noreturn__)); 
# 78
void __throw_out_of_range_fmt(const char *, ...) __attribute((__noreturn__))
# 79
 __attribute((__format__(__gnu_printf__, 1, 2))); 
# 82
void __throw_runtime_error(const char *) __attribute((__noreturn__)); 
# 85
void __throw_range_error(const char *) __attribute((__noreturn__)); 
# 88
void __throw_overflow_error(const char *) __attribute((__noreturn__)); 
# 91
void __throw_underflow_error(const char *) __attribute((__noreturn__)); 
# 95
void __throw_ios_failure(const char *) __attribute((__noreturn__)); 
# 98
void __throw_system_error(int) __attribute((__noreturn__)); 
# 101
void __throw_future_error(int) __attribute((__noreturn__)); 
# 105
void __throw_bad_function_call() __attribute((__noreturn__)); 
# 108
}
# 37 "/usr/include/c++/8/ext/numeric_traits.h" 3
namespace __gnu_cxx __attribute((__visibility__("default"))) { 
# 54 "/usr/include/c++/8/ext/numeric_traits.h" 3
template< class _Value> 
# 55
struct __numeric_traits_integer { 
# 58
static const _Value __min = ((((_Value)(-1)) < 0) ? ((_Value)1) << ((sizeof(_Value) * (8)) - (((_Value)(-1)) < 0)) : ((_Value)0)); 
# 59
static const _Value __max = ((((_Value)(-1)) < 0) ? (((((_Value)1) << (((sizeof(_Value) * (8)) - (((_Value)(-1)) < 0)) - (1))) - 1) << 1) + 1 : (~((_Value)0))); 
# 63
static const bool __is_signed = (((_Value)(-1)) < 0); 
# 64
static const int __digits = ((sizeof(_Value) * (8)) - (((_Value)(-1)) < 0)); 
# 65
}; 
# 67
template< class _Value> const _Value __numeric_traits_integer< _Value> ::__min; 
# 70
template< class _Value> const _Value __numeric_traits_integer< _Value> ::__max; 
# 73
template< class _Value> const bool __numeric_traits_integer< _Value> ::__is_signed; 
# 76
template< class _Value> const int __numeric_traits_integer< _Value> ::__digits; 
# 99 "/usr/include/c++/8/ext/numeric_traits.h" 3
template< class _Value> 
# 100
struct __numeric_traits_floating { 
# 103
static const int __max_digits10 = ((2) + ((((std::__are_same< _Value, float> ::__value) ? 24 : ((std::__are_same< _Value, double> ::__value) ? 53 : 64)) * 643L) / (2136))); 
# 106
static const bool __is_signed = true; 
# 107
static const int __digits10 = ((std::__are_same< _Value, float> ::__value) ? 6 : ((std::__are_same< _Value, double> ::__value) ? 15 : 18)); 
# 108
static const int __max_exponent10 = ((std::__are_same< _Value, float> ::__value) ? 38 : ((std::__are_same< _Value, double> ::__value) ? 308 : 4932)); 
# 109
}; 
# 111
template< class _Value> const int __numeric_traits_floating< _Value> ::__max_digits10; 
# 114
template< class _Value> const bool __numeric_traits_floating< _Value> ::__is_signed; 
# 117
template< class _Value> const int __numeric_traits_floating< _Value> ::__digits10; 
# 120
template< class _Value> const int __numeric_traits_floating< _Value> ::__max_exponent10; 
# 123
template< class _Value> 
# 124
struct __numeric_traits : public __conditional_type< std::__is_integer< _Value> ::__value, __numeric_traits_integer< _Value> , __numeric_traits_floating< _Value> > ::__type { 
# 128
}; 
# 131
}
# 65 "/usr/include/c++/8/bits/stl_pair.h" 3
namespace std __attribute((__visibility__("default"))) { 
# 76 "/usr/include/c++/8/bits/stl_pair.h" 3
struct piecewise_construct_t { explicit piecewise_construct_t() = default;}; 
# 79
constexpr piecewise_construct_t piecewise_construct = piecewise_construct_t{}; 
# 83
template< class ...> class tuple; 
# 86
template< size_t ...> struct _Index_tuple; 
# 94
template< bool , class _T1, class _T2> 
# 95
struct _PCC { 
# 97
template< class _U1, class _U2> static constexpr bool 
# 98
_ConstructiblePair() 
# 99
{ 
# 100
return __and_< is_constructible< _T1, const _U1 &> , is_constructible< _T2, const _U2 &> > ::value; 
# 102
} 
# 104
template< class _U1, class _U2> static constexpr bool 
# 105
_ImplicitlyConvertiblePair() 
# 106
{ 
# 107
return __and_< is_convertible< const _U1 &, _T1> , is_convertible< const _U2 &, _T2> > ::value; 
# 109
} 
# 111
template< class _U1, class _U2> static constexpr bool 
# 112
_MoveConstructiblePair() 
# 113
{ 
# 114
return __and_< is_constructible< _T1, _U1 &&> , is_constructible< _T2, _U2 &&> > ::value; 
# 116
} 
# 118
template< class _U1, class _U2> static constexpr bool 
# 119
_ImplicitlyMoveConvertiblePair() 
# 120
{ 
# 121
return __and_< is_convertible< _U1 &&, _T1> , is_convertible< _U2 &&, _T2> > ::value; 
# 123
} 
# 125
template< bool __implicit, class _U1, class _U2> static constexpr bool 
# 126
_CopyMovePair() 
# 127
{ 
# 128
using __do_converts = __and_< is_convertible< const _U1 &, _T1> , is_convertible< _U2 &&, _T2> > ; 
# 130
using __converts = typename conditional< __implicit, __and_< is_convertible< const _U1 &, _T1> , is_convertible< _U2 &&, _T2> > , __not_< __and_< is_convertible< const _U1 &, _T1> , is_convertible< _U2 &&, _T2> > > > ::type; 
# 133
return __and_< is_constructible< _T1, const _U1 &> , is_constructible< _T2, _U2 &&> , typename conditional< __implicit, __and_< is_convertible< const _U1 &, _T1> , is_convertible< _U2 &&, _T2> > , __not_< __and_< is_convertible< const _U1 &, _T1> , is_convertible< _U2 &&, _T2> > > > ::type> ::value; 
# 137
} 
# 139
template< bool __implicit, class _U1, class _U2> static constexpr bool 
# 140
_MoveCopyPair() 
# 141
{ 
# 142
using __do_converts = __and_< is_convertible< _U1 &&, _T1> , is_convertible< const _U2 &, _T2> > ; 
# 144
using __converts = typename conditional< __implicit, __and_< is_convertible< _U1 &&, _T1> , is_convertible< const _U2 &, _T2> > , __not_< __and_< is_convertible< _U1 &&, _T1> , is_convertible< const _U2 &, _T2> > > > ::type; 
# 147
return __and_< is_constructible< _T1, _U1 &&> , is_constructible< _T2, const _U2 &&> , typename conditional< __implicit, __and_< is_convertible< _U1 &&, _T1> , is_convertible< const _U2 &, _T2> > , __not_< __and_< is_convertible< _U1 &&, _T1> , is_convertible< const _U2 &, _T2> > > > ::type> ::value; 
# 151
} 
# 152
}; 
# 154
template< class _T1, class _T2> 
# 155
struct _PCC< false, _T1, _T2>  { 
# 157
template< class _U1, class _U2> static constexpr bool 
# 158
_ConstructiblePair() 
# 159
{ 
# 160
return false; 
# 161
} 
# 163
template< class _U1, class _U2> static constexpr bool 
# 164
_ImplicitlyConvertiblePair() 
# 165
{ 
# 166
return false; 
# 167
} 
# 169
template< class _U1, class _U2> static constexpr bool 
# 170
_MoveConstructiblePair() 
# 171
{ 
# 172
return false; 
# 173
} 
# 175
template< class _U1, class _U2> static constexpr bool 
# 176
_ImplicitlyMoveConvertiblePair() 
# 177
{ 
# 178
return false; 
# 179
} 
# 180
}; 
# 185
struct __nonesuch_no_braces : public __nonesuch { 
# 186
explicit __nonesuch_no_braces(const __nonesuch &) = delete;
# 187
}; 
# 190
template< class _U1, class _U2> class __pair_base { 
# 193
template< class _T1, class _T2> friend struct pair; 
# 194
__pair_base() = default;
# 195
~__pair_base() = default;
# 196
__pair_base(const __pair_base &) = default;
# 197
__pair_base &operator=(const __pair_base &) = delete;
# 199
}; 
# 207
template< class _T1, class _T2> 
# 208
struct pair : private __pair_base< _T1, _T2>  { 
# 211
typedef _T1 first_type; 
# 212
typedef _T2 second_type; 
# 214
_T1 first; 
# 215
_T2 second; 
# 222
template< class _U1 = _T1, class 
# 223
_U2 = _T2, typename enable_if< __and_< __is_implicitly_default_constructible< _U1> , __is_implicitly_default_constructible< _U2> > ::value, bool> ::type 
# 227
 = true> constexpr 
# 229
pair() : first(), second() 
# 230
{ } 
# 233
template< class _U1 = _T1, class 
# 234
_U2 = _T2, typename enable_if< __and_< is_default_constructible< _U1> , is_default_constructible< _U2> , __not_< __and_< __is_implicitly_default_constructible< _U1> , __is_implicitly_default_constructible< _U2> > > > ::value, bool> ::type 
# 241
 = false> constexpr explicit 
# 242
pair() : first(), second() 
# 243
{ } 
# 252 "/usr/include/c++/8/bits/stl_pair.h" 3
using _PCCP = _PCC< true, _T1, _T2> ; 
# 254
template< class _U1 = _T1, class _U2 = _T2, typename enable_if< _PCC< true, _T1, _T2> ::template _ConstructiblePair< _U1, _U2> () && _PCC< true, _T1, _T2> ::template _ImplicitlyConvertiblePair< _U1, _U2> (), bool> ::type 
# 259
 = true> constexpr 
# 260
pair(const _T1 &__a, const _T2 &__b) : first(__a), second(__b) 
# 261
{ } 
# 263
template< class _U1 = _T1, class _U2 = _T2, typename enable_if< _PCC< true, _T1, _T2> ::template _ConstructiblePair< _U1, _U2> () && (!_PCC< true, _T1, _T2> ::template _ImplicitlyConvertiblePair< _U1, _U2> ()), bool> ::type 
# 268
 = false> constexpr explicit 
# 269
pair(const _T1 &__a, const _T2 &__b) : first(__a), second(__b) 
# 270
{ } 
# 280 "/usr/include/c++/8/bits/stl_pair.h" 3
template< class _U1, class _U2> using _PCCFP = _PCC< (!is_same< _T1, _U1> ::value) || (!is_same< _T2, _U2> ::value), _T1, _T2> ; 
# 285
template< class _U1, class _U2, typename enable_if< _PCC< (!is_same< _T1, _U1> ::value) || (!is_same< _T2, _U2> ::value), _T1, _T2> ::template _ConstructiblePair< _U1, _U2> () && _PCC< (!is_same< _T1, _U1> ::value) || (!is_same< _T2, _U2> ::value), _T1, _T2> ::template _ImplicitlyConvertiblePair< _U1, _U2> (), bool> ::type 
# 290
 = true> constexpr 
# 291
pair(const std::pair< _U1, _U2>  &__p) : first((__p.first)), second((__p.second)) 
# 292
{ } 
# 294
template< class _U1, class _U2, typename enable_if< _PCC< (!is_same< _T1, _U1> ::value) || (!is_same< _T2, _U2> ::value), _T1, _T2> ::template _ConstructiblePair< _U1, _U2> () && (!_PCC< (!is_same< _T1, _U1> ::value) || (!is_same< _T2, _U2> ::value), _T1, _T2> ::template _ImplicitlyConvertiblePair< _U1, _U2> ()), bool> ::type 
# 299
 = false> constexpr explicit 
# 300
pair(const std::pair< _U1, _U2>  &__p) : first((__p.first)), second((__p.second)) 
# 301
{ } 
# 303
constexpr pair(const pair &) = default;
# 304
constexpr pair(pair &&) = default;
# 307
template< class _U1, typename enable_if< _PCC< true, _T1, _T2> ::template _MoveCopyPair< true, _U1, _T2> (), bool> ::type 
# 310
 = true> constexpr 
# 311
pair(_U1 &&__x, const _T2 &__y) : first(std::forward< _U1> (__x)), second(__y) 
# 312
{ } 
# 314
template< class _U1, typename enable_if< _PCC< true, _T1, _T2> ::template _MoveCopyPair< false, _U1, _T2> (), bool> ::type 
# 317
 = false> constexpr explicit 
# 318
pair(_U1 &&__x, const _T2 &__y) : first(std::forward< _U1> (__x)), second(__y) 
# 319
{ } 
# 321
template< class _U2, typename enable_if< _PCC< true, _T1, _T2> ::template _CopyMovePair< true, _T1, _U2> (), bool> ::type 
# 324
 = true> constexpr 
# 325
pair(const _T1 &__x, _U2 &&__y) : first(__x), second(std::forward< _U2> (__y)) 
# 326
{ } 
# 328
template< class _U2, typename enable_if< _PCC< true, _T1, _T2> ::template _CopyMovePair< false, _T1, _U2> (), bool> ::type 
# 331
 = false> explicit 
# 332
pair(const _T1 &__x, _U2 &&__y) : first(__x), second(std::forward< _U2> (__y)) 
# 333
{ } 
# 335
template< class _U1, class _U2, typename enable_if< _PCC< true, _T1, _T2> ::template _MoveConstructiblePair< _U1, _U2> () && _PCC< true, _T1, _T2> ::template _ImplicitlyMoveConvertiblePair< _U1, _U2> (), bool> ::type 
# 340
 = true> constexpr 
# 341
pair(_U1 &&__x, _U2 &&__y) : first(std::forward< _U1> (__x)), second(std::forward< _U2> (__y)) 
# 342
{ } 
# 344
template< class _U1, class _U2, typename enable_if< _PCC< true, _T1, _T2> ::template _MoveConstructiblePair< _U1, _U2> () && (!_PCC< true, _T1, _T2> ::template _ImplicitlyMoveConvertiblePair< _U1, _U2> ()), bool> ::type 
# 349
 = false> constexpr explicit 
# 350
pair(_U1 &&__x, _U2 &&__y) : first(std::forward< _U1> (__x)), second(std::forward< _U2> (__y)) 
# 351
{ } 
# 354
template< class _U1, class _U2, typename enable_if< _PCC< (!is_same< _T1, _U1> ::value) || (!is_same< _T2, _U2> ::value), _T1, _T2> ::template _MoveConstructiblePair< _U1, _U2> () && _PCC< (!is_same< _T1, _U1> ::value) || (!is_same< _T2, _U2> ::value), _T1, _T2> ::template _ImplicitlyMoveConvertiblePair< _U1, _U2> (), bool> ::type 
# 359
 = true> constexpr 
# 360
pair(std::pair< _U1, _U2>  &&__p) : first(std::forward< _U1> ((__p.first))), second(std::forward< _U2> ((__p.second))) 
# 362
{ } 
# 364
template< class _U1, class _U2, typename enable_if< _PCC< (!is_same< _T1, _U1> ::value) || (!is_same< _T2, _U2> ::value), _T1, _T2> ::template _MoveConstructiblePair< _U1, _U2> () && (!_PCC< (!is_same< _T1, _U1> ::value) || (!is_same< _T2, _U2> ::value), _T1, _T2> ::template _ImplicitlyMoveConvertiblePair< _U1, _U2> ()), bool> ::type 
# 369
 = false> constexpr explicit 
# 370
pair(std::pair< _U1, _U2>  &&__p) : first(std::forward< _U1> ((__p.first))), second(std::forward< _U2> ((__p.second))) 
# 372
{ } 
# 374
template< class ..._Args1, class ..._Args2> pair(std::piecewise_construct_t, tuple< _Args1...> , tuple< _Args2...> ); 
# 378
pair &operator=(typename conditional< __and_< is_copy_assignable< _T1> , is_copy_assignable< _T2> > ::value, const pair &, const std::__nonesuch_no_braces &> ::type 
# 381
__p) 
# 382
{ 
# 383
(first) = (__p.first); 
# 384
(second) = (__p.second); 
# 385
return *this; 
# 386
} 
# 389
pair &operator=(typename conditional< __and_< is_move_assignable< _T1> , is_move_assignable< _T2> > ::value, pair &&, std::__nonesuch_no_braces &&> ::type 
# 392
__p) noexcept(__and_< is_nothrow_move_assignable< _T1> , is_nothrow_move_assignable< _T2> > ::value) 
# 395
{ 
# 396
(first) = std::forward< first_type> ((__p.first)); 
# 397
(second) = std::forward< second_type> ((__p.second)); 
# 398
return *this; 
# 399
} 
# 401
template< class _U1, class _U2> typename enable_if< __and_< is_assignable< _T1 &, const _U1 &> , is_assignable< _T2 &, const _U2 &> > ::value, pair &> ::type 
# 405
operator=(const std::pair< _U1, _U2>  &__p) 
# 406
{ 
# 407
(first) = (__p.first); 
# 408
(second) = (__p.second); 
# 409
return *this; 
# 410
} 
# 412
template< class _U1, class _U2> typename enable_if< __and_< is_assignable< _T1 &, _U1 &&> , is_assignable< _T2 &, _U2 &&> > ::value, pair &> ::type 
# 416
operator=(std::pair< _U1, _U2>  &&__p) 
# 417
{ 
# 418
(first) = std::forward< _U1> ((__p.first)); 
# 419
(second) = std::forward< _U2> ((__p.second)); 
# 420
return *this; 
# 421
} 
# 424
void swap(pair &__p) noexcept(__and_< __is_nothrow_swappable< _T1> , __is_nothrow_swappable< _T2> > ::value) 
# 427
{ 
# 428
using std::swap;
# 429
swap(first, __p.first); 
# 430
swap(second, __p.second); 
# 431
} 
# 434
private: template< class ..._Args1, std::size_t ..._Indexes1, class ...
# 435
_Args2, std::size_t ..._Indexes2> 
# 434
pair(tuple< _Args1...>  &, tuple< _Args2...>  &, _Index_tuple< _Indexes1...> , _Index_tuple< _Indexes2...> ); 
# 439
}; 
# 446
template< class _T1, class _T2> constexpr bool 
# 448
operator==(const pair< _T1, _T2>  &__x, const pair< _T1, _T2>  &__y) 
# 449
{ return ((__x.first) == (__y.first)) && ((__x.second) == (__y.second)); } 
# 452
template< class _T1, class _T2> constexpr bool 
# 454
operator<(const pair< _T1, _T2>  &__x, const pair< _T1, _T2>  &__y) 
# 455
{ return ((__x.first) < (__y.first)) || ((!((__y.first) < (__x.first))) && ((__x.second) < (__y.second))); 
# 456
} 
# 459
template< class _T1, class _T2> constexpr bool 
# 461
operator!=(const pair< _T1, _T2>  &__x, const pair< _T1, _T2>  &__y) 
# 462
{ return !(__x == __y); } 
# 465
template< class _T1, class _T2> constexpr bool 
# 467
operator>(const pair< _T1, _T2>  &__x, const pair< _T1, _T2>  &__y) 
# 468
{ return __y < __x; } 
# 471
template< class _T1, class _T2> constexpr bool 
# 473
operator<=(const pair< _T1, _T2>  &__x, const pair< _T1, _T2>  &__y) 
# 474
{ return !(__y < __x); } 
# 477
template< class _T1, class _T2> constexpr bool 
# 479
operator>=(const pair< _T1, _T2>  &__x, const pair< _T1, _T2>  &__y) 
# 480
{ return !(__x < __y); } 
# 486
template< class _T1, class _T2> inline typename enable_if< __and_< __is_swappable< _T1> , __is_swappable< _T2> > ::value> ::type 
# 495
swap(pair< _T1, _T2>  &__x, pair< _T1, _T2>  &__y) noexcept(noexcept((__x.swap(__y)))) 
# 497
{ (__x.swap(__y)); } 
# 500
template < typename _T1, typename _T2 >
    typename enable_if < ! __and_ < __is_swappable < _T1 >,
          __is_swappable < _T2 > > :: value > :: type
    swap ( pair < _T1, _T2 > &, pair < _T1, _T2 > & ) = delete;
# 521 "/usr/include/c++/8/bits/stl_pair.h" 3
template< class _T1, class _T2> constexpr pair< typename __decay_and_strip< _T1> ::__type, typename __decay_and_strip< _T2> ::__type>  
# 524
make_pair(_T1 &&__x, _T2 &&__y) 
# 525
{ 
# 526
typedef typename __decay_and_strip< _T1> ::__type __ds_type1; 
# 527
typedef typename __decay_and_strip< _T2> ::__type __ds_type2; 
# 528
typedef pair< typename __decay_and_strip< _T1> ::__type, typename __decay_and_strip< _T2> ::__type>  __pair_type; 
# 529
return __pair_type(std::forward< _T1> (__x), std::forward< _T2> (__y)); 
# 530
} 
# 541 "/usr/include/c++/8/bits/stl_pair.h" 3
}
# 70 "/usr/include/c++/8/bits/stl_iterator_base_types.h" 3
namespace std __attribute((__visibility__("default"))) { 
# 89 "/usr/include/c++/8/bits/stl_iterator_base_types.h" 3
struct input_iterator_tag { }; 
# 92
struct output_iterator_tag { }; 
# 95
struct forward_iterator_tag : public input_iterator_tag { }; 
# 99
struct bidirectional_iterator_tag : public forward_iterator_tag { }; 
# 103
struct random_access_iterator_tag : public bidirectional_iterator_tag { }; 
# 116 "/usr/include/c++/8/bits/stl_iterator_base_types.h" 3
template< class _Category, class _Tp, class _Distance = ptrdiff_t, class 
# 117
_Pointer = _Tp *, class _Reference = _Tp &> 
# 118
struct iterator { 
# 121
typedef _Category iterator_category; 
# 123
typedef _Tp value_type; 
# 125
typedef _Distance difference_type; 
# 127
typedef _Pointer pointer; 
# 129
typedef _Reference reference; 
# 130
}; 
# 143 "/usr/include/c++/8/bits/stl_iterator_base_types.h" 3
template< class _Iterator, class  = __void_t< > > 
# 144
struct __iterator_traits { }; 
# 146
template< class _Iterator> 
# 147
struct __iterator_traits< _Iterator, __void_t< typename _Iterator::iterator_category, typename _Iterator::value_type, typename _Iterator::difference_type, typename _Iterator::pointer, typename _Iterator::reference> >  { 
# 154
typedef typename _Iterator::iterator_category iterator_category; 
# 155
typedef typename _Iterator::value_type value_type; 
# 156
typedef typename _Iterator::difference_type difference_type; 
# 157
typedef typename _Iterator::pointer pointer; 
# 158
typedef typename _Iterator::reference reference; 
# 159
}; 
# 161
template< class _Iterator> 
# 162
struct iterator_traits : public __iterator_traits< _Iterator>  { 
# 163
}; 
# 177 "/usr/include/c++/8/bits/stl_iterator_base_types.h" 3
template< class _Tp> 
# 178
struct iterator_traits< _Tp *>  { 
# 180
typedef random_access_iterator_tag iterator_category; 
# 181
typedef _Tp value_type; 
# 182
typedef ptrdiff_t difference_type; 
# 183
typedef _Tp *pointer; 
# 184
typedef _Tp &reference; 
# 185
}; 
# 188
template< class _Tp> 
# 189
struct iterator_traits< const _Tp *>  { 
# 191
typedef random_access_iterator_tag iterator_category; 
# 192
typedef _Tp value_type; 
# 193
typedef ptrdiff_t difference_type; 
# 194
typedef const _Tp *pointer; 
# 195
typedef const _Tp &reference; 
# 196
}; 
# 202
template< class _Iter> constexpr typename iterator_traits< _Iter> ::iterator_category 
# 205
__iterator_category(const _Iter &) 
# 206
{ return typename iterator_traits< _Iter> ::iterator_category(); } 
# 231 "/usr/include/c++/8/bits/stl_iterator_base_types.h" 3
template< class _InIter> using _RequireInputIter = typename enable_if< is_convertible< typename iterator_traits< _InIter> ::iterator_category, input_iterator_tag> ::value> ::type; 
# 239
}
# 67 "/usr/include/c++/8/bits/stl_iterator_base_funcs.h" 3
namespace std __attribute((__visibility__("default"))) { 
# 73
template< class > struct _List_iterator; 
# 74
template< class > struct _List_const_iterator; 
# 77
template< class _InputIterator> constexpr typename iterator_traits< _InputIterator> ::difference_type 
# 80
__distance(_InputIterator __first, _InputIterator __last, input_iterator_tag) 
# 82
{ 
# 86
typename iterator_traits< _InputIterator> ::difference_type __n = (0); 
# 87
while (__first != __last) 
# 88
{ 
# 89
++__first; 
# 90
++__n; 
# 91
}  
# 92
return __n; 
# 93
} 
# 95
template< class _RandomAccessIterator> constexpr typename iterator_traits< _RandomAccessIterator> ::difference_type 
# 98
__distance(_RandomAccessIterator __first, _RandomAccessIterator __last, random_access_iterator_tag) 
# 100
{ 
# 104
return __last - __first; 
# 105
} 
# 109
template< class _Tp> ptrdiff_t __distance(_List_iterator< _Tp> , _List_iterator< _Tp> , input_iterator_tag); 
# 115
template< class _Tp> ptrdiff_t __distance(_List_const_iterator< _Tp> , _List_const_iterator< _Tp> , input_iterator_tag); 
# 135 "/usr/include/c++/8/bits/stl_iterator_base_funcs.h" 3
template< class _InputIterator> inline typename iterator_traits< _InputIterator> ::difference_type 
# 138
distance(_InputIterator __first, _InputIterator __last) 
# 139
{ 
# 141
return std::__distance(__first, __last, std::__iterator_category(__first)); 
# 143
} 
# 145
template< class _InputIterator, class _Distance> constexpr void 
# 147
__advance(_InputIterator &__i, _Distance __n, input_iterator_tag) 
# 148
{ 
# 151
; 
# 152
while (__n--) { 
# 153
++__i; }  
# 154
} 
# 156
template< class _BidirectionalIterator, class _Distance> constexpr void 
# 158
__advance(_BidirectionalIterator &__i, _Distance __n, bidirectional_iterator_tag) 
# 160
{ 
# 164
if (__n > 0) { 
# 165
while (__n--) { 
# 166
++__i; }  } else { 
# 168
while (__n++) { 
# 169
--__i; }  }  
# 170
} 
# 172
template< class _RandomAccessIterator, class _Distance> constexpr void 
# 174
__advance(_RandomAccessIterator &__i, _Distance __n, random_access_iterator_tag) 
# 176
{ 
# 180
if (__builtin_constant_p(__n) && (__n == 1)) { 
# 181
++__i; } else { 
# 182
if (__builtin_constant_p(__n) && (__n == (-1))) { 
# 183
--__i; } else { 
# 185
__i += __n; }  }  
# 186
} 
# 200 "/usr/include/c++/8/bits/stl_iterator_base_funcs.h" 3
template< class _InputIterator, class _Distance> inline void 
# 202
advance(_InputIterator &__i, _Distance __n) 
# 203
{ 
# 205
typename iterator_traits< _InputIterator> ::difference_type __d = __n; 
# 206
std::__advance(__i, __d, std::__iterator_category(__i)); 
# 207
} 
# 211
template< class _InputIterator> inline _InputIterator 
# 213
next(_InputIterator __x, typename iterator_traits< _InputIterator> ::difference_type 
# 214
__n = 1) 
# 215
{ 
# 218
std::advance(__x, __n); 
# 219
return __x; 
# 220
} 
# 222
template< class _BidirectionalIterator> inline _BidirectionalIterator 
# 224
prev(_BidirectionalIterator __x, typename iterator_traits< _BidirectionalIterator> ::difference_type 
# 225
__n = 1) 
# 226
{ 
# 230
std::advance(__x, -__n); 
# 231
return __x; 
# 232
} 
# 237
}
# 37 "/usr/include/c++/8/bits/ptr_traits.h" 3
namespace std __attribute((__visibility__("default"))) { 
# 41
class __undefined; 
# 44
template< class _Tp> 
# 45
struct __get_first_arg { 
# 46
using type = __undefined; }; 
# 48
template< template< class , class ...>  class _Template, class _Tp, class ...
# 49
_Types> 
# 50
struct __get_first_arg< _Template< _Tp, _Types...> >  { 
# 51
using type = _Tp; }; 
# 53
template< class _Tp> using __get_first_arg_t = typename __get_first_arg< _Tp> ::type; 
# 57
template< class _Tp, class _Up> 
# 58
struct __replace_first_arg { 
# 59
}; 
# 61
template< template< class , class ...>  class _Template, class _Up, class 
# 62
_Tp, class ..._Types> 
# 63
struct __replace_first_arg< _Template< _Tp, _Types...> , _Up>  { 
# 64
using type = _Template< _Up, _Types...> ; }; 
# 66
template< class _Tp, class _Up> using __replace_first_arg_t = typename __replace_first_arg< _Tp, _Up> ::type; 
# 69
template< class _Tp> using __make_not_void = typename conditional< is_void< _Tp> ::value, __undefined, _Tp> ::type; 
# 77
template< class _Ptr> 
# 78
struct pointer_traits { 
# 82
private: 
# 81
template< class _Tp> using __element_type = typename _Tp::element_type; 
# 84
template< class _Tp> using __difference_type = typename _Tp::difference_type; 
# 87
template< class _Tp, class _Up, class  = void> 
# 88
struct __rebind : public __replace_first_arg< _Tp, _Up>  { }; 
# 90
template< class _Tp, class _Up> 
# 91
struct __rebind< _Tp, _Up, __void_t< typename _Tp::template rebind< _Up> > >  { 
# 92
using type = typename _Tp::template rebind< _Up> ; }; 
# 96
public: using pointer = _Ptr; 
# 99
using element_type = __detected_or_t< __get_first_arg_t< _Ptr> , __element_type, _Ptr> ; 
# 103
using difference_type = __detected_or_t< long, __difference_type, _Ptr> ; 
# 107
template< class _Up> using rebind = typename __rebind< _Ptr, _Up> ::type; 
# 111
static _Ptr pointer_to(__make_not_void< __detected_or_t< __get_first_arg_t< _Ptr> , __element_type, _Ptr> >  &__e) 
# 112
{ return _Ptr::pointer_to(__e); } 
# 114
static_assert((!is_same< __detected_or_t< __get_first_arg_t< _Ptr> , __element_type, _Ptr> , __undefined> ::value), "pointer type defines element_type or is like SomePointer<T, Args>");
# 116
}; 
# 122
template< class _Tp> 
# 123
struct pointer_traits< _Tp *>  { 
# 126
typedef _Tp *pointer; 
# 128
typedef _Tp element_type; 
# 130
typedef ptrdiff_t difference_type; 
# 132
template< class _Up> using rebind = _Up *; 
# 141
static pointer pointer_to(__make_not_void< _Tp>  &__r) noexcept 
# 142
{ return std::addressof(__r); } 
# 143
}; 
# 146
template< class _Ptr, class _Tp> using __ptr_rebind = typename pointer_traits< _Ptr> ::template rebind< _Tp> ; 
# 149
template< class _Tp> constexpr _Tp *
# 151
__to_address(_Tp *__ptr) noexcept 
# 152
{ 
# 153
static_assert((!std::is_function< _Tp> ::value), "not a function pointer");
# 154
return __ptr; 
# 155
} 
# 158
template< class _Ptr> constexpr typename pointer_traits< _Ptr> ::element_type *
# 160
__to_address(const _Ptr &__ptr) 
# 161
{ return std::__to_address((__ptr.operator->())); } 
# 199 "/usr/include/c++/8/bits/ptr_traits.h" 3
}
# 72 "/usr/include/c++/8/bits/stl_iterator.h" 3
namespace std __attribute((__visibility__("default"))) { 
# 100 "/usr/include/c++/8/bits/stl_iterator.h" 3
template< class _Iterator> 
# 101
class reverse_iterator : public iterator< typename iterator_traits< _Iterator> ::iterator_category, typename iterator_traits< _Iterator> ::value_type, typename iterator_traits< _Iterator> ::difference_type, typename iterator_traits< _Iterator> ::pointer, typename iterator_traits< _Iterator> ::reference>  { 
# 109
protected: _Iterator current; 
# 111
typedef iterator_traits< _Iterator>  __traits_type; 
# 114
public: typedef _Iterator iterator_type; 
# 115
typedef typename iterator_traits< _Iterator> ::difference_type difference_type; 
# 116
typedef typename iterator_traits< _Iterator> ::pointer pointer; 
# 117
typedef typename iterator_traits< _Iterator> ::reference reference; 
# 127 "/usr/include/c++/8/bits/stl_iterator.h" 3
reverse_iterator() : current() { } 
# 133
explicit reverse_iterator(iterator_type __x) : current(__x) { } 
# 139
reverse_iterator(const reverse_iterator &__x) : current(__x.current) 
# 140
{ } 
# 146
template< class _Iter> 
# 148
reverse_iterator(const std::reverse_iterator< _Iter>  &__x) : current((__x.base())) 
# 149
{ } 
# 155
iterator_type base() const 
# 156
{ return current; } 
# 169 "/usr/include/c++/8/bits/stl_iterator.h" 3
reference operator*() const 
# 170
{ 
# 171
_Iterator __tmp = current; 
# 172
return *(--__tmp); 
# 173
} 
# 183 "/usr/include/c++/8/bits/stl_iterator.h" 3
pointer operator->() const 
# 184
{ return std::__addressof(operator*()); } 
# 192
reverse_iterator &operator++() 
# 193
{ 
# 194
--(current); 
# 195
return *this; 
# 196
} 
# 204
reverse_iterator operator++(int) 
# 205
{ 
# 206
reverse_iterator __tmp = *this; 
# 207
--(current); 
# 208
return __tmp; 
# 209
} 
# 217
reverse_iterator &operator--() 
# 218
{ 
# 219
++(current); 
# 220
return *this; 
# 221
} 
# 229
reverse_iterator operator--(int) 
# 230
{ 
# 231
reverse_iterator __tmp = *this; 
# 232
++(current); 
# 233
return __tmp; 
# 234
} 
# 242
reverse_iterator operator+(difference_type __n) const 
# 243
{ return ((reverse_iterator)((current) - __n)); } 
# 252
reverse_iterator &operator+=(difference_type __n) 
# 253
{ 
# 254
(current) -= __n; 
# 255
return *this; 
# 256
} 
# 264
reverse_iterator operator-(difference_type __n) const 
# 265
{ return ((reverse_iterator)((current) + __n)); } 
# 274
reverse_iterator &operator-=(difference_type __n) 
# 275
{ 
# 276
(current) += __n; 
# 277
return *this; 
# 278
} 
# 286
reference operator[](difference_type __n) const 
# 287
{ return *((*this) + __n); } 
# 288
}; 
# 300 "/usr/include/c++/8/bits/stl_iterator.h" 3
template< class _Iterator> inline bool 
# 302
operator==(const reverse_iterator< _Iterator>  &__x, const reverse_iterator< _Iterator>  &
# 303
__y) 
# 304
{ return (__x.base()) == (__y.base()); } 
# 306
template< class _Iterator> inline bool 
# 308
operator<(const reverse_iterator< _Iterator>  &__x, const reverse_iterator< _Iterator>  &
# 309
__y) 
# 310
{ return (__y.base()) < (__x.base()); } 
# 312
template< class _Iterator> inline bool 
# 314
operator!=(const reverse_iterator< _Iterator>  &__x, const reverse_iterator< _Iterator>  &
# 315
__y) 
# 316
{ return !(__x == __y); } 
# 318
template< class _Iterator> inline bool 
# 320
operator>(const reverse_iterator< _Iterator>  &__x, const reverse_iterator< _Iterator>  &
# 321
__y) 
# 322
{ return __y < __x; } 
# 324
template< class _Iterator> inline bool 
# 326
operator<=(const reverse_iterator< _Iterator>  &__x, const reverse_iterator< _Iterator>  &
# 327
__y) 
# 328
{ return !(__y < __x); } 
# 330
template< class _Iterator> inline bool 
# 332
operator>=(const reverse_iterator< _Iterator>  &__x, const reverse_iterator< _Iterator>  &
# 333
__y) 
# 334
{ return !(__x < __y); } 
# 338
template< class _IteratorL, class _IteratorR> inline bool 
# 340
operator==(const reverse_iterator< _IteratorL>  &__x, const reverse_iterator< _IteratorR>  &
# 341
__y) 
# 342
{ return (__x.base()) == (__y.base()); } 
# 344
template< class _IteratorL, class _IteratorR> inline bool 
# 346
operator<(const reverse_iterator< _IteratorL>  &__x, const reverse_iterator< _IteratorR>  &
# 347
__y) 
# 348
{ return (__y.base()) < (__x.base()); } 
# 350
template< class _IteratorL, class _IteratorR> inline bool 
# 352
operator!=(const reverse_iterator< _IteratorL>  &__x, const reverse_iterator< _IteratorR>  &
# 353
__y) 
# 354
{ return !(__x == __y); } 
# 356
template< class _IteratorL, class _IteratorR> inline bool 
# 358
operator>(const reverse_iterator< _IteratorL>  &__x, const reverse_iterator< _IteratorR>  &
# 359
__y) 
# 360
{ return __y < __x; } 
# 362
template< class _IteratorL, class _IteratorR> inline bool 
# 364
operator<=(const reverse_iterator< _IteratorL>  &__x, const reverse_iterator< _IteratorR>  &
# 365
__y) 
# 366
{ return !(__y < __x); } 
# 368
template< class _IteratorL, class _IteratorR> inline bool 
# 370
operator>=(const reverse_iterator< _IteratorL>  &__x, const reverse_iterator< _IteratorR>  &
# 371
__y) 
# 372
{ return !(__x < __y); } 
# 390 "/usr/include/c++/8/bits/stl_iterator.h" 3
template< class _IteratorL, class _IteratorR> inline auto 
# 392
operator-(const reverse_iterator< _IteratorL>  &__x, const reverse_iterator< _IteratorR>  &
# 393
__y)->__decltype(((__y.base()) - (__x.base()))) 
# 395
{ return (__y.base()) - (__x.base()); } 
# 398
template< class _Iterator> inline reverse_iterator< _Iterator>  
# 400
operator+(typename reverse_iterator< _Iterator> ::difference_type __n, const reverse_iterator< _Iterator>  &
# 401
__x) 
# 402
{ return ((reverse_iterator< _Iterator> )((__x.base()) - __n)); } 
# 406
template< class _Iterator> inline reverse_iterator< _Iterator>  
# 408
__make_reverse_iterator(_Iterator __i) 
# 409
{ return ((reverse_iterator< _Iterator> )(__i)); } 
# 417
template< class _Iterator> inline reverse_iterator< _Iterator>  
# 419
make_reverse_iterator(_Iterator __i) 
# 420
{ return ((reverse_iterator< _Iterator> )(__i)); } 
# 425
template< class _Iterator> auto 
# 427
__niter_base(reverse_iterator< _Iterator>  __it)->__decltype((__make_reverse_iterator(__niter_base((__it.base()))))) 
# 429
{ return __make_reverse_iterator(__niter_base((__it.base()))); } 
# 431
template< class _Iterator> 
# 432
struct __is_move_iterator< reverse_iterator< _Iterator> >  : public std::__is_move_iterator< _Iterator>  { 
# 434
}; 
# 436
template< class _Iterator> auto 
# 438
__miter_base(reverse_iterator< _Iterator>  __it)->__decltype((__make_reverse_iterator(__miter_base((__it.base()))))) 
# 440
{ return __make_reverse_iterator(__miter_base((__it.base()))); } 
# 454 "/usr/include/c++/8/bits/stl_iterator.h" 3
template< class _Container> 
# 455
class back_insert_iterator : public iterator< output_iterator_tag, void, void, void, void>  { 
# 459
protected: _Container *container; 
# 463
public: typedef _Container container_type; 
# 467
explicit back_insert_iterator(_Container &__x) : container(std::__addressof(__x)) 
# 468
{ } 
# 490 "/usr/include/c++/8/bits/stl_iterator.h" 3
back_insert_iterator &operator=(const typename _Container::value_type &__value) 
# 491
{ 
# 492
((container)->push_back(__value)); 
# 493
return *this; 
# 494
} 
# 497
back_insert_iterator &operator=(typename _Container::value_type &&__value) 
# 498
{ 
# 499
((container)->push_back(std::move(__value))); 
# 500
return *this; 
# 501
} 
# 506
back_insert_iterator &operator*() 
# 507
{ return *this; } 
# 511
back_insert_iterator &operator++() 
# 512
{ return *this; } 
# 516
back_insert_iterator operator++(int) 
# 517
{ return *this; } 
# 518
}; 
# 531 "/usr/include/c++/8/bits/stl_iterator.h" 3
template< class _Container> inline back_insert_iterator< _Container>  
# 533
back_inserter(_Container &__x) 
# 534
{ return ((back_insert_iterator< _Container> )(__x)); } 
# 546 "/usr/include/c++/8/bits/stl_iterator.h" 3
template< class _Container> 
# 547
class front_insert_iterator : public iterator< output_iterator_tag, void, void, void, void>  { 
# 551
protected: _Container *container; 
# 555
public: typedef _Container container_type; 
# 558
explicit front_insert_iterator(_Container &__x) : container(std::__addressof(__x)) 
# 559
{ } 
# 581 "/usr/include/c++/8/bits/stl_iterator.h" 3
front_insert_iterator &operator=(const typename _Container::value_type &__value) 
# 582
{ 
# 583
((container)->push_front(__value)); 
# 584
return *this; 
# 585
} 
# 588
front_insert_iterator &operator=(typename _Container::value_type &&__value) 
# 589
{ 
# 590
((container)->push_front(std::move(__value))); 
# 591
return *this; 
# 592
} 
# 597
front_insert_iterator &operator*() 
# 598
{ return *this; } 
# 602
front_insert_iterator &operator++() 
# 603
{ return *this; } 
# 607
front_insert_iterator operator++(int) 
# 608
{ return *this; } 
# 609
}; 
# 622 "/usr/include/c++/8/bits/stl_iterator.h" 3
template< class _Container> inline front_insert_iterator< _Container>  
# 624
front_inserter(_Container &__x) 
# 625
{ return ((front_insert_iterator< _Container> )(__x)); } 
# 641 "/usr/include/c++/8/bits/stl_iterator.h" 3
template< class _Container> 
# 642
class insert_iterator : public iterator< output_iterator_tag, void, void, void, void>  { 
# 646
protected: _Container *container; 
# 647
typename _Container::iterator iter; 
# 651
public: typedef _Container container_type; 
# 657
insert_iterator(_Container &__x, typename _Container::iterator __i) : container(std::__addressof(__x)), iter(__i) 
# 658
{ } 
# 693 "/usr/include/c++/8/bits/stl_iterator.h" 3
insert_iterator &operator=(const typename _Container::value_type &__value) 
# 694
{ 
# 695
(iter) = ((container)->insert(iter, __value)); 
# 696
++(iter); 
# 697
return *this; 
# 698
} 
# 701
insert_iterator &operator=(typename _Container::value_type &&__value) 
# 702
{ 
# 703
(iter) = ((container)->insert(iter, std::move(__value))); 
# 704
++(iter); 
# 705
return *this; 
# 706
} 
# 711
insert_iterator &operator*() 
# 712
{ return *this; } 
# 716
insert_iterator &operator++() 
# 717
{ return *this; } 
# 721
insert_iterator &operator++(int) 
# 722
{ return *this; } 
# 723
}; 
# 737 "/usr/include/c++/8/bits/stl_iterator.h" 3
template< class _Container, class _Iterator> inline insert_iterator< _Container>  
# 739
inserter(_Container &__x, _Iterator __i) 
# 740
{ 
# 741
return insert_iterator< _Container> (__x, (typename _Container::iterator)__i); 
# 743
} 
# 748
}
# 750
namespace __gnu_cxx __attribute((__visibility__("default"))) { 
# 761 "/usr/include/c++/8/bits/stl_iterator.h" 3
using std::iterator_traits;
# 762
using std::iterator;
# 763
template< class _Iterator, class _Container> 
# 764
class __normal_iterator { 
# 767
protected: _Iterator _M_current; 
# 769
typedef std::iterator_traits< _Iterator>  __traits_type; 
# 772
public: typedef _Iterator iterator_type; 
# 773
typedef typename std::iterator_traits< _Iterator> ::iterator_category iterator_category; 
# 774
typedef typename std::iterator_traits< _Iterator> ::value_type value_type; 
# 775
typedef typename std::iterator_traits< _Iterator> ::difference_type difference_type; 
# 776
typedef typename std::iterator_traits< _Iterator> ::reference reference; 
# 777
typedef typename std::iterator_traits< _Iterator> ::pointer pointer; 
# 779
constexpr __normal_iterator() noexcept : _M_current(_Iterator()) 
# 780
{ } 
# 783
explicit __normal_iterator(const _Iterator &__i) noexcept : _M_current(__i) 
# 784
{ } 
# 787
template< class _Iter> 
# 788
__normal_iterator(const __gnu_cxx::__normal_iterator< _Iter, typename __enable_if< std::__are_same< _Iter, typename _Container::pointer> ::__value, _Container> ::__type>  &
# 791
__i) noexcept : _M_current((__i.base())) 
# 792
{ } 
# 796
reference operator*() const noexcept 
# 797
{ return *(_M_current); } 
# 800
pointer operator->() const noexcept 
# 801
{ return _M_current; } 
# 804
__normal_iterator &operator++() noexcept 
# 805
{ 
# 806
++(_M_current); 
# 807
return *this; 
# 808
} 
# 811
__normal_iterator operator++(int) noexcept 
# 812
{ return ((__normal_iterator)((_M_current)++)); } 
# 816
__normal_iterator &operator--() noexcept 
# 817
{ 
# 818
--(_M_current); 
# 819
return *this; 
# 820
} 
# 823
__normal_iterator operator--(int) noexcept 
# 824
{ return ((__normal_iterator)((_M_current)--)); } 
# 828
reference operator[](difference_type __n) const noexcept 
# 829
{ return (_M_current)[__n]; } 
# 832
__normal_iterator &operator+=(difference_type __n) noexcept 
# 833
{ (_M_current) += __n; return *this; } 
# 836
__normal_iterator operator+(difference_type __n) const noexcept 
# 837
{ return ((__normal_iterator)((_M_current) + __n)); } 
# 840
__normal_iterator &operator-=(difference_type __n) noexcept 
# 841
{ (_M_current) -= __n; return *this; } 
# 844
__normal_iterator operator-(difference_type __n) const noexcept 
# 845
{ return ((__normal_iterator)((_M_current) - __n)); } 
# 848
const _Iterator &base() const noexcept 
# 849
{ return _M_current; } 
# 850
}; 
# 861 "/usr/include/c++/8/bits/stl_iterator.h" 3
template< class _IteratorL, class _IteratorR, class _Container> inline bool 
# 863
operator==(const __normal_iterator< _IteratorL, _Container>  &__lhs, const __normal_iterator< _IteratorR, _Container>  &
# 864
__rhs) noexcept 
# 866
{ return (__lhs.base()) == (__rhs.base()); } 
# 868
template< class _Iterator, class _Container> inline bool 
# 870
operator==(const __normal_iterator< _Iterator, _Container>  &__lhs, const __normal_iterator< _Iterator, _Container>  &
# 871
__rhs) noexcept 
# 873
{ return (__lhs.base()) == (__rhs.base()); } 
# 875
template< class _IteratorL, class _IteratorR, class _Container> inline bool 
# 877
operator!=(const __normal_iterator< _IteratorL, _Container>  &__lhs, const __normal_iterator< _IteratorR, _Container>  &
# 878
__rhs) noexcept 
# 880
{ return (__lhs.base()) != (__rhs.base()); } 
# 882
template< class _Iterator, class _Container> inline bool 
# 884
operator!=(const __normal_iterator< _Iterator, _Container>  &__lhs, const __normal_iterator< _Iterator, _Container>  &
# 885
__rhs) noexcept 
# 887
{ return (__lhs.base()) != (__rhs.base()); } 
# 890
template< class _IteratorL, class _IteratorR, class _Container> inline bool 
# 892
operator<(const __normal_iterator< _IteratorL, _Container>  &__lhs, const __normal_iterator< _IteratorR, _Container>  &
# 893
__rhs) noexcept 
# 895
{ return (__lhs.base()) < (__rhs.base()); } 
# 897
template< class _Iterator, class _Container> inline bool 
# 899
operator<(const __normal_iterator< _Iterator, _Container>  &__lhs, const __normal_iterator< _Iterator, _Container>  &
# 900
__rhs) noexcept 
# 902
{ return (__lhs.base()) < (__rhs.base()); } 
# 904
template< class _IteratorL, class _IteratorR, class _Container> inline bool 
# 906
operator>(const __normal_iterator< _IteratorL, _Container>  &__lhs, const __normal_iterator< _IteratorR, _Container>  &
# 907
__rhs) noexcept 
# 909
{ return (__lhs.base()) > (__rhs.base()); } 
# 911
template< class _Iterator, class _Container> inline bool 
# 913
operator>(const __normal_iterator< _Iterator, _Container>  &__lhs, const __normal_iterator< _Iterator, _Container>  &
# 914
__rhs) noexcept 
# 916
{ return (__lhs.base()) > (__rhs.base()); } 
# 918
template< class _IteratorL, class _IteratorR, class _Container> inline bool 
# 920
operator<=(const __normal_iterator< _IteratorL, _Container>  &__lhs, const __normal_iterator< _IteratorR, _Container>  &
# 921
__rhs) noexcept 
# 923
{ return (__lhs.base()) <= (__rhs.base()); } 
# 925
template< class _Iterator, class _Container> inline bool 
# 927
operator<=(const __normal_iterator< _Iterator, _Container>  &__lhs, const __normal_iterator< _Iterator, _Container>  &
# 928
__rhs) noexcept 
# 930
{ return (__lhs.base()) <= (__rhs.base()); } 
# 932
template< class _IteratorL, class _IteratorR, class _Container> inline bool 
# 934
operator>=(const __normal_iterator< _IteratorL, _Container>  &__lhs, const __normal_iterator< _IteratorR, _Container>  &
# 935
__rhs) noexcept 
# 937
{ return (__lhs.base()) >= (__rhs.base()); } 
# 939
template< class _Iterator, class _Container> inline bool 
# 941
operator>=(const __normal_iterator< _Iterator, _Container>  &__lhs, const __normal_iterator< _Iterator, _Container>  &
# 942
__rhs) noexcept 
# 944
{ return (__lhs.base()) >= (__rhs.base()); } 
# 950
template< class _IteratorL, class _IteratorR, class _Container> inline auto 
# 954
operator-(const __normal_iterator< _IteratorL, _Container>  &__lhs, const __normal_iterator< _IteratorR, _Container>  &
# 955
__rhs) noexcept->__decltype(((__lhs.base()) - (__rhs.base()))) 
# 962
{ return (__lhs.base()) - (__rhs.base()); } 
# 964
template< class _Iterator, class _Container> inline typename __normal_iterator< _Iterator, _Container> ::difference_type 
# 966
operator-(const __normal_iterator< _Iterator, _Container>  &__lhs, const __normal_iterator< _Iterator, _Container>  &
# 967
__rhs) noexcept 
# 969
{ return (__lhs.base()) - (__rhs.base()); } 
# 971
template< class _Iterator, class _Container> inline __normal_iterator< _Iterator, _Container>  
# 973
operator+(typename __normal_iterator< _Iterator, _Container> ::difference_type 
# 974
__n, const __normal_iterator< _Iterator, _Container>  &__i) noexcept 
# 976
{ return ((__normal_iterator< _Iterator, _Container> )((__i.base()) + __n)); } 
# 979
}
# 981
namespace std __attribute((__visibility__("default"))) { 
# 985
template< class _Iterator, class _Container> _Iterator 
# 987
__niter_base(__gnu_cxx::__normal_iterator< _Iterator, _Container>  __it) 
# 988
{ return (__it.base()); } 
# 1006 "/usr/include/c++/8/bits/stl_iterator.h" 3
template< class _Iterator> 
# 1007
class move_iterator { 
# 1010
protected: _Iterator _M_current; 
# 1012
typedef iterator_traits< _Iterator>  __traits_type; 
# 1013
typedef typename iterator_traits< _Iterator> ::reference __base_ref; 
# 1016
public: typedef _Iterator iterator_type; 
# 1017
typedef typename iterator_traits< _Iterator> ::iterator_category iterator_category; 
# 1018
typedef typename iterator_traits< _Iterator> ::value_type value_type; 
# 1019
typedef typename iterator_traits< _Iterator> ::difference_type difference_type; 
# 1021
typedef _Iterator pointer; 
# 1026
typedef typename conditional< is_reference< typename iterator_traits< _Iterator> ::reference> ::value, typename remove_reference< typename iterator_traits< _Iterator> ::reference> ::type &&, typename iterator_traits< _Iterator> ::reference> ::type reference; 
# 1029
move_iterator() : _M_current() 
# 1030
{ } 
# 1033
explicit move_iterator(iterator_type __i) : _M_current(__i) 
# 1034
{ } 
# 1036
template< class _Iter> 
# 1038
move_iterator(const std::move_iterator< _Iter>  &__i) : _M_current((__i.base())) 
# 1039
{ } 
# 1042
iterator_type base() const 
# 1043
{ return _M_current; } 
# 1046
reference operator*() const 
# 1047
{ return static_cast< reference>(*(_M_current)); } 
# 1050
pointer operator->() const 
# 1051
{ return _M_current; } 
# 1054
move_iterator &operator++() 
# 1055
{ 
# 1056
++(_M_current); 
# 1057
return *this; 
# 1058
} 
# 1061
move_iterator operator++(int) 
# 1062
{ 
# 1063
move_iterator __tmp = *this; 
# 1064
++(_M_current); 
# 1065
return __tmp; 
# 1066
} 
# 1069
move_iterator &operator--() 
# 1070
{ 
# 1071
--(_M_current); 
# 1072
return *this; 
# 1073
} 
# 1076
move_iterator operator--(int) 
# 1077
{ 
# 1078
move_iterator __tmp = *this; 
# 1079
--(_M_current); 
# 1080
return __tmp; 
# 1081
} 
# 1084
move_iterator operator+(difference_type __n) const 
# 1085
{ return ((move_iterator)((_M_current) + __n)); } 
# 1088
move_iterator &operator+=(difference_type __n) 
# 1089
{ 
# 1090
(_M_current) += __n; 
# 1091
return *this; 
# 1092
} 
# 1095
move_iterator operator-(difference_type __n) const 
# 1096
{ return ((move_iterator)((_M_current) - __n)); } 
# 1099
move_iterator &operator-=(difference_type __n) 
# 1100
{ 
# 1101
(_M_current) -= __n; 
# 1102
return *this; 
# 1103
} 
# 1106
reference operator[](difference_type __n) const 
# 1107
{ return std::move((_M_current)[__n]); } 
# 1108
}; 
# 1113
template< class _IteratorL, class _IteratorR> inline bool 
# 1115
operator==(const move_iterator< _IteratorL>  &__x, const move_iterator< _IteratorR>  &
# 1116
__y) 
# 1117
{ return (__x.base()) == (__y.base()); } 
# 1119
template< class _Iterator> inline bool 
# 1121
operator==(const move_iterator< _Iterator>  &__x, const move_iterator< _Iterator>  &
# 1122
__y) 
# 1123
{ return (__x.base()) == (__y.base()); } 
# 1125
template< class _IteratorL, class _IteratorR> inline bool 
# 1127
operator!=(const move_iterator< _IteratorL>  &__x, const move_iterator< _IteratorR>  &
# 1128
__y) 
# 1129
{ return !(__x == __y); } 
# 1131
template< class _Iterator> inline bool 
# 1133
operator!=(const move_iterator< _Iterator>  &__x, const move_iterator< _Iterator>  &
# 1134
__y) 
# 1135
{ return !(__x == __y); } 
# 1137
template< class _IteratorL, class _IteratorR> inline bool 
# 1139
operator<(const move_iterator< _IteratorL>  &__x, const move_iterator< _IteratorR>  &
# 1140
__y) 
# 1141
{ return (__x.base()) < (__y.base()); } 
# 1143
template< class _Iterator> inline bool 
# 1145
operator<(const move_iterator< _Iterator>  &__x, const move_iterator< _Iterator>  &
# 1146
__y) 
# 1147
{ return (__x.base()) < (__y.base()); } 
# 1149
template< class _IteratorL, class _IteratorR> inline bool 
# 1151
operator<=(const move_iterator< _IteratorL>  &__x, const move_iterator< _IteratorR>  &
# 1152
__y) 
# 1153
{ return !(__y < __x); } 
# 1155
template< class _Iterator> inline bool 
# 1157
operator<=(const move_iterator< _Iterator>  &__x, const move_iterator< _Iterator>  &
# 1158
__y) 
# 1159
{ return !(__y < __x); } 
# 1161
template< class _IteratorL, class _IteratorR> inline bool 
# 1163
operator>(const move_iterator< _IteratorL>  &__x, const move_iterator< _IteratorR>  &
# 1164
__y) 
# 1165
{ return __y < __x; } 
# 1167
template< class _Iterator> inline bool 
# 1169
operator>(const move_iterator< _Iterator>  &__x, const move_iterator< _Iterator>  &
# 1170
__y) 
# 1171
{ return __y < __x; } 
# 1173
template< class _IteratorL, class _IteratorR> inline bool 
# 1175
operator>=(const move_iterator< _IteratorL>  &__x, const move_iterator< _IteratorR>  &
# 1176
__y) 
# 1177
{ return !(__x < __y); } 
# 1179
template< class _Iterator> inline bool 
# 1181
operator>=(const move_iterator< _Iterator>  &__x, const move_iterator< _Iterator>  &
# 1182
__y) 
# 1183
{ return !(__x < __y); } 
# 1186
template< class _IteratorL, class _IteratorR> inline auto 
# 1188
operator-(const move_iterator< _IteratorL>  &__x, const move_iterator< _IteratorR>  &
# 1189
__y)->__decltype(((__x.base()) - (__y.base()))) 
# 1191
{ return (__x.base()) - (__y.base()); } 
# 1193
template< class _Iterator> inline move_iterator< _Iterator>  
# 1195
operator+(typename move_iterator< _Iterator> ::difference_type __n, const move_iterator< _Iterator>  &
# 1196
__x) 
# 1197
{ return __x + __n; } 
# 1199
template< class _Iterator> inline move_iterator< _Iterator>  
# 1201
make_move_iterator(_Iterator __i) 
# 1202
{ return ((move_iterator< _Iterator> )(__i)); } 
# 1204
template< class _Iterator, class _ReturnType = typename conditional< __move_if_noexcept_cond< typename iterator_traits< _Iterator> ::value_type> ::value, _Iterator, move_iterator< _Iterator> > ::type> inline _ReturnType 
# 1209
__make_move_if_noexcept_iterator(_Iterator __i) 
# 1210
{ return (_ReturnType)__i; } 
# 1214
template< class _Tp, class _ReturnType = typename conditional< __move_if_noexcept_cond< _Tp> ::value, const _Tp *, move_iterator< _Tp *> > ::type> inline _ReturnType 
# 1218
__make_move_if_noexcept_iterator(_Tp *__i) 
# 1219
{ return (_ReturnType)__i; } 
# 1223
template< class _Iterator> auto 
# 1225
__niter_base(move_iterator< _Iterator>  __it)->__decltype((make_move_iterator(__niter_base((__it.base()))))) 
# 1227
{ return make_move_iterator(__niter_base((__it.base()))); } 
# 1229
template< class _Iterator> 
# 1230
struct __is_move_iterator< move_iterator< _Iterator> >  { 
# 1232
enum { __value = 1}; 
# 1233
typedef __true_type __type; 
# 1234
}; 
# 1236
template< class _Iterator> auto 
# 1238
__miter_base(move_iterator< _Iterator>  __it)->__decltype((__miter_base((__it.base())))) 
# 1240
{ return __miter_base((__it.base())); } 
# 1272 "/usr/include/c++/8/bits/stl_iterator.h" 3
}
# 48 "/usr/include/c++/8/debug/debug.h" 3
namespace std { 
# 50
namespace __debug { }
# 51
}
# 56
namespace __gnu_debug { 
# 58
using namespace std::__debug;
# 59
}
# 33 "/usr/include/c++/8/bits/predefined_ops.h" 3
namespace __gnu_cxx { 
# 35
namespace __ops { 
# 37
struct _Iter_less_iter { 
# 39
template< class _Iterator1, class _Iterator2> constexpr bool 
# 42
operator()(_Iterator1 __it1, _Iterator2 __it2) const 
# 43
{ return (*__it1) < (*__it2); } 
# 44
}; 
# 48
constexpr _Iter_less_iter __iter_less_iter() 
# 49
{ return _Iter_less_iter(); } 
# 51
struct _Iter_less_val { 
# 54
constexpr _Iter_less_val() = default;
# 60
explicit _Iter_less_val(_Iter_less_iter) { } 
# 62
template< class _Iterator, class _Value> bool 
# 64
operator()(_Iterator __it, _Value &__val) const 
# 65
{ return (*__it) < __val; } 
# 66
}; 
# 69
inline _Iter_less_val __iter_less_val() 
# 70
{ return _Iter_less_val(); } 
# 73
inline _Iter_less_val __iter_comp_val(_Iter_less_iter) 
# 74
{ return _Iter_less_val(); } 
# 76
struct _Val_less_iter { 
# 79
constexpr _Val_less_iter() = default;
# 85
explicit _Val_less_iter(_Iter_less_iter) { } 
# 87
template< class _Value, class _Iterator> bool 
# 89
operator()(_Value &__val, _Iterator __it) const 
# 90
{ return __val < (*__it); } 
# 91
}; 
# 94
inline _Val_less_iter __val_less_iter() 
# 95
{ return _Val_less_iter(); } 
# 98
inline _Val_less_iter __val_comp_iter(_Iter_less_iter) 
# 99
{ return _Val_less_iter(); } 
# 101
struct _Iter_equal_to_iter { 
# 103
template< class _Iterator1, class _Iterator2> bool 
# 105
operator()(_Iterator1 __it1, _Iterator2 __it2) const 
# 106
{ return (*__it1) == (*__it2); } 
# 107
}; 
# 110
inline _Iter_equal_to_iter __iter_equal_to_iter() 
# 111
{ return _Iter_equal_to_iter(); } 
# 113
struct _Iter_equal_to_val { 
# 115
template< class _Iterator, class _Value> bool 
# 117
operator()(_Iterator __it, _Value &__val) const 
# 118
{ return (*__it) == __val; } 
# 119
}; 
# 122
inline _Iter_equal_to_val __iter_equal_to_val() 
# 123
{ return _Iter_equal_to_val(); } 
# 126
inline _Iter_equal_to_val __iter_comp_val(_Iter_equal_to_iter) 
# 127
{ return _Iter_equal_to_val(); } 
# 129
template< class _Compare> 
# 130
struct _Iter_comp_iter { 
# 132
_Compare _M_comp; 
# 135
constexpr explicit _Iter_comp_iter(_Compare __comp) : _M_comp(std::move(__comp)) 
# 137
{ } 
# 139
template< class _Iterator1, class _Iterator2> constexpr bool 
# 142
operator()(_Iterator1 __it1, _Iterator2 __it2) 
# 143
{ return (bool)(_M_comp)(*__it1, *__it2); } 
# 144
}; 
# 146
template< class _Compare> constexpr _Iter_comp_iter< _Compare>  
# 149
__iter_comp_iter(_Compare __comp) 
# 150
{ return ((_Iter_comp_iter< _Compare> )(std::move(__comp))); } 
# 152
template< class _Compare> 
# 153
struct _Iter_comp_val { 
# 155
_Compare _M_comp; 
# 158
explicit _Iter_comp_val(_Compare __comp) : _M_comp(std::move(__comp)) 
# 160
{ } 
# 163
explicit _Iter_comp_val(const _Iter_comp_iter< _Compare>  &__comp) : _M_comp((__comp._M_comp)) 
# 165
{ } 
# 169
explicit _Iter_comp_val(_Iter_comp_iter< _Compare>  &&__comp) : _M_comp(std::move((__comp._M_comp))) 
# 171
{ } 
# 174
template< class _Iterator, class _Value> bool 
# 176
operator()(_Iterator __it, _Value &__val) 
# 177
{ return (bool)(_M_comp)(*__it, __val); } 
# 178
}; 
# 180
template< class _Compare> inline _Iter_comp_val< _Compare>  
# 182
__iter_comp_val(_Compare __comp) 
# 183
{ return ((_Iter_comp_val< _Compare> )(std::move(__comp))); } 
# 185
template< class _Compare> inline _Iter_comp_val< _Compare>  
# 187
__iter_comp_val(_Iter_comp_iter< _Compare>  __comp) 
# 188
{ return ((_Iter_comp_val< _Compare> )(std::move(__comp))); } 
# 190
template< class _Compare> 
# 191
struct _Val_comp_iter { 
# 193
_Compare _M_comp; 
# 196
explicit _Val_comp_iter(_Compare __comp) : _M_comp(std::move(__comp)) 
# 198
{ } 
# 201
explicit _Val_comp_iter(const _Iter_comp_iter< _Compare>  &__comp) : _M_comp((__comp._M_comp)) 
# 203
{ } 
# 207
explicit _Val_comp_iter(_Iter_comp_iter< _Compare>  &&__comp) : _M_comp(std::move((__comp._M_comp))) 
# 209
{ } 
# 212
template< class _Value, class _Iterator> bool 
# 214
operator()(_Value &__val, _Iterator __it) 
# 215
{ return (bool)(_M_comp)(__val, *__it); } 
# 216
}; 
# 218
template< class _Compare> inline _Val_comp_iter< _Compare>  
# 220
__val_comp_iter(_Compare __comp) 
# 221
{ return ((_Val_comp_iter< _Compare> )(std::move(__comp))); } 
# 223
template< class _Compare> inline _Val_comp_iter< _Compare>  
# 225
__val_comp_iter(_Iter_comp_iter< _Compare>  __comp) 
# 226
{ return ((_Val_comp_iter< _Compare> )(std::move(__comp))); } 
# 228
template< class _Value> 
# 229
struct _Iter_equals_val { 
# 231
_Value &_M_value; 
# 234
explicit _Iter_equals_val(_Value &__value) : _M_value(__value) 
# 236
{ } 
# 238
template< class _Iterator> bool 
# 240
operator()(_Iterator __it) 
# 241
{ return (*__it) == (_M_value); } 
# 242
}; 
# 244
template< class _Value> inline _Iter_equals_val< _Value>  
# 246
__iter_equals_val(_Value &__val) 
# 247
{ return ((_Iter_equals_val< _Value> )(__val)); } 
# 249
template< class _Iterator1> 
# 250
struct _Iter_equals_iter { 
# 252
_Iterator1 _M_it1; 
# 255
explicit _Iter_equals_iter(_Iterator1 __it1) : _M_it1(__it1) 
# 257
{ } 
# 259
template< class _Iterator2> bool 
# 261
operator()(_Iterator2 __it2) 
# 262
{ return (*__it2) == (*(_M_it1)); } 
# 263
}; 
# 265
template< class _Iterator> inline _Iter_equals_iter< _Iterator>  
# 267
__iter_comp_iter(_Iter_equal_to_iter, _Iterator __it) 
# 268
{ return ((_Iter_equals_iter< _Iterator> )(__it)); } 
# 270
template< class _Predicate> 
# 271
struct _Iter_pred { 
# 273
_Predicate _M_pred; 
# 276
explicit _Iter_pred(_Predicate __pred) : _M_pred(std::move(__pred)) 
# 278
{ } 
# 280
template< class _Iterator> bool 
# 282
operator()(_Iterator __it) 
# 283
{ return (bool)(_M_pred)(*__it); } 
# 284
}; 
# 286
template< class _Predicate> inline _Iter_pred< _Predicate>  
# 288
__pred_iter(_Predicate __pred) 
# 289
{ return ((_Iter_pred< _Predicate> )(std::move(__pred))); } 
# 291
template< class _Compare, class _Value> 
# 292
struct _Iter_comp_to_val { 
# 294
_Compare _M_comp; 
# 295
_Value &_M_value; 
# 297
_Iter_comp_to_val(_Compare __comp, _Value &__value) : _M_comp(std::move(__comp)), _M_value(__value) 
# 299
{ } 
# 301
template< class _Iterator> bool 
# 303
operator()(_Iterator __it) 
# 304
{ return (bool)(_M_comp)(*__it, _M_value); } 
# 305
}; 
# 307
template< class _Compare, class _Value> _Iter_comp_to_val< _Compare, _Value>  
# 309
__iter_comp_val(_Compare __comp, _Value &__val) 
# 310
{ 
# 311
return _Iter_comp_to_val< _Compare, _Value> (std::move(__comp), __val); 
# 312
} 
# 314
template< class _Compare, class _Iterator1> 
# 315
struct _Iter_comp_to_iter { 
# 317
_Compare _M_comp; 
# 318
_Iterator1 _M_it1; 
# 320
_Iter_comp_to_iter(_Compare __comp, _Iterator1 __it1) : _M_comp(std::move(__comp)), _M_it1(__it1) 
# 322
{ } 
# 324
template< class _Iterator2> bool 
# 326
operator()(_Iterator2 __it2) 
# 327
{ return (bool)(_M_comp)(*__it2, *(_M_it1)); } 
# 328
}; 
# 330
template< class _Compare, class _Iterator> inline _Iter_comp_to_iter< _Compare, _Iterator>  
# 332
__iter_comp_iter(_Iter_comp_iter< _Compare>  __comp, _Iterator __it) 
# 333
{ 
# 334
return _Iter_comp_to_iter< _Compare, _Iterator> (std::move((__comp._M_comp)), __it); 
# 336
} 
# 338
template< class _Predicate> 
# 339
struct _Iter_negate { 
# 341
_Predicate _M_pred; 
# 344
explicit _Iter_negate(_Predicate __pred) : _M_pred(std::move(__pred)) 
# 346
{ } 
# 348
template< class _Iterator> bool 
# 350
operator()(_Iterator __it) 
# 351
{ return !((bool)(_M_pred)(*__it)); } 
# 352
}; 
# 354
template< class _Predicate> inline _Iter_negate< _Predicate>  
# 356
__negate(_Iter_pred< _Predicate>  __pred) 
# 357
{ return ((_Iter_negate< _Predicate> )(std::move((__pred._M_pred)))); } 
# 359
}
# 360
}
# 73 "/usr/include/c++/8/bits/stl_algobase.h" 3
namespace std __attribute((__visibility__("default"))) { 
# 118 "/usr/include/c++/8/bits/stl_algobase.h" 3
template< class _ForwardIterator1, class _ForwardIterator2> inline void 
# 120
iter_swap(_ForwardIterator1 __a, _ForwardIterator2 __b) 
# 121
{ 
# 148 "/usr/include/c++/8/bits/stl_algobase.h" 3
swap(*__a, *__b); 
# 150
} 
# 164 "/usr/include/c++/8/bits/stl_algobase.h" 3
template< class _ForwardIterator1, class _ForwardIterator2> _ForwardIterator2 
# 166
swap_ranges(_ForwardIterator1 __first1, _ForwardIterator1 __last1, _ForwardIterator2 
# 167
__first2) 
# 168
{ 
# 174
; 
# 176
for (; __first1 != __last1; (++__first1), ((void)(++__first2))) { 
# 177
std::iter_swap(__first1, __first2); }  
# 178
return __first2; 
# 179
} 
# 192 "/usr/include/c++/8/bits/stl_algobase.h" 3
template< class _Tp> constexpr const _Tp &
# 195
min(const _Tp &__a, const _Tp &__b) 
# 196
{ 
# 200
if (__b < __a) { 
# 201
return __b; }  
# 202
return __a; 
# 203
} 
# 216 "/usr/include/c++/8/bits/stl_algobase.h" 3
template< class _Tp> constexpr const _Tp &
# 219
max(const _Tp &__a, const _Tp &__b) 
# 220
{ 
# 224
if (__a < __b) { 
# 225
return __b; }  
# 226
return __a; 
# 227
} 
# 240 "/usr/include/c++/8/bits/stl_algobase.h" 3
template< class _Tp, class _Compare> constexpr const _Tp &
# 243
min(const _Tp &__a, const _Tp &__b, _Compare __comp) 
# 244
{ 
# 246
if (__comp(__b, __a)) { 
# 247
return __b; }  
# 248
return __a; 
# 249
} 
# 262 "/usr/include/c++/8/bits/stl_algobase.h" 3
template< class _Tp, class _Compare> constexpr const _Tp &
# 265
max(const _Tp &__a, const _Tp &__b, _Compare __comp) 
# 266
{ 
# 268
if (__comp(__a, __b)) { 
# 269
return __b; }  
# 270
return __a; 
# 271
} 
# 275
template< class _Iterator> inline _Iterator 
# 277
__niter_base(_Iterator __it) 
# 278
{ return __it; } 
# 286
template< bool , bool , class > 
# 287
struct __copy_move { 
# 289
template< class _II, class _OI> static _OI 
# 291
__copy_m(_II __first, _II __last, _OI __result) 
# 292
{ 
# 293
for (; __first != __last; (++__result), ((void)(++__first))) { 
# 294
(*__result) = (*__first); }  
# 295
return __result; 
# 296
} 
# 297
}; 
# 300
template< class _Category> 
# 301
struct __copy_move< true, false, _Category>  { 
# 303
template< class _II, class _OI> static _OI 
# 305
__copy_m(_II __first, _II __last, _OI __result) 
# 306
{ 
# 307
for (; __first != __last; (++__result), ((void)(++__first))) { 
# 308
(*__result) = std::move(*__first); }  
# 309
return __result; 
# 310
} 
# 311
}; 
# 315
template<> struct __copy_move< false, false, random_access_iterator_tag>  { 
# 317
template< class _II, class _OI> static _OI 
# 319
__copy_m(_II __first, _II __last, _OI __result) 
# 320
{ 
# 321
typedef typename iterator_traits< _II> ::difference_type _Distance; 
# 322
for (_Distance __n = __last - __first; __n > 0; --__n) 
# 323
{ 
# 324
(*__result) = (*__first); 
# 325
++__first; 
# 326
++__result; 
# 327
}  
# 328
return __result; 
# 329
} 
# 330
}; 
# 334
template<> struct __copy_move< true, false, random_access_iterator_tag>  { 
# 336
template< class _II, class _OI> static _OI 
# 338
__copy_m(_II __first, _II __last, _OI __result) 
# 339
{ 
# 340
typedef typename iterator_traits< _II> ::difference_type _Distance; 
# 341
for (_Distance __n = __last - __first; __n > 0; --__n) 
# 342
{ 
# 343
(*__result) = std::move(*__first); 
# 344
++__first; 
# 345
++__result; 
# 346
}  
# 347
return __result; 
# 348
} 
# 349
}; 
# 352
template< bool _IsMove> 
# 353
struct __copy_move< _IsMove, true, random_access_iterator_tag>  { 
# 355
template< class _Tp> static _Tp *
# 357
__copy_m(const _Tp *__first, const _Tp *__last, _Tp *__result) 
# 358
{ 
# 360
using __assignable = conditional< _IsMove, is_move_assignable< _Tp> , is_copy_assignable< _Tp> > ; 
# 364
static_assert((__assignable::type::value), "type is not assignable");
# 366
const ptrdiff_t _Num = __last - __first; 
# 367
if (_Num) { 
# 368
__builtin_memmove(__result, __first, sizeof(_Tp) * _Num); }  
# 369
return __result + _Num; 
# 370
} 
# 371
}; 
# 373
template< bool _IsMove, class _II, class _OI> inline _OI 
# 375
__copy_move_a(_II __first, _II __last, _OI __result) 
# 376
{ 
# 377
typedef typename iterator_traits< _II> ::value_type _ValueTypeI; 
# 378
typedef typename iterator_traits< _OI> ::value_type _ValueTypeO; 
# 379
typedef typename iterator_traits< _II> ::iterator_category _Category; 
# 380
const bool __simple = (__is_trivial(_ValueTypeI) && __is_pointer< _II> ::__value && __is_pointer< _OI> ::__value && __are_same< typename iterator_traits< _II> ::value_type, typename iterator_traits< _OI> ::value_type> ::__value); 
# 385
return std::__copy_move< _IsMove, __simple, typename iterator_traits< _II> ::iterator_category> ::__copy_m(__first, __last, __result); 
# 387
} 
# 391
template< class _CharT> struct char_traits; 
# 394
template< class _CharT, class _Traits> class istreambuf_iterator; 
# 397
template< class _CharT, class _Traits> class ostreambuf_iterator; 
# 400
template< bool _IsMove, class _CharT> typename __gnu_cxx::__enable_if< __is_char< _CharT> ::__value, ostreambuf_iterator< _CharT, char_traits< _CharT> > > ::__type __copy_move_a2(_CharT *, _CharT *, ostreambuf_iterator< _CharT, char_traits< _CharT> > ); 
# 406
template< bool _IsMove, class _CharT> typename __gnu_cxx::__enable_if< __is_char< _CharT> ::__value, ostreambuf_iterator< _CharT, char_traits< _CharT> > > ::__type __copy_move_a2(const _CharT *, const _CharT *, ostreambuf_iterator< _CharT, char_traits< _CharT> > ); 
# 412
template< bool _IsMove, class _CharT> typename __gnu_cxx::__enable_if< __is_char< _CharT> ::__value, _CharT *> ::__type __copy_move_a2(istreambuf_iterator< _CharT, char_traits< _CharT> > , istreambuf_iterator< _CharT, char_traits< _CharT> > , _CharT *); 
# 418
template< bool _IsMove, class _II, class _OI> inline _OI 
# 420
__copy_move_a2(_II __first, _II __last, _OI __result) 
# 421
{ 
# 422
return (_OI)std::__copy_move_a< _IsMove> (std::__niter_base(__first), std::__niter_base(__last), std::__niter_base(__result)); 
# 425
} 
# 444 "/usr/include/c++/8/bits/stl_algobase.h" 3
template< class _II, class _OI> inline _OI 
# 446
copy(_II __first, _II __last, _OI __result) 
# 447
{ 
# 452
; 
# 454
return std::__copy_move_a2< __is_move_iterator< _II> ::__value> (std::__miter_base(__first), std::__miter_base(__last), __result); 
# 457
} 
# 477 "/usr/include/c++/8/bits/stl_algobase.h" 3
template< class _II, class _OI> inline _OI 
# 479
move(_II __first, _II __last, _OI __result) 
# 480
{ 
# 485
; 
# 487
return std::__copy_move_a2< true> (std::__miter_base(__first), std::__miter_base(__last), __result); 
# 489
} 
# 496
template< bool , bool , class > 
# 497
struct __copy_move_backward { 
# 499
template< class _BI1, class _BI2> static _BI2 
# 501
__copy_move_b(_BI1 __first, _BI1 __last, _BI2 __result) 
# 502
{ 
# 503
while (__first != __last) { 
# 504
(*(--__result)) = (*(--__last)); }  
# 505
return __result; 
# 506
} 
# 507
}; 
# 510
template< class _Category> 
# 511
struct __copy_move_backward< true, false, _Category>  { 
# 513
template< class _BI1, class _BI2> static _BI2 
# 515
__copy_move_b(_BI1 __first, _BI1 __last, _BI2 __result) 
# 516
{ 
# 517
while (__first != __last) { 
# 518
(*(--__result)) = std::move(*(--__last)); }  
# 519
return __result; 
# 520
} 
# 521
}; 
# 525
template<> struct __copy_move_backward< false, false, random_access_iterator_tag>  { 
# 527
template< class _BI1, class _BI2> static _BI2 
# 529
__copy_move_b(_BI1 __first, _BI1 __last, _BI2 __result) 
# 530
{ 
# 531
typename iterator_traits< _BI1> ::difference_type __n; 
# 532
for (__n = (__last - __first); __n > 0; --__n) { 
# 533
(*(--__result)) = (*(--__last)); }  
# 534
return __result; 
# 535
} 
# 536
}; 
# 540
template<> struct __copy_move_backward< true, false, random_access_iterator_tag>  { 
# 542
template< class _BI1, class _BI2> static _BI2 
# 544
__copy_move_b(_BI1 __first, _BI1 __last, _BI2 __result) 
# 545
{ 
# 546
typename iterator_traits< _BI1> ::difference_type __n; 
# 547
for (__n = (__last - __first); __n > 0; --__n) { 
# 548
(*(--__result)) = std::move(*(--__last)); }  
# 549
return __result; 
# 550
} 
# 551
}; 
# 554
template< bool _IsMove> 
# 555
struct __copy_move_backward< _IsMove, true, random_access_iterator_tag>  { 
# 557
template< class _Tp> static _Tp *
# 559
__copy_move_b(const _Tp *__first, const _Tp *__last, _Tp *__result) 
# 560
{ 
# 562
using __assignable = conditional< _IsMove, is_move_assignable< _Tp> , is_copy_assignable< _Tp> > ; 
# 566
static_assert((__assignable::type::value), "type is not assignable");
# 568
const ptrdiff_t _Num = __last - __first; 
# 569
if (_Num) { 
# 570
__builtin_memmove(__result - _Num, __first, sizeof(_Tp) * _Num); }  
# 571
return __result - _Num; 
# 572
} 
# 573
}; 
# 575
template< bool _IsMove, class _BI1, class _BI2> inline _BI2 
# 577
__copy_move_backward_a(_BI1 __first, _BI1 __last, _BI2 __result) 
# 578
{ 
# 579
typedef typename iterator_traits< _BI1> ::value_type _ValueType1; 
# 580
typedef typename iterator_traits< _BI2> ::value_type _ValueType2; 
# 581
typedef typename iterator_traits< _BI1> ::iterator_category _Category; 
# 582
const bool __simple = (__is_trivial(_ValueType1) && __is_pointer< _BI1> ::__value && __is_pointer< _BI2> ::__value && __are_same< typename iterator_traits< _BI1> ::value_type, typename iterator_traits< _BI2> ::value_type> ::__value); 
# 587
return std::__copy_move_backward< _IsMove, __simple, typename iterator_traits< _BI1> ::iterator_category> ::__copy_move_b(__first, __last, __result); 
# 591
} 
# 593
template< bool _IsMove, class _BI1, class _BI2> inline _BI2 
# 595
__copy_move_backward_a2(_BI1 __first, _BI1 __last, _BI2 __result) 
# 596
{ 
# 597
return (_BI2)std::__copy_move_backward_a< _IsMove> (std::__niter_base(__first), std::__niter_base(__last), std::__niter_base(__result)); 
# 600
} 
# 620 "/usr/include/c++/8/bits/stl_algobase.h" 3
template< class _BI1, class _BI2> inline _BI2 
# 622
copy_backward(_BI1 __first, _BI1 __last, _BI2 __result) 
# 623
{ 
# 630
; 
# 632
return std::__copy_move_backward_a2< __is_move_iterator< _BI1> ::__value> (std::__miter_base(__first), std::__miter_base(__last), __result); 
# 635
} 
# 656 "/usr/include/c++/8/bits/stl_algobase.h" 3
template< class _BI1, class _BI2> inline _BI2 
# 658
move_backward(_BI1 __first, _BI1 __last, _BI2 __result) 
# 659
{ 
# 666
; 
# 668
return std::__copy_move_backward_a2< true> (std::__miter_base(__first), std::__miter_base(__last), __result); 
# 671
} 
# 678
template< class _ForwardIterator, class _Tp> inline typename __gnu_cxx::__enable_if< !__is_scalar< _Tp> ::__value, void> ::__type 
# 681
__fill_a(_ForwardIterator __first, _ForwardIterator __last, const _Tp &
# 682
__value) 
# 683
{ 
# 684
for (; __first != __last; ++__first) { 
# 685
(*__first) = __value; }  
# 686
} 
# 688
template< class _ForwardIterator, class _Tp> inline typename __gnu_cxx::__enable_if< __is_scalar< _Tp> ::__value, void> ::__type 
# 691
__fill_a(_ForwardIterator __first, _ForwardIterator __last, const _Tp &
# 692
__value) 
# 693
{ 
# 694
const _Tp __tmp = __value; 
# 695
for (; __first != __last; ++__first) { 
# 696
(*__first) = __tmp; }  
# 697
} 
# 700
template< class _Tp> inline typename __gnu_cxx::__enable_if< __is_byte< _Tp> ::__value, void> ::__type 
# 703
__fill_a(_Tp *__first, _Tp *__last, const _Tp &__c) 
# 704
{ 
# 705
const _Tp __tmp = __c; 
# 706
if (const size_t __len = __last - __first) { 
# 707
__builtin_memset(__first, static_cast< unsigned char>(__tmp), __len); }  
# 708
} 
# 722 "/usr/include/c++/8/bits/stl_algobase.h" 3
template< class _ForwardIterator, class _Tp> inline void 
# 724
fill(_ForwardIterator __first, _ForwardIterator __last, const _Tp &__value) 
# 725
{ 
# 729
; 
# 731
std::__fill_a(std::__niter_base(__first), std::__niter_base(__last), __value); 
# 733
} 
# 735
template< class _OutputIterator, class _Size, class _Tp> inline typename __gnu_cxx::__enable_if< !__is_scalar< _Tp> ::__value, _OutputIterator> ::__type 
# 738
__fill_n_a(_OutputIterator __first, _Size __n, const _Tp &__value) 
# 739
{ 
# 740
for (__decltype((__n + 0)) __niter = __n; __niter > 0; (--__niter), ((void)(++__first))) { 
# 742
(*__first) = __value; }  
# 743
return __first; 
# 744
} 
# 746
template< class _OutputIterator, class _Size, class _Tp> inline typename __gnu_cxx::__enable_if< __is_scalar< _Tp> ::__value, _OutputIterator> ::__type 
# 749
__fill_n_a(_OutputIterator __first, _Size __n, const _Tp &__value) 
# 750
{ 
# 751
const _Tp __tmp = __value; 
# 752
for (__decltype((__n + 0)) __niter = __n; __niter > 0; (--__niter), ((void)(++__first))) { 
# 754
(*__first) = __tmp; }  
# 755
return __first; 
# 756
} 
# 758
template< class _Size, class _Tp> inline typename __gnu_cxx::__enable_if< __is_byte< _Tp> ::__value, _Tp *> ::__type 
# 761
__fill_n_a(_Tp *__first, _Size __n, const _Tp &__c) 
# 762
{ 
# 763
std::__fill_a(__first, __first + __n, __c); 
# 764
return __first + __n; 
# 765
} 
# 782 "/usr/include/c++/8/bits/stl_algobase.h" 3
template< class _OI, class _Size, class _Tp> inline _OI 
# 784
fill_n(_OI __first, _Size __n, const _Tp &__value) 
# 785
{ 
# 789
return (_OI)std::__fill_n_a(std::__niter_base(__first), __n, __value); 
# 790
} 
# 792
template< bool _BoolType> 
# 793
struct __equal { 
# 795
template< class _II1, class _II2> static bool 
# 797
equal(_II1 __first1, _II1 __last1, _II2 __first2) 
# 798
{ 
# 799
for (; __first1 != __last1; (++__first1), ((void)(++__first2))) { 
# 800
if (!((*__first1) == (*__first2))) { 
# 801
return false; }  }  
# 802
return true; 
# 803
} 
# 804
}; 
# 807
template<> struct __equal< true>  { 
# 809
template< class _Tp> static bool 
# 811
equal(const _Tp *__first1, const _Tp *__last1, const _Tp *__first2) 
# 812
{ 
# 813
if (const size_t __len = __last1 - __first1) { 
# 814
return !(__builtin_memcmp(__first1, __first2, sizeof(_Tp) * __len)); }  
# 815
return true; 
# 816
} 
# 817
}; 
# 819
template< class _II1, class _II2> inline bool 
# 821
__equal_aux(_II1 __first1, _II1 __last1, _II2 __first2) 
# 822
{ 
# 823
typedef typename iterator_traits< _II1> ::value_type _ValueType1; 
# 824
typedef typename iterator_traits< _II2> ::value_type _ValueType2; 
# 825
const bool __simple = ((__is_integer< typename iterator_traits< _II1> ::value_type> ::__value || __is_pointer< typename iterator_traits< _II1> ::value_type> ::__value) && __is_pointer< _II1> ::__value && __is_pointer< _II2> ::__value && __are_same< typename iterator_traits< _II1> ::value_type, typename iterator_traits< _II2> ::value_type> ::__value); 
# 831
return std::__equal< __simple> ::equal(__first1, __last1, __first2); 
# 832
} 
# 834
template< class , class > 
# 835
struct __lc_rai { 
# 837
template< class _II1, class _II2> static _II1 
# 839
__newlast1(_II1, _II1 __last1, _II2, _II2) 
# 840
{ return __last1; } 
# 842
template< class _II> static bool 
# 844
__cnd2(_II __first, _II __last) 
# 845
{ return __first != __last; } 
# 846
}; 
# 849
template<> struct __lc_rai< random_access_iterator_tag, random_access_iterator_tag>  { 
# 851
template< class _RAI1, class _RAI2> static _RAI1 
# 853
__newlast1(_RAI1 __first1, _RAI1 __last1, _RAI2 
# 854
__first2, _RAI2 __last2) 
# 855
{ 
# 857
const typename iterator_traits< _RAI1> ::difference_type __diff1 = __last1 - __first1; 
# 859
const typename iterator_traits< _RAI2> ::difference_type __diff2 = __last2 - __first2; 
# 860
return (__diff2 < __diff1) ? __first1 + __diff2 : __last1; 
# 861
} 
# 863
template< class _RAI> static bool 
# 865
__cnd2(_RAI, _RAI) 
# 866
{ return true; } 
# 867
}; 
# 869
template< class _II1, class _II2, class _Compare> bool 
# 871
__lexicographical_compare_impl(_II1 __first1, _II1 __last1, _II2 
# 872
__first2, _II2 __last2, _Compare 
# 873
__comp) 
# 874
{ 
# 875
typedef typename iterator_traits< _II1> ::iterator_category _Category1; 
# 876
typedef typename iterator_traits< _II2> ::iterator_category _Category2; 
# 877
typedef __lc_rai< typename iterator_traits< _II1> ::iterator_category, typename iterator_traits< _II2> ::iterator_category>  __rai_type; 
# 879
__last1 = __rai_type::__newlast1(__first1, __last1, __first2, __last2); 
# 880
for (; (__first1 != __last1) && __rai_type::__cnd2(__first2, __last2); (++__first1), ((void)(++__first2))) 
# 882
{ 
# 883
if (__comp(__first1, __first2)) { 
# 884
return true; }  
# 885
if (__comp(__first2, __first1)) { 
# 886
return false; }  
# 887
}  
# 888
return (__first1 == __last1) && (__first2 != __last2); 
# 889
} 
# 891
template< bool _BoolType> 
# 892
struct __lexicographical_compare { 
# 894
template< class _II1, class _II2> static bool __lc(_II1, _II1, _II2, _II2); 
# 896
}; 
# 898
template< bool _BoolType> 
# 899
template< class _II1, class _II2> bool 
# 902
__lexicographical_compare< _BoolType> ::__lc(_II1 __first1, _II1 __last1, _II2 __first2, _II2 __last2) 
# 903
{ 
# 904
return std::__lexicographical_compare_impl(__first1, __last1, __first2, __last2, __gnu_cxx::__ops::__iter_less_iter()); 
# 907
} 
# 910
template<> struct __lexicographical_compare< true>  { 
# 912
template< class _Tp, class _Up> static bool 
# 914
__lc(const _Tp *__first1, const _Tp *__last1, const _Up *
# 915
__first2, const _Up *__last2) 
# 916
{ 
# 917
const size_t __len1 = __last1 - __first1; 
# 918
const size_t __len2 = __last2 - __first2; 
# 919
if (const size_t __len = std::min(__len1, __len2)) { 
# 920
if (int __result = __builtin_memcmp(__first1, __first2, __len)) { 
# 921
return __result < 0; }  }  
# 922
return __len1 < __len2; 
# 923
} 
# 924
}; 
# 926
template< class _II1, class _II2> inline bool 
# 928
__lexicographical_compare_aux(_II1 __first1, _II1 __last1, _II2 
# 929
__first2, _II2 __last2) 
# 930
{ 
# 931
typedef typename iterator_traits< _II1> ::value_type _ValueType1; 
# 932
typedef typename iterator_traits< _II2> ::value_type _ValueType2; 
# 933
const bool __simple = (__is_byte< typename iterator_traits< _II1> ::value_type> ::__value && __is_byte< typename iterator_traits< _II2> ::value_type> ::__value && (!__gnu_cxx::__numeric_traits< typename iterator_traits< _II1> ::value_type> ::__is_signed) && (!__gnu_cxx::__numeric_traits< typename iterator_traits< _II2> ::value_type> ::__is_signed) && __is_pointer< _II1> ::__value && __is_pointer< _II2> ::__value); 
# 940
return std::__lexicographical_compare< __simple> ::__lc(__first1, __last1, __first2, __last2); 
# 942
} 
# 944
template< class _ForwardIterator, class _Tp, class _Compare> _ForwardIterator 
# 946
__lower_bound(_ForwardIterator __first, _ForwardIterator __last, const _Tp &
# 947
__val, _Compare __comp) 
# 948
{ 
# 950
typedef typename iterator_traits< _ForwardIterator> ::difference_type _DistanceType; 
# 952
_DistanceType __len = std::distance(__first, __last); 
# 954
while (__len > 0) 
# 955
{ 
# 956
_DistanceType __half = __len >> 1; 
# 957
_ForwardIterator __middle = __first; 
# 958
std::advance(__middle, __half); 
# 959
if (__comp(__middle, __val)) 
# 960
{ 
# 961
__first = __middle; 
# 962
++__first; 
# 963
__len = ((__len - __half) - 1); 
# 964
} else { 
# 966
__len = __half; }  
# 967
}  
# 968
return __first; 
# 969
} 
# 982 "/usr/include/c++/8/bits/stl_algobase.h" 3
template< class _ForwardIterator, class _Tp> inline _ForwardIterator 
# 984
lower_bound(_ForwardIterator __first, _ForwardIterator __last, const _Tp &
# 985
__val) 
# 986
{ 
# 991
; 
# 993
return std::__lower_bound(__first, __last, __val, __gnu_cxx::__ops::__iter_less_val()); 
# 995
} 
# 1000
constexpr int __lg(int __n) 
# 1001
{ return ((((int)sizeof(int)) * 8) - 1) - __builtin_clz(__n); } 
# 1004
constexpr unsigned __lg(unsigned __n) 
# 1005
{ return ((((int)sizeof(int)) * 8) - 1) - __builtin_clz(__n); } 
# 1008
constexpr long __lg(long __n) 
# 1009
{ return ((((int)sizeof(long)) * 8) - 1) - __builtin_clzl(__n); } 
# 1012
constexpr unsigned long __lg(unsigned long __n) 
# 1013
{ return ((((int)sizeof(long)) * 8) - 1) - __builtin_clzl(__n); } 
# 1016
constexpr long long __lg(long long __n) 
# 1017
{ return ((((int)sizeof(long long)) * 8) - 1) - __builtin_clzll(__n); } 
# 1020
constexpr unsigned long long __lg(unsigned long long __n) 
# 1021
{ return ((((int)sizeof(long long)) * 8) - 1) - __builtin_clzll(__n); } 
# 1037 "/usr/include/c++/8/bits/stl_algobase.h" 3
template< class _II1, class _II2> inline bool 
# 1039
equal(_II1 __first1, _II1 __last1, _II2 __first2) 
# 1040
{ 
# 1047
; 
# 1049
return std::__equal_aux(std::__niter_base(__first1), std::__niter_base(__last1), std::__niter_base(__first2)); 
# 1052
} 
# 1069 "/usr/include/c++/8/bits/stl_algobase.h" 3
template< class _IIter1, class _IIter2, class _BinaryPredicate> inline bool 
# 1071
equal(_IIter1 __first1, _IIter1 __last1, _IIter2 
# 1072
__first2, _BinaryPredicate __binary_pred) 
# 1073
{ 
# 1077
; 
# 1079
for (; __first1 != __last1; (++__first1), ((void)(++__first2))) { 
# 1080
if (!((bool)__binary_pred(*__first1, *__first2))) { 
# 1081
return false; }  }  
# 1082
return true; 
# 1083
} 
# 1087
template< class _II1, class _II2> inline bool 
# 1089
__equal4(_II1 __first1, _II1 __last1, _II2 __first2, _II2 __last2) 
# 1090
{ 
# 1091
using _RATag = random_access_iterator_tag; 
# 1092
using _Cat1 = typename iterator_traits< _II1> ::iterator_category; 
# 1093
using _Cat2 = typename iterator_traits< _II2> ::iterator_category; 
# 1094
using _RAIters = __and_< is_same< typename iterator_traits< _II1> ::iterator_category, random_access_iterator_tag> , is_same< typename iterator_traits< _II2> ::iterator_category, random_access_iterator_tag> > ; 
# 1095
if (_RAIters()) 
# 1096
{ 
# 1097
auto __d1 = std::distance(__first1, __last1); 
# 1098
auto __d2 = std::distance(__first2, __last2); 
# 1099
if (__d1 != __d2) { 
# 1100
return false; }  
# 1101
return std::equal(__first1, __last1, __first2); 
# 1102
}  
# 1104
for (; (__first1 != __last1) && (__first2 != __last2); (++__first1), ((void)(++__first2))) { 
# 1106
if (!((*__first1) == (*__first2))) { 
# 1107
return false; }  }  
# 1108
return (__first1 == __last1) && (__first2 == __last2); 
# 1109
} 
# 1112
template< class _II1, class _II2, class _BinaryPredicate> inline bool 
# 1114
__equal4(_II1 __first1, _II1 __last1, _II2 __first2, _II2 __last2, _BinaryPredicate 
# 1115
__binary_pred) 
# 1116
{ 
# 1117
using _RATag = random_access_iterator_tag; 
# 1118
using _Cat1 = typename iterator_traits< _II1> ::iterator_category; 
# 1119
using _Cat2 = typename iterator_traits< _II2> ::iterator_category; 
# 1120
using _RAIters = __and_< is_same< typename iterator_traits< _II1> ::iterator_category, random_access_iterator_tag> , is_same< typename iterator_traits< _II2> ::iterator_category, random_access_iterator_tag> > ; 
# 1121
if (_RAIters()) 
# 1122
{ 
# 1123
auto __d1 = std::distance(__first1, __last1); 
# 1124
auto __d2 = std::distance(__first2, __last2); 
# 1125
if (__d1 != __d2) { 
# 1126
return false; }  
# 1127
return std::equal(__first1, __last1, __first2, __binary_pred); 
# 1129
}  
# 1131
for (; (__first1 != __last1) && (__first2 != __last2); (++__first1), ((void)(++__first2))) { 
# 1133
if (!((bool)__binary_pred(*__first1, *__first2))) { 
# 1134
return false; }  }  
# 1135
return (__first1 == __last1) && (__first2 == __last2); 
# 1136
} 
# 1156 "/usr/include/c++/8/bits/stl_algobase.h" 3
template< class _II1, class _II2> inline bool 
# 1158
equal(_II1 __first1, _II1 __last1, _II2 __first2, _II2 __last2) 
# 1159
{ 
# 1166
; 
# 1167
; 
# 1169
return std::__equal4(__first1, __last1, __first2, __last2); 
# 1170
} 
# 1188 "/usr/include/c++/8/bits/stl_algobase.h" 3
template< class _IIter1, class _IIter2, class _BinaryPredicate> inline bool 
# 1190
equal(_IIter1 __first1, _IIter1 __last1, _IIter2 
# 1191
__first2, _IIter2 __last2, _BinaryPredicate __binary_pred) 
# 1192
{ 
# 1196
; 
# 1197
; 
# 1199
return std::__equal4(__first1, __last1, __first2, __last2, __binary_pred); 
# 1201
} 
# 1219 "/usr/include/c++/8/bits/stl_algobase.h" 3
template< class _II1, class _II2> inline bool 
# 1221
lexicographical_compare(_II1 __first1, _II1 __last1, _II2 
# 1222
__first2, _II2 __last2) 
# 1223
{ 
# 1233
; 
# 1234
; 
# 1236
return std::__lexicographical_compare_aux(std::__niter_base(__first1), std::__niter_base(__last1), std::__niter_base(__first2), std::__niter_base(__last2)); 
# 1240
} 
# 1255 "/usr/include/c++/8/bits/stl_algobase.h" 3
template< class _II1, class _II2, class _Compare> inline bool 
# 1257
lexicographical_compare(_II1 __first1, _II1 __last1, _II2 
# 1258
__first2, _II2 __last2, _Compare __comp) 
# 1259
{ 
# 1263
; 
# 1264
; 
# 1266
return std::__lexicographical_compare_impl(__first1, __last1, __first2, __last2, __gnu_cxx::__ops::__iter_comp_iter(__comp)); 
# 1269
} 
# 1271
template< class _InputIterator1, class _InputIterator2, class 
# 1272
_BinaryPredicate> pair< _InputIterator1, _InputIterator2>  
# 1274
__mismatch(_InputIterator1 __first1, _InputIterator1 __last1, _InputIterator2 
# 1275
__first2, _BinaryPredicate __binary_pred) 
# 1276
{ 
# 1277
while ((__first1 != __last1) && __binary_pred(__first1, __first2)) 
# 1278
{ 
# 1279
++__first1; 
# 1280
++__first2; 
# 1281
}  
# 1282
return pair< _InputIterator1, _InputIterator2> (__first1, __first2); 
# 1283
} 
# 1298 "/usr/include/c++/8/bits/stl_algobase.h" 3
template< class _InputIterator1, class _InputIterator2> inline pair< _InputIterator1, _InputIterator2>  
# 1300
mismatch(_InputIterator1 __first1, _InputIterator1 __last1, _InputIterator2 
# 1301
__first2) 
# 1302
{ 
# 1309
; 
# 1311
return std::__mismatch(__first1, __last1, __first2, __gnu_cxx::__ops::__iter_equal_to_iter()); 
# 1313
} 
# 1331 "/usr/include/c++/8/bits/stl_algobase.h" 3
template< class _InputIterator1, class _InputIterator2, class 
# 1332
_BinaryPredicate> inline pair< _InputIterator1, _InputIterator2>  
# 1334
mismatch(_InputIterator1 __first1, _InputIterator1 __last1, _InputIterator2 
# 1335
__first2, _BinaryPredicate __binary_pred) 
# 1336
{ 
# 1340
; 
# 1342
return std::__mismatch(__first1, __last1, __first2, __gnu_cxx::__ops::__iter_comp_iter(__binary_pred)); 
# 1344
} 
# 1348
template< class _InputIterator1, class _InputIterator2, class 
# 1349
_BinaryPredicate> pair< _InputIterator1, _InputIterator2>  
# 1351
__mismatch(_InputIterator1 __first1, _InputIterator1 __last1, _InputIterator2 
# 1352
__first2, _InputIterator2 __last2, _BinaryPredicate 
# 1353
__binary_pred) 
# 1354
{ 
# 1355
while ((__first1 != __last1) && (__first2 != __last2) && __binary_pred(__first1, __first2)) 
# 1357
{ 
# 1358
++__first1; 
# 1359
++__first2; 
# 1360
}  
# 1361
return pair< _InputIterator1, _InputIterator2> (__first1, __first2); 
# 1362
} 
# 1378 "/usr/include/c++/8/bits/stl_algobase.h" 3
template< class _InputIterator1, class _InputIterator2> inline pair< _InputIterator1, _InputIterator2>  
# 1380
mismatch(_InputIterator1 __first1, _InputIterator1 __last1, _InputIterator2 
# 1381
__first2, _InputIterator2 __last2) 
# 1382
{ 
# 1389
; 
# 1390
; 
# 1392
return std::__mismatch(__first1, __last1, __first2, __last2, __gnu_cxx::__ops::__iter_equal_to_iter()); 
# 1394
} 
# 1413 "/usr/include/c++/8/bits/stl_algobase.h" 3
template< class _InputIterator1, class _InputIterator2, class 
# 1414
_BinaryPredicate> inline pair< _InputIterator1, _InputIterator2>  
# 1416
mismatch(_InputIterator1 __first1, _InputIterator1 __last1, _InputIterator2 
# 1417
__first2, _InputIterator2 __last2, _BinaryPredicate 
# 1418
__binary_pred) 
# 1419
{ 
# 1423
; 
# 1424
; 
# 1426
return std::__mismatch(__first1, __last1, __first2, __last2, __gnu_cxx::__ops::__iter_comp_iter(__binary_pred)); 
# 1428
} 
# 1433
}
# 47 "/usr/include/c++/8/bits/char_traits.h" 3
namespace __gnu_cxx __attribute((__visibility__("default"))) { 
# 61 "/usr/include/c++/8/bits/char_traits.h" 3
template< class _CharT> 
# 62
struct _Char_types { 
# 64
typedef unsigned long int_type; 
# 65
typedef std::streampos pos_type; 
# 66
typedef std::streamoff off_type; 
# 67
typedef mbstate_t state_type; 
# 68
}; 
# 86 "/usr/include/c++/8/bits/char_traits.h" 3
template< class _CharT> 
# 87
struct char_traits { 
# 89
typedef _CharT char_type; 
# 90
typedef typename _Char_types< _CharT> ::int_type int_type; 
# 91
typedef typename _Char_types< _CharT> ::pos_type pos_type; 
# 92
typedef typename _Char_types< _CharT> ::off_type off_type; 
# 93
typedef typename _Char_types< _CharT> ::state_type state_type; 
# 96
static constexpr void assign(char_type &__c1, const char_type &__c2) 
# 97
{ __c1 = __c2; } 
# 100
static constexpr bool eq(const char_type &__c1, const char_type &__c2) 
# 101
{ return __c1 == __c2; } 
# 104
static constexpr bool lt(const char_type &__c1, const char_type &__c2) 
# 105
{ return __c1 < __c2; } 
# 108
static constexpr int compare(const char_type * __s1, const char_type * __s2, std::size_t __n); 
# 111
static constexpr std::size_t length(const char_type * __s); 
# 114
static constexpr const char_type *find(const char_type * __s, std::size_t __n, const char_type & __a); 
# 117
static char_type *move(char_type * __s1, const char_type * __s2, std::size_t __n); 
# 120
static char_type *copy(char_type * __s1, const char_type * __s2, std::size_t __n); 
# 123
static char_type *assign(char_type * __s, std::size_t __n, char_type __a); 
# 126
static constexpr char_type to_char_type(const int_type &__c) 
# 127
{ return static_cast< char_type>(__c); } 
# 130
static constexpr int_type to_int_type(const char_type &__c) 
# 131
{ return static_cast< int_type>(__c); } 
# 134
static constexpr bool eq_int_type(const int_type &__c1, const int_type &__c2) 
# 135
{ return __c1 == __c2; } 
# 138
static constexpr int_type eof() 
# 139
{ return static_cast< int_type>(-1); } 
# 142
static constexpr int_type not_eof(const int_type &__c) 
# 143
{ return (!(eq_int_type)(__c, (eof)())) ? __c : (to_int_type)(char_type()); } 
# 144
}; 
# 146
template< class _CharT> constexpr int 
# 149
char_traits< _CharT> ::compare(const char_type *__s1, const char_type *__s2, std::size_t __n) 
# 150
{ 
# 151
for (std::size_t __i = (0); __i < __n; ++__i) { 
# 152
if ((lt)(__s1[__i], __s2[__i])) { 
# 153
return -1; } else { 
# 154
if ((lt)(__s2[__i], __s1[__i])) { 
# 155
return 1; }  }  }  
# 156
return 0; 
# 157
} 
# 159
template< class _CharT> constexpr std::size_t 
# 162
char_traits< _CharT> ::length(const char_type *__p) 
# 163
{ 
# 164
std::size_t __i = (0); 
# 165
while (!(eq)(__p[__i], char_type())) { 
# 166
++__i; }  
# 167
return __i; 
# 168
} 
# 170
template< class _CharT> constexpr const typename char_traits< _CharT> ::char_type *
# 173
char_traits< _CharT> ::find(const char_type *__s, std::size_t __n, const char_type &__a) 
# 174
{ 
# 175
for (std::size_t __i = (0); __i < __n; ++__i) { 
# 176
if ((eq)(__s[__i], __a)) { 
# 177
return __s + __i; }  }  
# 178
return 0; 
# 179
} 
# 181
template< class _CharT> typename char_traits< _CharT> ::char_type *
# 184
char_traits< _CharT> ::move(char_type *__s1, const char_type *__s2, std::size_t __n) 
# 185
{ 
# 186
if (__n == (0)) { 
# 187
return __s1; }  
# 188
return static_cast< _CharT *>(__builtin_memmove(__s1, __s2, __n * sizeof(char_type))); 
# 190
} 
# 192
template< class _CharT> typename char_traits< _CharT> ::char_type *
# 195
char_traits< _CharT> ::copy(char_type *__s1, const char_type *__s2, std::size_t __n) 
# 196
{ 
# 198
std::copy(__s2, __s2 + __n, __s1); 
# 199
return __s1; 
# 200
} 
# 202
template< class _CharT> typename char_traits< _CharT> ::char_type *
# 205
char_traits< _CharT> ::assign(char_type *__s, std::size_t __n, char_type __a) 
# 206
{ 
# 208
std::fill_n(__s, __n, __a); 
# 209
return __s; 
# 210
} 
# 213
}
# 215
namespace std __attribute((__visibility__("default"))) { 
# 270 "/usr/include/c++/8/bits/char_traits.h" 3
template< class _CharT> 
# 271
struct char_traits : public __gnu_cxx::char_traits< _CharT>  { 
# 272
}; 
# 277
template<> struct char_traits< char>  { 
# 279
typedef char char_type; 
# 280
typedef int int_type; 
# 281
typedef streampos pos_type; 
# 282
typedef streamoff off_type; 
# 283
typedef mbstate_t state_type; 
# 286
static void assign(char_type &__c1, const char_type &__c2) noexcept 
# 287
{ __c1 = __c2; } 
# 290
static constexpr bool eq(const char_type &__c1, const char_type &__c2) noexcept 
# 291
{ return __c1 == __c2; } 
# 294
static constexpr bool lt(const char_type &__c1, const char_type &__c2) noexcept 
# 295
{ 
# 297
return (static_cast< unsigned char>(__c1)) < (static_cast< unsigned char>(__c2)); 
# 299
} 
# 302
static int compare(const char_type *__s1, const char_type *__s2, size_t __n) 
# 303
{ 
# 310
if (__n == (0)) { 
# 311
return 0; }  
# 312
return __builtin_memcmp(__s1, __s2, __n); 
# 313
} 
# 316
static size_t length(const char_type *__s) 
# 317
{ 
# 322
return __builtin_strlen(__s); 
# 323
} 
# 326
static const char_type *find(const char_type *__s, size_t __n, const char_type &__a) 
# 327
{ 
# 334
if (__n == (0)) { 
# 335
return 0; }  
# 336
return static_cast< const char_type *>(__builtin_memchr(__s, __a, __n)); 
# 337
} 
# 340
static char_type *move(char_type *__s1, const char_type *__s2, size_t __n) 
# 341
{ 
# 342
if (__n == (0)) { 
# 343
return __s1; }  
# 344
return static_cast< char_type *>(__builtin_memmove(__s1, __s2, __n)); 
# 345
} 
# 348
static char_type *copy(char_type *__s1, const char_type *__s2, size_t __n) 
# 349
{ 
# 350
if (__n == (0)) { 
# 351
return __s1; }  
# 352
return static_cast< char_type *>(__builtin_memcpy(__s1, __s2, __n)); 
# 353
} 
# 356
static char_type *assign(char_type *__s, size_t __n, char_type __a) 
# 357
{ 
# 358
if (__n == (0)) { 
# 359
return __s; }  
# 360
return static_cast< char_type *>(__builtin_memset(__s, __a, __n)); 
# 361
} 
# 364
static constexpr char_type to_char_type(const int_type &__c) noexcept 
# 365
{ return static_cast< char_type>(__c); } 
# 370
static constexpr int_type to_int_type(const char_type &__c) noexcept 
# 371
{ return static_cast< int_type>(static_cast< unsigned char>(__c)); } 
# 374
static constexpr bool eq_int_type(const int_type &__c1, const int_type &__c2) noexcept 
# 375
{ return __c1 == __c2; } 
# 378
static constexpr int_type eof() noexcept 
# 379
{ return static_cast< int_type>(-1); } 
# 382
static constexpr int_type not_eof(const int_type &__c) noexcept 
# 383
{ return (__c == eof()) ? 0 : __c; } 
# 384
}; 
# 390
template<> struct char_traits< wchar_t>  { 
# 392
typedef wchar_t char_type; 
# 393
typedef wint_t int_type; 
# 394
typedef streamoff off_type; 
# 395
typedef wstreampos pos_type; 
# 396
typedef mbstate_t state_type; 
# 399
static void assign(char_type &__c1, const char_type &__c2) noexcept 
# 400
{ __c1 = __c2; } 
# 403
static constexpr bool eq(const char_type &__c1, const char_type &__c2) noexcept 
# 404
{ return __c1 == __c2; } 
# 407
static constexpr bool lt(const char_type &__c1, const char_type &__c2) noexcept 
# 408
{ return __c1 < __c2; } 
# 411
static int compare(const char_type *__s1, const char_type *__s2, size_t __n) 
# 412
{ 
# 419
if (__n == (0)) { 
# 420
return 0; } else { 
# 422
return wmemcmp(__s1, __s2, __n); }  
# 423
} 
# 426
static size_t length(const char_type *__s) 
# 427
{ 
# 433
return wcslen(__s); 
# 434
} 
# 437
static const char_type *find(const char_type *__s, size_t __n, const char_type &__a) 
# 438
{ 
# 445
if (__n == (0)) { 
# 446
return 0; } else { 
# 448
return wmemchr(__s, __a, __n); }  
# 449
} 
# 452
static char_type *move(char_type *__s1, const char_type *__s2, size_t __n) 
# 453
{ 
# 454
if (__n == (0)) { 
# 455
return __s1; }  
# 456
return wmemmove(__s1, __s2, __n); 
# 457
} 
# 460
static char_type *copy(char_type *__s1, const char_type *__s2, size_t __n) 
# 461
{ 
# 462
if (__n == (0)) { 
# 463
return __s1; }  
# 464
return wmemcpy(__s1, __s2, __n); 
# 465
} 
# 468
static char_type *assign(char_type *__s, size_t __n, char_type __a) 
# 469
{ 
# 470
if (__n == (0)) { 
# 471
return __s; }  
# 472
return wmemset(__s, __a, __n); 
# 473
} 
# 476
static constexpr char_type to_char_type(const int_type &__c) noexcept 
# 477
{ return (char_type)__c; } 
# 480
static constexpr int_type to_int_type(const char_type &__c) noexcept 
# 481
{ return (int_type)__c; } 
# 484
static constexpr bool eq_int_type(const int_type &__c1, const int_type &__c2) noexcept 
# 485
{ return __c1 == __c2; } 
# 488
static constexpr int_type eof() noexcept 
# 489
{ return static_cast< int_type>(4294967295U); } 
# 492
static constexpr int_type not_eof(const int_type &__c) noexcept 
# 493
{ return eq_int_type(__c, eof()) ? 0 : __c; } 
# 494
}; 
# 498
}
# 24 "/usr/include/x86_64-linux-gnu/bits/stdint-uintn.h" 3
typedef __uint8_t uint8_t; 
# 25
typedef __uint16_t uint16_t; 
# 26
typedef __uint32_t uint32_t; 
# 27
typedef __uint64_t uint64_t; 
# 43 "/usr/include/stdint.h" 3
typedef __int_least8_t int_least8_t; 
# 44
typedef __int_least16_t int_least16_t; 
# 45
typedef __int_least32_t int_least32_t; 
# 46
typedef __int_least64_t int_least64_t; 
# 49
typedef __uint_least8_t uint_least8_t; 
# 50
typedef __uint_least16_t uint_least16_t; 
# 51
typedef __uint_least32_t uint_least32_t; 
# 52
typedef __uint_least64_t uint_least64_t; 
# 58
typedef signed char int_fast8_t; 
# 60
typedef long int_fast16_t; 
# 61
typedef long int_fast32_t; 
# 62
typedef long int_fast64_t; 
# 71 "/usr/include/stdint.h" 3
typedef unsigned char uint_fast8_t; 
# 73
typedef unsigned long uint_fast16_t; 
# 74
typedef unsigned long uint_fast32_t; 
# 75
typedef unsigned long uint_fast64_t; 
# 87 "/usr/include/stdint.h" 3
typedef long intptr_t; 
# 90
typedef unsigned long uintptr_t; 
# 101 "/usr/include/stdint.h" 3
typedef __intmax_t intmax_t; 
# 102
typedef __uintmax_t uintmax_t; 
# 46 "/usr/include/c++/8/cstdint" 3
namespace std { 
# 48
using ::int8_t;
# 49
using ::int16_t;
# 50
using ::int32_t;
# 51
using ::int64_t;
# 53
using ::int_fast8_t;
# 54
using ::int_fast16_t;
# 55
using ::int_fast32_t;
# 56
using ::int_fast64_t;
# 58
using ::int_least8_t;
# 59
using ::int_least16_t;
# 60
using ::int_least32_t;
# 61
using ::int_least64_t;
# 63
using ::intmax_t;
# 64
using ::intptr_t;
# 66
using ::uint8_t;
# 67
using ::uint16_t;
# 68
using ::uint32_t;
# 69
using ::uint64_t;
# 71
using ::uint_fast8_t;
# 72
using ::uint_fast16_t;
# 73
using ::uint_fast32_t;
# 74
using ::uint_fast64_t;
# 76
using ::uint_least8_t;
# 77
using ::uint_least16_t;
# 78
using ::uint_least32_t;
# 79
using ::uint_least64_t;
# 81
using ::uintmax_t;
# 82
using ::uintptr_t;
# 83
}
# 505 "/usr/include/c++/8/bits/char_traits.h" 3
namespace std __attribute((__visibility__("default"))) { 
# 510
template<> struct char_traits< char16_t>  { 
# 512
typedef char16_t char_type; 
# 513
typedef uint_least16_t int_type; 
# 514
typedef streamoff off_type; 
# 515
typedef u16streampos pos_type; 
# 516
typedef mbstate_t state_type; 
# 519
static void assign(char_type &__c1, const char_type &__c2) noexcept 
# 520
{ __c1 = __c2; } 
# 523
static constexpr bool eq(const char_type &__c1, const char_type &__c2) noexcept 
# 524
{ return __c1 == __c2; } 
# 527
static constexpr bool lt(const char_type &__c1, const char_type &__c2) noexcept 
# 528
{ return __c1 < __c2; } 
# 531
static int compare(const char_type *__s1, const char_type *__s2, size_t __n) 
# 532
{ 
# 533
for (size_t __i = (0); __i < __n; ++__i) { 
# 534
if (lt(__s1[__i], __s2[__i])) { 
# 535
return -1; } else { 
# 536
if (lt(__s2[__i], __s1[__i])) { 
# 537
return 1; }  }  }  
# 538
return 0; 
# 539
} 
# 542
static size_t length(const char_type *__s) 
# 543
{ 
# 544
size_t __i = (0); 
# 545
while (!eq(__s[__i], char_type())) { 
# 546
++__i; }  
# 547
return __i; 
# 548
} 
# 551
static const char_type *find(const char_type *__s, size_t __n, const char_type &__a) 
# 552
{ 
# 553
for (size_t __i = (0); __i < __n; ++__i) { 
# 554
if (eq(__s[__i], __a)) { 
# 555
return __s + __i; }  }  
# 556
return 0; 
# 557
} 
# 560
static char_type *move(char_type *__s1, const char_type *__s2, size_t __n) 
# 561
{ 
# 562
if (__n == (0)) { 
# 563
return __s1; }  
# 564
return static_cast< char_type *>(__builtin_memmove(__s1, __s2, __n * sizeof(char_type))); 
# 566
} 
# 569
static char_type *copy(char_type *__s1, const char_type *__s2, size_t __n) 
# 570
{ 
# 571
if (__n == (0)) { 
# 572
return __s1; }  
# 573
return static_cast< char_type *>(__builtin_memcpy(__s1, __s2, __n * sizeof(char_type))); 
# 575
} 
# 578
static char_type *assign(char_type *__s, size_t __n, char_type __a) 
# 579
{ 
# 580
for (size_t __i = (0); __i < __n; ++__i) { 
# 581
assign(__s[__i], __a); }  
# 582
return __s; 
# 583
} 
# 586
static constexpr char_type to_char_type(const int_type &__c) noexcept 
# 587
{ return (char_type)__c; } 
# 590
static constexpr int_type to_int_type(const char_type &__c) noexcept 
# 591
{ return (__c == (eof())) ? (int_type)65533 : ((int_type)__c); } 
# 594
static constexpr bool eq_int_type(const int_type &__c1, const int_type &__c2) noexcept 
# 595
{ return __c1 == __c2; } 
# 598
static constexpr int_type eof() noexcept 
# 599
{ return static_cast< int_type>(-1); } 
# 602
static constexpr int_type not_eof(const int_type &__c) noexcept 
# 603
{ return eq_int_type(__c, eof()) ? 0 : (__c); } 
# 604
}; 
# 607
template<> struct char_traits< char32_t>  { 
# 609
typedef char32_t char_type; 
# 610
typedef uint_least32_t int_type; 
# 611
typedef streamoff off_type; 
# 612
typedef u32streampos pos_type; 
# 613
typedef mbstate_t state_type; 
# 616
static void assign(char_type &__c1, const char_type &__c2) noexcept 
# 617
{ __c1 = __c2; } 
# 620
static constexpr bool eq(const char_type &__c1, const char_type &__c2) noexcept 
# 621
{ return __c1 == __c2; } 
# 624
static constexpr bool lt(const char_type &__c1, const char_type &__c2) noexcept 
# 625
{ return __c1 < __c2; } 
# 628
static int compare(const char_type *__s1, const char_type *__s2, size_t __n) 
# 629
{ 
# 630
for (size_t __i = (0); __i < __n; ++__i) { 
# 631
if (lt(__s1[__i], __s2[__i])) { 
# 632
return -1; } else { 
# 633
if (lt(__s2[__i], __s1[__i])) { 
# 634
return 1; }  }  }  
# 635
return 0; 
# 636
} 
# 639
static size_t length(const char_type *__s) 
# 640
{ 
# 641
size_t __i = (0); 
# 642
while (!eq(__s[__i], char_type())) { 
# 643
++__i; }  
# 644
return __i; 
# 645
} 
# 648
static const char_type *find(const char_type *__s, size_t __n, const char_type &__a) 
# 649
{ 
# 650
for (size_t __i = (0); __i < __n; ++__i) { 
# 651
if (eq(__s[__i], __a)) { 
# 652
return __s + __i; }  }  
# 653
return 0; 
# 654
} 
# 657
static char_type *move(char_type *__s1, const char_type *__s2, size_t __n) 
# 658
{ 
# 659
if (__n == (0)) { 
# 660
return __s1; }  
# 661
return static_cast< char_type *>(__builtin_memmove(__s1, __s2, __n * sizeof(char_type))); 
# 663
} 
# 666
static char_type *copy(char_type *__s1, const char_type *__s2, size_t __n) 
# 667
{ 
# 668
if (__n == (0)) { 
# 669
return __s1; }  
# 670
return static_cast< char_type *>(__builtin_memcpy(__s1, __s2, __n * sizeof(char_type))); 
# 672
} 
# 675
static char_type *assign(char_type *__s, size_t __n, char_type __a) 
# 676
{ 
# 677
for (size_t __i = (0); __i < __n; ++__i) { 
# 678
assign(__s[__i], __a); }  
# 679
return __s; 
# 680
} 
# 683
static constexpr char_type to_char_type(const int_type &__c) noexcept 
# 684
{ return (char_type)__c; } 
# 687
static constexpr int_type to_int_type(const char_type &__c) noexcept 
# 688
{ return (int_type)__c; } 
# 691
static constexpr bool eq_int_type(const int_type &__c1, const int_type &__c2) noexcept 
# 692
{ return __c1 == __c2; } 
# 695
static constexpr int_type eof() noexcept 
# 696
{ return static_cast< int_type>(-1); } 
# 699
static constexpr int_type not_eof(const int_type &__c) noexcept 
# 700
{ return eq_int_type(__c, eof()) ? 0 : __c; } 
# 701
}; 
# 704
}
# 31 "/usr/include/locale.h" 3
extern "C" {
# 51 "/usr/include/locale.h" 3
struct lconv { 
# 55
char *decimal_point; 
# 56
char *thousands_sep; 
# 62
char *grouping; 
# 68
char *int_curr_symbol; 
# 69
char *currency_symbol; 
# 70
char *mon_decimal_point; 
# 71
char *mon_thousands_sep; 
# 72
char *mon_grouping; 
# 73
char *positive_sign; 
# 74
char *negative_sign; 
# 75
char int_frac_digits; 
# 76
char frac_digits; 
# 78
char p_cs_precedes; 
# 80
char p_sep_by_space; 
# 82
char n_cs_precedes; 
# 84
char n_sep_by_space; 
# 91
char p_sign_posn; 
# 92
char n_sign_posn; 
# 95
char int_p_cs_precedes; 
# 97
char int_p_sep_by_space; 
# 99
char int_n_cs_precedes; 
# 101
char int_n_sep_by_space; 
# 108
char int_p_sign_posn; 
# 109
char int_n_sign_posn; 
# 118 "/usr/include/locale.h" 3
}; 
# 122
extern char *setlocale(int __category, const char * __locale) throw(); 
# 125
extern lconv *localeconv() throw(); 
# 141 "/usr/include/locale.h" 3
extern locale_t newlocale(int __category_mask, const char * __locale, locale_t __base) throw(); 
# 176 "/usr/include/locale.h" 3
extern locale_t duplocale(locale_t __dataset) throw(); 
# 180
extern void freelocale(locale_t __dataset) throw(); 
# 187
extern locale_t uselocale(locale_t __dataset) throw(); 
# 195
}
# 51 "/usr/include/c++/8/clocale" 3
namespace std { 
# 53
using ::lconv;
# 54
using ::setlocale;
# 55
using ::localeconv;
# 56
}
# 48 "/usr/include/x86_64-linux-gnu/c++/8/bits/c++locale.h" 3
namespace __gnu_cxx __attribute((__visibility__("default"))) { 
# 52
extern "C" __typeof__(uselocale) __uselocale; 
# 55
}
# 58
namespace std __attribute((__visibility__("default"))) { 
# 62
typedef __locale_t __c_locale; 
# 69
inline int __convert_from_v(const __c_locale &__cloc __attribute((__unused__)), char *
# 70
__out, const int 
# 71
__size __attribute((__unused__)), const char *
# 72
__fmt, ...) 
# 73
{ 
# 75
__c_locale __old = __gnu_cxx::__uselocale(__cloc); 
# 88 "/usr/include/x86_64-linux-gnu/c++/8/bits/c++locale.h" 3
__builtin_va_list __args; 
# 89
__builtin_va_start((__args),__fmt); 
# 92
const int __ret = __builtin_vsnprintf(__out, __size, __fmt, __args); 
# 97
__builtin_va_end(__args); 
# 100
__gnu_cxx::__uselocale(__old); 
# 108
return __ret; 
# 109
} 
# 112
}
# 28 "/usr/include/ctype.h" 3
extern "C" {
# 47 "/usr/include/ctype.h" 3
enum { 
# 48
_ISupper = 256, 
# 49
_ISlower = 512, 
# 50
_ISalpha = 1024, 
# 51
_ISdigit = 2048, 
# 52
_ISxdigit = 4096, 
# 53
_ISspace = 8192, 
# 54
_ISprint = 16384, 
# 55
_ISgraph = 32768, 
# 56
_ISblank = 1, 
# 57
_IScntrl, 
# 58
_ISpunct = 4, 
# 59
_ISalnum = 8
# 60
}; 
# 79 "/usr/include/ctype.h" 3
extern const unsigned short **__ctype_b_loc() throw()
# 80
 __attribute((const)); 
# 81
extern const __int32_t **__ctype_tolower_loc() throw()
# 82
 __attribute((const)); 
# 83
extern const __int32_t **__ctype_toupper_loc() throw()
# 84
 __attribute((const)); 
# 108 "/usr/include/ctype.h" 3
extern int isalnum(int) throw(); 
# 109
extern int isalpha(int) throw(); 
# 110
extern int iscntrl(int) throw(); 
# 111
extern int isdigit(int) throw(); 
# 112
extern int islower(int) throw(); 
# 113
extern int isgraph(int) throw(); 
# 114
extern int isprint(int) throw(); 
# 115
extern int ispunct(int) throw(); 
# 116
extern int isspace(int) throw(); 
# 117
extern int isupper(int) throw(); 
# 118
extern int isxdigit(int) throw(); 
# 122
extern int tolower(int __c) throw(); 
# 125
extern int toupper(int __c) throw(); 
# 130
extern int isblank(int) throw(); 
# 135
extern int isctype(int __c, int __mask) throw(); 
# 142
extern int isascii(int __c) throw(); 
# 146
extern int toascii(int __c) throw(); 
# 150
extern int _toupper(int) throw(); 
# 151
extern int _tolower(int) throw(); 
# 251 "/usr/include/ctype.h" 3
extern int isalnum_l(int, locale_t) throw(); 
# 252
extern int isalpha_l(int, locale_t) throw(); 
# 253
extern int iscntrl_l(int, locale_t) throw(); 
# 254
extern int isdigit_l(int, locale_t) throw(); 
# 255
extern int islower_l(int, locale_t) throw(); 
# 256
extern int isgraph_l(int, locale_t) throw(); 
# 257
extern int isprint_l(int, locale_t) throw(); 
# 258
extern int ispunct_l(int, locale_t) throw(); 
# 259
extern int isspace_l(int, locale_t) throw(); 
# 260
extern int isupper_l(int, locale_t) throw(); 
# 261
extern int isxdigit_l(int, locale_t) throw(); 
# 263
extern int isblank_l(int, locale_t) throw(); 
# 267
extern int __tolower_l(int __c, locale_t __l) throw(); 
# 268
extern int tolower_l(int __c, locale_t __l) throw(); 
# 271
extern int __toupper_l(int __c, locale_t __l) throw(); 
# 272
extern int toupper_l(int __c, locale_t __l) throw(); 
# 327 "/usr/include/ctype.h" 3
}
# 62 "/usr/include/c++/8/cctype" 3
namespace std { 
# 64
using ::isalnum;
# 65
using ::isalpha;
# 66
using ::iscntrl;
# 67
using ::isdigit;
# 68
using ::isgraph;
# 69
using ::islower;
# 70
using ::isprint;
# 71
using ::ispunct;
# 72
using ::isspace;
# 73
using ::isupper;
# 74
using ::isxdigit;
# 75
using ::tolower;
# 76
using ::toupper;
# 77
}
# 85
namespace std { 
# 87
using ::isblank;
# 88
}
# 44 "/usr/include/c++/8/bits/localefwd.h" 3
namespace std __attribute((__visibility__("default"))) { 
# 55 "/usr/include/c++/8/bits/localefwd.h" 3
class locale; 
# 57
template< class _Facet> bool has_facet(const locale &) throw(); 
# 61
template< class _Facet> const _Facet &use_facet(const locale &); 
# 66
template< class _CharT> inline bool isspace(_CharT, const locale &); 
# 70
template< class _CharT> inline bool isprint(_CharT, const locale &); 
# 74
template< class _CharT> inline bool iscntrl(_CharT, const locale &); 
# 78
template< class _CharT> inline bool isupper(_CharT, const locale &); 
# 82
template< class _CharT> inline bool islower(_CharT, const locale &); 
# 86
template< class _CharT> inline bool isalpha(_CharT, const locale &); 
# 90
template< class _CharT> inline bool isdigit(_CharT, const locale &); 
# 94
template< class _CharT> inline bool ispunct(_CharT, const locale &); 
# 98
template< class _CharT> inline bool isxdigit(_CharT, const locale &); 
# 102
template< class _CharT> inline bool isalnum(_CharT, const locale &); 
# 106
template< class _CharT> inline bool isgraph(_CharT, const locale &); 
# 111
template< class _CharT> inline bool isblank(_CharT, const locale &); 
# 116
template< class _CharT> inline _CharT toupper(_CharT, const locale &); 
# 120
template< class _CharT> inline _CharT tolower(_CharT, const locale &); 
# 125
struct ctype_base; 
# 126
template< class _CharT> class ctype; 
# 128
template<> class ctype< char> ; 
# 130
template<> class ctype< wchar_t> ; 
# 132
template< class _CharT> class ctype_byname; 
# 136
class codecvt_base; 
# 137
template< class _InternT, class _ExternT, class _StateT> class codecvt; 
# 139
template<> class codecvt< char, char, __mbstate_t> ; 
# 141
template<> class codecvt< wchar_t, char, __mbstate_t> ; 
# 143
template< class _InternT, class _ExternT, class _StateT> class codecvt_byname; 
# 148
template< class _CharT, class _InIter = istreambuf_iterator< _CharT, char_traits< _CharT> > > class num_get; 
# 150
template< class _CharT, class _OutIter = ostreambuf_iterator< _CharT, char_traits< _CharT> > > class num_put; 
# 153
inline namespace __cxx11 { 
# 154
template< class _CharT> class numpunct; 
# 155
template< class _CharT> class numpunct_byname; 
# 156
}
# 158
inline namespace __cxx11 { 
# 160
template< class _CharT> class collate; 
# 162
template< class _CharT> class collate_byname; 
# 164
}
# 167
class time_base; 
# 168
inline namespace __cxx11 { 
# 169
template< class _CharT, class _InIter = istreambuf_iterator< _CharT, char_traits< _CharT> > > class time_get; 
# 171
template< class _CharT, class _InIter = istreambuf_iterator< _CharT, char_traits< _CharT> > > class time_get_byname; 
# 173
}
# 174
template< class _CharT, class _OutIter = ostreambuf_iterator< _CharT, char_traits< _CharT> > > class time_put; 
# 176
template< class _CharT, class _OutIter = ostreambuf_iterator< _CharT, char_traits< _CharT> > > class time_put_byname; 
# 180
class money_base; 
# 181
inline namespace __cxx11 { 
# 182
template< class _CharT, class _InIter = istreambuf_iterator< _CharT, char_traits< _CharT> > > class money_get; 
# 184
template< class _CharT, class _OutIter = ostreambuf_iterator< _CharT, char_traits< _CharT> > > class money_put; 
# 186
}
# 187
inline namespace __cxx11 { 
# 188
template< class _CharT, bool _Intl = false> class moneypunct; 
# 190
template< class _CharT, bool _Intl = false> class moneypunct_byname; 
# 192
}
# 195
class messages_base; 
# 196
inline namespace __cxx11 { 
# 197
template< class _CharT> class messages; 
# 199
template< class _CharT> class messages_byname; 
# 201
}
# 204
}
# 30 "/usr/include/x86_64-linux-gnu/c++/8/bits/gthr.h" 3
#pragma GCC visibility push ( default )
# 23 "/usr/include/x86_64-linux-gnu/bits/types/struct_sched_param.h" 3
struct sched_param { 
# 25
int sched_priority; 
# 26
}; 
# 78 "/usr/include/x86_64-linux-gnu/bits/sched.h" 3
extern "C" {
# 82
extern int clone(int (* __fn)(void * __arg), void * __child_stack, int __flags, void * __arg, ...) throw(); 
# 86
extern int unshare(int __flags) throw(); 
# 89
extern int sched_getcpu() throw(); 
# 92
extern int getcpu(unsigned *, unsigned *) throw(); 
# 95
extern int setns(int __fd, int __nstype) throw(); 
# 98
}
# 32 "/usr/include/x86_64-linux-gnu/bits/cpu-set.h" 3
typedef unsigned long __cpu_mask; 
# 42
typedef 
# 40
struct { 
# 41
__cpu_mask __bits[(1024) / ((8) * sizeof(__cpu_mask))]; 
# 42
} cpu_set_t; 
# 115 "/usr/include/x86_64-linux-gnu/bits/cpu-set.h" 3
extern "C" {
# 117
extern int __sched_cpucount(size_t __setsize, const cpu_set_t * __setp) throw(); 
# 119
extern cpu_set_t *__sched_cpualloc(size_t __count) throw(); 
# 120
extern void __sched_cpufree(cpu_set_t * __set) throw(); 
# 122
}
# 51 "/usr/include/sched.h" 3
extern "C" {
# 54
extern int sched_setparam(__pid_t __pid, const sched_param * __param) throw(); 
# 58
extern int sched_getparam(__pid_t __pid, sched_param * __param) throw(); 
# 61
extern int sched_setscheduler(__pid_t __pid, int __policy, const sched_param * __param) throw(); 
# 65
extern int sched_getscheduler(__pid_t __pid) throw(); 
# 68
extern int sched_yield() throw(); 
# 71
extern int sched_get_priority_max(int __algorithm) throw(); 
# 74
extern int sched_get_priority_min(int __algorithm) throw(); 
# 77
extern int sched_rr_get_interval(__pid_t __pid, timespec * __t) throw(); 
# 121 "/usr/include/sched.h" 3
extern int sched_setaffinity(__pid_t __pid, size_t __cpusetsize, const cpu_set_t * __cpuset) throw(); 
# 125
extern int sched_getaffinity(__pid_t __pid, size_t __cpusetsize, cpu_set_t * __cpuset) throw(); 
# 129
}
# 31 "/usr/include/x86_64-linux-gnu/bits/setjmp.h" 3
typedef long __jmp_buf[8]; 
# 34 "/usr/include/pthread.h" 3
enum { 
# 35
PTHREAD_CREATE_JOINABLE, 
# 37
PTHREAD_CREATE_DETACHED
# 39
}; 
# 44
enum { 
# 45
PTHREAD_MUTEX_TIMED_NP, 
# 46
PTHREAD_MUTEX_RECURSIVE_NP, 
# 47
PTHREAD_MUTEX_ERRORCHECK_NP, 
# 48
PTHREAD_MUTEX_ADAPTIVE_NP, 
# 51
PTHREAD_MUTEX_NORMAL = 0, 
# 52
PTHREAD_MUTEX_RECURSIVE, 
# 53
PTHREAD_MUTEX_ERRORCHECK, 
# 54
PTHREAD_MUTEX_DEFAULT = 0, 
# 58
PTHREAD_MUTEX_FAST_NP = 0
# 60
}; 
# 66
enum { 
# 67
PTHREAD_MUTEX_STALLED, 
# 68
PTHREAD_MUTEX_STALLED_NP = 0, 
# 69
PTHREAD_MUTEX_ROBUST, 
# 70
PTHREAD_MUTEX_ROBUST_NP = 1
# 71
}; 
# 78
enum { 
# 79
PTHREAD_PRIO_NONE, 
# 80
PTHREAD_PRIO_INHERIT, 
# 81
PTHREAD_PRIO_PROTECT
# 82
}; 
# 101 "/usr/include/pthread.h" 3
enum { 
# 102
PTHREAD_RWLOCK_PREFER_READER_NP, 
# 103
PTHREAD_RWLOCK_PREFER_WRITER_NP, 
# 104
PTHREAD_RWLOCK_PREFER_WRITER_NONRECURSIVE_NP, 
# 105
PTHREAD_RWLOCK_DEFAULT_NP = 0
# 106
}; 
# 121 "/usr/include/pthread.h" 3
enum { 
# 122
PTHREAD_INHERIT_SCHED, 
# 124
PTHREAD_EXPLICIT_SCHED
# 126
}; 
# 131
enum { 
# 132
PTHREAD_SCOPE_SYSTEM, 
# 134
PTHREAD_SCOPE_PROCESS
# 136
}; 
# 141
enum { 
# 142
PTHREAD_PROCESS_PRIVATE, 
# 144
PTHREAD_PROCESS_SHARED
# 146
}; 
# 155 "/usr/include/pthread.h" 3
struct _pthread_cleanup_buffer { 
# 157
void (*__routine)(void *); 
# 158
void *__arg; 
# 159
int __canceltype; 
# 160
_pthread_cleanup_buffer *__prev; 
# 161
}; 
# 165
enum { 
# 166
PTHREAD_CANCEL_ENABLE, 
# 168
PTHREAD_CANCEL_DISABLE
# 170
}; 
# 172
enum { 
# 173
PTHREAD_CANCEL_DEFERRED, 
# 175
PTHREAD_CANCEL_ASYNCHRONOUS
# 177
}; 
# 193 "/usr/include/pthread.h" 3
extern "C" {
# 198
extern int pthread_create(pthread_t *__restrict__ __newthread, const pthread_attr_t *__restrict__ __attr, void *(* __start_routine)(void *), void *__restrict__ __arg) throw()
# 201
 __attribute((__nonnull__(1, 3))); 
# 207
extern void pthread_exit(void * __retval) __attribute((__noreturn__)); 
# 215
extern int pthread_join(pthread_t __th, void ** __thread_return); 
# 220
extern int pthread_tryjoin_np(pthread_t __th, void ** __thread_return) throw(); 
# 228
extern int pthread_timedjoin_np(pthread_t __th, void ** __thread_return, const timespec * __abstime); 
# 238 "/usr/include/pthread.h" 3
extern int pthread_clockjoin_np(pthread_t __th, void ** __thread_return, clockid_t __clockid, const timespec * __abstime); 
# 247
extern int pthread_detach(pthread_t __th) throw(); 
# 251
extern pthread_t pthread_self() throw() __attribute((const)); 
# 254
extern int pthread_equal(pthread_t __thread1, pthread_t __thread2) throw()
# 255
 __attribute((const)); 
# 263
extern int pthread_attr_init(pthread_attr_t * __attr) throw() __attribute((__nonnull__(1))); 
# 266
extern int pthread_attr_destroy(pthread_attr_t * __attr) throw()
# 267
 __attribute((__nonnull__(1))); 
# 270
extern int pthread_attr_getdetachstate(const pthread_attr_t * __attr, int * __detachstate) throw()
# 272
 __attribute((__nonnull__(1, 2))); 
# 275
extern int pthread_attr_setdetachstate(pthread_attr_t * __attr, int __detachstate) throw()
# 277
 __attribute((__nonnull__(1))); 
# 281
extern int pthread_attr_getguardsize(const pthread_attr_t * __attr, size_t * __guardsize) throw()
# 283
 __attribute((__nonnull__(1, 2))); 
# 286
extern int pthread_attr_setguardsize(pthread_attr_t * __attr, size_t __guardsize) throw()
# 288
 __attribute((__nonnull__(1))); 
# 292
extern int pthread_attr_getschedparam(const pthread_attr_t *__restrict__ __attr, sched_param *__restrict__ __param) throw()
# 294
 __attribute((__nonnull__(1, 2))); 
# 297
extern int pthread_attr_setschedparam(pthread_attr_t *__restrict__ __attr, const sched_param *__restrict__ __param) throw()
# 299
 __attribute((__nonnull__(1, 2))); 
# 302
extern int pthread_attr_getschedpolicy(const pthread_attr_t *__restrict__ __attr, int *__restrict__ __policy) throw()
# 304
 __attribute((__nonnull__(1, 2))); 
# 307
extern int pthread_attr_setschedpolicy(pthread_attr_t * __attr, int __policy) throw()
# 308
 __attribute((__nonnull__(1))); 
# 311
extern int pthread_attr_getinheritsched(const pthread_attr_t *__restrict__ __attr, int *__restrict__ __inherit) throw()
# 313
 __attribute((__nonnull__(1, 2))); 
# 316
extern int pthread_attr_setinheritsched(pthread_attr_t * __attr, int __inherit) throw()
# 318
 __attribute((__nonnull__(1))); 
# 322
extern int pthread_attr_getscope(const pthread_attr_t *__restrict__ __attr, int *__restrict__ __scope) throw()
# 324
 __attribute((__nonnull__(1, 2))); 
# 327
extern int pthread_attr_setscope(pthread_attr_t * __attr, int __scope) throw()
# 328
 __attribute((__nonnull__(1))); 
# 331
extern int pthread_attr_getstackaddr(const pthread_attr_t *__restrict__ __attr, void **__restrict__ __stackaddr) throw()
# 333
 __attribute((__nonnull__(1, 2))) __attribute((__deprecated__)); 
# 339
extern int pthread_attr_setstackaddr(pthread_attr_t * __attr, void * __stackaddr) throw()
# 341
 __attribute((__nonnull__(1))) __attribute((__deprecated__)); 
# 344
extern int pthread_attr_getstacksize(const pthread_attr_t *__restrict__ __attr, size_t *__restrict__ __stacksize) throw()
# 346
 __attribute((__nonnull__(1, 2))); 
# 351
extern int pthread_attr_setstacksize(pthread_attr_t * __attr, size_t __stacksize) throw()
# 353
 __attribute((__nonnull__(1))); 
# 357
extern int pthread_attr_getstack(const pthread_attr_t *__restrict__ __attr, void **__restrict__ __stackaddr, size_t *__restrict__ __stacksize) throw()
# 360
 __attribute((__nonnull__(1, 2, 3))); 
# 365
extern int pthread_attr_setstack(pthread_attr_t * __attr, void * __stackaddr, size_t __stacksize) throw()
# 366
 __attribute((__nonnull__(1))); 
# 372
extern int pthread_attr_setaffinity_np(pthread_attr_t * __attr, size_t __cpusetsize, const cpu_set_t * __cpuset) throw()
# 375
 __attribute((__nonnull__(1, 3))); 
# 379
extern int pthread_attr_getaffinity_np(const pthread_attr_t * __attr, size_t __cpusetsize, cpu_set_t * __cpuset) throw()
# 382
 __attribute((__nonnull__(1, 3))); 
# 385
extern int pthread_getattr_default_np(pthread_attr_t * __attr) throw()
# 386
 __attribute((__nonnull__(1))); 
# 390
extern int pthread_setattr_default_np(const pthread_attr_t * __attr) throw()
# 391
 __attribute((__nonnull__(1))); 
# 396
extern int pthread_getattr_np(pthread_t __th, pthread_attr_t * __attr) throw()
# 397
 __attribute((__nonnull__(2))); 
# 405
extern int pthread_setschedparam(pthread_t __target_thread, int __policy, const sched_param * __param) throw()
# 407
 __attribute((__nonnull__(3))); 
# 410
extern int pthread_getschedparam(pthread_t __target_thread, int *__restrict__ __policy, sched_param *__restrict__ __param) throw()
# 413
 __attribute((__nonnull__(2, 3))); 
# 416
extern int pthread_setschedprio(pthread_t __target_thread, int __prio) throw(); 
# 422
extern int pthread_getname_np(pthread_t __target_thread, char * __buf, size_t __buflen) throw()
# 424
 __attribute((__nonnull__(2))); 
# 427
extern int pthread_setname_np(pthread_t __target_thread, const char * __name) throw()
# 428
 __attribute((__nonnull__(2))); 
# 434
extern int pthread_getconcurrency() throw(); 
# 437
extern int pthread_setconcurrency(int __level) throw(); 
# 445
extern int pthread_yield() throw(); 
# 450
extern int pthread_setaffinity_np(pthread_t __th, size_t __cpusetsize, const cpu_set_t * __cpuset) throw()
# 452
 __attribute((__nonnull__(3))); 
# 455
extern int pthread_getaffinity_np(pthread_t __th, size_t __cpusetsize, cpu_set_t * __cpuset) throw()
# 457
 __attribute((__nonnull__(3))); 
# 470 "/usr/include/pthread.h" 3
extern int pthread_once(pthread_once_t * __once_control, void (* __init_routine)(void))
# 471
 __attribute((__nonnull__(1, 2))); 
# 482 "/usr/include/pthread.h" 3
extern int pthread_setcancelstate(int __state, int * __oldstate); 
# 486
extern int pthread_setcanceltype(int __type, int * __oldtype); 
# 489
extern int pthread_cancel(pthread_t __th); 
# 494
extern void pthread_testcancel(); 
# 507
typedef 
# 500
struct { 
# 502
struct { 
# 503
__jmp_buf __cancel_jmp_buf; 
# 504
int __mask_was_saved; 
# 505
} __cancel_jmp_buf[1]; 
# 506
void *__pad[4]; 
# 507
} __pthread_unwind_buf_t __attribute((__aligned__)); 
# 516 "/usr/include/pthread.h" 3
struct __pthread_cleanup_frame { 
# 518
void (*__cancel_routine)(void *); 
# 519
void *__cancel_arg; 
# 520
int __do_it; 
# 521
int __cancel_type; 
# 522
}; 
# 527
class __pthread_cleanup_class { 
# 529
void (*__cancel_routine)(void *); 
# 530
void *__cancel_arg; 
# 531
int __do_it; 
# 532
int __cancel_type; 
# 535
public: __pthread_cleanup_class(void (*__fct)(void *), void *__arg) : __cancel_routine(__fct), __cancel_arg(__arg), __do_it(1) 
# 536
{ } 
# 537
~__pthread_cleanup_class() { if (__do_it) { (__cancel_routine)(__cancel_arg); }  } 
# 538
void __setdoit(int __newval) { (__do_it) = __newval; } 
# 539
void __defer() { pthread_setcanceltype(PTHREAD_CANCEL_DEFERRED, &(__cancel_type)); 
# 540
} 
# 541
void __restore() const { pthread_setcanceltype(__cancel_type, 0); } 
# 542
}; 
# 718 "/usr/include/pthread.h" 3
struct __jmp_buf_tag; 
# 719
extern int __sigsetjmp(__jmp_buf_tag * __env, int __savemask) throw(); 
# 725
extern int pthread_mutex_init(pthread_mutex_t * __mutex, const pthread_mutexattr_t * __mutexattr) throw()
# 727
 __attribute((__nonnull__(1))); 
# 730
extern int pthread_mutex_destroy(pthread_mutex_t * __mutex) throw()
# 731
 __attribute((__nonnull__(1))); 
# 734
extern int pthread_mutex_trylock(pthread_mutex_t * __mutex) throw()
# 735
 __attribute((__nonnull__(1))); 
# 738
extern int pthread_mutex_lock(pthread_mutex_t * __mutex) throw()
# 739
 __attribute((__nonnull__(1))); 
# 743
extern int pthread_mutex_timedlock(pthread_mutex_t *__restrict__ __mutex, const timespec *__restrict__ __abstime) throw()
# 745
 __attribute((__nonnull__(1, 2))); 
# 749
extern int pthread_mutex_clocklock(pthread_mutex_t *__restrict__ __mutex, clockid_t __clockid, const timespec *__restrict__ __abstime) throw()
# 752
 __attribute((__nonnull__(1, 3))); 
# 756
extern int pthread_mutex_unlock(pthread_mutex_t * __mutex) throw()
# 757
 __attribute((__nonnull__(1))); 
# 761
extern int pthread_mutex_getprioceiling(const pthread_mutex_t *__restrict__ __mutex, int *__restrict__ __prioceiling) throw()
# 764
 __attribute((__nonnull__(1, 2))); 
# 768
extern int pthread_mutex_setprioceiling(pthread_mutex_t *__restrict__ __mutex, int __prioceiling, int *__restrict__ __old_ceiling) throw()
# 771
 __attribute((__nonnull__(1, 3))); 
# 776
extern int pthread_mutex_consistent(pthread_mutex_t * __mutex) throw()
# 777
 __attribute((__nonnull__(1))); 
# 779
extern int pthread_mutex_consistent_np(pthread_mutex_t * __mutex) throw()
# 780
 __attribute((__nonnull__(1))); 
# 789 "/usr/include/pthread.h" 3
extern int pthread_mutexattr_init(pthread_mutexattr_t * __attr) throw()
# 790
 __attribute((__nonnull__(1))); 
# 793
extern int pthread_mutexattr_destroy(pthread_mutexattr_t * __attr) throw()
# 794
 __attribute((__nonnull__(1))); 
# 797
extern int pthread_mutexattr_getpshared(const pthread_mutexattr_t *__restrict__ __attr, int *__restrict__ __pshared) throw()
# 800
 __attribute((__nonnull__(1, 2))); 
# 803
extern int pthread_mutexattr_setpshared(pthread_mutexattr_t * __attr, int __pshared) throw()
# 805
 __attribute((__nonnull__(1))); 
# 809
extern int pthread_mutexattr_gettype(const pthread_mutexattr_t *__restrict__ __attr, int *__restrict__ __kind) throw()
# 811
 __attribute((__nonnull__(1, 2))); 
# 816
extern int pthread_mutexattr_settype(pthread_mutexattr_t * __attr, int __kind) throw()
# 817
 __attribute((__nonnull__(1))); 
# 821
extern int pthread_mutexattr_getprotocol(const pthread_mutexattr_t *__restrict__ __attr, int *__restrict__ __protocol) throw()
# 824
 __attribute((__nonnull__(1, 2))); 
# 828
extern int pthread_mutexattr_setprotocol(pthread_mutexattr_t * __attr, int __protocol) throw()
# 830
 __attribute((__nonnull__(1))); 
# 833
extern int pthread_mutexattr_getprioceiling(const pthread_mutexattr_t *__restrict__ __attr, int *__restrict__ __prioceiling) throw()
# 836
 __attribute((__nonnull__(1, 2))); 
# 839
extern int pthread_mutexattr_setprioceiling(pthread_mutexattr_t * __attr, int __prioceiling) throw()
# 841
 __attribute((__nonnull__(1))); 
# 845
extern int pthread_mutexattr_getrobust(const pthread_mutexattr_t * __attr, int * __robustness) throw()
# 847
 __attribute((__nonnull__(1, 2))); 
# 849
extern int pthread_mutexattr_getrobust_np(const pthread_mutexattr_t * __attr, int * __robustness) throw()
# 851
 __attribute((__nonnull__(1, 2))); 
# 855
extern int pthread_mutexattr_setrobust(pthread_mutexattr_t * __attr, int __robustness) throw()
# 857
 __attribute((__nonnull__(1))); 
# 859
extern int pthread_mutexattr_setrobust_np(pthread_mutexattr_t * __attr, int __robustness) throw()
# 861
 __attribute((__nonnull__(1))); 
# 871 "/usr/include/pthread.h" 3
extern int pthread_rwlock_init(pthread_rwlock_t *__restrict__ __rwlock, const pthread_rwlockattr_t *__restrict__ __attr) throw()
# 873
 __attribute((__nonnull__(1))); 
# 876
extern int pthread_rwlock_destroy(pthread_rwlock_t * __rwlock) throw()
# 877
 __attribute((__nonnull__(1))); 
# 880
extern int pthread_rwlock_rdlock(pthread_rwlock_t * __rwlock) throw()
# 881
 __attribute((__nonnull__(1))); 
# 884
extern int pthread_rwlock_tryrdlock(pthread_rwlock_t * __rwlock) throw()
# 885
 __attribute((__nonnull__(1))); 
# 889
extern int pthread_rwlock_timedrdlock(pthread_rwlock_t *__restrict__ __rwlock, const timespec *__restrict__ __abstime) throw()
# 891
 __attribute((__nonnull__(1, 2))); 
# 895
extern int pthread_rwlock_clockrdlock(pthread_rwlock_t *__restrict__ __rwlock, clockid_t __clockid, const timespec *__restrict__ __abstime) throw()
# 898
 __attribute((__nonnull__(1, 3))); 
# 902
extern int pthread_rwlock_wrlock(pthread_rwlock_t * __rwlock) throw()
# 903
 __attribute((__nonnull__(1))); 
# 906
extern int pthread_rwlock_trywrlock(pthread_rwlock_t * __rwlock) throw()
# 907
 __attribute((__nonnull__(1))); 
# 911
extern int pthread_rwlock_timedwrlock(pthread_rwlock_t *__restrict__ __rwlock, const timespec *__restrict__ __abstime) throw()
# 913
 __attribute((__nonnull__(1, 2))); 
# 917
extern int pthread_rwlock_clockwrlock(pthread_rwlock_t *__restrict__ __rwlock, clockid_t __clockid, const timespec *__restrict__ __abstime) throw()
# 920
 __attribute((__nonnull__(1, 3))); 
# 924
extern int pthread_rwlock_unlock(pthread_rwlock_t * __rwlock) throw()
# 925
 __attribute((__nonnull__(1))); 
# 931
extern int pthread_rwlockattr_init(pthread_rwlockattr_t * __attr) throw()
# 932
 __attribute((__nonnull__(1))); 
# 935
extern int pthread_rwlockattr_destroy(pthread_rwlockattr_t * __attr) throw()
# 936
 __attribute((__nonnull__(1))); 
# 939
extern int pthread_rwlockattr_getpshared(const pthread_rwlockattr_t *__restrict__ __attr, int *__restrict__ __pshared) throw()
# 942
 __attribute((__nonnull__(1, 2))); 
# 945
extern int pthread_rwlockattr_setpshared(pthread_rwlockattr_t * __attr, int __pshared) throw()
# 947
 __attribute((__nonnull__(1))); 
# 950
extern int pthread_rwlockattr_getkind_np(const pthread_rwlockattr_t *__restrict__ __attr, int *__restrict__ __pref) throw()
# 953
 __attribute((__nonnull__(1, 2))); 
# 956
extern int pthread_rwlockattr_setkind_np(pthread_rwlockattr_t * __attr, int __pref) throw()
# 957
 __attribute((__nonnull__(1))); 
# 965
extern int pthread_cond_init(pthread_cond_t *__restrict__ __cond, const pthread_condattr_t *__restrict__ __cond_attr) throw()
# 967
 __attribute((__nonnull__(1))); 
# 970
extern int pthread_cond_destroy(pthread_cond_t * __cond) throw()
# 971
 __attribute((__nonnull__(1))); 
# 974
extern int pthread_cond_signal(pthread_cond_t * __cond) throw()
# 975
 __attribute((__nonnull__(1))); 
# 978
extern int pthread_cond_broadcast(pthread_cond_t * __cond) throw()
# 979
 __attribute((__nonnull__(1))); 
# 986
extern int pthread_cond_wait(pthread_cond_t *__restrict__ __cond, pthread_mutex_t *__restrict__ __mutex)
# 988
 __attribute((__nonnull__(1, 2))); 
# 997 "/usr/include/pthread.h" 3
extern int pthread_cond_timedwait(pthread_cond_t *__restrict__ __cond, pthread_mutex_t *__restrict__ __mutex, const timespec *__restrict__ __abstime)
# 1000
 __attribute((__nonnull__(1, 2, 3))); 
# 1010 "/usr/include/pthread.h" 3
extern int pthread_cond_clockwait(pthread_cond_t *__restrict__ __cond, pthread_mutex_t *__restrict__ __mutex, __clockid_t __clock_id, const timespec *__restrict__ __abstime)
# 1014
 __attribute((__nonnull__(1, 2, 4))); 
# 1020
extern int pthread_condattr_init(pthread_condattr_t * __attr) throw()
# 1021
 __attribute((__nonnull__(1))); 
# 1024
extern int pthread_condattr_destroy(pthread_condattr_t * __attr) throw()
# 1025
 __attribute((__nonnull__(1))); 
# 1028
extern int pthread_condattr_getpshared(const pthread_condattr_t *__restrict__ __attr, int *__restrict__ __pshared) throw()
# 1031
 __attribute((__nonnull__(1, 2))); 
# 1034
extern int pthread_condattr_setpshared(pthread_condattr_t * __attr, int __pshared) throw()
# 1035
 __attribute((__nonnull__(1))); 
# 1039
extern int pthread_condattr_getclock(const pthread_condattr_t *__restrict__ __attr, __clockid_t *__restrict__ __clock_id) throw()
# 1042
 __attribute((__nonnull__(1, 2))); 
# 1045
extern int pthread_condattr_setclock(pthread_condattr_t * __attr, __clockid_t __clock_id) throw()
# 1047
 __attribute((__nonnull__(1))); 
# 1056 "/usr/include/pthread.h" 3
extern int pthread_spin_init(pthread_spinlock_t * __lock, int __pshared) throw()
# 1057
 __attribute((__nonnull__(1))); 
# 1060
extern int pthread_spin_destroy(pthread_spinlock_t * __lock) throw()
# 1061
 __attribute((__nonnull__(1))); 
# 1064
extern int pthread_spin_lock(pthread_spinlock_t * __lock) throw()
# 1065
 __attribute((__nonnull__(1))); 
# 1068
extern int pthread_spin_trylock(pthread_spinlock_t * __lock) throw()
# 1069
 __attribute((__nonnull__(1))); 
# 1072
extern int pthread_spin_unlock(pthread_spinlock_t * __lock) throw()
# 1073
 __attribute((__nonnull__(1))); 
# 1080
extern int pthread_barrier_init(pthread_barrier_t *__restrict__ __barrier, const pthread_barrierattr_t *__restrict__ __attr, unsigned __count) throw()
# 1083
 __attribute((__nonnull__(1))); 
# 1086
extern int pthread_barrier_destroy(pthread_barrier_t * __barrier) throw()
# 1087
 __attribute((__nonnull__(1))); 
# 1090
extern int pthread_barrier_wait(pthread_barrier_t * __barrier) throw()
# 1091
 __attribute((__nonnull__(1))); 
# 1095
extern int pthread_barrierattr_init(pthread_barrierattr_t * __attr) throw()
# 1096
 __attribute((__nonnull__(1))); 
# 1099
extern int pthread_barrierattr_destroy(pthread_barrierattr_t * __attr) throw()
# 1100
 __attribute((__nonnull__(1))); 
# 1103
extern int pthread_barrierattr_getpshared(const pthread_barrierattr_t *__restrict__ __attr, int *__restrict__ __pshared) throw()
# 1106
 __attribute((__nonnull__(1, 2))); 
# 1109
extern int pthread_barrierattr_setpshared(pthread_barrierattr_t * __attr, int __pshared) throw()
# 1111
 __attribute((__nonnull__(1))); 
# 1123 "/usr/include/pthread.h" 3
extern int pthread_key_create(pthread_key_t * __key, void (* __destr_function)(void *)) throw()
# 1125
 __attribute((__nonnull__(1))); 
# 1128
extern int pthread_key_delete(pthread_key_t __key) throw(); 
# 1131
extern void *pthread_getspecific(pthread_key_t __key) throw(); 
# 1134
extern int pthread_setspecific(pthread_key_t __key, const void * __pointer) throw(); 
# 1140
extern int pthread_getcpuclockid(pthread_t __thread_id, __clockid_t * __clock_id) throw()
# 1142
 __attribute((__nonnull__(2))); 
# 1157 "/usr/include/pthread.h" 3
extern int pthread_atfork(void (* __prepare)(void), void (* __parent)(void), void (* __child)(void)) throw(); 
# 1171 "/usr/include/pthread.h" 3
}
# 47 "/usr/include/x86_64-linux-gnu/c++/8/bits/gthr-default.h" 3
typedef pthread_t __gthread_t; 
# 48
typedef pthread_key_t __gthread_key_t; 
# 49
typedef pthread_once_t __gthread_once_t; 
# 50
typedef pthread_mutex_t __gthread_mutex_t; 
# 51
typedef pthread_mutex_t __gthread_recursive_mutex_t; 
# 52
typedef pthread_cond_t __gthread_cond_t; 
# 53
typedef timespec __gthread_time_t; 
# 101 "/usr/include/x86_64-linux-gnu/c++/8/bits/gthr-default.h" 3
static __typeof__(pthread_once) __gthrw_pthread_once __attribute((__weakref__("pthread_once"))); 
# 102
static __typeof__(pthread_getspecific) __gthrw_pthread_getspecific __attribute((__weakref__("pthread_getspecific"))); 
# 103
static __typeof__(pthread_setspecific) __gthrw_pthread_setspecific __attribute((__weakref__("pthread_setspecific"))); 
# 105
static __typeof__(pthread_create) __gthrw_pthread_create __attribute((__weakref__("pthread_create"))); 
# 106
static __typeof__(pthread_join) __gthrw_pthread_join __attribute((__weakref__("pthread_join"))); 
# 107
static __typeof__(pthread_equal) __gthrw_pthread_equal __attribute((__weakref__("pthread_equal"))); 
# 108
static __typeof__(pthread_self) __gthrw_pthread_self __attribute((__weakref__("pthread_self"))); 
# 109
static __typeof__(pthread_detach) __gthrw_pthread_detach __attribute((__weakref__("pthread_detach"))); 
# 111
static __typeof__(pthread_cancel) __gthrw_pthread_cancel __attribute((__weakref__("pthread_cancel"))); 
# 113
static __typeof__(sched_yield) __gthrw_sched_yield __attribute((__weakref__("sched_yield"))); 
# 115
static __typeof__(pthread_mutex_lock) __gthrw_pthread_mutex_lock __attribute((__weakref__("pthread_mutex_lock"))); 
# 116
static __typeof__(pthread_mutex_trylock) __gthrw_pthread_mutex_trylock __attribute((__weakref__("pthread_mutex_trylock"))); 
# 118
static __typeof__(pthread_mutex_timedlock) __gthrw_pthread_mutex_timedlock __attribute((__weakref__("pthread_mutex_timedlock"))); 
# 120
static __typeof__(pthread_mutex_unlock) __gthrw_pthread_mutex_unlock __attribute((__weakref__("pthread_mutex_unlock"))); 
# 121
static __typeof__(pthread_mutex_init) __gthrw_pthread_mutex_init __attribute((__weakref__("pthread_mutex_init"))); 
# 122
static __typeof__(pthread_mutex_destroy) __gthrw_pthread_mutex_destroy __attribute((__weakref__("pthread_mutex_destroy"))); 
# 124
static __typeof__(pthread_cond_init) __gthrw_pthread_cond_init __attribute((__weakref__("pthread_cond_init"))); 
# 125
static __typeof__(pthread_cond_broadcast) __gthrw_pthread_cond_broadcast __attribute((__weakref__("pthread_cond_broadcast"))); 
# 126
static __typeof__(pthread_cond_signal) __gthrw_pthread_cond_signal __attribute((__weakref__("pthread_cond_signal"))); 
# 127
static __typeof__(pthread_cond_wait) __gthrw_pthread_cond_wait __attribute((__weakref__("pthread_cond_wait"))); 
# 128
static __typeof__(pthread_cond_timedwait) __gthrw_pthread_cond_timedwait __attribute((__weakref__("pthread_cond_timedwait"))); 
# 129
static __typeof__(pthread_cond_destroy) __gthrw_pthread_cond_destroy __attribute((__weakref__("pthread_cond_destroy"))); 
# 131
static __typeof__(pthread_key_create) __gthrw_pthread_key_create __attribute((__weakref__("pthread_key_create"))); 
# 132
static __typeof__(pthread_key_delete) __gthrw_pthread_key_delete __attribute((__weakref__("pthread_key_delete"))); 
# 133
static __typeof__(pthread_mutexattr_init) __gthrw_pthread_mutexattr_init __attribute((__weakref__("pthread_mutexattr_init"))); 
# 134
static __typeof__(pthread_mutexattr_settype) __gthrw_pthread_mutexattr_settype __attribute((__weakref__("pthread_mutexattr_settype"))); 
# 135
static __typeof__(pthread_mutexattr_destroy) __gthrw_pthread_mutexattr_destroy __attribute((__weakref__("pthread_mutexattr_destroy"))); 
# 236 "/usr/include/x86_64-linux-gnu/c++/8/bits/gthr-default.h" 3
static __typeof__(pthread_key_create) __gthrw___pthread_key_create __attribute((__weakref__("__pthread_key_create"))); 
# 247 "/usr/include/x86_64-linux-gnu/c++/8/bits/gthr-default.h" 3
static inline int __gthread_active_p() 
# 248
{ 
# 249
static void *const __gthread_active_ptr = __extension__ ((void *)(&__gthrw___pthread_key_create)); 
# 251
return __gthread_active_ptr != (0); 
# 252
} 
# 659 "/usr/include/x86_64-linux-gnu/c++/8/bits/gthr-default.h" 3
static inline int __gthread_create(__gthread_t *__threadid, void *(*__func)(void *), void *
# 660
__args) 
# 661
{ 
# 662
return __gthrw_pthread_create(__threadid, __null, __func, __args); 
# 663
} 
# 666
static inline int __gthread_join(__gthread_t __threadid, void **__value_ptr) 
# 667
{ 
# 668
return __gthrw_pthread_join(__threadid, __value_ptr); 
# 669
} 
# 672
static inline int __gthread_detach(__gthread_t __threadid) 
# 673
{ 
# 674
return __gthrw_pthread_detach(__threadid); 
# 675
} 
# 678
static inline int __gthread_equal(__gthread_t __t1, __gthread_t __t2) 
# 679
{ 
# 680
return __gthrw_pthread_equal(__t1, __t2); 
# 681
} 
# 684
static inline __gthread_t __gthread_self() 
# 685
{ 
# 686
return __gthrw_pthread_self(); 
# 687
} 
# 690
static inline int __gthread_yield() 
# 691
{ 
# 692
return __gthrw_sched_yield(); 
# 693
} 
# 696
static inline int __gthread_once(__gthread_once_t *__once, void (*__func)(void)) 
# 697
{ 
# 698
if (__gthread_active_p()) { 
# 699
return __gthrw_pthread_once(__once, __func); } else { 
# 701
return -1; }  
# 702
} 
# 705
static inline int __gthread_key_create(__gthread_key_t *__key, void (*__dtor)(void *)) 
# 706
{ 
# 707
return __gthrw_pthread_key_create(__key, __dtor); 
# 708
} 
# 711
static inline int __gthread_key_delete(__gthread_key_t __key) 
# 712
{ 
# 713
return __gthrw_pthread_key_delete(__key); 
# 714
} 
# 717
static inline void *__gthread_getspecific(__gthread_key_t __key) 
# 718
{ 
# 719
return __gthrw_pthread_getspecific(__key); 
# 720
} 
# 723
static inline int __gthread_setspecific(__gthread_key_t __key, const void *__ptr) 
# 724
{ 
# 725
return __gthrw_pthread_setspecific(__key, __ptr); 
# 726
} 
# 729
static inline void __gthread_mutex_init_function(__gthread_mutex_t *__mutex) 
# 730
{ 
# 731
if (__gthread_active_p()) { 
# 732
__gthrw_pthread_mutex_init(__mutex, __null); }  
# 733
} 
# 736
static inline int __gthread_mutex_destroy(__gthread_mutex_t *__mutex) 
# 737
{ 
# 738
if (__gthread_active_p()) { 
# 739
return __gthrw_pthread_mutex_destroy(__mutex); } else { 
# 741
return 0; }  
# 742
} 
# 745
static inline int __gthread_mutex_lock(__gthread_mutex_t *__mutex) 
# 746
{ 
# 747
if (__gthread_active_p()) { 
# 748
return __gthrw_pthread_mutex_lock(__mutex); } else { 
# 750
return 0; }  
# 751
} 
# 754
static inline int __gthread_mutex_trylock(__gthread_mutex_t *__mutex) 
# 755
{ 
# 756
if (__gthread_active_p()) { 
# 757
return __gthrw_pthread_mutex_trylock(__mutex); } else { 
# 759
return 0; }  
# 760
} 
# 764
static inline int __gthread_mutex_timedlock(__gthread_mutex_t *__mutex, const __gthread_time_t *
# 765
__abs_timeout) 
# 766
{ 
# 767
if (__gthread_active_p()) { 
# 768
return __gthrw_pthread_mutex_timedlock(__mutex, __abs_timeout); } else { 
# 770
return 0; }  
# 771
} 
# 775
static inline int __gthread_mutex_unlock(__gthread_mutex_t *__mutex) 
# 776
{ 
# 777
if (__gthread_active_p()) { 
# 778
return __gthrw_pthread_mutex_unlock(__mutex); } else { 
# 780
return 0; }  
# 781
} 
# 808 "/usr/include/x86_64-linux-gnu/c++/8/bits/gthr-default.h" 3
static inline int __gthread_recursive_mutex_lock(__gthread_recursive_mutex_t *__mutex) 
# 809
{ 
# 810
return __gthread_mutex_lock(__mutex); 
# 811
} 
# 814
static inline int __gthread_recursive_mutex_trylock(__gthread_recursive_mutex_t *__mutex) 
# 815
{ 
# 816
return __gthread_mutex_trylock(__mutex); 
# 817
} 
# 821
static inline int __gthread_recursive_mutex_timedlock(__gthread_recursive_mutex_t *__mutex, const __gthread_time_t *
# 822
__abs_timeout) 
# 823
{ 
# 824
return __gthread_mutex_timedlock(__mutex, __abs_timeout); 
# 825
} 
# 829
static inline int __gthread_recursive_mutex_unlock(__gthread_recursive_mutex_t *__mutex) 
# 830
{ 
# 831
return __gthread_mutex_unlock(__mutex); 
# 832
} 
# 835
static inline int __gthread_recursive_mutex_destroy(__gthread_recursive_mutex_t *__mutex) 
# 836
{ 
# 837
return __gthread_mutex_destroy(__mutex); 
# 838
} 
# 850 "/usr/include/x86_64-linux-gnu/c++/8/bits/gthr-default.h" 3
static inline int __gthread_cond_broadcast(__gthread_cond_t *__cond) 
# 851
{ 
# 852
return __gthrw_pthread_cond_broadcast(__cond); 
# 853
} 
# 856
static inline int __gthread_cond_signal(__gthread_cond_t *__cond) 
# 857
{ 
# 858
return __gthrw_pthread_cond_signal(__cond); 
# 859
} 
# 862
static inline int __gthread_cond_wait(__gthread_cond_t *__cond, __gthread_mutex_t *__mutex) 
# 863
{ 
# 864
return __gthrw_pthread_cond_wait(__cond, __mutex); 
# 865
} 
# 868
static inline int __gthread_cond_timedwait(__gthread_cond_t *__cond, __gthread_mutex_t *__mutex, const __gthread_time_t *
# 869
__abs_timeout) 
# 870
{ 
# 871
return __gthrw_pthread_cond_timedwait(__cond, __mutex, __abs_timeout); 
# 872
} 
# 875
static inline int __gthread_cond_wait_recursive(__gthread_cond_t *__cond, __gthread_recursive_mutex_t *
# 876
__mutex) 
# 877
{ 
# 878
return __gthread_cond_wait(__cond, __mutex); 
# 879
} 
# 882
static inline int __gthread_cond_destroy(__gthread_cond_t *__cond) 
# 883
{ 
# 884
return __gthrw_pthread_cond_destroy(__cond); 
# 885
} 
# 151 "/usr/include/x86_64-linux-gnu/c++/8/bits/gthr.h" 3
#pragma GCC visibility pop
# 32 "/usr/include/x86_64-linux-gnu/c++/8/bits/atomic_word.h" 3
typedef int _Atomic_word; 
# 38 "/usr/include/c++/8/ext/atomicity.h" 3
namespace __gnu_cxx __attribute((__visibility__("default"))) { 
# 48
static inline _Atomic_word __exchange_and_add(volatile _Atomic_word *__mem, int __val) 
# 49
{ return __atomic_fetch_add(__mem, __val, 4); } 
# 52
static inline void __atomic_add(volatile _Atomic_word *__mem, int __val) 
# 53
{ __atomic_fetch_add(__mem, __val, 4); } 
# 65 "/usr/include/c++/8/ext/atomicity.h" 3
static inline _Atomic_word __exchange_and_add_single(_Atomic_word *__mem, int __val) 
# 66
{ 
# 67
_Atomic_word __result = *__mem; 
# 68
(*__mem) += __val; 
# 69
return __result; 
# 70
} 
# 73
static inline void __atomic_add_single(_Atomic_word *__mem, int __val) 
# 74
{ (*__mem) += __val; } 
# 77
__attribute((__unused__)) static inline _Atomic_word 
# 78
__exchange_and_add_dispatch(_Atomic_word *__mem, int __val) 
# 79
{ 
# 81
if (__gthread_active_p()) { 
# 82
return __exchange_and_add(__mem, __val); } else { 
# 84
return __exchange_and_add_single(__mem, __val); }  
# 88
} 
# 91
__attribute((__unused__)) static inline void 
# 92
__atomic_add_dispatch(_Atomic_word *__mem, int __val) 
# 93
{ 
# 95
if (__gthread_active_p()) { 
# 96
__atomic_add(__mem, __val); } else { 
# 98
__atomic_add_single(__mem, __val); }  
# 102
} 
# 105
}
# 40 "/usr/include/c++/8/ext/new_allocator.h" 3
namespace __gnu_cxx __attribute((__visibility__("default"))) { 
# 44
using std::size_t;
# 45
using std::ptrdiff_t;
# 57 "/usr/include/c++/8/ext/new_allocator.h" 3
template< class _Tp> 
# 58
class new_allocator { 
# 61
public: typedef std::size_t size_type; 
# 62
typedef std::ptrdiff_t difference_type; 
# 63
typedef _Tp *pointer; 
# 64
typedef const _Tp *const_pointer; 
# 65
typedef _Tp &reference; 
# 66
typedef const _Tp &const_reference; 
# 67
typedef _Tp value_type; 
# 69
template< class _Tp1> 
# 70
struct rebind { 
# 71
typedef __gnu_cxx::new_allocator< _Tp1>  other; }; 
# 76
typedef std::true_type propagate_on_container_move_assignment; 
# 79
new_allocator() noexcept { } 
# 81
new_allocator(const new_allocator &) noexcept { } 
# 83
template< class _Tp1> 
# 84
new_allocator(const __gnu_cxx::new_allocator< _Tp1>  &) noexcept { } 
# 86
~new_allocator() noexcept { } 
# 89
pointer address(reference __x) const noexcept 
# 90
{ return std::__addressof(__x); } 
# 93
const_pointer address(const_reference __x) const noexcept 
# 94
{ return std::__addressof(__x); } 
# 99
pointer allocate(size_type __n, const void * = 0) 
# 100
{ 
# 101
if (__n > max_size()) { 
# 102
std::__throw_bad_alloc(); }  
# 111 "/usr/include/c++/8/ext/new_allocator.h" 3
return static_cast< _Tp *>(::operator new(__n * sizeof(_Tp))); 
# 112
} 
# 116
void deallocate(pointer __p, size_type) 
# 117
{ 
# 125
::operator delete(__p); 
# 126
} 
# 129
size_type max_size() const noexcept 
# 130
{ return ((std::size_t)(-1)) / sizeof(_Tp); } 
# 133
template< class _Up, class ..._Args> void 
# 135
construct(_Up *__p, _Args &&...__args) 
# 136
{ ::new ((void *)__p) (_Up)(std::forward< _Args> (__args)...); } 
# 138
template< class _Up> void 
# 140
destroy(_Up *__p) { (__p->~_Up()); } 
# 151 "/usr/include/c++/8/ext/new_allocator.h" 3
}; 
# 153
template< class _Tp> inline bool 
# 155
operator==(const new_allocator< _Tp>  &, const new_allocator< _Tp>  &) 
# 156
{ return true; } 
# 158
template< class _Tp> inline bool 
# 160
operator!=(const new_allocator< _Tp>  &, const new_allocator< _Tp>  &) 
# 161
{ return false; } 
# 164
}
# 36 "/usr/include/x86_64-linux-gnu/c++/8/bits/c++allocator.h" 3
namespace std { 
# 47 "/usr/include/x86_64-linux-gnu/c++/8/bits/c++allocator.h" 3
template< class _Tp> using __allocator_base = __gnu_cxx::new_allocator< _Tp> ; 
# 49
}
# 57 "/usr/include/c++/8/bits/allocator.h" 3
namespace std __attribute((__visibility__("default"))) { 
# 68
template<> class allocator< void>  { 
# 71
public: typedef size_t size_type; 
# 72
typedef ptrdiff_t difference_type; 
# 73
typedef void *pointer; 
# 74
typedef const void *const_pointer; 
# 75
typedef void value_type; 
# 77
template< class _Tp1> 
# 78
struct rebind { 
# 79
typedef std::allocator< _Tp1>  other; }; 
# 84
typedef true_type propagate_on_container_move_assignment; 
# 86
typedef true_type is_always_equal; 
# 88
template< class _Up, class ..._Args> void 
# 90
construct(_Up *__p, _Args &&...__args) 
# 91
{ ::new ((void *)__p) (_Up)(std::forward< _Args> (__args)...); } 
# 93
template< class _Up> void 
# 95
destroy(_Up *__p) { (__p->~_Up()); } 
# 97
}; 
# 107 "/usr/include/c++/8/bits/allocator.h" 3
template< class _Tp> 
# 108
class allocator : public __allocator_base< _Tp>  { 
# 111
public: typedef std::size_t size_type; 
# 112
typedef std::ptrdiff_t difference_type; 
# 113
typedef _Tp *pointer; 
# 114
typedef const _Tp *const_pointer; 
# 115
typedef _Tp &reference; 
# 116
typedef const _Tp &const_reference; 
# 117
typedef _Tp value_type; 
# 119
template< class _Tp1> 
# 120
struct rebind { 
# 121
typedef std::allocator< _Tp1>  other; }; 
# 126
typedef std::true_type propagate_on_container_move_assignment; 
# 128
typedef std::true_type is_always_equal; 
# 131
allocator() throw() { } 
# 133
allocator(const allocator &__a) throw() : std::__allocator_base< _Tp> (__a) 
# 134
{ } 
# 136
template< class _Tp1> 
# 137
allocator(const std::allocator< _Tp1>  &) throw() { } 
# 139
~allocator() throw() { } 
# 142
}; 
# 144
template< class _T1, class _T2> inline bool 
# 146
operator==(const allocator< _T1>  &, const allocator< _T2>  &) noexcept 
# 148
{ return true; } 
# 150
template< class _Tp> inline bool 
# 152
operator==(const allocator< _Tp>  &, const allocator< _Tp>  &) noexcept 
# 154
{ return true; } 
# 156
template< class _T1, class _T2> inline bool 
# 158
operator!=(const allocator< _T1>  &, const allocator< _T2>  &) noexcept 
# 160
{ return false; } 
# 162
template< class _Tp> inline bool 
# 164
operator!=(const allocator< _Tp>  &, const allocator< _Tp>  &) noexcept 
# 166
{ return false; } 
# 170
template< class _Tp> 
# 171
class allocator< const _Tp>  { 
# 174
public: typedef _Tp value_type; 
# 175
template< class _Up> allocator(const std::allocator< _Up>  &) { } 
# 176
}; 
# 178
template< class _Tp> 
# 179
class allocator< volatile _Tp>  { 
# 182
public: typedef _Tp value_type; 
# 183
template< class _Up> allocator(const std::allocator< _Up>  &) { } 
# 184
}; 
# 186
template< class _Tp> 
# 187
class allocator< const volatile _Tp>  { 
# 190
public: typedef _Tp value_type; 
# 191
template< class _Up> allocator(const std::allocator< _Up>  &) { } 
# 192
}; 
# 199
extern template class allocator< char> ;
# 200
extern template class allocator< wchar_t> ;
# 207
template< class _Alloc, bool  = __is_empty(_Alloc)> 
# 208
struct __alloc_swap { 
# 209
static void _S_do_it(_Alloc &, _Alloc &) noexcept { } }; 
# 211
template< class _Alloc> 
# 212
struct __alloc_swap< _Alloc, false>  { 
# 215
static void _S_do_it(_Alloc &__one, _Alloc &__two) noexcept 
# 216
{ 
# 218
if (__one != __two) { 
# 219
swap(__one, __two); }  
# 220
} 
# 221
}; 
# 224
template< class _Alloc, bool  = __is_empty(_Alloc)> 
# 225
struct __alloc_neq { 
# 228
static bool _S_do_it(const _Alloc &, const _Alloc &) 
# 229
{ return false; } 
# 230
}; 
# 232
template< class _Alloc> 
# 233
struct __alloc_neq< _Alloc, false>  { 
# 236
static bool _S_do_it(const _Alloc &__one, const _Alloc &__two) 
# 237
{ return __one != __two; } 
# 238
}; 
# 241
template< class _Tp, bool 
# 242
 = __or_< is_copy_constructible< typename _Tp::value_type> , is_nothrow_move_constructible< typename _Tp::value_type> > ::value> 
# 244
struct __shrink_to_fit_aux { 
# 245
static bool _S_do_it(_Tp &) noexcept { return false; } }; 
# 247
template< class _Tp> 
# 248
struct __shrink_to_fit_aux< _Tp, true>  { 
# 251
static bool _S_do_it(_Tp &__c) noexcept 
# 252
{ 
# 254
try 
# 255
{ 
# 256
(_Tp(__make_move_if_noexcept_iterator((__c.begin())), __make_move_if_noexcept_iterator((__c.end())), (__c.get_allocator())).swap(__c)); 
# 259
return true; 
# 260
} 
# 261
catch (...) 
# 262
{ return false; }  
# 266
} 
# 267
}; 
# 271
}
# 36 "/usr/include/c++/8/bits/cxxabi_forced.h" 3
#pragma GCC visibility push ( default )
# 39
namespace __cxxabiv1 { 
# 48
class __forced_unwind { 
# 50
virtual ~__forced_unwind() throw(); 
# 53
virtual void __pure_dummy() = 0; 
# 54
}; 
# 55
}
# 58
#pragma GCC visibility pop
# 38 "/usr/include/c++/8/bits/ostream_insert.h" 3
namespace std __attribute((__visibility__("default"))) { 
# 42
template< class _CharT, class _Traits> inline void 
# 44
__ostream_write(basic_ostream< _CharT, _Traits>  &__out, const _CharT *
# 45
__s, streamsize __n) 
# 46
{ 
# 47
typedef basic_ostream< _CharT, _Traits>  __ostream_type; 
# 48
typedef typename basic_ostream< _CharT, _Traits> ::ios_base __ios_base; 
# 50
const streamsize __put = ((__out.rdbuf())->sputn(__s, __n)); 
# 51
if (__put != __n) { 
# 52
(__out.setstate(__ios_base::badbit)); }  
# 53
} 
# 55
template< class _CharT, class _Traits> inline void 
# 57
__ostream_fill(basic_ostream< _CharT, _Traits>  &__out, streamsize __n) 
# 58
{ 
# 59
typedef basic_ostream< _CharT, _Traits>  __ostream_type; 
# 60
typedef typename basic_ostream< _CharT, _Traits> ::ios_base __ios_base; 
# 62
const _CharT __c = (__out.fill()); 
# 63
for (; __n > (0); --__n) 
# 64
{ 
# 65
const typename _Traits::int_type __put = ((__out.rdbuf())->sputc(__c)); 
# 66
if (_Traits::eq_int_type(__put, _Traits::eof())) 
# 67
{ 
# 68
(__out.setstate(__ios_base::badbit)); 
# 69
break; 
# 70
}  
# 71
}  
# 72
} 
# 74
template< class _CharT, class _Traits> basic_ostream< _CharT, _Traits>  &
# 76
__ostream_insert(basic_ostream< _CharT, _Traits>  &__out, const _CharT *
# 77
__s, streamsize __n) 
# 78
{ 
# 79
typedef basic_ostream< _CharT, _Traits>  __ostream_type; 
# 80
typedef typename basic_ostream< _CharT, _Traits> ::ios_base __ios_base; 
# 82
typename basic_ostream< _CharT, _Traits> ::sentry __cerb(__out); 
# 83
if (__cerb) 
# 84
{ 
# 85
try 
# 86
{ 
# 87
const streamsize __w = (__out.width()); 
# 88
if (__w > __n) 
# 89
{ 
# 90
const bool __left = ((__out.flags()) & __ios_base::adjustfield) == __ios_base::left; 
# 93
if (!__left) { 
# 94
__ostream_fill(__out, __w - __n); }  
# 95
if ((__out.good())) { 
# 96
__ostream_write(__out, __s, __n); }  
# 97
if (__left && (__out.good())) { 
# 98
__ostream_fill(__out, __w - __n); }  
# 99
} else { 
# 101
__ostream_write(__out, __s, __n); }  
# 102
(__out.width(0)); 
# 103
} 
# 104
catch (__cxxabiv1::__forced_unwind &) 
# 105
{ 
# 106
(__out._M_setstate(__ios_base::badbit)); 
# 107
throw; 
# 108
} 
# 109
catch (...) 
# 110
{ (__out._M_setstate(__ios_base::badbit)); }  
# 111
}  
# 112
return __out; 
# 113
} 
# 118
extern template basic_ostream< char>  &__ostream_insert(basic_ostream< char>  & __out, const char * __s, streamsize __n);
# 121
extern template basic_ostream< wchar_t>  &__ostream_insert(basic_ostream< wchar_t>  & __out, const wchar_t * __s, streamsize __n);
# 127
}
# 63 "/usr/include/c++/8/bits/stl_function.h" 3
namespace std __attribute((__visibility__("default"))) { 
# 104 "/usr/include/c++/8/bits/stl_function.h" 3
template< class _Arg, class _Result> 
# 105
struct unary_function { 
# 108
typedef _Arg argument_type; 
# 111
typedef _Result result_type; 
# 112
}; 
# 117
template< class _Arg1, class _Arg2, class _Result> 
# 118
struct binary_function { 
# 121
typedef _Arg1 first_argument_type; 
# 124
typedef _Arg2 second_argument_type; 
# 127
typedef _Result result_type; 
# 128
}; 
# 144 "/usr/include/c++/8/bits/stl_function.h" 3
struct __is_transparent; 
# 146
template< class _Tp = void> struct plus; 
# 149
template< class _Tp = void> struct minus; 
# 152
template< class _Tp = void> struct multiplies; 
# 155
template< class _Tp = void> struct divides; 
# 158
template< class _Tp = void> struct modulus; 
# 161
template< class _Tp = void> struct negate; 
# 166
template< class _Tp> 
# 167
struct plus : public binary_function< _Tp, _Tp, _Tp>  { 
# 171
constexpr _Tp operator()(const _Tp &__x, const _Tp &__y) const 
# 172
{ return __x + __y; } 
# 173
}; 
# 176
template< class _Tp> 
# 177
struct minus : public binary_function< _Tp, _Tp, _Tp>  { 
# 181
constexpr _Tp operator()(const _Tp &__x, const _Tp &__y) const 
# 182
{ return __x - __y; } 
# 183
}; 
# 186
template< class _Tp> 
# 187
struct multiplies : public binary_function< _Tp, _Tp, _Tp>  { 
# 191
constexpr _Tp operator()(const _Tp &__x, const _Tp &__y) const 
# 192
{ return __x * __y; } 
# 193
}; 
# 196
template< class _Tp> 
# 197
struct divides : public binary_function< _Tp, _Tp, _Tp>  { 
# 201
constexpr _Tp operator()(const _Tp &__x, const _Tp &__y) const 
# 202
{ return __x / __y; } 
# 203
}; 
# 206
template< class _Tp> 
# 207
struct modulus : public binary_function< _Tp, _Tp, _Tp>  { 
# 211
constexpr _Tp operator()(const _Tp &__x, const _Tp &__y) const 
# 212
{ return __x % __y; } 
# 213
}; 
# 216
template< class _Tp> 
# 217
struct negate : public unary_function< _Tp, _Tp>  { 
# 221
constexpr _Tp operator()(const _Tp &__x) const 
# 222
{ return -__x; } 
# 223
}; 
# 230
template<> struct plus< void>  { 
# 232
template< class _Tp, class _Up> constexpr auto 
# 235
operator()(_Tp &&__t, _Up &&__u) const noexcept(noexcept((std::forward< _Tp> (__t) + std::forward< _Up> (__u))))->__decltype((std::forward< _Tp> (__t) + std::forward< _Up> (__u))) 
# 238
{ return std::forward< _Tp> (__t) + std::forward< _Up> (__u); } 
# 240
typedef __is_transparent is_transparent; 
# 241
}; 
# 245
template<> struct minus< void>  { 
# 247
template< class _Tp, class _Up> constexpr auto 
# 250
operator()(_Tp &&__t, _Up &&__u) const noexcept(noexcept((std::forward< _Tp> (__t) - std::forward< _Up> (__u))))->__decltype((std::forward< _Tp> (__t) - std::forward< _Up> (__u))) 
# 253
{ return std::forward< _Tp> (__t) - std::forward< _Up> (__u); } 
# 255
typedef __is_transparent is_transparent; 
# 256
}; 
# 260
template<> struct multiplies< void>  { 
# 262
template< class _Tp, class _Up> constexpr auto 
# 265
operator()(_Tp &&__t, _Up &&__u) const noexcept(noexcept((std::forward< _Tp> (__t) * std::forward< _Up> (__u))))->__decltype((std::forward< _Tp> (__t) * std::forward< _Up> (__u))) 
# 268
{ return std::forward< _Tp> (__t) * std::forward< _Up> (__u); } 
# 270
typedef __is_transparent is_transparent; 
# 271
}; 
# 275
template<> struct divides< void>  { 
# 277
template< class _Tp, class _Up> constexpr auto 
# 280
operator()(_Tp &&__t, _Up &&__u) const noexcept(noexcept((std::forward< _Tp> (__t) / std::forward< _Up> (__u))))->__decltype((std::forward< _Tp> (__t) / std::forward< _Up> (__u))) 
# 283
{ return std::forward< _Tp> (__t) / std::forward< _Up> (__u); } 
# 285
typedef __is_transparent is_transparent; 
# 286
}; 
# 290
template<> struct modulus< void>  { 
# 292
template< class _Tp, class _Up> constexpr auto 
# 295
operator()(_Tp &&__t, _Up &&__u) const noexcept(noexcept((std::forward< _Tp> (__t) % std::forward< _Up> (__u))))->__decltype((std::forward< _Tp> (__t) % std::forward< _Up> (__u))) 
# 298
{ return std::forward< _Tp> (__t) % std::forward< _Up> (__u); } 
# 300
typedef __is_transparent is_transparent; 
# 301
}; 
# 305
template<> struct negate< void>  { 
# 307
template< class _Tp> constexpr auto 
# 310
operator()(_Tp &&__t) const noexcept(noexcept((-std::forward< _Tp> (__t))))->__decltype((-std::forward< _Tp> (__t))) 
# 313
{ return -std::forward< _Tp> (__t); } 
# 315
typedef __is_transparent is_transparent; 
# 316
}; 
# 330 "/usr/include/c++/8/bits/stl_function.h" 3
template< class _Tp = void> struct equal_to; 
# 333
template< class _Tp = void> struct not_equal_to; 
# 336
template< class _Tp = void> struct greater; 
# 339
template< class _Tp = void> struct less; 
# 342
template< class _Tp = void> struct greater_equal; 
# 345
template< class _Tp = void> struct less_equal; 
# 350
template< class _Tp> 
# 351
struct equal_to : public binary_function< _Tp, _Tp, bool>  { 
# 355
constexpr bool operator()(const _Tp &__x, const _Tp &__y) const 
# 356
{ return __x == __y; } 
# 357
}; 
# 360
template< class _Tp> 
# 361
struct not_equal_to : public binary_function< _Tp, _Tp, bool>  { 
# 365
constexpr bool operator()(const _Tp &__x, const _Tp &__y) const 
# 366
{ return __x != __y; } 
# 367
}; 
# 370
template< class _Tp> 
# 371
struct greater : public binary_function< _Tp, _Tp, bool>  { 
# 375
constexpr bool operator()(const _Tp &__x, const _Tp &__y) const 
# 376
{ return __x > __y; } 
# 377
}; 
# 380
template< class _Tp> 
# 381
struct less : public binary_function< _Tp, _Tp, bool>  { 
# 385
constexpr bool operator()(const _Tp &__x, const _Tp &__y) const 
# 386
{ return __x < __y; } 
# 387
}; 
# 390
template< class _Tp> 
# 391
struct greater_equal : public binary_function< _Tp, _Tp, bool>  { 
# 395
constexpr bool operator()(const _Tp &__x, const _Tp &__y) const 
# 396
{ return __x >= __y; } 
# 397
}; 
# 400
template< class _Tp> 
# 401
struct less_equal : public binary_function< _Tp, _Tp, bool>  { 
# 405
constexpr bool operator()(const _Tp &__x, const _Tp &__y) const 
# 406
{ return __x <= __y; } 
# 407
}; 
# 410
template< class _Tp> 
# 411
struct greater< _Tp *>  : public binary_function< _Tp *, _Tp *, bool>  { 
# 414
constexpr bool operator()(_Tp *__x, _Tp *__y) const noexcept 
# 415
{ 
# 416
if (__builtin_constant_p(__x > __y)) { 
# 417
return __x > __y; }  
# 418
return ((unsigned long)__x) > ((unsigned long)__y); 
# 419
} 
# 420
}; 
# 423
template< class _Tp> 
# 424
struct less< _Tp *>  : public binary_function< _Tp *, _Tp *, bool>  { 
# 427
constexpr bool operator()(_Tp *__x, _Tp *__y) const noexcept 
# 428
{ 
# 429
if (__builtin_constant_p(__x < __y)) { 
# 430
return __x < __y; }  
# 431
return ((unsigned long)__x) < ((unsigned long)__y); 
# 432
} 
# 433
}; 
# 436
template< class _Tp> 
# 437
struct greater_equal< _Tp *>  : public binary_function< _Tp *, _Tp *, bool>  { 
# 440
constexpr bool operator()(_Tp *__x, _Tp *__y) const noexcept 
# 441
{ 
# 442
if (__builtin_constant_p(__x >= __y)) { 
# 443
return __x >= __y; }  
# 444
return ((unsigned long)__x) >= ((unsigned long)__y); 
# 445
} 
# 446
}; 
# 449
template< class _Tp> 
# 450
struct less_equal< _Tp *>  : public binary_function< _Tp *, _Tp *, bool>  { 
# 453
constexpr bool operator()(_Tp *__x, _Tp *__y) const noexcept 
# 454
{ 
# 455
if (__builtin_constant_p(__x <= __y)) { 
# 456
return __x <= __y; }  
# 457
return ((unsigned long)__x) <= ((unsigned long)__y); 
# 458
} 
# 459
}; 
# 464
template<> struct equal_to< void>  { 
# 466
template< class _Tp, class _Up> constexpr auto 
# 468
operator()(_Tp &&__t, _Up &&__u) const noexcept(noexcept((std::forward< _Tp> (__t) == std::forward< _Up> (__u))))->__decltype((std::forward< _Tp> (__t) == std::forward< _Up> (__u))) 
# 471
{ return std::forward< _Tp> (__t) == std::forward< _Up> (__u); } 
# 473
typedef __is_transparent is_transparent; 
# 474
}; 
# 478
template<> struct not_equal_to< void>  { 
# 480
template< class _Tp, class _Up> constexpr auto 
# 482
operator()(_Tp &&__t, _Up &&__u) const noexcept(noexcept((std::forward< _Tp> (__t) != std::forward< _Up> (__u))))->__decltype((std::forward< _Tp> (__t) != std::forward< _Up> (__u))) 
# 485
{ return std::forward< _Tp> (__t) != std::forward< _Up> (__u); } 
# 487
typedef __is_transparent is_transparent; 
# 488
}; 
# 492
template<> struct greater< void>  { 
# 494
template< class _Tp, class _Up> constexpr auto 
# 496
operator()(_Tp &&__t, _Up &&__u) const noexcept(noexcept((std::forward< _Tp> (__t) > std::forward< _Up> (__u))))->__decltype((std::forward< _Tp> (__t) > std::forward< _Up> (__u))) 
# 499
{ 
# 500
return _S_cmp(std::forward< _Tp> (__t), std::forward< _Up> (__u), __ptr_cmp< _Tp, _Up> {}); 
# 502
} 
# 504
template< class _Tp, class _Up> constexpr bool 
# 506
operator()(_Tp *__t, _Up *__u) const noexcept 
# 507
{ return std::greater< common_type_t< _Tp *, _Up *> > {}(__t, __u); } 
# 509
typedef __is_transparent is_transparent; 
# 514
private: 
# 512
template< class _Tp, class _Up> static constexpr decltype(auto) 
# 514
_S_cmp(_Tp &&__t, _Up &&__u, false_type) 
# 515
{ return std::forward< _Tp> (__t) > std::forward< _Up> (__u); } 
# 517
template< class _Tp, class _Up> static constexpr bool 
# 519
_S_cmp(_Tp &&__t, _Up &&__u, true_type) noexcept 
# 520
{ 
# 521
return std::greater< const volatile void *> {}(static_cast< const volatile void *>(std::forward< _Tp> (__t)), static_cast< const volatile void *>(std::forward< _Up> (__u))); 
# 524
} 
# 527
template< class _Tp, class _Up, class  = void> 
# 528
struct __not_overloaded2 : public true_type { }; 
# 531
template< class _Tp, class _Up> 
# 532
struct __not_overloaded2< _Tp, _Up, __void_t< __decltype(((std::declval< _Tp> ().operator>(std::declval< _Up> ()))))> >  : public false_type { 
# 534
}; 
# 537
template< class _Tp, class _Up, class  = void> 
# 538
struct __not_overloaded : public __not_overloaded2< _Tp, _Up>  { }; 
# 541
template< class _Tp, class _Up> 
# 542
struct __not_overloaded< _Tp, _Up, __void_t< __decltype((operator>(std::declval< _Tp> (), std::declval< _Up> ())))> >  : public false_type { 
# 544
}; 
# 546
template< class _Tp, class _Up> using __ptr_cmp = __and_< __not_overloaded< _Tp, _Up> , is_convertible< _Tp, const volatile void *> , is_convertible< _Up, const volatile void *> > ; 
# 550
}; 
# 554
template<> struct less< void>  { 
# 556
template< class _Tp, class _Up> constexpr auto 
# 558
operator()(_Tp &&__t, _Up &&__u) const noexcept(noexcept((std::forward< _Tp> (__t) < std::forward< _Up> (__u))))->__decltype((std::forward< _Tp> (__t) < std::forward< _Up> (__u))) 
# 561
{ 
# 562
return _S_cmp(std::forward< _Tp> (__t), std::forward< _Up> (__u), __ptr_cmp< _Tp, _Up> {}); 
# 564
} 
# 566
template< class _Tp, class _Up> constexpr bool 
# 568
operator()(_Tp *__t, _Up *__u) const noexcept 
# 569
{ return std::less< common_type_t< _Tp *, _Up *> > {}(__t, __u); } 
# 571
typedef __is_transparent is_transparent; 
# 576
private: 
# 574
template< class _Tp, class _Up> static constexpr decltype(auto) 
# 576
_S_cmp(_Tp &&__t, _Up &&__u, false_type) 
# 577
{ return std::forward< _Tp> (__t) < std::forward< _Up> (__u); } 
# 579
template< class _Tp, class _Up> static constexpr bool 
# 581
_S_cmp(_Tp &&__t, _Up &&__u, true_type) noexcept 
# 582
{ 
# 583
return std::less< const volatile void *> {}(static_cast< const volatile void *>(std::forward< _Tp> (__t)), static_cast< const volatile void *>(std::forward< _Up> (__u))); 
# 586
} 
# 589
template< class _Tp, class _Up, class  = void> 
# 590
struct __not_overloaded2 : public true_type { }; 
# 593
template< class _Tp, class _Up> 
# 594
struct __not_overloaded2< _Tp, _Up, __void_t< __decltype(((std::declval< _Tp> ().operator<(std::declval< _Up> ()))))> >  : public false_type { 
# 596
}; 
# 599
template< class _Tp, class _Up, class  = void> 
# 600
struct __not_overloaded : public __not_overloaded2< _Tp, _Up>  { }; 
# 603
template< class _Tp, class _Up> 
# 604
struct __not_overloaded< _Tp, _Up, __void_t< __decltype((operator<(std::declval< _Tp> (), std::declval< _Up> ())))> >  : public false_type { 
# 606
}; 
# 608
template< class _Tp, class _Up> using __ptr_cmp = __and_< __not_overloaded< _Tp, _Up> , is_convertible< _Tp, const volatile void *> , is_convertible< _Up, const volatile void *> > ; 
# 612
}; 
# 616
template<> struct greater_equal< void>  { 
# 618
template< class _Tp, class _Up> constexpr auto 
# 620
operator()(_Tp &&__t, _Up &&__u) const noexcept(noexcept((std::forward< _Tp> (__t) >= std::forward< _Up> (__u))))->__decltype((std::forward< _Tp> (__t) >= std::forward< _Up> (__u))) 
# 623
{ 
# 624
return _S_cmp(std::forward< _Tp> (__t), std::forward< _Up> (__u), __ptr_cmp< _Tp, _Up> {}); 
# 626
} 
# 628
template< class _Tp, class _Up> constexpr bool 
# 630
operator()(_Tp *__t, _Up *__u) const noexcept 
# 631
{ return std::greater_equal< common_type_t< _Tp *, _Up *> > {}(__t, __u); } 
# 633
typedef __is_transparent is_transparent; 
# 638
private: 
# 636
template< class _Tp, class _Up> static constexpr decltype(auto) 
# 638
_S_cmp(_Tp &&__t, _Up &&__u, false_type) 
# 639
{ return std::forward< _Tp> (__t) >= std::forward< _Up> (__u); } 
# 641
template< class _Tp, class _Up> static constexpr bool 
# 643
_S_cmp(_Tp &&__t, _Up &&__u, true_type) noexcept 
# 644
{ 
# 645
return std::greater_equal< const volatile void *> {}(static_cast< const volatile void *>(std::forward< _Tp> (__t)), static_cast< const volatile void *>(std::forward< _Up> (__u))); 
# 648
} 
# 651
template< class _Tp, class _Up, class  = void> 
# 652
struct __not_overloaded2 : public true_type { }; 
# 655
template< class _Tp, class _Up> 
# 656
struct __not_overloaded2< _Tp, _Up, __void_t< __decltype(((std::declval< _Tp> ().operator>=(std::declval< _Up> ()))))> >  : public false_type { 
# 658
}; 
# 661
template< class _Tp, class _Up, class  = void> 
# 662
struct __not_overloaded : public __not_overloaded2< _Tp, _Up>  { }; 
# 665
template< class _Tp, class _Up> 
# 666
struct __not_overloaded< _Tp, _Up, __void_t< __decltype((operator>=(std::declval< _Tp> (), std::declval< _Up> ())))> >  : public false_type { 
# 668
}; 
# 670
template< class _Tp, class _Up> using __ptr_cmp = __and_< __not_overloaded< _Tp, _Up> , is_convertible< _Tp, const volatile void *> , is_convertible< _Up, const volatile void *> > ; 
# 674
}; 
# 678
template<> struct less_equal< void>  { 
# 680
template< class _Tp, class _Up> constexpr auto 
# 682
operator()(_Tp &&__t, _Up &&__u) const noexcept(noexcept((std::forward< _Tp> (__t) <= std::forward< _Up> (__u))))->__decltype((std::forward< _Tp> (__t) <= std::forward< _Up> (__u))) 
# 685
{ 
# 686
return _S_cmp(std::forward< _Tp> (__t), std::forward< _Up> (__u), __ptr_cmp< _Tp, _Up> {}); 
# 688
} 
# 690
template< class _Tp, class _Up> constexpr bool 
# 692
operator()(_Tp *__t, _Up *__u) const noexcept 
# 693
{ return std::less_equal< common_type_t< _Tp *, _Up *> > {}(__t, __u); } 
# 695
typedef __is_transparent is_transparent; 
# 700
private: 
# 698
template< class _Tp, class _Up> static constexpr decltype(auto) 
# 700
_S_cmp(_Tp &&__t, _Up &&__u, false_type) 
# 701
{ return std::forward< _Tp> (__t) <= std::forward< _Up> (__u); } 
# 703
template< class _Tp, class _Up> static constexpr bool 
# 705
_S_cmp(_Tp &&__t, _Up &&__u, true_type) noexcept 
# 706
{ 
# 707
return std::less_equal< const volatile void *> {}(static_cast< const volatile void *>(std::forward< _Tp> (__t)), static_cast< const volatile void *>(std::forward< _Up> (__u))); 
# 710
} 
# 713
template< class _Tp, class _Up, class  = void> 
# 714
struct __not_overloaded2 : public true_type { }; 
# 717
template< class _Tp, class _Up> 
# 718
struct __not_overloaded2< _Tp, _Up, __void_t< __decltype(((std::declval< _Tp> ().operator<=(std::declval< _Up> ()))))> >  : public false_type { 
# 720
}; 
# 723
template< class _Tp, class _Up, class  = void> 
# 724
struct __not_overloaded : public __not_overloaded2< _Tp, _Up>  { }; 
# 727
template< class _Tp, class _Up> 
# 728
struct __not_overloaded< _Tp, _Up, __void_t< __decltype((operator<=(std::declval< _Tp> (), std::declval< _Up> ())))> >  : public false_type { 
# 730
}; 
# 732
template< class _Tp, class _Up> using __ptr_cmp = __and_< __not_overloaded< _Tp, _Up> , is_convertible< _Tp, const volatile void *> , is_convertible< _Up, const volatile void *> > ; 
# 736
}; 
# 750 "/usr/include/c++/8/bits/stl_function.h" 3
template< class _Tp = void> struct logical_and; 
# 753
template< class _Tp = void> struct logical_or; 
# 756
template< class _Tp = void> struct logical_not; 
# 761
template< class _Tp> 
# 762
struct logical_and : public binary_function< _Tp, _Tp, bool>  { 
# 766
constexpr bool operator()(const _Tp &__x, const _Tp &__y) const 
# 767
{ return __x && __y; } 
# 768
}; 
# 771
template< class _Tp> 
# 772
struct logical_or : public binary_function< _Tp, _Tp, bool>  { 
# 776
constexpr bool operator()(const _Tp &__x, const _Tp &__y) const 
# 777
{ return __x || __y; } 
# 778
}; 
# 781
template< class _Tp> 
# 782
struct logical_not : public unary_function< _Tp, bool>  { 
# 786
constexpr bool operator()(const _Tp &__x) const 
# 787
{ return !__x; } 
# 788
}; 
# 793
template<> struct logical_and< void>  { 
# 795
template< class _Tp, class _Up> constexpr auto 
# 798
operator()(_Tp &&__t, _Up &&__u) const noexcept(noexcept((std::forward< _Tp> (__t) && std::forward< _Up> (__u))))->__decltype((std::forward< _Tp> (__t) && std::forward< _Up> (__u))) 
# 801
{ return std::forward< _Tp> (__t) && std::forward< _Up> (__u); } 
# 803
typedef __is_transparent is_transparent; 
# 804
}; 
# 808
template<> struct logical_or< void>  { 
# 810
template< class _Tp, class _Up> constexpr auto 
# 813
operator()(_Tp &&__t, _Up &&__u) const noexcept(noexcept((std::forward< _Tp> (__t) || std::forward< _Up> (__u))))->__decltype((std::forward< _Tp> (__t) || std::forward< _Up> (__u))) 
# 816
{ return std::forward< _Tp> (__t) || std::forward< _Up> (__u); } 
# 818
typedef __is_transparent is_transparent; 
# 819
}; 
# 823
template<> struct logical_not< void>  { 
# 825
template< class _Tp> constexpr auto 
# 828
operator()(_Tp &&__t) const noexcept(noexcept((!std::forward< _Tp> (__t))))->__decltype((!std::forward< _Tp> (__t))) 
# 831
{ return !std::forward< _Tp> (__t); } 
# 833
typedef __is_transparent is_transparent; 
# 834
}; 
# 839
template< class _Tp = void> struct bit_and; 
# 842
template< class _Tp = void> struct bit_or; 
# 845
template< class _Tp = void> struct bit_xor; 
# 848
template< class _Tp = void> struct bit_not; 
# 854
template< class _Tp> 
# 855
struct bit_and : public binary_function< _Tp, _Tp, _Tp>  { 
# 859
constexpr _Tp operator()(const _Tp &__x, const _Tp &__y) const 
# 860
{ return __x & __y; } 
# 861
}; 
# 863
template< class _Tp> 
# 864
struct bit_or : public binary_function< _Tp, _Tp, _Tp>  { 
# 868
constexpr _Tp operator()(const _Tp &__x, const _Tp &__y) const 
# 869
{ return __x | __y; } 
# 870
}; 
# 872
template< class _Tp> 
# 873
struct bit_xor : public binary_function< _Tp, _Tp, _Tp>  { 
# 877
constexpr _Tp operator()(const _Tp &__x, const _Tp &__y) const 
# 878
{ return __x ^ __y; } 
# 879
}; 
# 881
template< class _Tp> 
# 882
struct bit_not : public unary_function< _Tp, _Tp>  { 
# 886
constexpr _Tp operator()(const _Tp &__x) const 
# 887
{ return ~__x; } 
# 888
}; 
# 892
template<> struct bit_and< void>  { 
# 894
template< class _Tp, class _Up> constexpr auto 
# 897
operator()(_Tp &&__t, _Up &&__u) const noexcept(noexcept((std::forward< _Tp> (__t) & std::forward< _Up> (__u))))->__decltype((std::forward< _Tp> (__t) & std::forward< _Up> (__u))) 
# 900
{ return std::forward< _Tp> (__t) & std::forward< _Up> (__u); } 
# 902
typedef __is_transparent is_transparent; 
# 903
}; 
# 906
template<> struct bit_or< void>  { 
# 908
template< class _Tp, class _Up> constexpr auto 
# 911
operator()(_Tp &&__t, _Up &&__u) const noexcept(noexcept((std::forward< _Tp> (__t) | std::forward< _Up> (__u))))->__decltype((std::forward< _Tp> (__t) | std::forward< _Up> (__u))) 
# 914
{ return std::forward< _Tp> (__t) | std::forward< _Up> (__u); } 
# 916
typedef __is_transparent is_transparent; 
# 917
}; 
# 920
template<> struct bit_xor< void>  { 
# 922
template< class _Tp, class _Up> constexpr auto 
# 925
operator()(_Tp &&__t, _Up &&__u) const noexcept(noexcept((std::forward< _Tp> (__t) ^ std::forward< _Up> (__u))))->__decltype((std::forward< _Tp> (__t) ^ std::forward< _Up> (__u))) 
# 928
{ return std::forward< _Tp> (__t) ^ std::forward< _Up> (__u); } 
# 930
typedef __is_transparent is_transparent; 
# 931
}; 
# 934
template<> struct bit_not< void>  { 
# 936
template< class _Tp> constexpr auto 
# 939
operator()(_Tp &&__t) const noexcept(noexcept((~std::forward< _Tp> (__t))))->__decltype((~std::forward< _Tp> (__t))) 
# 942
{ return ~std::forward< _Tp> (__t); } 
# 944
typedef __is_transparent is_transparent; 
# 945
}; 
# 978 "/usr/include/c++/8/bits/stl_function.h" 3
template< class _Predicate> 
# 979
class unary_negate : public unary_function< typename _Predicate::argument_type, bool>  { 
# 983
protected: _Predicate _M_pred; 
# 988
public: constexpr explicit unary_negate(const _Predicate &__x) : _M_pred(__x) { } 
# 992
constexpr bool operator()(const typename _Predicate::argument_type &__x) const 
# 993
{ return !(_M_pred)(__x); } 
# 994
}; 
# 997
template< class _Predicate> constexpr unary_negate< _Predicate>  
# 1000
not1(const _Predicate &__pred) 
# 1001
{ return ((unary_negate< _Predicate> )(__pred)); } 
# 1004
template< class _Predicate> 
# 1005
class binary_negate : public binary_function< typename _Predicate::first_argument_type, typename _Predicate::second_argument_type, bool>  { 
# 1010
protected: _Predicate _M_pred; 
# 1015
public: constexpr explicit binary_negate(const _Predicate &__x) : _M_pred(__x) { } 
# 1019
constexpr bool operator()(const typename _Predicate::first_argument_type &__x, const typename _Predicate::second_argument_type &
# 1020
__y) const 
# 1021
{ return !(_M_pred)(__x, __y); } 
# 1022
}; 
# 1025
template< class _Predicate> constexpr binary_negate< _Predicate>  
# 1028
not2(const _Predicate &__pred) 
# 1029
{ return ((binary_negate< _Predicate> )(__pred)); } 
# 1055 "/usr/include/c++/8/bits/stl_function.h" 3
template< class _Arg, class _Result> 
# 1056
class pointer_to_unary_function : public unary_function< _Arg, _Result>  { 
# 1059
protected: _Result (*_M_ptr)(_Arg); 
# 1062
public: pointer_to_unary_function() { } 
# 1065
explicit pointer_to_unary_function(_Result (*__x)(_Arg)) : _M_ptr(__x) 
# 1066
{ } 
# 1069
_Result operator()(_Arg __x) const 
# 1070
{ return (_M_ptr)(__x); } 
# 1071
}; 
# 1074
template< class _Arg, class _Result> inline pointer_to_unary_function< _Arg, _Result>  
# 1076
ptr_fun(_Result (*__x)(_Arg)) 
# 1077
{ return ((pointer_to_unary_function< _Arg, _Result> )(__x)); } 
# 1080
template< class _Arg1, class _Arg2, class _Result> 
# 1081
class pointer_to_binary_function : public binary_function< _Arg1, _Arg2, _Result>  { 
# 1085
protected: _Result (*_M_ptr)(_Arg1, _Arg2); 
# 1088
public: pointer_to_binary_function() { } 
# 1091
explicit pointer_to_binary_function(_Result (*__x)(_Arg1, _Arg2)) : _M_ptr(__x) 
# 1092
{ } 
# 1095
_Result operator()(_Arg1 __x, _Arg2 __y) const 
# 1096
{ return (_M_ptr)(__x, __y); } 
# 1097
}; 
# 1100
template< class _Arg1, class _Arg2, class _Result> inline pointer_to_binary_function< _Arg1, _Arg2, _Result>  
# 1102
ptr_fun(_Result (*__x)(_Arg1, _Arg2)) 
# 1103
{ return ((pointer_to_binary_function< _Arg1, _Arg2, _Result> )(__x)); } 
# 1106
template< class _Tp> 
# 1107
struct _Identity : public unary_function< _Tp, _Tp>  { 
# 1111
_Tp &operator()(_Tp &__x) const 
# 1112
{ return __x; } 
# 1115
const _Tp &operator()(const _Tp &__x) const 
# 1116
{ return __x; } 
# 1117
}; 
# 1120
template< class _Tp> struct _Identity< const _Tp>  : public std::_Identity< _Tp>  { }; 
# 1122
template< class _Pair> 
# 1123
struct _Select1st : public unary_function< _Pair, typename _Pair::first_type>  { 
# 1127
typename _Pair::first_type &operator()(_Pair &__x) const 
# 1128
{ return __x.first; } 
# 1131
const typename _Pair::first_type &operator()(const _Pair &__x) const 
# 1132
{ return __x.first; } 
# 1135
template< class _Pair2> typename _Pair2::first_type &
# 1137
operator()(_Pair2 &__x) const 
# 1138
{ return __x.first; } 
# 1140
template< class _Pair2> const typename _Pair2::first_type &
# 1142
operator()(const _Pair2 &__x) const 
# 1143
{ return __x.first; } 
# 1145
}; 
# 1147
template< class _Pair> 
# 1148
struct _Select2nd : public unary_function< _Pair, typename _Pair::second_type>  { 
# 1152
typename _Pair::second_type &operator()(_Pair &__x) const 
# 1153
{ return __x.second; } 
# 1156
const typename _Pair::second_type &operator()(const _Pair &__x) const 
# 1157
{ return __x.second; } 
# 1158
}; 
# 1178 "/usr/include/c++/8/bits/stl_function.h" 3
template< class _Ret, class _Tp> 
# 1179
class mem_fun_t : public unary_function< _Tp *, _Ret>  { 
# 1183
public: explicit mem_fun_t(_Ret (_Tp::*__pf)(void)) : _M_f(__pf) 
# 1184
{ } 
# 1187
_Ret operator()(_Tp *__p) const 
# 1188
{ return (__p->*(_M_f))(); } 
# 1191
private: _Ret (_Tp::*_M_f)(void); 
# 1192
}; 
# 1196
template< class _Ret, class _Tp> 
# 1197
class const_mem_fun_t : public unary_function< const _Tp *, _Ret>  { 
# 1201
public: explicit const_mem_fun_t(_Ret (_Tp::*__pf)(void) const) : _M_f(__pf) 
# 1202
{ } 
# 1205
_Ret operator()(const _Tp *__p) const 
# 1206
{ return (__p->*(_M_f))(); } 
# 1209
private: _Ret (_Tp::*_M_f)(void) const; 
# 1210
}; 
# 1214
template< class _Ret, class _Tp> 
# 1215
class mem_fun_ref_t : public unary_function< _Tp, _Ret>  { 
# 1219
public: explicit mem_fun_ref_t(_Ret (_Tp::*__pf)(void)) : _M_f(__pf) 
# 1220
{ } 
# 1223
_Ret operator()(_Tp &__r) const 
# 1224
{ return (__r.*(_M_f))(); } 
# 1227
private: _Ret (_Tp::*_M_f)(void); 
# 1228
}; 
# 1232
template< class _Ret, class _Tp> 
# 1233
class const_mem_fun_ref_t : public unary_function< _Tp, _Ret>  { 
# 1237
public: explicit const_mem_fun_ref_t(_Ret (_Tp::*__pf)(void) const) : _M_f(__pf) 
# 1238
{ } 
# 1241
_Ret operator()(const _Tp &__r) const 
# 1242
{ return (__r.*(_M_f))(); } 
# 1245
private: _Ret (_Tp::*_M_f)(void) const; 
# 1246
}; 
# 1250
template< class _Ret, class _Tp, class _Arg> 
# 1251
class mem_fun1_t : public binary_function< _Tp *, _Arg, _Ret>  { 
# 1255
public: explicit mem_fun1_t(_Ret (_Tp::*__pf)(_Arg)) : _M_f(__pf) 
# 1256
{ } 
# 1259
_Ret operator()(_Tp *__p, _Arg __x) const 
# 1260
{ return (__p->*(_M_f))(__x); } 
# 1263
private: _Ret (_Tp::*_M_f)(_Arg); 
# 1264
}; 
# 1268
template< class _Ret, class _Tp, class _Arg> 
# 1269
class const_mem_fun1_t : public binary_function< const _Tp *, _Arg, _Ret>  { 
# 1273
public: explicit const_mem_fun1_t(_Ret (_Tp::*__pf)(_Arg) const) : _M_f(__pf) 
# 1274
{ } 
# 1277
_Ret operator()(const _Tp *__p, _Arg __x) const 
# 1278
{ return (__p->*(_M_f))(__x); } 
# 1281
private: _Ret (_Tp::*_M_f)(_Arg) const; 
# 1282
}; 
# 1286
template< class _Ret, class _Tp, class _Arg> 
# 1287
class mem_fun1_ref_t : public binary_function< _Tp, _Arg, _Ret>  { 
# 1291
public: explicit mem_fun1_ref_t(_Ret (_Tp::*__pf)(_Arg)) : _M_f(__pf) 
# 1292
{ } 
# 1295
_Ret operator()(_Tp &__r, _Arg __x) const 
# 1296
{ return (__r.*(_M_f))(__x); } 
# 1299
private: _Ret (_Tp::*_M_f)(_Arg); 
# 1300
}; 
# 1304
template< class _Ret, class _Tp, class _Arg> 
# 1305
class const_mem_fun1_ref_t : public binary_function< _Tp, _Arg, _Ret>  { 
# 1309
public: explicit const_mem_fun1_ref_t(_Ret (_Tp::*__pf)(_Arg) const) : _M_f(__pf) 
# 1310
{ } 
# 1313
_Ret operator()(const _Tp &__r, _Arg __x) const 
# 1314
{ return (__r.*(_M_f))(__x); } 
# 1317
private: _Ret (_Tp::*_M_f)(_Arg) const; 
# 1318
}; 
# 1322
template< class _Ret, class _Tp> inline mem_fun_t< _Ret, _Tp>  
# 1324
mem_fun(_Ret (_Tp::*__f)(void)) 
# 1325
{ return ((mem_fun_t< _Ret, _Tp> )(__f)); } 
# 1327
template< class _Ret, class _Tp> inline const_mem_fun_t< _Ret, _Tp>  
# 1329
mem_fun(_Ret (_Tp::*__f)(void) const) 
# 1330
{ return ((const_mem_fun_t< _Ret, _Tp> )(__f)); } 
# 1332
template< class _Ret, class _Tp> inline mem_fun_ref_t< _Ret, _Tp>  
# 1334
mem_fun_ref(_Ret (_Tp::*__f)(void)) 
# 1335
{ return ((mem_fun_ref_t< _Ret, _Tp> )(__f)); } 
# 1337
template< class _Ret, class _Tp> inline const_mem_fun_ref_t< _Ret, _Tp>  
# 1339
mem_fun_ref(_Ret (_Tp::*__f)(void) const) 
# 1340
{ return ((const_mem_fun_ref_t< _Ret, _Tp> )(__f)); } 
# 1342
template< class _Ret, class _Tp, class _Arg> inline mem_fun1_t< _Ret, _Tp, _Arg>  
# 1344
mem_fun(_Ret (_Tp::*__f)(_Arg)) 
# 1345
{ return ((mem_fun1_t< _Ret, _Tp, _Arg> )(__f)); } 
# 1347
template< class _Ret, class _Tp, class _Arg> inline const_mem_fun1_t< _Ret, _Tp, _Arg>  
# 1349
mem_fun(_Ret (_Tp::*__f)(_Arg) const) 
# 1350
{ return ((const_mem_fun1_t< _Ret, _Tp, _Arg> )(__f)); } 
# 1352
template< class _Ret, class _Tp, class _Arg> inline mem_fun1_ref_t< _Ret, _Tp, _Arg>  
# 1354
mem_fun_ref(_Ret (_Tp::*__f)(_Arg)) 
# 1355
{ return ((mem_fun1_ref_t< _Ret, _Tp, _Arg> )(__f)); } 
# 1357
template< class _Ret, class _Tp, class _Arg> inline const_mem_fun1_ref_t< _Ret, _Tp, _Arg>  
# 1359
mem_fun_ref(_Ret (_Tp::*__f)(_Arg) const) 
# 1360
{ return ((const_mem_fun1_ref_t< _Ret, _Tp, _Arg> )(__f)); } 
# 1365
}
# 60 "/usr/include/c++/8/backward/binders.h" 3
#pragma GCC diagnostic push
#pragma GCC diagnostic ignored "-Wdeprecated-declarations"
# 63
namespace std __attribute((__visibility__("default"))) { 
# 107 "/usr/include/c++/8/backward/binders.h" 3
template< class _Operation> 
# 108
class binder1st : public unary_function< typename _Operation::second_argument_type, typename _Operation::result_type>  { 
# 113
protected: _Operation op; 
# 114
typename _Operation::first_argument_type value; 
# 117
public: binder1st(const _Operation &__x, const typename _Operation::first_argument_type &
# 118
__y) : op(__x), value(__y) 
# 119
{ } 
# 122
typename _Operation::result_type operator()(const typename _Operation::second_argument_type &__x) const 
# 123
{ return (op)(value, __x); } 
# 128
typename _Operation::result_type operator()(typename _Operation::second_argument_type &__x) const 
# 129
{ return (op)(value, __x); } 
# 130
} __attribute((__deprecated__)); 
# 133
template< class _Operation, class _Tp> inline binder1st< _Operation>  
# 135
bind1st(const _Operation &__fn, const _Tp &__x) 
# 136
{ 
# 137
typedef typename _Operation::first_argument_type _Arg1_type; 
# 138
return binder1st< _Operation> (__fn, (_Arg1_type)__x); 
# 139
} 
# 142
template< class _Operation> 
# 143
class binder2nd : public unary_function< typename _Operation::first_argument_type, typename _Operation::result_type>  { 
# 148
protected: _Operation op; 
# 149
typename _Operation::second_argument_type value; 
# 152
public: binder2nd(const _Operation &__x, const typename _Operation::second_argument_type &
# 153
__y) : op(__x), value(__y) 
# 154
{ } 
# 157
typename _Operation::result_type operator()(const typename _Operation::first_argument_type &__x) const 
# 158
{ return (op)(__x, value); } 
# 163
typename _Operation::result_type operator()(typename _Operation::first_argument_type &__x) const 
# 164
{ return (op)(__x, value); } 
# 165
} __attribute((__deprecated__)); 
# 168
template< class _Operation, class _Tp> inline binder2nd< _Operation>  
# 170
bind2nd(const _Operation &__fn, const _Tp &__x) 
# 171
{ 
# 172
typedef typename _Operation::second_argument_type _Arg2_type; 
# 173
return binder2nd< _Operation> (__fn, (_Arg2_type)__x); 
# 174
} 
# 178
}
# 180
#pragma GCC diagnostic pop
# 39 "/usr/include/c++/8/initializer_list" 3
#pragma GCC visibility push ( default )
# 43
namespace std { 
# 46
template< class _E> 
# 47
class initializer_list { 
# 50
public: typedef _E value_type; 
# 51
typedef const _E &reference; 
# 52
typedef const _E &const_reference; 
# 53
typedef size_t size_type; 
# 54
typedef const _E *iterator; 
# 55
typedef const _E *const_iterator; 
# 58
private: iterator _M_array; 
# 59
size_type _M_len; 
# 62
constexpr initializer_list(const_iterator __a, size_type __l) : _M_array(__a), _M_len(__l) 
# 63
{ } 
# 66
public: constexpr initializer_list() noexcept : _M_array((0)), _M_len((0)) 
# 67
{ } 
# 71
constexpr size_type size() const noexcept { return _M_len; } 
# 75
constexpr const_iterator begin() const noexcept { return _M_array; } 
# 79
constexpr const_iterator end() const noexcept { return begin() + size(); } 
# 80
}; 
# 87
template< class _Tp> constexpr const _Tp *
# 89
begin(initializer_list< _Tp>  __ils) noexcept 
# 90
{ return (__ils.begin()); } 
# 97
template< class _Tp> constexpr const _Tp *
# 99
end(initializer_list< _Tp>  __ils) noexcept 
# 100
{ return (__ils.end()); } 
# 101
}
# 103
#pragma GCC visibility pop
# 37 "/usr/include/c++/8/bits/range_access.h" 3
namespace std __attribute((__visibility__("default"))) { 
# 46
template< class _Container> inline auto 
# 48
begin(_Container &__cont)->__decltype(((__cont.begin()))) 
# 49
{ return (__cont.begin()); } 
# 56
template< class _Container> inline auto 
# 58
begin(const _Container &__cont)->__decltype(((__cont.begin()))) 
# 59
{ return (__cont.begin()); } 
# 66
template< class _Container> inline auto 
# 68
end(_Container &__cont)->__decltype(((__cont.end()))) 
# 69
{ return (__cont.end()); } 
# 76
template< class _Container> inline auto 
# 78
end(const _Container &__cont)->__decltype(((__cont.end()))) 
# 79
{ return (__cont.end()); } 
# 85
template< class _Tp, size_t _Nm> constexpr _Tp *
# 87
begin(_Tp (&__arr)[_Nm]) 
# 88
{ return __arr; } 
# 95
template< class _Tp, size_t _Nm> constexpr _Tp *
# 97
end(_Tp (&__arr)[_Nm]) 
# 98
{ return __arr + _Nm; } 
# 102
template< class _Tp> class valarray; 
# 104
template< class _Tp> _Tp *begin(valarray< _Tp>  &); 
# 105
template< class _Tp> const _Tp *begin(const valarray< _Tp>  &); 
# 106
template< class _Tp> _Tp *end(valarray< _Tp>  &); 
# 107
template< class _Tp> const _Tp *end(const valarray< _Tp>  &); 
# 114
template< class _Container> constexpr auto 
# 116
cbegin(const _Container &__cont) noexcept(noexcept(std::begin(__cont)))->__decltype((std::begin(__cont))) 
# 118
{ return std::begin(__cont); } 
# 125
template< class _Container> constexpr auto 
# 127
cend(const _Container &__cont) noexcept(noexcept(std::end(__cont)))->__decltype((std::end(__cont))) 
# 129
{ return std::end(__cont); } 
# 136
template< class _Container> inline auto 
# 138
rbegin(_Container &__cont)->__decltype(((__cont.rbegin()))) 
# 139
{ return (__cont.rbegin()); } 
# 146
template< class _Container> inline auto 
# 148
rbegin(const _Container &__cont)->__decltype(((__cont.rbegin()))) 
# 149
{ return (__cont.rbegin()); } 
# 156
template< class _Container> inline auto 
# 158
rend(_Container &__cont)->__decltype(((__cont.rend()))) 
# 159
{ return (__cont.rend()); } 
# 166
template< class _Container> inline auto 
# 168
rend(const _Container &__cont)->__decltype(((__cont.rend()))) 
# 169
{ return (__cont.rend()); } 
# 176
template< class _Tp, size_t _Nm> inline reverse_iterator< _Tp *>  
# 178
rbegin(_Tp (&__arr)[_Nm]) 
# 179
{ return ((reverse_iterator< _Tp *> )(__arr + _Nm)); } 
# 186
template< class _Tp, size_t _Nm> inline reverse_iterator< _Tp *>  
# 188
rend(_Tp (&__arr)[_Nm]) 
# 189
{ return ((reverse_iterator< _Tp *> )(__arr)); } 
# 196
template< class _Tp> inline reverse_iterator< const _Tp *>  
# 198
rbegin(initializer_list< _Tp>  __il) 
# 199
{ return ((reverse_iterator< const _Tp *> )((__il.end()))); } 
# 206
template< class _Tp> inline reverse_iterator< const _Tp *>  
# 208
rend(initializer_list< _Tp>  __il) 
# 209
{ return ((reverse_iterator< const _Tp *> )((__il.begin()))); } 
# 216
template< class _Container> inline auto 
# 218
crbegin(const _Container &__cont)->__decltype((std::rbegin(__cont))) 
# 219
{ return std::rbegin(__cont); } 
# 226
template< class _Container> inline auto 
# 228
crend(const _Container &__cont)->__decltype((std::rend(__cont))) 
# 229
{ return std::rend(__cont); } 
# 324 "/usr/include/c++/8/bits/range_access.h" 3
}
# 41 "/usr/include/c++/8/bits/alloc_traits.h" 3
namespace std __attribute((__visibility__("default"))) { 
# 45
struct __allocator_traits_base { 
# 47
template< class _Tp, class _Up, class  = void> 
# 48
struct __rebind : public __replace_first_arg< _Tp, _Up>  { }; 
# 50
template< class _Tp, class _Up> 
# 51
struct __rebind< _Tp, _Up, __void_t< typename _Tp::template rebind< _Up> ::other> >  { 
# 53
using type = typename _Tp::template rebind< _Up> ::other; }; 
# 57
protected: 
# 56
template< class _Tp> using __pointer = typename _Tp::pointer; 
# 58
template< class _Tp> using __c_pointer = typename _Tp::const_pointer; 
# 60
template< class _Tp> using __v_pointer = typename _Tp::void_pointer; 
# 62
template< class _Tp> using __cv_pointer = typename _Tp::const_void_pointer; 
# 64
template< class _Tp> using __pocca = typename _Tp::propagate_on_container_copy_assignment; 
# 66
template< class _Tp> using __pocma = typename _Tp::propagate_on_container_move_assignment; 
# 68
template< class _Tp> using __pocs = typename _Tp::propagate_on_container_swap; 
# 70
template< class _Tp> using __equal = typename _Tp::is_always_equal; 
# 72
}; 
# 74
template< class _Alloc, class _Up> using __alloc_rebind = typename __allocator_traits_base::__rebind< _Alloc, _Up> ::type; 
# 82
template< class _Alloc> 
# 83
struct allocator_traits : public __allocator_traits_base { 
# 86
typedef _Alloc allocator_type; 
# 88
typedef typename _Alloc::value_type value_type; 
# 95
using pointer = __detected_or_t< typename _Alloc::value_type *, __pointer, _Alloc> ; 
# 100
private: 
# 99
template< template< class >  class _Func, class _Tp, class  = void> 
# 100
struct _Ptr { 
# 102
using type = typename pointer_traits< __detected_or_t< typename _Alloc::value_type *, __pointer, _Alloc> > ::template rebind< _Tp> ; 
# 103
}; 
# 105
template< template< class >  class _Func, class _Tp> 
# 106
struct _Ptr< _Func, _Tp, __void_t< _Func< _Alloc> > >  { 
# 108
using type = _Func< _Alloc> ; 
# 109
}; 
# 112
template< class _A2, class _PtrT, class  = void> 
# 113
struct _Diff { 
# 114
using type = typename pointer_traits< _PtrT> ::difference_type; }; 
# 116
template< class _A2, class _PtrT> 
# 117
struct _Diff< _A2, _PtrT, __void_t< typename _A2::difference_type> >  { 
# 118
using type = typename _A2::difference_type; }; 
# 121
template< class _A2, class _DiffT, class  = void> 
# 122
struct _Size : public make_unsigned< _DiffT>  { }; 
# 124
template< class _A2, class _DiffT> 
# 125
struct _Size< _A2, _DiffT, __void_t< typename _A2::size_type> >  { 
# 126
using type = typename _A2::size_type; }; 
# 135
public: using const_pointer = typename _Ptr< __c_pointer, const typename _Alloc::value_type> ::type; 
# 143
using void_pointer = typename _Ptr< __v_pointer, void> ::type; 
# 151
using const_void_pointer = typename _Ptr< __cv_pointer, const void> ::type; 
# 159
using difference_type = typename _Diff< _Alloc, __detected_or_t< typename _Alloc::value_type *, __pointer, _Alloc> > ::type; 
# 167
using size_type = typename _Size< _Alloc, typename _Diff< _Alloc, __detected_or_t< typename _Alloc::value_type *, __pointer, _Alloc> > ::type> ::type; 
# 175
using propagate_on_container_copy_assignment = __detected_or_t< integral_constant< bool, false> , __pocca, _Alloc> ; 
# 184
using propagate_on_container_move_assignment = __detected_or_t< integral_constant< bool, false> , __pocma, _Alloc> ; 
# 193
using propagate_on_container_swap = __detected_or_t< integral_constant< bool, false> , __pocs, _Alloc> ; 
# 202
using is_always_equal = __detected_or_t< typename is_empty< _Alloc> ::type, __equal, _Alloc> ; 
# 205
template< class _Tp> using rebind_alloc = __alloc_rebind< _Alloc, _Tp> ; 
# 207
template< class _Tp> using rebind_traits = std::allocator_traits< rebind_alloc< _Tp> > ; 
# 213
private: 
# 211
template< class _Alloc2> static auto 
# 213
_S_allocate(_Alloc2 &__a, size_type __n, const_void_pointer __hint, int)->__decltype(((__a.allocate(__n, __hint)))) 
# 215
{ return (__a.allocate(__n, __hint)); } 
# 217
template< class _Alloc2> static pointer 
# 219
_S_allocate(_Alloc2 &__a, size_type __n, const_void_pointer, ...) 
# 220
{ return (__a.allocate(__n)); } 
# 222
template< class _Tp, class ..._Args> 
# 223
struct __construct_helper { 
# 225
template< class _Alloc2, class 
# 226
 = __decltype(((std::declval< _Alloc2 *> ()->construct(std::declval< _Tp *> (), std::declval< _Args> ()...))))> static true_type 
# 225
__test(int); 
# 230
template< class > static false_type __test(...); 
# 233
using type = __decltype((__test< _Alloc> (0))); 
# 234
}; 
# 236
template< class _Tp, class ..._Args> using __has_construct = typename __construct_helper< _Tp, _Args...> ::type; 
# 240
template< class _Tp, class ..._Args> static _Require< __has_construct< _Tp, _Args...> >  
# 242
_S_construct(_Alloc &__a, _Tp *__p, _Args &&...__args) 
# 243
{ (__a.construct(__p, std::forward< _Args> (__args)...)); } 
# 245
template< class _Tp, class ..._Args> static _Require< __and_< __not_< __has_construct< _Tp, _Args...> > , is_constructible< _Tp, _Args...> > >  
# 249
_S_construct(_Alloc &, _Tp *__p, _Args &&...__args) 
# 250
{ ::new ((void *)__p) (_Tp)(std::forward< _Args> (__args)...); } 
# 252
template< class _Alloc2, class _Tp> static auto 
# 254
_S_destroy(_Alloc2 &__a, _Tp *__p, int)->__decltype(((__a.destroy(__p)))) 
# 256
{ (__a.destroy(__p)); } 
# 258
template< class _Alloc2, class _Tp> static void 
# 260
_S_destroy(_Alloc2 &, _Tp *__p, ...) 
# 261
{ (__p->~_Tp()); } 
# 263
template< class _Alloc2> static auto 
# 265
_S_max_size(_Alloc2 &__a, int)->__decltype(((__a.max_size()))) 
# 267
{ return (__a.max_size()); } 
# 269
template< class _Alloc2> static size_type 
# 271
_S_max_size(_Alloc2 &, ...) 
# 272
{ 
# 275
return __gnu_cxx::__numeric_traits< typename _Size< _Alloc, typename _Diff< _Alloc, __detected_or_t< typename _Alloc::value_type *, __pointer, _Alloc> > ::type> ::type> ::__max / sizeof(value_type); 
# 277
} 
# 279
template< class _Alloc2> static auto 
# 281
_S_select(_Alloc2 &__a, int)->__decltype(((__a.select_on_container_copy_construction()))) 
# 283
{ return (__a.select_on_container_copy_construction()); } 
# 285
template< class _Alloc2> static _Alloc2 
# 287
_S_select(_Alloc2 &__a, ...) 
# 288
{ return __a; } 
# 300 "/usr/include/c++/8/bits/alloc_traits.h" 3
public: static pointer allocate(_Alloc &__a, size_type __n) 
# 301
{ return (__a.allocate(__n)); } 
# 315 "/usr/include/c++/8/bits/alloc_traits.h" 3
static pointer allocate(_Alloc &__a, size_type __n, const_void_pointer __hint) 
# 316
{ return _S_allocate(__a, __n, __hint, 0); } 
# 327 "/usr/include/c++/8/bits/alloc_traits.h" 3
static void deallocate(_Alloc &__a, pointer __p, size_type __n) 
# 328
{ (__a.deallocate(__p, __n)); } 
# 341 "/usr/include/c++/8/bits/alloc_traits.h" 3
template< class _Tp, class ..._Args> static auto 
# 342
construct(_Alloc &__a, _Tp *__p, _Args &&...__args)->__decltype((_S_construct(__a, __p, std::forward< _Args> (__args)...))) 
# 344
{ _S_construct(__a, __p, std::forward< _Args> (__args)...); } 
# 354 "/usr/include/c++/8/bits/alloc_traits.h" 3
template< class _Tp> static void 
# 355
destroy(_Alloc &__a, _Tp *__p) 
# 356
{ _S_destroy(__a, __p, 0); } 
# 366 "/usr/include/c++/8/bits/alloc_traits.h" 3
static size_type max_size(const _Alloc &__a) noexcept 
# 367
{ return _S_max_size(__a, 0); } 
# 378 "/usr/include/c++/8/bits/alloc_traits.h" 3
static _Alloc select_on_container_copy_construction(const _Alloc &__rhs) 
# 379
{ return _S_select(__rhs, 0); } 
# 380
}; 
# 383
template< class _Tp> 
# 384
struct allocator_traits< allocator< _Tp> >  { 
# 387
using allocator_type = allocator< _Tp> ; 
# 389
using value_type = _Tp; 
# 392
using pointer = _Tp *; 
# 395
using const_pointer = const _Tp *; 
# 398
using void_pointer = void *; 
# 401
using const_void_pointer = const void *; 
# 404
using difference_type = ptrdiff_t; 
# 407
using size_type = size_t; 
# 410
using propagate_on_container_copy_assignment = false_type; 
# 413
using propagate_on_container_move_assignment = true_type; 
# 416
using propagate_on_container_swap = false_type; 
# 419
using is_always_equal = true_type; 
# 421
template< class _Up> using rebind_alloc = allocator< _Up> ; 
# 424
template< class _Up> using rebind_traits = std::allocator_traits< allocator< _Up> > ; 
# 435 "/usr/include/c++/8/bits/alloc_traits.h" 3
static pointer allocate(allocator_type &__a, size_type __n) 
# 436
{ return (__a.allocate(__n)); } 
# 449 "/usr/include/c++/8/bits/alloc_traits.h" 3
static pointer allocate(allocator_type &__a, size_type __n, const_void_pointer __hint) 
# 450
{ return (__a.allocate(__n, __hint)); } 
# 461 "/usr/include/c++/8/bits/alloc_traits.h" 3
static void deallocate(allocator_type &__a, pointer __p, size_type __n) 
# 462
{ (__a.deallocate(__p, __n)); } 
# 472 "/usr/include/c++/8/bits/alloc_traits.h" 3
template< class _Up, class ..._Args> static void 
# 474
construct(allocator_type &__a, _Up *__p, _Args &&...__args) 
# 475
{ (__a.construct(__p, std::forward< _Args> (__args)...)); } 
# 484 "/usr/include/c++/8/bits/alloc_traits.h" 3
template< class _Up> static void 
# 486
destroy(allocator_type &__a, _Up *__p) 
# 487
{ (__a.destroy(__p)); } 
# 495
static size_type max_size(const allocator_type &__a) noexcept 
# 496
{ return (__a.max_size()); } 
# 504
static allocator_type select_on_container_copy_construction(const allocator_type &__rhs) 
# 505
{ return __rhs; } 
# 506
}; 
# 509
template< class _Alloc> inline void 
# 511
__do_alloc_on_copy(_Alloc &__one, const _Alloc &__two, true_type) 
# 512
{ __one = __two; } 
# 514
template< class _Alloc> inline void 
# 516
__do_alloc_on_copy(_Alloc &, const _Alloc &, false_type) 
# 517
{ } 
# 519
template< class _Alloc> inline void 
# 520
__alloc_on_copy(_Alloc &__one, const _Alloc &__two) 
# 521
{ 
# 522
typedef allocator_traits< _Alloc>  __traits; 
# 523
typedef typename allocator_traits< _Alloc> ::propagate_on_container_copy_assignment __pocca; 
# 524
__do_alloc_on_copy(__one, __two, __pocca()); 
# 525
} 
# 527
template< class _Alloc> inline _Alloc 
# 528
__alloc_on_copy(const _Alloc &__a) 
# 529
{ 
# 530
typedef allocator_traits< _Alloc>  __traits; 
# 531
return __traits::select_on_container_copy_construction(__a); 
# 532
} 
# 534
template< class _Alloc> inline void 
# 535
__do_alloc_on_move(_Alloc &__one, _Alloc &__two, true_type) 
# 536
{ __one = std::move(__two); } 
# 538
template< class _Alloc> inline void 
# 539
__do_alloc_on_move(_Alloc &, _Alloc &, false_type) 
# 540
{ } 
# 542
template< class _Alloc> inline void 
# 543
__alloc_on_move(_Alloc &__one, _Alloc &__two) 
# 544
{ 
# 545
typedef allocator_traits< _Alloc>  __traits; 
# 546
typedef typename allocator_traits< _Alloc> ::propagate_on_container_move_assignment __pocma; 
# 547
__do_alloc_on_move(__one, __two, __pocma()); 
# 548
} 
# 550
template< class _Alloc> inline void 
# 551
__do_alloc_on_swap(_Alloc &__one, _Alloc &__two, true_type) 
# 552
{ 
# 553
using std::swap;
# 554
swap(__one, __two); 
# 555
} 
# 557
template< class _Alloc> inline void 
# 558
__do_alloc_on_swap(_Alloc &, _Alloc &, false_type) 
# 559
{ } 
# 561
template< class _Alloc> inline void 
# 562
__alloc_on_swap(_Alloc &__one, _Alloc &__two) 
# 563
{ 
# 564
typedef allocator_traits< _Alloc>  __traits; 
# 565
typedef typename allocator_traits< _Alloc> ::propagate_on_container_swap __pocs; 
# 566
__do_alloc_on_swap(__one, __two, __pocs()); 
# 567
} 
# 569
template< class _Alloc> 
# 570
class __is_copy_insertable_impl { 
# 572
typedef allocator_traits< _Alloc>  _Traits; 
# 574
template< class _Up, class 
# 575
 = __decltype((_Traits::construct(std::declval< _Alloc &> (), std::declval< _Up *> (), std::declval< const _Up &> ())))> static true_type 
# 574
_M_select(int); 
# 581
template< class _Up> static false_type _M_select(...); 
# 586
public: typedef __decltype((_M_select< typename _Alloc::value_type> (0))) type; 
# 587
}; 
# 590
template< class _Alloc> 
# 591
struct __is_copy_insertable : public __is_copy_insertable_impl< _Alloc> ::type { 
# 593
}; 
# 596
template< class _Tp> 
# 597
struct __is_copy_insertable< allocator< _Tp> >  : public is_copy_constructible< _Tp>  { 
# 599
}; 
# 602
template< class _Alloc, class  = void> 
# 603
struct __is_allocator : public false_type { }; 
# 605
template< class _Alloc> 
# 606
struct __is_allocator< _Alloc, __void_t< typename _Alloc::value_type, __decltype(((std::declval< _Alloc &> ().allocate((unsigned long)0UL))))> >  : public true_type { 
# 609
}; 
# 611
template< class _Alloc> using _RequireAllocator = typename enable_if< __is_allocator< _Alloc> ::value, _Alloc> ::type; 
# 616
}
# 41 "/usr/include/c++/8/ext/alloc_traits.h" 3
namespace __gnu_cxx __attribute((__visibility__("default"))) { 
# 49
template< class _Alloc, class  = typename _Alloc::value_type> 
# 50
struct __alloc_traits : public std::allocator_traits< _Alloc>  { 
# 55
typedef _Alloc allocator_type; 
# 57
typedef std::allocator_traits< _Alloc>  _Base_type; 
# 58
typedef typename std::allocator_traits< _Alloc> ::value_type value_type; 
# 59
typedef typename std::allocator_traits< _Alloc> ::pointer pointer; 
# 60
typedef typename std::allocator_traits< _Alloc> ::const_pointer const_pointer; 
# 61
typedef typename std::allocator_traits< _Alloc> ::size_type size_type; 
# 62
typedef typename std::allocator_traits< _Alloc> ::difference_type difference_type; 
# 64
typedef value_type &reference; 
# 65
typedef const value_type &const_reference; 
# 66
using std::allocator_traits< _Alloc> ::allocate;
# 67
using std::allocator_traits< _Alloc> ::deallocate;
# 68
using std::allocator_traits< _Alloc> ::construct;
# 69
using std::allocator_traits< _Alloc> ::destroy;
# 70
using std::allocator_traits< _Alloc> ::max_size;
# 74
private: 
# 73
template< class _Ptr> using __is_custom_pointer = std::__and_< std::is_same< typename std::allocator_traits< _Alloc> ::pointer, _Ptr> , std::__not_< std::is_pointer< _Ptr> > > ; 
# 82
public: 
# 80
template< class _Ptr, class ..._Args> static typename std::enable_if< std::__and_< std::is_same< typename std::allocator_traits< _Alloc> ::pointer, _Ptr> , std::__not_< std::is_pointer< _Ptr> > > ::value> ::type 
# 82
construct(_Alloc &__a, _Ptr __p, _Args &&...__args) 
# 83
{ 
# 84
_Base_type::construct(__a, std::__to_address(__p), std::forward< _Args> (__args)...); 
# 86
} 
# 89
template< class _Ptr> static typename std::enable_if< std::__and_< std::is_same< typename std::allocator_traits< _Alloc> ::pointer, _Ptr> , std::__not_< std::is_pointer< _Ptr> > > ::value> ::type 
# 91
destroy(_Alloc &__a, _Ptr __p) 
# 92
{ _Base_type::destroy(__a, std::__to_address(__p)); } 
# 94
static _Alloc _S_select_on_copy(const _Alloc &__a) 
# 95
{ return _Base_type::select_on_container_copy_construction(__a); } 
# 97
static void _S_on_swap(_Alloc &__a, _Alloc &__b) 
# 98
{ std::__alloc_on_swap(__a, __b); } 
# 100
static constexpr bool _S_propagate_on_copy_assign() 
# 101
{ return _Base_type::propagate_on_container_copy_assignment::value; } 
# 103
static constexpr bool _S_propagate_on_move_assign() 
# 104
{ return _Base_type::propagate_on_container_move_assignment::value; } 
# 106
static constexpr bool _S_propagate_on_swap() 
# 107
{ return _Base_type::propagate_on_container_swap::value; } 
# 109
static constexpr bool _S_always_equal() 
# 110
{ return _Base_type::is_always_equal::value; } 
# 112
static constexpr bool _S_nothrow_move() 
# 113
{ return (_S_propagate_on_move_assign)() || (_S_always_equal)(); } 
# 115
template< class _Tp> 
# 116
struct rebind { 
# 117
typedef typename std::allocator_traits< _Alloc> ::template rebind_alloc< _Tp>  other; }; 
# 158 "/usr/include/c++/8/ext/alloc_traits.h" 3
}; 
# 161
}
# 52 "/usr/include/c++/8/bits/basic_string.h" 3
namespace std __attribute((__visibility__("default"))) { 
# 57
inline namespace __cxx11 { 
# 76 "/usr/include/c++/8/bits/basic_string.h" 3
template< class _CharT, class _Traits, class _Alloc> 
# 77
class basic_string { 
# 80
typedef typename __gnu_cxx::__alloc_traits< _Alloc> ::template rebind< _CharT> ::other _Char_alloc_type; 
# 81
typedef __gnu_cxx::__alloc_traits< typename __gnu_cxx::__alloc_traits< _Alloc> ::template rebind< _CharT> ::other>  _Alloc_traits; 
# 85
public: typedef _Traits traits_type; 
# 86
typedef typename _Traits::char_type value_type; 
# 87
typedef _Char_alloc_type allocator_type; 
# 88
typedef typename __gnu_cxx::__alloc_traits< typename __gnu_cxx::__alloc_traits< _Alloc> ::template rebind< _CharT> ::other> ::size_type size_type; 
# 89
typedef typename __gnu_cxx::__alloc_traits< typename __gnu_cxx::__alloc_traits< _Alloc> ::template rebind< _CharT> ::other> ::difference_type difference_type; 
# 90
typedef typename __gnu_cxx::__alloc_traits< typename __gnu_cxx::__alloc_traits< _Alloc> ::template rebind< _CharT> ::other> ::reference reference; 
# 91
typedef typename __gnu_cxx::__alloc_traits< typename __gnu_cxx::__alloc_traits< _Alloc> ::template rebind< _CharT> ::other> ::const_reference const_reference; 
# 92
typedef typename __gnu_cxx::__alloc_traits< typename __gnu_cxx::__alloc_traits< _Alloc> ::template rebind< _CharT> ::other> ::pointer pointer; 
# 93
typedef typename __gnu_cxx::__alloc_traits< typename __gnu_cxx::__alloc_traits< _Alloc> ::template rebind< _CharT> ::other> ::const_pointer const_pointer; 
# 94
typedef __gnu_cxx::__normal_iterator< typename __gnu_cxx::__alloc_traits< typename __gnu_cxx::__alloc_traits< _Alloc> ::template rebind< _CharT> ::other> ::pointer, basic_string>  iterator; 
# 96
typedef __gnu_cxx::__normal_iterator< typename __gnu_cxx::__alloc_traits< typename __gnu_cxx::__alloc_traits< _Alloc> ::template rebind< _CharT> ::other> ::const_pointer, basic_string>  const_iterator; 
# 97
typedef std::reverse_iterator< __gnu_cxx::__normal_iterator< typename __gnu_cxx::__alloc_traits< typename __gnu_cxx::__alloc_traits< _Alloc> ::template rebind< _CharT> ::other> ::const_pointer, basic_string> >  const_reverse_iterator; 
# 98
typedef std::reverse_iterator< __gnu_cxx::__normal_iterator< typename __gnu_cxx::__alloc_traits< typename __gnu_cxx::__alloc_traits< _Alloc> ::template rebind< _CharT> ::other> ::pointer, basic_string> >  reverse_iterator; 
# 101
static const size_type npos = (static_cast< size_type>(-1)); 
# 108
private: typedef const_iterator __const_iterator; 
# 139 "/usr/include/c++/8/bits/basic_string.h" 3
struct _Alloc_hider : public allocator_type { 
# 145
_Alloc_hider(typename __cxx11::basic_string< _CharT, _Traits, _Alloc> ::pointer __dat, const _Alloc &__a) : __cxx11::basic_string< _CharT, _Traits, _Alloc> ::allocator_type(__a), _M_p(__dat) 
# 146
{ } 
# 148
_Alloc_hider(typename __cxx11::basic_string< _CharT, _Traits, _Alloc> ::pointer __dat, _Alloc &&__a = _Alloc()) : __cxx11::basic_string< _CharT, _Traits, _Alloc> ::allocator_type(std::move(__a)), _M_p(__dat) 
# 149
{ } 
# 152
typename __cxx11::basic_string< _CharT, _Traits, _Alloc> ::pointer _M_p; 
# 153
}; 
# 155
_Alloc_hider _M_dataplus; 
# 156
size_type _M_string_length; 
# 158
enum { _S_local_capacity = (15) / sizeof(_CharT)}; 
# 161
union { 
# 162
_CharT _M_local_buf[_S_local_capacity + 1]; 
# 163
size_type _M_allocated_capacity; 
# 164
}; 
# 167
void _M_data(pointer __p) 
# 168
{ ((_M_dataplus)._M_p) = __p; } 
# 171
void _M_length(size_type __length) 
# 172
{ (_M_string_length) = __length; } 
# 175
pointer _M_data() const 
# 176
{ return (_M_dataplus)._M_p; } 
# 179
pointer _M_local_data() 
# 180
{ 
# 182
return std::pointer_traits< typename __gnu_cxx::__alloc_traits< typename __gnu_cxx::__alloc_traits< _Alloc> ::template rebind< _CharT> ::other> ::pointer> ::pointer_to(*(_M_local_buf)); 
# 186
} 
# 189
const_pointer _M_local_data() const 
# 190
{ 
# 192
return std::pointer_traits< typename __gnu_cxx::__alloc_traits< typename __gnu_cxx::__alloc_traits< _Alloc> ::template rebind< _CharT> ::other> ::const_pointer> ::pointer_to(*(_M_local_buf)); 
# 196
} 
# 199
void _M_capacity(size_type __capacity) 
# 200
{ (_M_allocated_capacity) = __capacity; } 
# 203
void _M_set_length(size_type __n) 
# 204
{ 
# 205
_M_length(__n); 
# 206
traits_type::assign(_M_data()[__n], _CharT()); 
# 207
} 
# 210
bool _M_is_local() const 
# 211
{ return _M_data() == _M_local_data(); } 
# 215
pointer _M_create(size_type &, size_type); 
# 218
void _M_dispose() 
# 219
{ 
# 220
if (!_M_is_local()) { 
# 221
_M_destroy(_M_allocated_capacity); }  
# 222
} 
# 225
void _M_destroy(size_type __size) throw() 
# 226
{ _Alloc_traits::deallocate(_M_get_allocator(), _M_data(), __size + 1); } 
# 230
template< class _InIterator> void 
# 232
_M_construct_aux(_InIterator __beg, _InIterator __end, __false_type) 
# 234
{ 
# 235
typedef typename iterator_traits< _InIterator> ::iterator_category _Tag; 
# 236
_M_construct(__beg, __end, _Tag()); 
# 237
} 
# 241
template< class _Integer> void 
# 243
_M_construct_aux(_Integer __beg, _Integer __end, __true_type) 
# 244
{ _M_construct_aux_2(static_cast< size_type>(__beg), __end); } 
# 247
void _M_construct_aux_2(size_type __req, _CharT __c) 
# 248
{ _M_construct(__req, __c); } 
# 250
template< class _InIterator> void 
# 252
_M_construct(_InIterator __beg, _InIterator __end) 
# 253
{ 
# 254
typedef typename __is_integer< _InIterator> ::__type _Integral; 
# 255
_M_construct_aux(__beg, __end, _Integral()); 
# 256
} 
# 259
template< class _InIterator> void _M_construct(_InIterator __beg, _InIterator __end, input_iterator_tag); 
# 266
template< class _FwdIterator> void _M_construct(_FwdIterator __beg, _FwdIterator __end, forward_iterator_tag); 
# 272
void _M_construct(size_type __req, _CharT __c); 
# 275
allocator_type &_M_get_allocator() 
# 276
{ return _M_dataplus; } 
# 279
const allocator_type &_M_get_allocator() const 
# 280
{ return _M_dataplus; } 
# 299 "/usr/include/c++/8/bits/basic_string.h" 3
size_type _M_check(size_type __pos, const char *__s) const 
# 300
{ 
# 301
if (__pos > size()) { 
# 302
__throw_out_of_range_fmt("%s: __pos (which is %zu) > this->size() (which is %zu)", __s, __pos, size()); }  
# 305
return __pos; 
# 306
} 
# 309
void _M_check_length(size_type __n1, size_type __n2, const char *__s) const 
# 310
{ 
# 311
if ((max_size() - (size() - __n1)) < __n2) { 
# 312
__throw_length_error(__s); }  
# 313
} 
# 318
size_type _M_limit(size_type __pos, size_type __off) const noexcept 
# 319
{ 
# 320
const bool __testoff = __off < (size() - __pos); 
# 321
return __testoff ? __off : (size() - __pos); 
# 322
} 
# 326
bool _M_disjunct(const _CharT *__s) const noexcept 
# 327
{ 
# 328
return less< const _CharT *> ()(__s, _M_data()) || less< const _CharT *> ()(_M_data() + size(), __s); 
# 330
} 
# 335
static void _S_copy(_CharT *__d, const _CharT *__s, size_type __n) 
# 336
{ 
# 337
if (__n == 1) { 
# 338
traits_type::assign(*__d, *__s); } else { 
# 340
traits_type::copy(__d, __s, __n); }  
# 341
} 
# 344
static void _S_move(_CharT *__d, const _CharT *__s, size_type __n) 
# 345
{ 
# 346
if (__n == 1) { 
# 347
traits_type::assign(*__d, *__s); } else { 
# 349
traits_type::move(__d, __s, __n); }  
# 350
} 
# 353
static void _S_assign(_CharT *__d, size_type __n, _CharT __c) 
# 354
{ 
# 355
if (__n == 1) { 
# 356
traits_type::assign(*__d, __c); } else { 
# 358
traits_type::assign(__d, __n, __c); }  
# 359
} 
# 363
template< class _Iterator> static void 
# 365
_S_copy_chars(_CharT *__p, _Iterator __k1, _Iterator __k2) 
# 366
{ 
# 367
for (; __k1 != __k2; (++__k1), ((void)(++__p))) { 
# 368
traits_type::assign(*__p, *__k1); }  
# 369
} 
# 372
static void _S_copy_chars(_CharT *__p, iterator __k1, iterator __k2) noexcept 
# 373
{ _S_copy_chars(__p, (__k1.base()), (__k2.base())); } 
# 376
static void _S_copy_chars(_CharT *__p, const_iterator __k1, const_iterator __k2) noexcept 
# 378
{ _S_copy_chars(__p, (__k1.base()), (__k2.base())); } 
# 381
static void _S_copy_chars(_CharT *__p, _CharT *__k1, _CharT *__k2) noexcept 
# 382
{ (_S_copy)(__p, __k1, __k2 - __k1); } 
# 385
static void _S_copy_chars(_CharT *__p, const _CharT *__k1, const _CharT *__k2) noexcept 
# 387
{ (_S_copy)(__p, __k1, __k2 - __k1); } 
# 390
static int _S_compare(size_type __n1, size_type __n2) noexcept 
# 391
{ 
# 392
const difference_type __d = (difference_type)(__n1 - __n2); 
# 394
if (__d > __gnu_cxx::__numeric_traits< int> ::__max) { 
# 395
return __gnu_cxx::__numeric_traits< int> ::__max; } else { 
# 396
if (__d < __gnu_cxx::__numeric_traits< int> ::__min) { 
# 397
return __gnu_cxx::__numeric_traits< int> ::__min; } else { 
# 399
return (int)__d; }  }  
# 400
} 
# 403
void _M_assign(const basic_string &); 
# 406
void _M_mutate(size_type __pos, size_type __len1, const _CharT * __s, size_type __len2); 
# 410
void _M_erase(size_type __pos, size_type __n); 
# 420
public: basic_string() noexcept(is_nothrow_default_constructible< _Alloc> ::value) : _M_dataplus(_M_local_data()) 
# 423
{ _M_set_length(0); } 
# 429
explicit basic_string(const _Alloc &__a) noexcept : _M_dataplus(_M_local_data(), __a) 
# 431
{ _M_set_length(0); } 
# 437
basic_string(const basic_string &__str) : _M_dataplus(_M_local_data(), _Alloc_traits::_S_select_on_copy(__str._M_get_allocator())) 
# 440
{ _M_construct((__str._M_data()), (__str._M_data()) + __str.length()); } 
# 450 "/usr/include/c++/8/bits/basic_string.h" 3
basic_string(const basic_string &__str, size_type __pos, const _Alloc &
# 451
__a = _Alloc()) : _M_dataplus(_M_local_data(), __a) 
# 453
{ 
# 454
const _CharT *__start = (__str._M_data()) + __str._M_check(__pos, "basic_string::basic_string"); 
# 456
_M_construct(__start, __start + __str._M_limit(__pos, npos)); 
# 457
} 
# 465
basic_string(const basic_string &__str, size_type __pos, size_type 
# 466
__n) : _M_dataplus(_M_local_data()) 
# 468
{ 
# 469
const _CharT *__start = (__str._M_data()) + __str._M_check(__pos, "basic_string::basic_string"); 
# 471
_M_construct(__start, __start + __str._M_limit(__pos, __n)); 
# 472
} 
# 481 "/usr/include/c++/8/bits/basic_string.h" 3
basic_string(const basic_string &__str, size_type __pos, size_type 
# 482
__n, const _Alloc &__a) : _M_dataplus(_M_local_data(), __a) 
# 484
{ 
# 485
const _CharT *__start = (__str._M_data()) + __str._M_check(__pos, "string::string"); 
# 487
_M_construct(__start, __start + __str._M_limit(__pos, __n)); 
# 488
} 
# 499 "/usr/include/c++/8/bits/basic_string.h" 3
basic_string(const _CharT *__s, size_type __n, const _Alloc &
# 500
__a = _Alloc()) : _M_dataplus(_M_local_data(), __a) 
# 502
{ _M_construct(__s, __s + __n); } 
# 514 "/usr/include/c++/8/bits/basic_string.h" 3
basic_string(const _CharT *__s, const _Alloc &__a = _Alloc()) : _M_dataplus(_M_local_data(), __a) 
# 516
{ _M_construct(__s, (__s) ? __s + traits_type::length(__s) : (__s + npos)); } 
# 529 "/usr/include/c++/8/bits/basic_string.h" 3
basic_string(size_type __n, _CharT __c, const _Alloc &__a = _Alloc()) : _M_dataplus(_M_local_data(), __a) 
# 531
{ _M_construct(__n, __c); } 
# 541 "/usr/include/c++/8/bits/basic_string.h" 3
basic_string(basic_string &&__str) noexcept : _M_dataplus(_M_local_data(), std::move(__str._M_get_allocator())) 
# 543
{ 
# 544
if (__str._M_is_local()) 
# 545
{ 
# 546
traits_type::copy(_M_local_buf, __str._M_local_buf, _S_local_capacity + 1); 
# 548
} else 
# 550
{ 
# 551
_M_data((__str._M_data())); 
# 552
_M_capacity(__str._M_allocated_capacity); 
# 553
}  
# 558
_M_length(__str.length()); 
# 559
(__str._M_data(__str._M_local_data())); 
# 560
__str._M_set_length(0); 
# 561
} 
# 568
basic_string(initializer_list< _CharT>  __l, const _Alloc &__a = _Alloc()) : _M_dataplus(_M_local_data(), __a) 
# 570
{ _M_construct((__l.begin()), (__l.end())); } 
# 572
basic_string(const basic_string &__str, const _Alloc &__a) : _M_dataplus(_M_local_data(), __a) 
# 574
{ _M_construct(__str.begin(), __str.end()); } 
# 576
basic_string(basic_string &&__str, const _Alloc &__a) noexcept(_Alloc_traits::_S_always_equal()) : _M_dataplus(_M_local_data(), __a) 
# 579
{ 
# 580
if (__str._M_is_local()) 
# 581
{ 
# 582
traits_type::copy(_M_local_buf, __str._M_local_buf, _S_local_capacity + 1); 
# 584
_M_length(__str.length()); 
# 585
__str._M_set_length(0); 
# 586
} else { 
# 587
if (_Alloc_traits::_S_always_equal() || (__str.get_allocator() == __a)) 
# 589
{ 
# 590
_M_data((__str._M_data())); 
# 591
_M_length(__str.length()); 
# 592
_M_capacity(__str._M_allocated_capacity); 
# 593
(__str._M_data(__str._M_local_buf)); 
# 594
__str._M_set_length(0); 
# 595
} else { 
# 597
_M_construct(__str.begin(), __str.end()); }  }  
# 598
} 
# 609 "/usr/include/c++/8/bits/basic_string.h" 3
template< class _InputIterator, class 
# 610
 = _RequireInputIter< _InputIterator> > 
# 614
basic_string(_InputIterator __beg, _InputIterator __end, const _Alloc &
# 615
__a = _Alloc()) : _M_dataplus(_M_local_data(), __a) 
# 617
{ _M_construct(__beg, __end); } 
# 656 "/usr/include/c++/8/bits/basic_string.h" 3
~basic_string() 
# 657
{ _M_dispose(); } 
# 664
basic_string &operator=(const basic_string &__str) 
# 665
{ 
# 667
if (_Alloc_traits::_S_propagate_on_copy_assign()) 
# 668
{ 
# 669
if ((!_Alloc_traits::_S_always_equal()) && (!_M_is_local()) && (_M_get_allocator() != __str._M_get_allocator())) 
# 671
{ 
# 674
if (__str.size() <= _S_local_capacity) 
# 675
{ 
# 676
_M_destroy(_M_allocated_capacity); 
# 677
_M_data(_M_local_data()); 
# 678
_M_set_length(0); 
# 679
} else 
# 681
{ 
# 682
const auto __len = __str.size(); 
# 683
auto __alloc = __str._M_get_allocator(); 
# 685
auto __ptr = _Alloc_traits::allocate(__alloc, __len + 1); 
# 686
_M_destroy(_M_allocated_capacity); 
# 687
_M_data(__ptr); 
# 688
_M_capacity(__len); 
# 689
_M_set_length(__len); 
# 690
}  
# 691
}  
# 692
std::__alloc_on_copy(_M_get_allocator(), __str._M_get_allocator()); 
# 693
}  
# 695
return (this->assign(__str)); 
# 696
} 
# 703
basic_string &operator=(const _CharT *__s) 
# 704
{ return (this->assign(__s)); } 
# 714 "/usr/include/c++/8/bits/basic_string.h" 3
basic_string &operator=(_CharT __c) 
# 715
{ 
# 716
(this->assign(1, __c)); 
# 717
return *this; 
# 718
} 
# 732 "/usr/include/c++/8/bits/basic_string.h" 3
basic_string &operator=(basic_string &&__str) noexcept(_Alloc_traits::_S_nothrow_move()) 
# 734
{ 
# 735
if ((!_M_is_local()) && _Alloc_traits::_S_propagate_on_move_assign() && (!_Alloc_traits::_S_always_equal()) && (_M_get_allocator() != __str._M_get_allocator())) 
# 738
{ 
# 740
_M_destroy(_M_allocated_capacity); 
# 741
_M_data(_M_local_data()); 
# 742
_M_set_length(0); 
# 743
}  
# 745
std::__alloc_on_move(_M_get_allocator(), __str._M_get_allocator()); 
# 747
if (__str._M_is_local()) 
# 748
{ 
# 750
if (__str.size()) { 
# 751
(this->_S_copy(_M_data(), (__str._M_data()), __str.size())); }  
# 752
_M_set_length(__str.size()); 
# 753
} else { 
# 754
if ((_Alloc_traits::_S_propagate_on_move_assign() || _Alloc_traits::_S_always_equal()) || (_M_get_allocator() == __str._M_get_allocator())) 
# 757
{ 
# 759
pointer __data = (nullptr); 
# 760
size_type __capacity; 
# 761
if (!_M_is_local()) 
# 762
{ 
# 763
if (_Alloc_traits::_S_always_equal()) 
# 764
{ 
# 766
__data = _M_data(); 
# 767
__capacity = (_M_allocated_capacity); 
# 768
} else { 
# 770
_M_destroy(_M_allocated_capacity); }  
# 771
}  
# 773
_M_data((__str._M_data())); 
# 774
_M_length(__str.length()); 
# 775
_M_capacity(__str._M_allocated_capacity); 
# 776
if (__data) 
# 777
{ 
# 778
(__str._M_data(__data)); 
# 779
__str._M_capacity(__capacity); 
# 780
} else { 
# 782
(__str._M_data(__str._M_local_buf)); }  
# 783
} else { 
# 785
assign(__str); }  }  
# 786
__str.clear(); 
# 787
return *this; 
# 788
} 
# 795
basic_string &operator=(initializer_list< _CharT>  __l) 
# 796
{ 
# 797
(this->assign((__l.begin()), (__l.size()))); 
# 798
return *this; 
# 799
} 
# 826 "/usr/include/c++/8/bits/basic_string.h" 3
iterator begin() noexcept 
# 827
{ return ((__gnu_cxx::__normal_iterator< typename __gnu_cxx::__alloc_traits< typename __gnu_cxx::__alloc_traits< _Alloc> ::template rebind< _CharT> ::other> ::pointer, basic_string> )(_M_data())); } 
# 834
const_iterator begin() const noexcept 
# 835
{ return ((__gnu_cxx::__normal_iterator< typename __gnu_cxx::__alloc_traits< typename __gnu_cxx::__alloc_traits< _Alloc> ::template rebind< _CharT> ::other> ::const_pointer, basic_string> )(_M_data())); } 
# 842
iterator end() noexcept 
# 843
{ return ((__gnu_cxx::__normal_iterator< typename __gnu_cxx::__alloc_traits< typename __gnu_cxx::__alloc_traits< _Alloc> ::template rebind< _CharT> ::other> ::pointer, basic_string> )(_M_data() + size())); } 
# 850
const_iterator end() const noexcept 
# 851
{ return ((__gnu_cxx::__normal_iterator< typename __gnu_cxx::__alloc_traits< typename __gnu_cxx::__alloc_traits< _Alloc> ::template rebind< _CharT> ::other> ::const_pointer, basic_string> )(_M_data() + size())); } 
# 859
reverse_iterator rbegin() noexcept 
# 860
{ return ((std::reverse_iterator< __gnu_cxx::__normal_iterator< typename __gnu_cxx::__alloc_traits< typename __gnu_cxx::__alloc_traits< _Alloc> ::template rebind< _CharT> ::other> ::pointer, basic_string> > )(end())); } 
# 868
const_reverse_iterator rbegin() const noexcept 
# 869
{ return ((std::reverse_iterator< __gnu_cxx::__normal_iterator< typename __gnu_cxx::__alloc_traits< typename __gnu_cxx::__alloc_traits< _Alloc> ::template rebind< _CharT> ::other> ::const_pointer, basic_string> > )(end())); } 
# 877
reverse_iterator rend() noexcept 
# 878
{ return ((std::reverse_iterator< __gnu_cxx::__normal_iterator< typename __gnu_cxx::__alloc_traits< typename __gnu_cxx::__alloc_traits< _Alloc> ::template rebind< _CharT> ::other> ::pointer, basic_string> > )(begin())); } 
# 886
const_reverse_iterator rend() const noexcept 
# 887
{ return ((std::reverse_iterator< __gnu_cxx::__normal_iterator< typename __gnu_cxx::__alloc_traits< typename __gnu_cxx::__alloc_traits< _Alloc> ::template rebind< _CharT> ::other> ::const_pointer, basic_string> > )(begin())); } 
# 895
const_iterator cbegin() const noexcept 
# 896
{ return ((__gnu_cxx::__normal_iterator< typename __gnu_cxx::__alloc_traits< typename __gnu_cxx::__alloc_traits< _Alloc> ::template rebind< _CharT> ::other> ::const_pointer, basic_string> )((this->_M_data()))); } 
# 903
const_iterator cend() const noexcept 
# 904
{ return ((__gnu_cxx::__normal_iterator< typename __gnu_cxx::__alloc_traits< typename __gnu_cxx::__alloc_traits< _Alloc> ::template rebind< _CharT> ::other> ::const_pointer, basic_string> )((this->_M_data()) + size())); } 
# 912
const_reverse_iterator crbegin() const noexcept 
# 913
{ return ((std::reverse_iterator< __gnu_cxx::__normal_iterator< typename __gnu_cxx::__alloc_traits< typename __gnu_cxx::__alloc_traits< _Alloc> ::template rebind< _CharT> ::other> ::const_pointer, basic_string> > )(end())); } 
# 921
const_reverse_iterator crend() const noexcept 
# 922
{ return ((std::reverse_iterator< __gnu_cxx::__normal_iterator< typename __gnu_cxx::__alloc_traits< typename __gnu_cxx::__alloc_traits< _Alloc> ::template rebind< _CharT> ::other> ::const_pointer, basic_string> > )(begin())); } 
# 930
size_type size() const noexcept 
# 931
{ return _M_string_length; } 
# 936
size_type length() const noexcept 
# 937
{ return _M_string_length; } 
# 941
size_type max_size() const noexcept 
# 942
{ return (_Alloc_traits::max_size(_M_get_allocator()) - 1) / 2; } 
# 955 "/usr/include/c++/8/bits/basic_string.h" 3
void resize(size_type __n, _CharT __c); 
# 968 "/usr/include/c++/8/bits/basic_string.h" 3
void resize(size_type __n) 
# 969
{ (this->resize(__n, _CharT())); } 
# 974
void shrink_to_fit() noexcept 
# 975
{ 
# 977
if (capacity() > size()) 
# 978
{ 
# 979
try 
# 980
{ reserve(0); } 
# 981
catch (...) 
# 982
{ }  
# 983
}  
# 985
} 
# 993
size_type capacity() const noexcept 
# 994
{ 
# 995
return (_M_is_local()) ? (size_type)_S_local_capacity : (_M_allocated_capacity); 
# 997
} 
# 1017 "/usr/include/c++/8/bits/basic_string.h" 3
void reserve(size_type __res_arg = 0); 
# 1023
void clear() noexcept 
# 1024
{ _M_set_length(0); } 
# 1031
bool empty() const noexcept 
# 1032
{ return size() == 0; } 
# 1046 "/usr/include/c++/8/bits/basic_string.h" 3
const_reference operator[](size_type __pos) const noexcept 
# 1047
{ 
# 1048
; 
# 1049
return _M_data()[__pos]; 
# 1050
} 
# 1063 "/usr/include/c++/8/bits/basic_string.h" 3
reference operator[](size_type __pos) 
# 1064
{ 
# 1067
; 
# 1069
; 
# 1070
return _M_data()[__pos]; 
# 1071
} 
# 1084 "/usr/include/c++/8/bits/basic_string.h" 3
const_reference at(size_type __n) const 
# 1085
{ 
# 1086
if (__n >= size()) { 
# 1087
__throw_out_of_range_fmt("basic_string::at: __n (which is %zu) >= this->size() (which is %zu)", __n, size()); }  
# 1091
return _M_data()[__n]; 
# 1092
} 
# 1105 "/usr/include/c++/8/bits/basic_string.h" 3
reference at(size_type __n) 
# 1106
{ 
# 1107
if (__n >= size()) { 
# 1108
__throw_out_of_range_fmt("basic_string::at: __n (which is %zu) >= this->size() (which is %zu)", __n, size()); }  
# 1112
return _M_data()[__n]; 
# 1113
} 
# 1121
reference front() noexcept 
# 1122
{ 
# 1123
; 
# 1124
return operator[](0); 
# 1125
} 
# 1132
const_reference front() const noexcept 
# 1133
{ 
# 1134
; 
# 1135
return operator[](0); 
# 1136
} 
# 1143
reference back() noexcept 
# 1144
{ 
# 1145
; 
# 1146
return operator[](size() - 1); 
# 1147
} 
# 1154
const_reference back() const noexcept 
# 1155
{ 
# 1156
; 
# 1157
return operator[](size() - 1); 
# 1158
} 
# 1168 "/usr/include/c++/8/bits/basic_string.h" 3
basic_string &operator+=(const basic_string &__str) 
# 1169
{ return (this->append(__str)); } 
# 1177
basic_string &operator+=(const _CharT *__s) 
# 1178
{ return (this->append(__s)); } 
# 1186
basic_string &operator+=(_CharT __c) 
# 1187
{ 
# 1188
push_back(__c); 
# 1189
return *this; 
# 1190
} 
# 1199
basic_string &operator+=(initializer_list< _CharT>  __l) 
# 1200
{ return (this->append((__l.begin()), (__l.size()))); } 
# 1221 "/usr/include/c++/8/bits/basic_string.h" 3
basic_string &append(const basic_string &__str) 
# 1222
{ return _M_append((__str._M_data()), __str.size()); } 
# 1238 "/usr/include/c++/8/bits/basic_string.h" 3
basic_string &append(const basic_string &__str, size_type __pos, size_type __n = npos) 
# 1239
{ return _M_append((__str._M_data()) + __str._M_check(__pos, "basic_string::append"), __str._M_limit(__pos, __n)); 
# 1241
} 
# 1250
basic_string &append(const _CharT *__s, size_type __n) 
# 1251
{ 
# 1252
; 
# 1253
_M_check_length((size_type)0, __n, "basic_string::append"); 
# 1254
return _M_append(__s, __n); 
# 1255
} 
# 1263
basic_string &append(const _CharT *__s) 
# 1264
{ 
# 1265
; 
# 1266
const size_type __n = traits_type::length(__s); 
# 1267
_M_check_length((size_type)0, __n, "basic_string::append"); 
# 1268
return _M_append(__s, __n); 
# 1269
} 
# 1280 "/usr/include/c++/8/bits/basic_string.h" 3
basic_string &append(size_type __n, _CharT __c) 
# 1281
{ return _M_replace_aux(size(), (size_type)0, __n, __c); } 
# 1290
basic_string &append(initializer_list< _CharT>  __l) 
# 1291
{ return (this->append((__l.begin()), (__l.size()))); } 
# 1303 "/usr/include/c++/8/bits/basic_string.h" 3
template< class _InputIterator, class 
# 1304
 = _RequireInputIter< _InputIterator> > basic_string &
# 1309
append(_InputIterator __first, _InputIterator __last) 
# 1310
{ return (this->replace(end(), end(), __first, __last)); } 
# 1349 "/usr/include/c++/8/bits/basic_string.h" 3
void push_back(_CharT __c) 
# 1350
{ 
# 1351
const size_type __size = size(); 
# 1352
if ((__size + 1) > capacity()) { 
# 1353
_M_mutate(__size, (size_type)0, 0, (size_type)1); }  
# 1354
traits_type::assign((this->_M_data())[__size], __c); 
# 1355
_M_set_length(__size + 1); 
# 1356
} 
# 1364
basic_string &assign(const basic_string &__str) 
# 1365
{ 
# 1366
_M_assign(__str); 
# 1367
return *this; 
# 1368
} 
# 1380 "/usr/include/c++/8/bits/basic_string.h" 3
basic_string &assign(basic_string &&__str) noexcept(_Alloc_traits::_S_nothrow_move()) 
# 1382
{ 
# 1385
return (*this) = std::move(__str); 
# 1386
} 
# 1403 "/usr/include/c++/8/bits/basic_string.h" 3
basic_string &assign(const basic_string &__str, size_type __pos, size_type __n = npos) 
# 1404
{ return _M_replace((size_type)0, size(), (__str._M_data()) + __str._M_check(__pos, "basic_string::assign"), __str._M_limit(__pos, __n)); 
# 1406
} 
# 1419 "/usr/include/c++/8/bits/basic_string.h" 3
basic_string &assign(const _CharT *__s, size_type __n) 
# 1420
{ 
# 1421
; 
# 1422
return _M_replace((size_type)0, size(), __s, __n); 
# 1423
} 
# 1435 "/usr/include/c++/8/bits/basic_string.h" 3
basic_string &assign(const _CharT *__s) 
# 1436
{ 
# 1437
; 
# 1438
return _M_replace((size_type)0, size(), __s, traits_type::length(__s)); 
# 1440
} 
# 1452 "/usr/include/c++/8/bits/basic_string.h" 3
basic_string &assign(size_type __n, _CharT __c) 
# 1453
{ return _M_replace_aux((size_type)0, size(), __n, __c); } 
# 1464 "/usr/include/c++/8/bits/basic_string.h" 3
template< class _InputIterator, class 
# 1465
 = _RequireInputIter< _InputIterator> > basic_string &
# 1470
assign(_InputIterator __first, _InputIterator __last) 
# 1471
{ return (this->replace(begin(), end(), __first, __last)); } 
# 1480
basic_string &assign(initializer_list< _CharT>  __l) 
# 1481
{ return (this->assign((__l.begin()), (__l.size()))); } 
# 1533 "/usr/include/c++/8/bits/basic_string.h" 3
iterator insert(const_iterator __p, size_type __n, _CharT __c) 
# 1534
{ 
# 1535
; 
# 1536
const size_type __pos = __p - begin(); 
# 1537
(this->replace(__p, __p, __n, __c)); 
# 1538
return ((__gnu_cxx::__normal_iterator< typename __gnu_cxx::__alloc_traits< typename __gnu_cxx::__alloc_traits< _Alloc> ::template rebind< _CharT> ::other> ::pointer, basic_string> )((this->_M_data()) + __pos)); 
# 1539
} 
# 1574 "/usr/include/c++/8/bits/basic_string.h" 3
template< class _InputIterator, class 
# 1575
 = _RequireInputIter< _InputIterator> > iterator 
# 1577
insert(const_iterator __p, _InputIterator __beg, _InputIterator __end) 
# 1578
{ 
# 1579
; 
# 1580
const size_type __pos = __p - begin(); 
# 1581
(this->replace(__p, __p, __beg, __end)); 
# 1582
return ((__gnu_cxx::__normal_iterator< typename __gnu_cxx::__alloc_traits< typename __gnu_cxx::__alloc_traits< _Alloc> ::template rebind< _CharT> ::other> ::pointer, basic_string> )((this->_M_data()) + __pos)); 
# 1583
} 
# 1611 "/usr/include/c++/8/bits/basic_string.h" 3
void insert(iterator __p, initializer_list< _CharT>  __l) 
# 1612
{ 
# 1613
; 
# 1614
(this->insert(__p - begin(), (__l.begin()), (__l.size()))); 
# 1615
} 
# 1631 "/usr/include/c++/8/bits/basic_string.h" 3
basic_string &insert(size_type __pos1, const basic_string &__str) 
# 1632
{ return (this->replace(__pos1, (size_type)0, (__str._M_data()), __str.size())); 
# 1633
} 
# 1654 "/usr/include/c++/8/bits/basic_string.h" 3
basic_string &insert(size_type __pos1, const basic_string &__str, size_type 
# 1655
__pos2, size_type __n = npos) 
# 1656
{ return (this->replace(__pos1, (size_type)0, (__str._M_data()) + __str._M_check(__pos2, "basic_string::insert"), __str._M_limit(__pos2, __n))); 
# 1658
} 
# 1677 "/usr/include/c++/8/bits/basic_string.h" 3
basic_string &insert(size_type __pos, const _CharT *__s, size_type __n) 
# 1678
{ return (this->replace(__pos, (size_type)0, __s, __n)); } 
# 1696 "/usr/include/c++/8/bits/basic_string.h" 3
basic_string &insert(size_type __pos, const _CharT *__s) 
# 1697
{ 
# 1698
; 
# 1699
return (this->replace(__pos, (size_type)0, __s, traits_type::length(__s))); 
# 1701
} 
# 1720 "/usr/include/c++/8/bits/basic_string.h" 3
basic_string &insert(size_type __pos, size_type __n, _CharT __c) 
# 1721
{ return _M_replace_aux(_M_check(__pos, "basic_string::insert"), (size_type)0, __n, __c); 
# 1722
} 
# 1738 "/usr/include/c++/8/bits/basic_string.h" 3
iterator insert(__const_iterator __p, _CharT __c) 
# 1739
{ 
# 1740
; 
# 1741
const size_type __pos = __p - begin(); 
# 1742
_M_replace_aux(__pos, (size_type)0, (size_type)1, __c); 
# 1743
return ((__gnu_cxx::__normal_iterator< typename __gnu_cxx::__alloc_traits< typename __gnu_cxx::__alloc_traits< _Alloc> ::template rebind< _CharT> ::other> ::pointer, basic_string> )(_M_data() + __pos)); 
# 1744
} 
# 1798 "/usr/include/c++/8/bits/basic_string.h" 3
basic_string &erase(size_type __pos = 0, size_type __n = npos) 
# 1799
{ 
# 1800
_M_check(__pos, "basic_string::erase"); 
# 1801
if (__n == npos) { 
# 1802
_M_set_length(__pos); } else { 
# 1803
if (__n != 0) { 
# 1804
_M_erase(__pos, _M_limit(__pos, __n)); }  }  
# 1805
return *this; 
# 1806
} 
# 1817 "/usr/include/c++/8/bits/basic_string.h" 3
iterator erase(__const_iterator __position) 
# 1818
{ 
# 1820
; 
# 1821
const size_type __pos = __position - begin(); 
# 1822
_M_erase(__pos, (size_type)1); 
# 1823
return ((__gnu_cxx::__normal_iterator< typename __gnu_cxx::__alloc_traits< typename __gnu_cxx::__alloc_traits< _Alloc> ::template rebind< _CharT> ::other> ::pointer, basic_string> )(_M_data() + __pos)); 
# 1824
} 
# 1836 "/usr/include/c++/8/bits/basic_string.h" 3
iterator erase(__const_iterator __first, __const_iterator __last) 
# 1837
{ 
# 1839
; 
# 1840
const size_type __pos = __first - begin(); 
# 1841
if (__last == end()) { 
# 1842
_M_set_length(__pos); } else { 
# 1844
_M_erase(__pos, __last - __first); }  
# 1845
return ((__gnu_cxx::__normal_iterator< typename __gnu_cxx::__alloc_traits< typename __gnu_cxx::__alloc_traits< _Alloc> ::template rebind< _CharT> ::other> ::pointer, basic_string> )((this->_M_data()) + __pos)); 
# 1846
} 
# 1855
void pop_back() noexcept 
# 1856
{ 
# 1857
; 
# 1858
_M_erase(size() - 1, 1); 
# 1859
} 
# 1880 "/usr/include/c++/8/bits/basic_string.h" 3
basic_string &replace(size_type __pos, size_type __n, const basic_string &__str) 
# 1881
{ return (this->replace(__pos, __n, (__str._M_data()), __str.size())); } 
# 1902 "/usr/include/c++/8/bits/basic_string.h" 3
basic_string &replace(size_type __pos1, size_type __n1, const basic_string &__str, size_type 
# 1903
__pos2, size_type __n2 = npos) 
# 1904
{ return (this->replace(__pos1, __n1, (__str._M_data()) + __str._M_check(__pos2, "basic_string::replace"), __str._M_limit(__pos2, __n2))); 
# 1906
} 
# 1927 "/usr/include/c++/8/bits/basic_string.h" 3
basic_string &replace(size_type __pos, size_type __n1, const _CharT *__s, size_type 
# 1928
__n2) 
# 1929
{ 
# 1930
; 
# 1931
return _M_replace(_M_check(__pos, "basic_string::replace"), _M_limit(__pos, __n1), __s, __n2); 
# 1933
} 
# 1952 "/usr/include/c++/8/bits/basic_string.h" 3
basic_string &replace(size_type __pos, size_type __n1, const _CharT *__s) 
# 1953
{ 
# 1954
; 
# 1955
return (this->replace(__pos, __n1, __s, traits_type::length(__s))); 
# 1956
} 
# 1976 "/usr/include/c++/8/bits/basic_string.h" 3
basic_string &replace(size_type __pos, size_type __n1, size_type __n2, _CharT __c) 
# 1977
{ return _M_replace_aux(_M_check(__pos, "basic_string::replace"), _M_limit(__pos, __n1), __n2, __c); 
# 1978
} 
# 1994 "/usr/include/c++/8/bits/basic_string.h" 3
basic_string &replace(__const_iterator __i1, __const_iterator __i2, const basic_string &
# 1995
__str) 
# 1996
{ return (this->replace(__i1, __i2, (__str._M_data()), __str.size())); } 
# 2014 "/usr/include/c++/8/bits/basic_string.h" 3
basic_string &replace(__const_iterator __i1, __const_iterator __i2, const _CharT *
# 2015
__s, size_type __n) 
# 2016
{ 
# 2018
; 
# 2019
return (this->replace(__i1 - begin(), __i2 - __i1, __s, __n)); 
# 2020
} 
# 2036 "/usr/include/c++/8/bits/basic_string.h" 3
basic_string &replace(__const_iterator __i1, __const_iterator __i2, const _CharT *__s) 
# 2037
{ 
# 2038
; 
# 2039
return (this->replace(__i1, __i2, __s, traits_type::length(__s))); 
# 2040
} 
# 2057 "/usr/include/c++/8/bits/basic_string.h" 3
basic_string &replace(__const_iterator __i1, __const_iterator __i2, size_type __n, _CharT 
# 2058
__c) 
# 2059
{ 
# 2061
; 
# 2062
return _M_replace_aux(__i1 - begin(), __i2 - __i1, __n, __c); 
# 2063
} 
# 2081 "/usr/include/c++/8/bits/basic_string.h" 3
template< class _InputIterator, class 
# 2082
 = _RequireInputIter< _InputIterator> > basic_string &
# 2084
replace(const_iterator __i1, const_iterator __i2, _InputIterator 
# 2085
__k1, _InputIterator __k2) 
# 2086
{ 
# 2088
; 
# 2089
; 
# 2090
return (this->_M_replace_dispatch(__i1, __i2, __k1, __k2, __false_type())); 
# 2092
} 
# 2114 "/usr/include/c++/8/bits/basic_string.h" 3
basic_string &replace(__const_iterator __i1, __const_iterator __i2, _CharT *
# 2115
__k1, _CharT *__k2) 
# 2116
{ 
# 2118
; 
# 2119
; 
# 2120
return (this->replace(__i1 - begin(), __i2 - __i1, __k1, __k2 - __k1)); 
# 2122
} 
# 2125
basic_string &replace(__const_iterator __i1, __const_iterator __i2, const _CharT *
# 2126
__k1, const _CharT *__k2) 
# 2127
{ 
# 2129
; 
# 2130
; 
# 2131
return (this->replace(__i1 - begin(), __i2 - __i1, __k1, __k2 - __k1)); 
# 2133
} 
# 2136
basic_string &replace(__const_iterator __i1, __const_iterator __i2, iterator 
# 2137
__k1, iterator __k2) 
# 2138
{ 
# 2140
; 
# 2141
; 
# 2142
return (this->replace(__i1 - begin(), __i2 - __i1, (__k1.base()), __k2 - __k1)); 
# 2144
} 
# 2147
basic_string &replace(__const_iterator __i1, __const_iterator __i2, const_iterator 
# 2148
__k1, const_iterator __k2) 
# 2149
{ 
# 2151
; 
# 2152
; 
# 2153
return (this->replace(__i1 - begin(), __i2 - __i1, (__k1.base()), __k2 - __k1)); 
# 2155
} 
# 2172 "/usr/include/c++/8/bits/basic_string.h" 3
basic_string &replace(const_iterator __i1, const_iterator __i2, initializer_list< _CharT>  
# 2173
__l) 
# 2174
{ return (this->replace(__i1, __i2, (__l.begin()), (__l.size()))); } 
# 2234 "/usr/include/c++/8/bits/basic_string.h" 3
private: 
# 2232
template< class _Integer> basic_string &
# 2234
_M_replace_dispatch(const_iterator __i1, const_iterator __i2, _Integer 
# 2235
__n, _Integer __val, __true_type) 
# 2236
{ return _M_replace_aux(__i1 - begin(), __i2 - __i1, __n, __val); } 
# 2238
template< class _InputIterator> basic_string &_M_replace_dispatch(const_iterator __i1, const_iterator __i2, _InputIterator __k1, _InputIterator __k2, __false_type); 
# 2245
basic_string &_M_replace_aux(size_type __pos1, size_type __n1, size_type __n2, _CharT __c); 
# 2249
basic_string &_M_replace(size_type __pos, size_type __len1, const _CharT * __s, const size_type __len2); 
# 2253
basic_string &_M_append(const _CharT * __s, size_type __n); 
# 2270 "/usr/include/c++/8/bits/basic_string.h" 3
public: size_type copy(_CharT * __s, size_type __n, size_type __pos = 0) const; 
# 2280 "/usr/include/c++/8/bits/basic_string.h" 3
void swap(basic_string & __s) noexcept; 
# 2290 "/usr/include/c++/8/bits/basic_string.h" 3
const _CharT *c_str() const noexcept 
# 2291
{ return _M_data(); } 
# 2302 "/usr/include/c++/8/bits/basic_string.h" 3
const _CharT *data() const noexcept 
# 2303
{ return _M_data(); } 
# 2321 "/usr/include/c++/8/bits/basic_string.h" 3
allocator_type get_allocator() const noexcept 
# 2322
{ return _M_get_allocator(); } 
# 2337 "/usr/include/c++/8/bits/basic_string.h" 3
size_type find(const _CharT * __s, size_type __pos, size_type __n) const noexcept; 
# 2351 "/usr/include/c++/8/bits/basic_string.h" 3
size_type find(const basic_string &__str, size_type __pos = 0) const noexcept 
# 2353
{ return (this->find(__str.data(), __pos, __str.size())); } 
# 2383 "/usr/include/c++/8/bits/basic_string.h" 3
size_type find(const _CharT *__s, size_type __pos = 0) const noexcept 
# 2384
{ 
# 2385
; 
# 2386
return (this->find(__s, __pos, traits_type::length(__s))); 
# 2387
} 
# 2400 "/usr/include/c++/8/bits/basic_string.h" 3
size_type find(_CharT __c, size_type __pos = 0) const noexcept; 
# 2413 "/usr/include/c++/8/bits/basic_string.h" 3
size_type rfind(const basic_string &__str, size_type __pos = npos) const noexcept 
# 2415
{ return (this->rfind(__str.data(), __pos, __str.size())); } 
# 2447 "/usr/include/c++/8/bits/basic_string.h" 3
size_type rfind(const _CharT * __s, size_type __pos, size_type __n) const noexcept; 
# 2461 "/usr/include/c++/8/bits/basic_string.h" 3
size_type rfind(const _CharT *__s, size_type __pos = npos) const 
# 2462
{ 
# 2463
; 
# 2464
return (this->rfind(__s, __pos, traits_type::length(__s))); 
# 2465
} 
# 2478 "/usr/include/c++/8/bits/basic_string.h" 3
size_type rfind(_CharT __c, size_type __pos = npos) const noexcept; 
# 2492 "/usr/include/c++/8/bits/basic_string.h" 3
size_type find_first_of(const basic_string &__str, size_type __pos = 0) const noexcept 
# 2494
{ return (this->find_first_of(__str.data(), __pos, __str.size())); } 
# 2527 "/usr/include/c++/8/bits/basic_string.h" 3
size_type find_first_of(const _CharT * __s, size_type __pos, size_type __n) const noexcept; 
# 2541 "/usr/include/c++/8/bits/basic_string.h" 3
size_type find_first_of(const _CharT *__s, size_type __pos = 0) const noexcept 
# 2543
{ 
# 2544
; 
# 2545
return (this->find_first_of(__s, __pos, traits_type::length(__s))); 
# 2546
} 
# 2561 "/usr/include/c++/8/bits/basic_string.h" 3
size_type find_first_of(_CharT __c, size_type __pos = 0) const noexcept 
# 2562
{ return (this->find(__c, __pos)); } 
# 2576 "/usr/include/c++/8/bits/basic_string.h" 3
size_type find_last_of(const basic_string &__str, size_type __pos = npos) const noexcept 
# 2578
{ return (this->find_last_of(__str.data(), __pos, __str.size())); } 
# 2611 "/usr/include/c++/8/bits/basic_string.h" 3
size_type find_last_of(const _CharT * __s, size_type __pos, size_type __n) const noexcept; 
# 2625 "/usr/include/c++/8/bits/basic_string.h" 3
size_type find_last_of(const _CharT *__s, size_type __pos = npos) const noexcept 
# 2627
{ 
# 2628
; 
# 2629
return (this->find_last_of(__s, __pos, traits_type::length(__s))); 
# 2630
} 
# 2645 "/usr/include/c++/8/bits/basic_string.h" 3
size_type find_last_of(_CharT __c, size_type __pos = npos) const noexcept 
# 2646
{ return (this->rfind(__c, __pos)); } 
# 2659 "/usr/include/c++/8/bits/basic_string.h" 3
size_type find_first_not_of(const basic_string &__str, size_type __pos = 0) const noexcept 
# 2661
{ return (this->find_first_not_of(__str.data(), __pos, __str.size())); } 
# 2694 "/usr/include/c++/8/bits/basic_string.h" 3
size_type find_first_not_of(const _CharT * __s, size_type __pos, size_type __n) const noexcept; 
# 2708 "/usr/include/c++/8/bits/basic_string.h" 3
size_type find_first_not_of(const _CharT *__s, size_type __pos = 0) const noexcept 
# 2710
{ 
# 2711
; 
# 2712
return (this->find_first_not_of(__s, __pos, traits_type::length(__s))); 
# 2713
} 
# 2726 "/usr/include/c++/8/bits/basic_string.h" 3
size_type find_first_not_of(_CharT __c, size_type __pos = 0) const noexcept; 
# 2741 "/usr/include/c++/8/bits/basic_string.h" 3
size_type find_last_not_of(const basic_string &__str, size_type __pos = npos) const noexcept 
# 2743
{ return (this->find_last_not_of(__str.data(), __pos, __str.size())); } 
# 2776 "/usr/include/c++/8/bits/basic_string.h" 3
size_type find_last_not_of(const _CharT * __s, size_type __pos, size_type __n) const noexcept; 
# 2790 "/usr/include/c++/8/bits/basic_string.h" 3
size_type find_last_not_of(const _CharT *__s, size_type __pos = npos) const noexcept 
# 2792
{ 
# 2793
; 
# 2794
return (this->find_last_not_of(__s, __pos, traits_type::length(__s))); 
# 2795
} 
# 2808 "/usr/include/c++/8/bits/basic_string.h" 3
size_type find_last_not_of(_CharT __c, size_type __pos = npos) const noexcept; 
# 2824 "/usr/include/c++/8/bits/basic_string.h" 3
basic_string substr(size_type __pos = 0, size_type __n = npos) const 
# 2825
{ return basic_string(*this, _M_check(__pos, "basic_string::substr"), __n); 
# 2826
} 
# 2843 "/usr/include/c++/8/bits/basic_string.h" 3
int compare(const basic_string &__str) const 
# 2844
{ 
# 2845
const size_type __size = size(); 
# 2846
const size_type __osize = __str.size(); 
# 2847
const size_type __len = std::min(__size, __osize); 
# 2849
int __r = traits_type::compare(_M_data(), __str.data(), __len); 
# 2850
if (!__r) { 
# 2851
__r = (_S_compare)(__size, __osize); }  
# 2852
return __r; 
# 2853
} 
# 2936 "/usr/include/c++/8/bits/basic_string.h" 3
int compare(size_type __pos, size_type __n, const basic_string & __str) const; 
# 2962 "/usr/include/c++/8/bits/basic_string.h" 3
int compare(size_type __pos1, size_type __n1, const basic_string & __str, size_type __pos2, size_type __n2 = npos) const; 
# 2980 "/usr/include/c++/8/bits/basic_string.h" 3
int compare(const _CharT * __s) const noexcept; 
# 3004 "/usr/include/c++/8/bits/basic_string.h" 3
int compare(size_type __pos, size_type __n1, const _CharT * __s) const; 
# 3031 "/usr/include/c++/8/bits/basic_string.h" 3
int compare(size_type __pos, size_type __n1, const _CharT * __s, size_type __n2) const; 
# 3035
template< class , class , class > friend class basic_stringbuf; 
# 3036
}; 
# 3037
}
# 5925 "/usr/include/c++/8/bits/basic_string.h" 3
template< class _CharT, class _Traits, class _Alloc> __cxx11::basic_string< _CharT, _Traits, _Alloc>  
# 5927
operator+(const __cxx11::basic_string< _CharT, _Traits, _Alloc>  &__lhs, const __cxx11::basic_string< _CharT, _Traits, _Alloc>  &
# 5928
__rhs) 
# 5929
{ 
# 5930
__cxx11::basic_string< _CharT, _Traits, _Alloc>  __str(__lhs); 
# 5931
(__str.append(__rhs)); 
# 5932
return __str; 
# 5933
} 
# 5941
template< class _CharT, class _Traits, class _Alloc> __cxx11::basic_string< _CharT, _Traits, _Alloc>  operator+(const _CharT * __lhs, const __cxx11::basic_string< _CharT, _Traits, _Alloc>  & __rhs); 
# 5952
template< class _CharT, class _Traits, class _Alloc> __cxx11::basic_string< _CharT, _Traits, _Alloc>  operator+(_CharT __lhs, const __cxx11::basic_string< _CharT, _Traits, _Alloc>  & __rhs); 
# 5962
template< class _CharT, class _Traits, class _Alloc> inline __cxx11::basic_string< _CharT, _Traits, _Alloc>  
# 5964
operator+(const __cxx11::basic_string< _CharT, _Traits, _Alloc>  &__lhs, const _CharT *
# 5965
__rhs) 
# 5966
{ 
# 5967
__cxx11::basic_string< _CharT, _Traits, _Alloc>  __str(__lhs); 
# 5968
(__str.append(__rhs)); 
# 5969
return __str; 
# 5970
} 
# 5978
template< class _CharT, class _Traits, class _Alloc> inline __cxx11::basic_string< _CharT, _Traits, _Alloc>  
# 5980
operator+(const __cxx11::basic_string< _CharT, _Traits, _Alloc>  &__lhs, _CharT __rhs) 
# 5981
{ 
# 5982
typedef __cxx11::basic_string< _CharT, _Traits, _Alloc>  __string_type; 
# 5983
typedef typename __cxx11::basic_string< _CharT, _Traits, _Alloc> ::size_type __size_type; 
# 5984
__string_type __str(__lhs); 
# 5985
(__str.append((__size_type)1, __rhs)); 
# 5986
return __str; 
# 5987
} 
# 5990
template< class _CharT, class _Traits, class _Alloc> inline __cxx11::basic_string< _CharT, _Traits, _Alloc>  
# 5992
operator+(__cxx11::basic_string< _CharT, _Traits, _Alloc>  &&__lhs, const __cxx11::basic_string< _CharT, _Traits, _Alloc>  &
# 5993
__rhs) 
# 5994
{ return std::move((__lhs.append(__rhs))); } 
# 5996
template< class _CharT, class _Traits, class _Alloc> inline __cxx11::basic_string< _CharT, _Traits, _Alloc>  
# 5998
operator+(const __cxx11::basic_string< _CharT, _Traits, _Alloc>  &__lhs, __cxx11::basic_string< _CharT, _Traits, _Alloc>  &&
# 5999
__rhs) 
# 6000
{ return std::move((__rhs.insert(0, __lhs))); } 
# 6002
template< class _CharT, class _Traits, class _Alloc> inline __cxx11::basic_string< _CharT, _Traits, _Alloc>  
# 6004
operator+(__cxx11::basic_string< _CharT, _Traits, _Alloc>  &&__lhs, __cxx11::basic_string< _CharT, _Traits, _Alloc>  &&
# 6005
__rhs) 
# 6006
{ 
# 6007
const auto __size = (__lhs.size()) + (__rhs.size()); 
# 6008
const bool __cond = (__size > (__lhs.capacity())) && (__size <= (__rhs.capacity())); 
# 6010
return __cond ? std::move((__rhs.insert(0, __lhs))) : std::move((__lhs.append(__rhs))); 
# 6012
} 
# 6014
template< class _CharT, class _Traits, class _Alloc> inline __cxx11::basic_string< _CharT, _Traits, _Alloc>  
# 6016
operator+(const _CharT *__lhs, __cxx11::basic_string< _CharT, _Traits, _Alloc>  &&
# 6017
__rhs) 
# 6018
{ return std::move((__rhs.insert(0, __lhs))); } 
# 6020
template< class _CharT, class _Traits, class _Alloc> inline __cxx11::basic_string< _CharT, _Traits, _Alloc>  
# 6022
operator+(_CharT __lhs, __cxx11::basic_string< _CharT, _Traits, _Alloc>  &&
# 6023
__rhs) 
# 6024
{ return std::move((__rhs.insert(0, 1, __lhs))); } 
# 6026
template< class _CharT, class _Traits, class _Alloc> inline __cxx11::basic_string< _CharT, _Traits, _Alloc>  
# 6028
operator+(__cxx11::basic_string< _CharT, _Traits, _Alloc>  &&__lhs, const _CharT *
# 6029
__rhs) 
# 6030
{ return std::move((__lhs.append(__rhs))); } 
# 6032
template< class _CharT, class _Traits, class _Alloc> inline __cxx11::basic_string< _CharT, _Traits, _Alloc>  
# 6034
operator+(__cxx11::basic_string< _CharT, _Traits, _Alloc>  &&__lhs, _CharT 
# 6035
__rhs) 
# 6036
{ return std::move((__lhs.append(1, __rhs))); } 
# 6046 "/usr/include/c++/8/bits/basic_string.h" 3
template< class _CharT, class _Traits, class _Alloc> inline bool 
# 6048
operator==(const __cxx11::basic_string< _CharT, _Traits, _Alloc>  &__lhs, const __cxx11::basic_string< _CharT, _Traits, _Alloc>  &
# 6049
__rhs) noexcept 
# 6051
{ return (__lhs.compare(__rhs)) == 0; } 
# 6053
template< class _CharT> inline typename __gnu_cxx::__enable_if< __is_char< _CharT> ::__value, bool> ::__type 
# 6056
operator==(const __cxx11::basic_string< _CharT, char_traits< _CharT> , allocator< _CharT> >  &__lhs, const __cxx11::basic_string< _CharT, char_traits< _CharT> , allocator< _CharT> >  &
# 6057
__rhs) noexcept 
# 6058
{ return ((__lhs.size()) == (__rhs.size())) && (!std::char_traits< _CharT> ::compare((__lhs.data()), (__rhs.data()), (__lhs.size()))); 
# 6060
} 
# 6068
template< class _CharT, class _Traits, class _Alloc> inline bool 
# 6070
operator==(const _CharT *__lhs, const __cxx11::basic_string< _CharT, _Traits, _Alloc>  &
# 6071
__rhs) 
# 6072
{ return (__rhs.compare(__lhs)) == 0; } 
# 6080
template< class _CharT, class _Traits, class _Alloc> inline bool 
# 6082
operator==(const __cxx11::basic_string< _CharT, _Traits, _Alloc>  &__lhs, const _CharT *
# 6083
__rhs) 
# 6084
{ return (__lhs.compare(__rhs)) == 0; } 
# 6093 "/usr/include/c++/8/bits/basic_string.h" 3
template< class _CharT, class _Traits, class _Alloc> inline bool 
# 6095
operator!=(const __cxx11::basic_string< _CharT, _Traits, _Alloc>  &__lhs, const __cxx11::basic_string< _CharT, _Traits, _Alloc>  &
# 6096
__rhs) noexcept 
# 6098
{ return !(__lhs == __rhs); } 
# 6106
template< class _CharT, class _Traits, class _Alloc> inline bool 
# 6108
operator!=(const _CharT *__lhs, const __cxx11::basic_string< _CharT, _Traits, _Alloc>  &
# 6109
__rhs) 
# 6110
{ return !(__lhs == __rhs); } 
# 6118
template< class _CharT, class _Traits, class _Alloc> inline bool 
# 6120
operator!=(const __cxx11::basic_string< _CharT, _Traits, _Alloc>  &__lhs, const _CharT *
# 6121
__rhs) 
# 6122
{ return !(__lhs == __rhs); } 
# 6131 "/usr/include/c++/8/bits/basic_string.h" 3
template< class _CharT, class _Traits, class _Alloc> inline bool 
# 6133
operator<(const __cxx11::basic_string< _CharT, _Traits, _Alloc>  &__lhs, const __cxx11::basic_string< _CharT, _Traits, _Alloc>  &
# 6134
__rhs) noexcept 
# 6136
{ return (__lhs.compare(__rhs)) < 0; } 
# 6144
template< class _CharT, class _Traits, class _Alloc> inline bool 
# 6146
operator<(const __cxx11::basic_string< _CharT, _Traits, _Alloc>  &__lhs, const _CharT *
# 6147
__rhs) 
# 6148
{ return (__lhs.compare(__rhs)) < 0; } 
# 6156
template< class _CharT, class _Traits, class _Alloc> inline bool 
# 6158
operator<(const _CharT *__lhs, const __cxx11::basic_string< _CharT, _Traits, _Alloc>  &
# 6159
__rhs) 
# 6160
{ return (__rhs.compare(__lhs)) > 0; } 
# 6169 "/usr/include/c++/8/bits/basic_string.h" 3
template< class _CharT, class _Traits, class _Alloc> inline bool 
# 6171
operator>(const __cxx11::basic_string< _CharT, _Traits, _Alloc>  &__lhs, const __cxx11::basic_string< _CharT, _Traits, _Alloc>  &
# 6172
__rhs) noexcept 
# 6174
{ return (__lhs.compare(__rhs)) > 0; } 
# 6182
template< class _CharT, class _Traits, class _Alloc> inline bool 
# 6184
operator>(const __cxx11::basic_string< _CharT, _Traits, _Alloc>  &__lhs, const _CharT *
# 6185
__rhs) 
# 6186
{ return (__lhs.compare(__rhs)) > 0; } 
# 6194
template< class _CharT, class _Traits, class _Alloc> inline bool 
# 6196
operator>(const _CharT *__lhs, const __cxx11::basic_string< _CharT, _Traits, _Alloc>  &
# 6197
__rhs) 
# 6198
{ return (__rhs.compare(__lhs)) < 0; } 
# 6207 "/usr/include/c++/8/bits/basic_string.h" 3
template< class _CharT, class _Traits, class _Alloc> inline bool 
# 6209
operator<=(const __cxx11::basic_string< _CharT, _Traits, _Alloc>  &__lhs, const __cxx11::basic_string< _CharT, _Traits, _Alloc>  &
# 6210
__rhs) noexcept 
# 6212
{ return (__lhs.compare(__rhs)) <= 0; } 
# 6220
template< class _CharT, class _Traits, class _Alloc> inline bool 
# 6222
operator<=(const __cxx11::basic_string< _CharT, _Traits, _Alloc>  &__lhs, const _CharT *
# 6223
__rhs) 
# 6224
{ return (__lhs.compare(__rhs)) <= 0; } 
# 6232
template< class _CharT, class _Traits, class _Alloc> inline bool 
# 6234
operator<=(const _CharT *__lhs, const __cxx11::basic_string< _CharT, _Traits, _Alloc>  &
# 6235
__rhs) 
# 6236
{ return (__rhs.compare(__lhs)) >= 0; } 
# 6245 "/usr/include/c++/8/bits/basic_string.h" 3
template< class _CharT, class _Traits, class _Alloc> inline bool 
# 6247
operator>=(const __cxx11::basic_string< _CharT, _Traits, _Alloc>  &__lhs, const __cxx11::basic_string< _CharT, _Traits, _Alloc>  &
# 6248
__rhs) noexcept 
# 6250
{ return (__lhs.compare(__rhs)) >= 0; } 
# 6258
template< class _CharT, class _Traits, class _Alloc> inline bool 
# 6260
operator>=(const __cxx11::basic_string< _CharT, _Traits, _Alloc>  &__lhs, const _CharT *
# 6261
__rhs) 
# 6262
{ return (__lhs.compare(__rhs)) >= 0; } 
# 6270
template< class _CharT, class _Traits, class _Alloc> inline bool 
# 6272
operator>=(const _CharT *__lhs, const __cxx11::basic_string< _CharT, _Traits, _Alloc>  &
# 6273
__rhs) 
# 6274
{ return (__rhs.compare(__lhs)) <= 0; } 
# 6283 "/usr/include/c++/8/bits/basic_string.h" 3
template< class _CharT, class _Traits, class _Alloc> inline void 
# 6285
swap(__cxx11::basic_string< _CharT, _Traits, _Alloc>  &__lhs, __cxx11::basic_string< _CharT, _Traits, _Alloc>  &
# 6286
__rhs) noexcept(noexcept((__lhs.swap(__rhs)))) 
# 6288
{ (__lhs.swap(__rhs)); } 
# 6303 "/usr/include/c++/8/bits/basic_string.h" 3
template< class _CharT, class _Traits, class _Alloc> basic_istream< _CharT, _Traits>  &operator>>(basic_istream< _CharT, _Traits>  & __is, __cxx11::basic_string< _CharT, _Traits, _Alloc>  & __str); 
# 6310
template<> basic_istream< char>  &operator>>(basic_istream< char>  & __is, __cxx11::basic_string< char, char_traits< char> , allocator< char> >  & __str); 
# 6321 "/usr/include/c++/8/bits/basic_string.h" 3
template< class _CharT, class _Traits, class _Alloc> inline basic_ostream< _CharT, _Traits>  &
# 6323
operator<<(basic_ostream< _CharT, _Traits>  &__os, const __cxx11::basic_string< _CharT, _Traits, _Alloc>  &
# 6324
__str) 
# 6325
{ 
# 6328
return __ostream_insert(__os, (__str.data()), (__str.size())); 
# 6329
} 
# 6344 "/usr/include/c++/8/bits/basic_string.h" 3
template< class _CharT, class _Traits, class _Alloc> basic_istream< _CharT, _Traits>  &getline(basic_istream< _CharT, _Traits>  & __is, __cxx11::basic_string< _CharT, _Traits, _Alloc>  & __str, _CharT __delim); 
# 6361 "/usr/include/c++/8/bits/basic_string.h" 3
template< class _CharT, class _Traits, class _Alloc> inline basic_istream< _CharT, _Traits>  &
# 6363
getline(basic_istream< _CharT, _Traits>  &__is, __cxx11::basic_string< _CharT, _Traits, _Alloc>  &
# 6364
__str) 
# 6365
{ return std::getline(__is, __str, (__is.widen('\n'))); } 
# 6369
template< class _CharT, class _Traits, class _Alloc> inline basic_istream< _CharT, _Traits>  &
# 6371
getline(basic_istream< _CharT, _Traits>  &&__is, __cxx11::basic_string< _CharT, _Traits, _Alloc>  &
# 6372
__str, _CharT __delim) 
# 6373
{ return std::getline(__is, __str, __delim); } 
# 6376
template< class _CharT, class _Traits, class _Alloc> inline basic_istream< _CharT, _Traits>  &
# 6378
getline(basic_istream< _CharT, _Traits>  &&__is, __cxx11::basic_string< _CharT, _Traits, _Alloc>  &
# 6379
__str) 
# 6380
{ return std::getline(__is, __str); } 
# 6385
template<> basic_istream< char>  &getline(basic_istream< char>  & __in, __cxx11::basic_string< char, char_traits< char> , allocator< char> >  & __str, char __delim); 
# 6391
template<> basic_istream< wchar_t>  &getline(basic_istream< wchar_t>  & __in, __cxx11::basic_string< wchar_t, char_traits< wchar_t> , allocator< wchar_t> >  & __str, wchar_t __delim); 
# 6396
}
# 96 "/usr/include/c++/8/cstdio" 3
namespace std { 
# 98
using ::FILE;
# 99
using ::fpos_t;
# 101
using ::clearerr;
# 102
using ::fclose;
# 103
using ::feof;
# 104
using ::ferror;
# 105
using ::fflush;
# 106
using ::fgetc;
# 107
using ::fgetpos;
# 108
using ::fgets;
# 109
using ::fopen;
# 110
using ::fprintf;
# 111
using ::fputc;
# 112
using ::fputs;
# 113
using ::fread;
# 114
using ::freopen;
# 115
using ::fscanf;
# 116
using ::fseek;
# 117
using ::fsetpos;
# 118
using ::ftell;
# 119
using ::fwrite;
# 120
using ::getc;
# 121
using ::getchar;
# 126
using ::perror;
# 127
using ::printf;
# 128
using ::putc;
# 129
using ::putchar;
# 130
using ::puts;
# 131
using ::remove;
# 132
using ::rename;
# 133
using ::rewind;
# 134
using ::scanf;
# 135
using ::setbuf;
# 136
using ::setvbuf;
# 137
using ::sprintf;
# 138
using ::sscanf;
# 139
using ::tmpfile;
# 141
using ::tmpnam;
# 143
using ::ungetc;
# 144
using ::vfprintf;
# 145
using ::vprintf;
# 146
using ::vsprintf;
# 147
}
# 157 "/usr/include/c++/8/cstdio" 3
namespace __gnu_cxx { 
# 175 "/usr/include/c++/8/cstdio" 3
using ::snprintf;
# 176
using ::vfscanf;
# 177
using ::vscanf;
# 178
using ::vsnprintf;
# 179
using ::vsscanf;
# 181
}
# 183
namespace std { 
# 185
using __gnu_cxx::snprintf;
# 186
using __gnu_cxx::vfscanf;
# 187
using __gnu_cxx::vscanf;
# 188
using __gnu_cxx::vsnprintf;
# 189
using __gnu_cxx::vsscanf;
# 190
}
# 34 "/usr/include/errno.h" 3
extern "C" {
# 37
extern int *__errno_location() throw() __attribute((const)); 
# 45
extern char *program_invocation_name; 
# 46
extern char *program_invocation_short_name; 
# 22 "/usr/include/x86_64-linux-gnu/bits/types/error_t.h" 3
typedef int error_t; 
# 52 "/usr/include/errno.h" 3
}
# 46 "/usr/include/c++/8/ext/string_conversions.h" 3
namespace __gnu_cxx __attribute((__visibility__("default"))) { 
# 51
template< class _TRet, class _Ret = _TRet, class _CharT, class ...
# 52
_Base> _Ret 
# 54
__stoa(_TRet (*__convf)(const _CharT *, _CharT **, _Base ...), const char *
# 55
__name, const _CharT *__str, std::size_t *__idx, _Base ...
# 56
__base) 
# 57
{ 
# 58
_Ret __ret; 
# 60
_CharT *__endptr; 
# 66
const 
# 62
struct _Save_errno { 
# 63
_Save_errno() : _M_errno(*__errno_location()) { (*__errno_location()) = 0; } 
# 64
~_Save_errno() { if ((*__errno_location()) == 0) { (*__errno_location()) = (_M_errno); }  } 
# 65
int _M_errno; 
# 66
} __save_errno; 
# 68
struct _Range_chk { 
# 70
static bool _S_chk(_TRet, std::false_type) { return false; } 
# 73
static bool _S_chk(_TRet __val, std::true_type) 
# 74
{ 
# 75
return (__val < ((_TRet)__numeric_traits< int> ::__min)) || (__val > ((_TRet)__numeric_traits< int> ::__max)); 
# 77
} 
# 78
}; 
# 80
const _TRet __tmp = __convf(__str, &__endptr, __base...); 
# 82
if (__endptr == __str) { 
# 83
std::__throw_invalid_argument(__name); } else { 
# 84
if (((*__errno_location()) == 34) || _Range_chk::_S_chk(__tmp, std::is_same< _Ret, int> {})) { 
# 86
std::__throw_out_of_range(__name); } else { 
# 88
__ret = __tmp; }  }  
# 90
if (__idx) { 
# 91
(*__idx) = (__endptr - __str); }  
# 93
return __ret; 
# 94
} 
# 97
template< class _String, class _CharT = typename _String::value_type> _String 
# 99
__to_xstring(int (*__convf)(_CharT *, std::size_t, const _CharT *, __builtin_va_list), std::size_t 
# 100
__n, const _CharT *
# 101
__fmt, ...) 
# 102
{ 
# 105
_CharT *__s = static_cast< _CharT *>(__builtin_alloca(sizeof(_CharT) * __n)); 
# 108
__builtin_va_list __args; 
# 109
__builtin_va_start((__args),__fmt); 
# 111
const int __len = __convf(__s, __n, __fmt, __args); 
# 113
__builtin_va_end(__args); 
# 115
return _String(__s, __s + __len); 
# 116
} 
# 119
}
# 6402 "/usr/include/c++/8/bits/basic_string.h" 3
namespace std __attribute((__visibility__("default"))) { 
# 6405
inline namespace __cxx11 { 
# 6410
inline int stoi(const string &__str, size_t *__idx = 0, int __base = 10) 
# 6411
{ return __gnu_cxx::__stoa< long, int> (&std::strtol, "stoi", __str.c_str(), __idx, __base); 
# 6412
} 
# 6415
inline long stol(const string &__str, size_t *__idx = 0, int __base = 10) 
# 6416
{ return __gnu_cxx::__stoa(&std::strtol, "stol", __str.c_str(), __idx, __base); 
# 6417
} 
# 6420
inline unsigned long stoul(const string &__str, size_t *__idx = 0, int __base = 10) 
# 6421
{ return __gnu_cxx::__stoa(&std::strtoul, "stoul", __str.c_str(), __idx, __base); 
# 6422
} 
# 6425
inline long long stoll(const string &__str, size_t *__idx = 0, int __base = 10) 
# 6426
{ return __gnu_cxx::__stoa(&std::strtoll, "stoll", __str.c_str(), __idx, __base); 
# 6427
} 
# 6430
inline unsigned long long stoull(const string &__str, size_t *__idx = 0, int __base = 10) 
# 6431
{ return __gnu_cxx::__stoa(&std::strtoull, "stoull", __str.c_str(), __idx, __base); 
# 6432
} 
# 6436
inline float stof(const string &__str, size_t *__idx = 0) 
# 6437
{ return __gnu_cxx::__stoa(&std::strtof, "stof", __str.c_str(), __idx); } 
# 6440
inline double stod(const string &__str, size_t *__idx = 0) 
# 6441
{ return __gnu_cxx::__stoa(&std::strtod, "stod", __str.c_str(), __idx); } 
# 6444
inline long double stold(const string &__str, size_t *__idx = 0) 
# 6445
{ return __gnu_cxx::__stoa(&std::strtold, "stold", __str.c_str(), __idx); } 
# 6453
inline string to_string(int __val) 
# 6454
{ return __gnu_cxx::__to_xstring< basic_string< char, char_traits< char> , allocator< char> > > (&std::vsnprintf, (4) * sizeof(int), "%d", __val); 
# 6455
} 
# 6458
inline string to_string(unsigned __val) 
# 6459
{ return __gnu_cxx::__to_xstring< basic_string< char, char_traits< char> , allocator< char> > > (&std::vsnprintf, (4) * sizeof(unsigned), "%u", __val); 
# 6461
} 
# 6464
inline string to_string(long __val) 
# 6465
{ return __gnu_cxx::__to_xstring< basic_string< char, char_traits< char> , allocator< char> > > (&std::vsnprintf, (4) * sizeof(long), "%ld", __val); 
# 6466
} 
# 6469
inline string to_string(unsigned long __val) 
# 6470
{ return __gnu_cxx::__to_xstring< basic_string< char, char_traits< char> , allocator< char> > > (&std::vsnprintf, (4) * sizeof(unsigned long), "%lu", __val); 
# 6472
} 
# 6475
inline string to_string(long long __val) 
# 6476
{ return __gnu_cxx::__to_xstring< basic_string< char, char_traits< char> , allocator< char> > > (&std::vsnprintf, (4) * sizeof(long long), "%lld", __val); 
# 6478
} 
# 6481
inline string to_string(unsigned long long __val) 
# 6482
{ return __gnu_cxx::__to_xstring< basic_string< char, char_traits< char> , allocator< char> > > (&std::vsnprintf, (4) * sizeof(unsigned long long), "%llu", __val); 
# 6484
} 
# 6487
inline string to_string(float __val) 
# 6488
{ 
# 6489
const int __n = (__gnu_cxx::__numeric_traits_floating< float> ::__max_exponent10 + 20); 
# 6491
return __gnu_cxx::__to_xstring< basic_string< char, char_traits< char> , allocator< char> > > (&std::vsnprintf, __n, "%f", __val); 
# 6493
} 
# 6496
inline string to_string(double __val) 
# 6497
{ 
# 6498
const int __n = (__gnu_cxx::__numeric_traits_floating< double> ::__max_exponent10 + 20); 
# 6500
return __gnu_cxx::__to_xstring< basic_string< char, char_traits< char> , allocator< char> > > (&std::vsnprintf, __n, "%f", __val); 
# 6502
} 
# 6505
inline string to_string(long double __val) 
# 6506
{ 
# 6507
const int __n = (__gnu_cxx::__numeric_traits_floating< long double> ::__max_exponent10 + 20); 
# 6509
return __gnu_cxx::__to_xstring< basic_string< char, char_traits< char> , allocator< char> > > (&std::vsnprintf, __n, "%Lf", __val); 
# 6511
} 
# 6516
inline int stoi(const wstring &__str, size_t *__idx = 0, int __base = 10) 
# 6517
{ return __gnu_cxx::__stoa< long, int> (&std::wcstol, "stoi", __str.c_str(), __idx, __base); 
# 6518
} 
# 6521
inline long stol(const wstring &__str, size_t *__idx = 0, int __base = 10) 
# 6522
{ return __gnu_cxx::__stoa(&std::wcstol, "stol", __str.c_str(), __idx, __base); 
# 6523
} 
# 6526
inline unsigned long stoul(const wstring &__str, size_t *__idx = 0, int __base = 10) 
# 6527
{ return __gnu_cxx::__stoa(&std::wcstoul, "stoul", __str.c_str(), __idx, __base); 
# 6528
} 
# 6531
inline long long stoll(const wstring &__str, size_t *__idx = 0, int __base = 10) 
# 6532
{ return __gnu_cxx::__stoa(&std::wcstoll, "stoll", __str.c_str(), __idx, __base); 
# 6533
} 
# 6536
inline unsigned long long stoull(const wstring &__str, size_t *__idx = 0, int __base = 10) 
# 6537
{ return __gnu_cxx::__stoa(&std::wcstoull, "stoull", __str.c_str(), __idx, __base); 
# 6538
} 
# 6542
inline float stof(const wstring &__str, size_t *__idx = 0) 
# 6543
{ return __gnu_cxx::__stoa(&std::wcstof, "stof", __str.c_str(), __idx); } 
# 6546
inline double stod(const wstring &__str, size_t *__idx = 0) 
# 6547
{ return __gnu_cxx::__stoa(&std::wcstod, "stod", __str.c_str(), __idx); } 
# 6550
inline long double stold(const wstring &__str, size_t *__idx = 0) 
# 6551
{ return __gnu_cxx::__stoa(&std::wcstold, "stold", __str.c_str(), __idx); } 
# 6556
inline wstring to_wstring(int __val) 
# 6557
{ return __gnu_cxx::__to_xstring< basic_string< wchar_t, char_traits< wchar_t> , allocator< wchar_t> > > (&std::vswprintf, (4) * sizeof(int), L"\x25\x64", __val); 
# 6558
} 
# 6561
inline wstring to_wstring(unsigned __val) 
# 6562
{ return __gnu_cxx::__to_xstring< basic_string< wchar_t, char_traits< wchar_t> , allocator< wchar_t> > > (&std::vswprintf, (4) * sizeof(unsigned), L"\x25\x75", __val); 
# 6564
} 
# 6567
inline wstring to_wstring(long __val) 
# 6568
{ return __gnu_cxx::__to_xstring< basic_string< wchar_t, char_traits< wchar_t> , allocator< wchar_t> > > (&std::vswprintf, (4) * sizeof(long), L"\x25\x6c\x64", __val); 
# 6569
} 
# 6572
inline wstring to_wstring(unsigned long __val) 
# 6573
{ return __gnu_cxx::__to_xstring< basic_string< wchar_t, char_traits< wchar_t> , allocator< wchar_t> > > (&std::vswprintf, (4) * sizeof(unsigned long), L"\x25\x6c\x75", __val); 
# 6575
} 
# 6578
inline wstring to_wstring(long long __val) 
# 6579
{ return __gnu_cxx::__to_xstring< basic_string< wchar_t, char_traits< wchar_t> , allocator< wchar_t> > > (&std::vswprintf, (4) * sizeof(long long), L"\x25\x6c\x6c\x64", __val); 
# 6581
} 
# 6584
inline wstring to_wstring(unsigned long long __val) 
# 6585
{ return __gnu_cxx::__to_xstring< basic_string< wchar_t, char_traits< wchar_t> , allocator< wchar_t> > > (&std::vswprintf, (4) * sizeof(unsigned long long), L"\x25\x6c\x6c\x75", __val); 
# 6587
} 
# 6590
inline wstring to_wstring(float __val) 
# 6591
{ 
# 6592
const int __n = (__gnu_cxx::__numeric_traits_floating< float> ::__max_exponent10 + 20); 
# 6594
return __gnu_cxx::__to_xstring< basic_string< wchar_t, char_traits< wchar_t> , allocator< wchar_t> > > (&std::vswprintf, __n, L"\x25\x66", __val); 
# 6596
} 
# 6599
inline wstring to_wstring(double __val) 
# 6600
{ 
# 6601
const int __n = (__gnu_cxx::__numeric_traits_floating< double> ::__max_exponent10 + 20); 
# 6603
return __gnu_cxx::__to_xstring< basic_string< wchar_t, char_traits< wchar_t> , allocator< wchar_t> > > (&std::vswprintf, __n, L"\x25\x66", __val); 
# 6605
} 
# 6608
inline wstring to_wstring(long double __val) 
# 6609
{ 
# 6610
const int __n = (__gnu_cxx::__numeric_traits_floating< long double> ::__max_exponent10 + 20); 
# 6612
return __gnu_cxx::__to_xstring< basic_string< wchar_t, char_traits< wchar_t> , allocator< wchar_t> > > (&std::vswprintf, __n, L"\x25\x4c\x66", __val); 
# 6614
} 
# 6618
}
# 6620
}
# 37 "/usr/include/c++/8/bits/functional_hash.h" 3
namespace std __attribute((__visibility__("default"))) { 
# 49 "/usr/include/c++/8/bits/functional_hash.h" 3
template< class _Result, class _Arg> 
# 50
struct __hash_base { 
# 52
typedef _Result result_type; 
# 53
typedef _Arg argument_type; 
# 54
}; 
# 57
template< class _Tp> struct hash; 
# 60
template< class _Tp, class  = void> 
# 61
struct __poison_hash { 
# 63
static constexpr bool __enable_hash_call = false; 
# 66
private: __poison_hash(__poison_hash &&); 
# 67
~__poison_hash(); 
# 68
}; 
# 70
template< class _Tp> 
# 71
struct __poison_hash< _Tp, __void_t< __decltype((hash< _Tp> ()(declval< _Tp> ())))> >  { 
# 73
static constexpr bool __enable_hash_call = true; 
# 74
}; 
# 77
template< class _Tp, bool  = is_enum< _Tp> ::value> 
# 78
struct __hash_enum { 
# 82
private: __hash_enum(__hash_enum &&); 
# 83
~__hash_enum(); 
# 84
}; 
# 87
template< class _Tp> 
# 88
struct __hash_enum< _Tp, true>  : public __hash_base< unsigned long, _Tp>  { 
# 91
std::size_t operator()(_Tp __val) const noexcept 
# 92
{ 
# 93
using __type = typename underlying_type< _Tp> ::type; 
# 94
return hash< typename underlying_type< _Tp> ::type> {}(static_cast< __type>(__val)); 
# 95
} 
# 96
}; 
# 100
template< class _Tp> 
# 101
struct hash : public __hash_enum< _Tp>  { 
# 102
}; 
# 105
template< class _Tp> 
# 106
struct hash< _Tp *>  : public __hash_base< unsigned long, _Tp *>  { 
# 109
std::size_t operator()(_Tp *__p) const noexcept 
# 110
{ return reinterpret_cast< std::size_t>(__p); } 
# 111
}; 
# 124 "/usr/include/c++/8/bits/functional_hash.h" 3
template<> struct hash< bool>  : public __hash_base< unsigned long, bool>  { size_t operator()(bool __val) const noexcept { return static_cast< size_t>(__val); } }; 
# 127
template<> struct hash< char>  : public __hash_base< unsigned long, char>  { size_t operator()(char __val) const noexcept { return static_cast< size_t>(__val); } }; 
# 130
template<> struct hash< signed char>  : public __hash_base< unsigned long, signed char>  { size_t operator()(signed char __val) const noexcept { return static_cast< size_t>(__val); } }; 
# 133
template<> struct hash< unsigned char>  : public __hash_base< unsigned long, unsigned char>  { size_t operator()(unsigned char __val) const noexcept { return static_cast< size_t>(__val); } }; 
# 136
template<> struct hash< wchar_t>  : public __hash_base< unsigned long, wchar_t>  { size_t operator()(wchar_t __val) const noexcept { return static_cast< size_t>(__val); } }; 
# 139
template<> struct hash< char16_t>  : public __hash_base< unsigned long, char16_t>  { size_t operator()(char16_t __val) const noexcept { return static_cast< size_t>(__val); } }; 
# 142
template<> struct hash< char32_t>  : public __hash_base< unsigned long, char32_t>  { size_t operator()(char32_t __val) const noexcept { return static_cast< size_t>(__val); } }; 
# 145
template<> struct hash< short>  : public __hash_base< unsigned long, short>  { size_t operator()(short __val) const noexcept { return static_cast< size_t>(__val); } }; 
# 148
template<> struct hash< int>  : public __hash_base< unsigned long, int>  { size_t operator()(int __val) const noexcept { return static_cast< size_t>(__val); } }; 
# 151
template<> struct hash< long>  : public __hash_base< unsigned long, long>  { size_t operator()(long __val) const noexcept { return static_cast< size_t>(__val); } }; 
# 154
template<> struct hash< long long>  : public __hash_base< unsigned long, long long>  { size_t operator()(long long __val) const noexcept { return static_cast< size_t>(__val); } }; 
# 157
template<> struct hash< unsigned short>  : public __hash_base< unsigned long, unsigned short>  { size_t operator()(unsigned short __val) const noexcept { return static_cast< size_t>(__val); } }; 
# 160
template<> struct hash< unsigned>  : public __hash_base< unsigned long, unsigned>  { size_t operator()(unsigned __val) const noexcept { return static_cast< size_t>(__val); } }; 
# 163
template<> struct hash< unsigned long>  : public __hash_base< unsigned long, unsigned long>  { size_t operator()(unsigned long __val) const noexcept { return static_cast< size_t>(__val); } }; 
# 166
template<> struct hash< unsigned long long>  : public __hash_base< unsigned long, unsigned long long>  { size_t operator()(unsigned long long __val) const noexcept { return static_cast< size_t>(__val); } }; 
# 169
template<> struct hash< __int128_t>  : public __hash_base< unsigned long, __int128_t>  { size_t operator()(__int128_t __val) const noexcept { return static_cast< size_t>(__val); } }; 
# 170
template<> struct hash< __uint128_t>  : public __hash_base< unsigned long, __uint128_t>  { size_t operator()(__uint128_t __val) const noexcept { return static_cast< size_t>(__val); } }; 
# 187 "/usr/include/c++/8/bits/functional_hash.h" 3
struct _Hash_impl { 
# 190
static size_t hash(const void *__ptr, size_t __clength, size_t 
# 191
__seed = static_cast< size_t>(3339675911UL)) 
# 192
{ return _Hash_bytes(__ptr, __clength, __seed); } 
# 194
template< class _Tp> static size_t 
# 196
hash(const _Tp &__val) 
# 197
{ return hash(&__val, sizeof(__val)); } 
# 199
template< class _Tp> static size_t 
# 201
__hash_combine(const _Tp &__val, size_t __hash) 
# 202
{ return hash(&__val, sizeof(__val), __hash); } 
# 203
}; 
# 206
struct _Fnv_hash_impl { 
# 209
static size_t hash(const void *__ptr, size_t __clength, size_t 
# 210
__seed = static_cast< size_t>(2166136261UL)) 
# 211
{ return _Fnv_hash_bytes(__ptr, __clength, __seed); } 
# 213
template< class _Tp> static size_t 
# 215
hash(const _Tp &__val) 
# 216
{ return hash(&__val, sizeof(__val)); } 
# 218
template< class _Tp> static size_t 
# 220
__hash_combine(const _Tp &__val, size_t __hash) 
# 221
{ return hash(&__val, sizeof(__val), __hash); } 
# 222
}; 
# 226
template<> struct hash< float>  : public __hash_base< unsigned long, float>  { 
# 229
size_t operator()(float __val) const noexcept 
# 230
{ 
# 232
return (__val != (0.0F)) ? std::_Hash_impl::hash(__val) : (0); 
# 233
} 
# 234
}; 
# 238
template<> struct hash< double>  : public __hash_base< unsigned long, double>  { 
# 241
size_t operator()(double __val) const noexcept 
# 242
{ 
# 244
return (__val != (0.0)) ? std::_Hash_impl::hash(__val) : (0); 
# 245
} 
# 246
}; 
# 250
template<> struct hash< long double>  : public __hash_base< unsigned long, long double>  { 
# 253
__attribute((__pure__)) size_t 
# 254
operator()(long double __val) const noexcept; 
# 255
}; 
# 263
template< class _Hash> 
# 264
struct __is_fast_hash : public true_type { 
# 265
}; 
# 268
template<> struct __is_fast_hash< hash< long double> >  : public false_type { 
# 269
}; 
# 272
}
# 6628 "/usr/include/c++/8/bits/basic_string.h" 3
namespace std __attribute((__visibility__("default"))) { 
# 6637
template<> struct hash< __cxx11::basic_string< char, char_traits< char> , allocator< char> > >  : public __hash_base< unsigned long, __cxx11::basic_string< char, char_traits< char> , allocator< char> > >  { 
# 6641
size_t operator()(const __cxx11::string &__s) const noexcept 
# 6642
{ return std::_Hash_impl::hash(__s.data(), __s.length()); } 
# 6643
}; 
# 6646
template<> struct __is_fast_hash< hash< __cxx11::basic_string< char, char_traits< char> , allocator< char> > > >  : public false_type { 
# 6647
}; 
# 6652
template<> struct hash< __cxx11::basic_string< wchar_t, char_traits< wchar_t> , allocator< wchar_t> > >  : public __hash_base< unsigned long, __cxx11::basic_string< wchar_t, char_traits< wchar_t> , allocator< wchar_t> > >  { 
# 6656
size_t operator()(const __cxx11::wstring &__s) const noexcept 
# 6657
{ return std::_Hash_impl::hash(__s.data(), __s.length() * sizeof(wchar_t)); 
# 6658
} 
# 6659
}; 
# 6662
template<> struct __is_fast_hash< hash< __cxx11::basic_string< wchar_t, char_traits< wchar_t> , allocator< wchar_t> > > >  : public false_type { 
# 6663
}; 
# 6670
template<> struct hash< __cxx11::basic_string< char16_t, char_traits< char16_t> , allocator< char16_t> > >  : public __hash_base< unsigned long, __cxx11::basic_string< char16_t, char_traits< char16_t> , allocator< char16_t> > >  { 
# 6674
size_t operator()(const __cxx11::u16string &__s) const noexcept 
# 6675
{ return std::_Hash_impl::hash(__s.data(), __s.length() * sizeof(char16_t)); 
# 6676
} 
# 6677
}; 
# 6680
template<> struct __is_fast_hash< hash< __cxx11::basic_string< char16_t, char_traits< char16_t> , allocator< char16_t> > > >  : public false_type { 
# 6681
}; 
# 6685
template<> struct hash< __cxx11::basic_string< char32_t, char_traits< char32_t> , allocator< char32_t> > >  : public __hash_base< unsigned long, __cxx11::basic_string< char32_t, char_traits< char32_t> , allocator< char32_t> > >  { 
# 6689
size_t operator()(const __cxx11::u32string &__s) const noexcept 
# 6690
{ return std::_Hash_impl::hash(__s.data(), __s.length() * sizeof(char32_t)); 
# 6691
} 
# 6692
}; 
# 6695
template<> struct __is_fast_hash< hash< __cxx11::basic_string< char32_t, char_traits< char32_t> , allocator< char32_t> > > >  : public false_type { 
# 6696
}; 
# 6703
inline namespace literals { 
# 6705
inline namespace string_literals { 
# 6707
#pragma GCC diagnostic push
#pragma GCC diagnostic ignored "-Wliteral-suffix"
__attribute((__abi_tag__("cxx11"))) inline __cxx11::basic_string< char, char_traits< char> , allocator< char> >  
# 6711
operator ""s(const char *__str, size_t __len) 
# 6712
{ return __cxx11::basic_string< char, char_traits< char> , allocator< char> > {__str, __len}; } 
# 6715
__attribute((__abi_tag__("cxx11"))) inline __cxx11::basic_string< wchar_t, char_traits< wchar_t> , allocator< wchar_t> >  
# 6717
operator ""s(const wchar_t *__str, size_t __len) 
# 6718
{ return __cxx11::basic_string< wchar_t, char_traits< wchar_t> , allocator< wchar_t> > {__str, __len}; } 
# 6722
__attribute((__abi_tag__("cxx11"))) inline __cxx11::basic_string< char16_t, char_traits< char16_t> , allocator< char16_t> >  
# 6724
operator ""s(const char16_t *__str, size_t __len) 
# 6725
{ return __cxx11::basic_string< char16_t, char_traits< char16_t> , allocator< char16_t> > {__str, __len}; } 
# 6727
__attribute((__abi_tag__("cxx11"))) inline __cxx11::basic_string< char32_t, char_traits< char32_t> , allocator< char32_t> >  
# 6729
operator ""s(const char32_t *__str, size_t __len) 
# 6730
{ return __cxx11::basic_string< char32_t, char_traits< char32_t> , allocator< char32_t> > {__str, __len}; } 
# 6733
#pragma GCC diagnostic pop
}
# 6735
}
# 6740
}
# 46 "/usr/include/c++/8/bits/basic_string.tcc" 3
namespace std __attribute((__visibility__("default"))) { 
# 52
template< class _CharT, class _Traits, class _Alloc> const typename __cxx11::basic_string< _CharT, _Traits, _Alloc> ::size_type __cxx11::basic_string< _CharT, _Traits, _Alloc> ::npos; 
# 56
template< class _CharT, class _Traits, class _Alloc> void 
# 59
__cxx11::basic_string< _CharT, _Traits, _Alloc> ::swap(basic_string &__s) noexcept 
# 60
{ 
# 61
if (this == (&__s)) { 
# 62
return; }  
# 64
_Alloc_traits::_S_on_swap(_M_get_allocator(), __s._M_get_allocator()); 
# 66
if (_M_is_local()) { 
# 67
if (__s._M_is_local()) 
# 68
{ 
# 69
if (length() && __s.length()) 
# 70
{ 
# 71
_CharT __tmp_data[_S_local_capacity + 1]; 
# 72
traits_type::copy(__tmp_data, __s._M_local_buf, _S_local_capacity + 1); 
# 74
traits_type::copy(__s._M_local_buf, _M_local_buf, _S_local_capacity + 1); 
# 76
traits_type::copy(_M_local_buf, __tmp_data, _S_local_capacity + 1); 
# 78
} else { 
# 79
if (__s.length()) 
# 80
{ 
# 81
traits_type::copy(_M_local_buf, __s._M_local_buf, _S_local_capacity + 1); 
# 83
_M_length(__s.length()); 
# 84
__s._M_set_length(0); 
# 85
return; 
# 86
} else { 
# 87
if (length()) 
# 88
{ 
# 89
traits_type::copy(__s._M_local_buf, _M_local_buf, _S_local_capacity + 1); 
# 91
__s._M_length(length()); 
# 92
_M_set_length(0); 
# 93
return; 
# 94
}  }  }  
# 95
} else 
# 97
{ 
# 98
const size_type __tmp_capacity = __s._M_allocated_capacity; 
# 99
traits_type::copy(__s._M_local_buf, _M_local_buf, _S_local_capacity + 1); 
# 101
_M_data((__s._M_data())); 
# 102
(__s._M_data(__s._M_local_buf)); 
# 103
_M_capacity(__tmp_capacity); 
# 104
}  } else 
# 106
{ 
# 107
const size_type __tmp_capacity = _M_allocated_capacity; 
# 108
if (__s._M_is_local()) 
# 109
{ 
# 110
traits_type::copy(_M_local_buf, __s._M_local_buf, _S_local_capacity + 1); 
# 112
(__s._M_data(_M_data())); 
# 113
_M_data(_M_local_buf); 
# 114
} else 
# 116
{ 
# 117
pointer __tmp_ptr = _M_data(); 
# 118
_M_data((__s._M_data())); 
# 119
(__s._M_data(__tmp_ptr)); 
# 120
_M_capacity(__s._M_allocated_capacity); 
# 121
}  
# 122
__s._M_capacity(__tmp_capacity); 
# 123
}  
# 125
const size_type __tmp_length = length(); 
# 126
_M_length(__s.length()); 
# 127
__s._M_length(__tmp_length); 
# 128
} 
# 130
template< class _CharT, class _Traits, class _Alloc> typename __cxx11::basic_string< _CharT, _Traits, _Alloc> ::pointer 
# 133
__cxx11::basic_string< _CharT, _Traits, _Alloc> ::_M_create(size_type &__capacity, size_type __old_capacity) 
# 134
{ 
# 137
if (__capacity > max_size()) { 
# 138
std::__throw_length_error("basic_string::_M_create"); }  
# 143
if ((__capacity > __old_capacity) && (__capacity < (2 * __old_capacity))) 
# 144
{ 
# 145
__capacity = (2 * __old_capacity); 
# 147
if (__capacity > max_size()) { 
# 148
__capacity = max_size(); }  
# 149
}  
# 153
return _Alloc_traits::allocate(_M_get_allocator(), __capacity + 1); 
# 154
} 
# 160
template< class _CharT, class _Traits, class _Alloc> 
# 161
template< class _InIterator> void 
# 164
__cxx11::basic_string< _CharT, _Traits, _Alloc> ::_M_construct(_InIterator __beg, _InIterator __end, input_iterator_tag) 
# 166
{ 
# 167
size_type __len = (0); 
# 168
size_type __capacity = ((size_type)_S_local_capacity); 
# 170
while ((__beg != __end) && (__len < __capacity)) 
# 171
{ 
# 172
(_M_data()[__len++]) = (*__beg); 
# 173
++__beg; 
# 174
}  
# 176
try 
# 177
{ 
# 178
while (__beg != __end) 
# 179
{ 
# 180
if (__len == __capacity) 
# 181
{ 
# 183
__capacity = (__len + 1); 
# 184
pointer __another = _M_create(__capacity, __len); 
# 185
(this->_S_copy(__another, _M_data(), __len)); 
# 186
_M_dispose(); 
# 187
_M_data(__another); 
# 188
_M_capacity(__capacity); 
# 189
}  
# 190
(_M_data()[__len++]) = (*__beg); 
# 191
++__beg; 
# 192
}  
# 193
} 
# 194
catch (...) 
# 195
{ 
# 196
_M_dispose(); 
# 197
throw; 
# 198
}  
# 200
_M_set_length(__len); 
# 201
} 
# 203
template< class _CharT, class _Traits, class _Alloc> 
# 204
template< class _InIterator> void 
# 207
__cxx11::basic_string< _CharT, _Traits, _Alloc> ::_M_construct(_InIterator __beg, _InIterator __end, forward_iterator_tag) 
# 209
{ 
# 211
if (__gnu_cxx::__is_null_pointer(__beg) && (__beg != __end)) { 
# 212
std::__throw_logic_error("basic_string::_M_construct null not valid"); }  
# 215
size_type __dnew = static_cast< size_type>(std::distance(__beg, __end)); 
# 217
if (__dnew > ((size_type)_S_local_capacity)) 
# 218
{ 
# 219
_M_data(_M_create(__dnew, (size_type)0)); 
# 220
_M_capacity(__dnew); 
# 221
}  
# 224
try 
# 225
{ (this->_S_copy_chars(_M_data(), __beg, __end)); } 
# 226
catch (...) 
# 227
{ 
# 228
_M_dispose(); 
# 229
throw; 
# 230
}  
# 232
_M_set_length(__dnew); 
# 233
} 
# 235
template< class _CharT, class _Traits, class _Alloc> void 
# 238
__cxx11::basic_string< _CharT, _Traits, _Alloc> ::_M_construct(size_type __n, _CharT __c) 
# 239
{ 
# 240
if (__n > ((size_type)_S_local_capacity)) 
# 241
{ 
# 242
_M_data(_M_create(__n, (size_type)0)); 
# 243
_M_capacity(__n); 
# 244
}  
# 246
if (__n) { 
# 247
(this->_S_assign(_M_data(), __n, __c)); }  
# 249
_M_set_length(__n); 
# 250
} 
# 252
template< class _CharT, class _Traits, class _Alloc> void 
# 255
__cxx11::basic_string< _CharT, _Traits, _Alloc> ::_M_assign(const basic_string &__str) 
# 256
{ 
# 257
if (this != (&__str)) 
# 258
{ 
# 259
const size_type __rsize = __str.length(); 
# 260
const size_type __capacity = capacity(); 
# 262
if (__rsize > __capacity) 
# 263
{ 
# 264
size_type __new_capacity = __rsize; 
# 265
pointer __tmp = _M_create(__new_capacity, __capacity); 
# 266
_M_dispose(); 
# 267
_M_data(__tmp); 
# 268
_M_capacity(__new_capacity); 
# 269
}  
# 271
if (__rsize) { 
# 272
(this->_S_copy(_M_data(), (__str._M_data()), __rsize)); }  
# 274
_M_set_length(__rsize); 
# 275
}  
# 276
} 
# 278
template< class _CharT, class _Traits, class _Alloc> void 
# 281
__cxx11::basic_string< _CharT, _Traits, _Alloc> ::reserve(size_type __res) 
# 282
{ 
# 284
if (__res < length()) { 
# 285
__res = length(); }  
# 287
const size_type __capacity = capacity(); 
# 288
if (__res != __capacity) 
# 289
{ 
# 290
if ((__res > __capacity) || (__res > ((size_type)_S_local_capacity))) 
# 292
{ 
# 293
pointer __tmp = _M_create(__res, __capacity); 
# 294
(this->_S_copy(__tmp, _M_data(), length() + 1)); 
# 295
_M_dispose(); 
# 296
_M_data(__tmp); 
# 297
_M_capacity(__res); 
# 298
} else { 
# 299
if (!_M_is_local()) 
# 300
{ 
# 301
(this->_S_copy(_M_local_data(), _M_data(), length() + 1)); 
# 302
_M_destroy(__capacity); 
# 303
_M_data(_M_local_data()); 
# 304
}  }  
# 305
}  
# 306
} 
# 308
template< class _CharT, class _Traits, class _Alloc> void 
# 311
__cxx11::basic_string< _CharT, _Traits, _Alloc> ::_M_mutate(size_type __pos, size_type __len1, const _CharT *__s, size_type 
# 312
__len2) 
# 313
{ 
# 314
const size_type __how_much = (length() - __pos) - __len1; 
# 316
size_type __new_capacity = (length() + __len2) - __len1; 
# 317
pointer __r = _M_create(__new_capacity, capacity()); 
# 319
if (__pos) { 
# 320
(this->_S_copy(__r, _M_data(), __pos)); }  
# 321
if (__s && __len2) { 
# 322
(this->_S_copy(__r + __pos, __s, __len2)); }  
# 323
if (__how_much) { 
# 324
(this->_S_copy((__r + __pos) + __len2, (_M_data() + __pos) + __len1, __how_much)); }  
# 327
_M_dispose(); 
# 328
_M_data(__r); 
# 329
_M_capacity(__new_capacity); 
# 330
} 
# 332
template< class _CharT, class _Traits, class _Alloc> void 
# 335
__cxx11::basic_string< _CharT, _Traits, _Alloc> ::_M_erase(size_type __pos, size_type __n) 
# 336
{ 
# 337
const size_type __how_much = (length() - __pos) - __n; 
# 339
if (__how_much && __n) { 
# 340
(this->_S_move(_M_data() + __pos, (_M_data() + __pos) + __n, __how_much)); }  
# 342
_M_set_length(length() - __n); 
# 343
} 
# 345
template< class _CharT, class _Traits, class _Alloc> void 
# 348
__cxx11::basic_string< _CharT, _Traits, _Alloc> ::resize(size_type __n, _CharT __c) 
# 349
{ 
# 350
const size_type __size = size(); 
# 351
if (__size < __n) { 
# 352
(this->append(__n - __size, __c)); } else { 
# 353
if (__n < __size) { 
# 354
_M_set_length(__n); }  }  
# 355
} 
# 357
template< class _CharT, class _Traits, class _Alloc> __cxx11::basic_string< _CharT, _Traits, _Alloc>  &
# 360
__cxx11::basic_string< _CharT, _Traits, _Alloc> ::_M_append(const _CharT *__s, size_type __n) 
# 361
{ 
# 362
const size_type __len = __n + size(); 
# 364
if (__len <= capacity()) 
# 365
{ 
# 366
if (__n) { 
# 367
(this->_S_copy((this->_M_data()) + size(), __s, __n)); }  
# 368
} else { 
# 370
_M_mutate(size(), (size_type)0, __s, __n); }  
# 372
_M_set_length(__len); 
# 373
return *this; 
# 374
} 
# 376
template< class _CharT, class _Traits, class _Alloc> 
# 377
template< class _InputIterator> __cxx11::basic_string< _CharT, _Traits, _Alloc>  &
# 380
__cxx11::basic_string< _CharT, _Traits, _Alloc> ::_M_replace_dispatch(const_iterator __i1, const_iterator __i2, _InputIterator 
# 381
__k1, _InputIterator __k2, __false_type) 
# 383
{ 
# 384
const basic_string __s(__k1, __k2); 
# 385
const size_type __n1 = __i2 - __i1; 
# 386
return _M_replace(__i1 - begin(), __n1, (__s._M_data()), __s.size()); 
# 388
} 
# 390
template< class _CharT, class _Traits, class _Alloc> __cxx11::basic_string< _CharT, _Traits, _Alloc>  &
# 393
__cxx11::basic_string< _CharT, _Traits, _Alloc> ::_M_replace_aux(size_type __pos1, size_type __n1, size_type __n2, _CharT 
# 394
__c) 
# 395
{ 
# 396
_M_check_length(__n1, __n2, "basic_string::_M_replace_aux"); 
# 398
const size_type __old_size = size(); 
# 399
const size_type __new_size = (__old_size + __n2) - __n1; 
# 401
if (__new_size <= capacity()) 
# 402
{ 
# 403
pointer __p = (this->_M_data()) + __pos1; 
# 405
const size_type __how_much = (__old_size - __pos1) - __n1; 
# 406
if (__how_much && (__n1 != __n2)) { 
# 407
(this->_S_move(__p + __n2, __p + __n1, __how_much)); }  
# 408
} else { 
# 410
_M_mutate(__pos1, __n1, 0, __n2); }  
# 412
if (__n2) { 
# 413
(this->_S_assign((this->_M_data()) + __pos1, __n2, __c)); }  
# 415
_M_set_length(__new_size); 
# 416
return *this; 
# 417
} 
# 419
template< class _CharT, class _Traits, class _Alloc> __cxx11::basic_string< _CharT, _Traits, _Alloc>  &
# 422
__cxx11::basic_string< _CharT, _Traits, _Alloc> ::_M_replace(size_type __pos, size_type __len1, const _CharT *__s, const size_type 
# 423
__len2) 
# 424
{ 
# 425
_M_check_length(__len1, __len2, "basic_string::_M_replace"); 
# 427
const size_type __old_size = size(); 
# 428
const size_type __new_size = (__old_size + __len2) - __len1; 
# 430
if (__new_size <= capacity()) 
# 431
{ 
# 432
pointer __p = (this->_M_data()) + __pos; 
# 434
const size_type __how_much = (__old_size - __pos) - __len1; 
# 435
if (_M_disjunct(__s)) 
# 436
{ 
# 437
if (__how_much && (__len1 != __len2)) { 
# 438
(this->_S_move(__p + __len2, __p + __len1, __how_much)); }  
# 439
if (__len2) { 
# 440
(this->_S_copy(__p, __s, __len2)); }  
# 441
} else 
# 443
{ 
# 445
if (__len2 && (__len2 <= __len1)) { 
# 446
(this->_S_move(__p, __s, __len2)); }  
# 447
if (__how_much && (__len1 != __len2)) { 
# 448
(this->_S_move(__p + __len2, __p + __len1, __how_much)); }  
# 449
if (__len2 > __len1) 
# 450
{ 
# 451
if ((__s + __len2) <= (__p + __len1)) { 
# 452
(this->_S_move(__p, __s, __len2)); } else { 
# 453
if (__s >= (__p + __len1)) { 
# 454
(this->_S_copy(__p, (__s + __len2) - __len1, __len2)); } else 
# 456
{ 
# 457
const size_type __nleft = (__p + __len1) - __s; 
# 458
(this->_S_move(__p, __s, __nleft)); 
# 459
(this->_S_copy(__p + __nleft, __p + __len2, __len2 - __nleft)); 
# 461
}  }  
# 462
}  
# 463
}  
# 464
} else { 
# 466
_M_mutate(__pos, __len1, __s, __len2); }  
# 468
_M_set_length(__new_size); 
# 469
return *this; 
# 470
} 
# 472
template< class _CharT, class _Traits, class _Alloc> typename __cxx11::basic_string< _CharT, _Traits, _Alloc> ::size_type 
# 475
__cxx11::basic_string< _CharT, _Traits, _Alloc> ::copy(_CharT *__s, size_type __n, size_type __pos) const 
# 476
{ 
# 477
_M_check(__pos, "basic_string::copy"); 
# 478
__n = _M_limit(__pos, __n); 
# 479
; 
# 480
if (__n) { 
# 481
(_S_copy)(__s, _M_data() + __pos, __n); }  
# 483
return __n; 
# 484
} 
# 1155 "/usr/include/c++/8/bits/basic_string.tcc" 3
template< class _CharT, class _Traits, class _Alloc> __cxx11::basic_string< _CharT, _Traits, _Alloc>  
# 1157
operator+(const _CharT *__lhs, const __cxx11::basic_string< _CharT, _Traits, _Alloc>  &
# 1158
__rhs) 
# 1159
{ 
# 1160
; 
# 1161
typedef __cxx11::basic_string< _CharT, _Traits, _Alloc>  __string_type; 
# 1162
typedef typename __cxx11::basic_string< _CharT, _Traits, _Alloc> ::size_type __size_type; 
# 1163
const __size_type __len = _Traits::length(__lhs); 
# 1164
__string_type __str; 
# 1165
(__str.reserve(__len + (__rhs.size()))); 
# 1166
(__str.append(__lhs, __len)); 
# 1167
(__str.append(__rhs)); 
# 1168
return __str; 
# 1169
} 
# 1171
template< class _CharT, class _Traits, class _Alloc> __cxx11::basic_string< _CharT, _Traits, _Alloc>  
# 1173
operator+(_CharT __lhs, const __cxx11::basic_string< _CharT, _Traits, _Alloc>  &__rhs) 
# 1174
{ 
# 1175
typedef __cxx11::basic_string< _CharT, _Traits, _Alloc>  __string_type; 
# 1176
typedef typename __cxx11::basic_string< _CharT, _Traits, _Alloc> ::size_type __size_type; 
# 1177
__string_type __str; 
# 1178
const __size_type __len = (__rhs.size()); 
# 1179
(__str.reserve(__len + 1)); 
# 1180
(__str.append((__size_type)1, __lhs)); 
# 1181
(__str.append(__rhs)); 
# 1182
return __str; 
# 1183
} 
# 1185
template< class _CharT, class _Traits, class _Alloc> typename __cxx11::basic_string< _CharT, _Traits, _Alloc> ::size_type 
# 1188
__cxx11::basic_string< _CharT, _Traits, _Alloc> ::find(const _CharT *__s, size_type __pos, size_type __n) const noexcept 
# 1190
{ 
# 1191
; 
# 1192
const size_type __size = size(); 
# 1194
if (__n == 0) { 
# 1195
return (__pos <= __size) ? __pos : npos; }  
# 1196
if (__pos >= __size) { 
# 1197
return npos; }  
# 1199
const _CharT __elem0 = __s[0]; 
# 1200
const _CharT *const __data = data(); 
# 1201
const _CharT *__first = __data + __pos; 
# 1202
const _CharT *const __last = __data + __size; 
# 1203
size_type __len = __size - __pos; 
# 1205
while (__len >= __n) 
# 1206
{ 
# 1208
__first = traits_type::find(__first, (__len - __n) + 1, __elem0); 
# 1209
if (!__first) { 
# 1210
return npos; }  
# 1214
if (traits_type::compare(__first, __s, __n) == 0) { 
# 1215
return __first - __data; }  
# 1216
__len = (__last - (++__first)); 
# 1217
}  
# 1218
return npos; 
# 1219
} 
# 1221
template< class _CharT, class _Traits, class _Alloc> typename __cxx11::basic_string< _CharT, _Traits, _Alloc> ::size_type 
# 1224
__cxx11::basic_string< _CharT, _Traits, _Alloc> ::find(_CharT __c, size_type __pos) const noexcept 
# 1225
{ 
# 1226
size_type __ret = npos; 
# 1227
const size_type __size = size(); 
# 1228
if (__pos < __size) 
# 1229
{ 
# 1230
const _CharT *__data = _M_data(); 
# 1231
const size_type __n = __size - __pos; 
# 1232
const _CharT *__p = traits_type::find(__data + __pos, __n, __c); 
# 1233
if (__p) { 
# 1234
__ret = (__p - __data); }  
# 1235
}  
# 1236
return __ret; 
# 1237
} 
# 1239
template< class _CharT, class _Traits, class _Alloc> typename __cxx11::basic_string< _CharT, _Traits, _Alloc> ::size_type 
# 1242
__cxx11::basic_string< _CharT, _Traits, _Alloc> ::rfind(const _CharT *__s, size_type __pos, size_type __n) const noexcept 
# 1244
{ 
# 1245
; 
# 1246
const size_type __size = size(); 
# 1247
if (__n <= __size) 
# 1248
{ 
# 1249
__pos = std::min((size_type)(__size - __n), __pos); 
# 1250
const _CharT *__data = _M_data(); 
# 1251
do 
# 1252
{ 
# 1253
if (traits_type::compare(__data + __pos, __s, __n) == 0) { 
# 1254
return __pos; }  
# 1255
} 
# 1256
while ((__pos--) > 0); 
# 1257
}  
# 1258
return npos; 
# 1259
} 
# 1261
template< class _CharT, class _Traits, class _Alloc> typename __cxx11::basic_string< _CharT, _Traits, _Alloc> ::size_type 
# 1264
__cxx11::basic_string< _CharT, _Traits, _Alloc> ::rfind(_CharT __c, size_type __pos) const noexcept 
# 1265
{ 
# 1266
size_type __size = size(); 
# 1267
if (__size) 
# 1268
{ 
# 1269
if ((--__size) > __pos) { 
# 1270
__size = __pos; }  
# 1271
for (++__size; (__size--) > 0;) { 
# 1272
if (traits_type::eq(_M_data()[__size], __c)) { 
# 1273
return __size; }  }  
# 1274
}  
# 1275
return npos; 
# 1276
} 
# 1278
template< class _CharT, class _Traits, class _Alloc> typename __cxx11::basic_string< _CharT, _Traits, _Alloc> ::size_type 
# 1281
__cxx11::basic_string< _CharT, _Traits, _Alloc> ::find_first_of(const _CharT *__s, size_type __pos, size_type __n) const noexcept 
# 1283
{ 
# 1284
; 
# 1285
for (; __n && (__pos < size()); ++__pos) 
# 1286
{ 
# 1287
const _CharT *__p = traits_type::find(__s, __n, _M_data()[__pos]); 
# 1288
if (__p) { 
# 1289
return __pos; }  
# 1290
}  
# 1291
return npos; 
# 1292
} 
# 1294
template< class _CharT, class _Traits, class _Alloc> typename __cxx11::basic_string< _CharT, _Traits, _Alloc> ::size_type 
# 1297
__cxx11::basic_string< _CharT, _Traits, _Alloc> ::find_last_of(const _CharT *__s, size_type __pos, size_type __n) const noexcept 
# 1299
{ 
# 1300
; 
# 1301
size_type __size = size(); 
# 1302
if (__size && __n) 
# 1303
{ 
# 1304
if ((--__size) > __pos) { 
# 1305
__size = __pos; }  
# 1306
do 
# 1307
{ 
# 1308
if (traits_type::find(__s, __n, _M_data()[__size])) { 
# 1309
return __size; }  
# 1310
} 
# 1311
while ((__size--) != 0); 
# 1312
}  
# 1313
return npos; 
# 1314
} 
# 1316
template< class _CharT, class _Traits, class _Alloc> typename __cxx11::basic_string< _CharT, _Traits, _Alloc> ::size_type 
# 1319
__cxx11::basic_string< _CharT, _Traits, _Alloc> ::find_first_not_of(const _CharT *__s, size_type __pos, size_type __n) const noexcept 
# 1321
{ 
# 1322
; 
# 1323
for (; __pos < size(); ++__pos) { 
# 1324
if (!traits_type::find(__s, __n, _M_data()[__pos])) { 
# 1325
return __pos; }  }  
# 1326
return npos; 
# 1327
} 
# 1329
template< class _CharT, class _Traits, class _Alloc> typename __cxx11::basic_string< _CharT, _Traits, _Alloc> ::size_type 
# 1332
__cxx11::basic_string< _CharT, _Traits, _Alloc> ::find_first_not_of(_CharT __c, size_type __pos) const noexcept 
# 1333
{ 
# 1334
for (; __pos < size(); ++__pos) { 
# 1335
if (!traits_type::eq(_M_data()[__pos], __c)) { 
# 1336
return __pos; }  }  
# 1337
return npos; 
# 1338
} 
# 1340
template< class _CharT, class _Traits, class _Alloc> typename __cxx11::basic_string< _CharT, _Traits, _Alloc> ::size_type 
# 1343
__cxx11::basic_string< _CharT, _Traits, _Alloc> ::find_last_not_of(const _CharT *__s, size_type __pos, size_type __n) const noexcept 
# 1345
{ 
# 1346
; 
# 1347
size_type __size = size(); 
# 1348
if (__size) 
# 1349
{ 
# 1350
if ((--__size) > __pos) { 
# 1351
__size = __pos; }  
# 1352
do 
# 1353
{ 
# 1354
if (!traits_type::find(__s, __n, _M_data()[__size])) { 
# 1355
return __size; }  
# 1356
} 
# 1357
while (__size--); 
# 1358
}  
# 1359
return npos; 
# 1360
} 
# 1362
template< class _CharT, class _Traits, class _Alloc> typename __cxx11::basic_string< _CharT, _Traits, _Alloc> ::size_type 
# 1365
__cxx11::basic_string< _CharT, _Traits, _Alloc> ::find_last_not_of(_CharT __c, size_type __pos) const noexcept 
# 1366
{ 
# 1367
size_type __size = size(); 
# 1368
if (__size) 
# 1369
{ 
# 1370
if ((--__size) > __pos) { 
# 1371
__size = __pos; }  
# 1372
do 
# 1373
{ 
# 1374
if (!traits_type::eq(_M_data()[__size], __c)) { 
# 1375
return __size; }  
# 1376
} 
# 1377
while (__size--); 
# 1378
}  
# 1379
return npos; 
# 1380
} 
# 1382
template< class _CharT, class _Traits, class _Alloc> int 
# 1385
__cxx11::basic_string< _CharT, _Traits, _Alloc> ::compare(size_type __pos, size_type __n, const basic_string &__str) const 
# 1386
{ 
# 1387
_M_check(__pos, "basic_string::compare"); 
# 1388
__n = _M_limit(__pos, __n); 
# 1389
const size_type __osize = __str.size(); 
# 1390
const size_type __len = std::min(__n, __osize); 
# 1391
int __r = traits_type::compare(_M_data() + __pos, __str.data(), __len); 
# 1392
if (!__r) { 
# 1393
__r = (_S_compare)(__n, __osize); }  
# 1394
return __r; 
# 1395
} 
# 1397
template< class _CharT, class _Traits, class _Alloc> int 
# 1400
__cxx11::basic_string< _CharT, _Traits, _Alloc> ::compare(size_type __pos1, size_type __n1, const basic_string &__str, size_type 
# 1401
__pos2, size_type __n2) const 
# 1402
{ 
# 1403
_M_check(__pos1, "basic_string::compare"); 
# 1404
__str._M_check(__pos2, "basic_string::compare"); 
# 1405
__n1 = _M_limit(__pos1, __n1); 
# 1406
__n2 = __str._M_limit(__pos2, __n2); 
# 1407
const size_type __len = std::min(__n1, __n2); 
# 1408
int __r = traits_type::compare(_M_data() + __pos1, __str.data() + __pos2, __len); 
# 1410
if (!__r) { 
# 1411
__r = (_S_compare)(__n1, __n2); }  
# 1412
return __r; 
# 1413
} 
# 1415
template< class _CharT, class _Traits, class _Alloc> int 
# 1418
__cxx11::basic_string< _CharT, _Traits, _Alloc> ::compare(const _CharT *__s) const noexcept 
# 1419
{ 
# 1420
; 
# 1421
const size_type __size = size(); 
# 1422
const size_type __osize = traits_type::length(__s); 
# 1423
const size_type __len = std::min(__size, __osize); 
# 1424
int __r = traits_type::compare(_M_data(), __s, __len); 
# 1425
if (!__r) { 
# 1426
__r = (_S_compare)(__size, __osize); }  
# 1427
return __r; 
# 1428
} 
# 1430
template< class _CharT, class _Traits, class _Alloc> int 
# 1433
__cxx11::basic_string< _CharT, _Traits, _Alloc> ::compare(size_type __pos, size_type __n1, const _CharT *__s) const 
# 1434
{ 
# 1435
; 
# 1436
_M_check(__pos, "basic_string::compare"); 
# 1437
__n1 = _M_limit(__pos, __n1); 
# 1438
const size_type __osize = traits_type::length(__s); 
# 1439
const size_type __len = std::min(__n1, __osize); 
# 1440
int __r = traits_type::compare(_M_data() + __pos, __s, __len); 
# 1441
if (!__r) { 
# 1442
__r = (_S_compare)(__n1, __osize); }  
# 1443
return __r; 
# 1444
} 
# 1446
template< class _CharT, class _Traits, class _Alloc> int 
# 1449
__cxx11::basic_string< _CharT, _Traits, _Alloc> ::compare(size_type __pos, size_type __n1, const _CharT *__s, size_type 
# 1450
__n2) const 
# 1451
{ 
# 1452
; 
# 1453
_M_check(__pos, "basic_string::compare"); 
# 1454
__n1 = _M_limit(__pos, __n1); 
# 1455
const size_type __len = std::min(__n1, __n2); 
# 1456
int __r = traits_type::compare(_M_data() + __pos, __s, __len); 
# 1457
if (!__r) { 
# 1458
__r = (_S_compare)(__n1, __n2); }  
# 1459
return __r; 
# 1460
} 
# 1463
template< class _CharT, class _Traits, class _Alloc> basic_istream< _CharT, _Traits>  &
# 1465
operator>>(basic_istream< _CharT, _Traits>  &__in, __cxx11::basic_string< _CharT, _Traits, _Alloc>  &
# 1466
__str) 
# 1467
{ 
# 1468
typedef basic_istream< _CharT, _Traits>  __istream_type; 
# 1469
typedef __cxx11::basic_string< _CharT, _Traits, _Alloc>  __string_type; 
# 1470
typedef typename basic_istream< _CharT, _Traits> ::ios_base __ios_base; 
# 1471
typedef typename basic_istream< _CharT, _Traits> ::int_type __int_type; 
# 1472
typedef typename __cxx11::basic_string< _CharT, _Traits, _Alloc> ::size_type __size_type; 
# 1473
typedef ctype< _CharT>  __ctype_type; 
# 1474
typedef typename ctype< _CharT> ::ctype_base __ctype_base; 
# 1476
__size_type __extracted = (0); 
# 1477
typename basic_istream< _CharT, _Traits> ::ios_base::iostate __err = (__ios_base::goodbit); 
# 1478
typename basic_istream< _CharT, _Traits> ::sentry __cerb(__in, false); 
# 1479
if (__cerb) 
# 1480
{ 
# 1481
try 
# 1482
{ 
# 1484
(__str.erase()); 
# 1485
_CharT __buf[128]; 
# 1486
__size_type __len = (0); 
# 1487
const streamsize __w = (__in.width()); 
# 1488
const __size_type __n = (__w > (0)) ? static_cast< __size_type>(__w) : (__str.max_size()); 
# 1490
const __ctype_type &__ct = use_facet< ctype< _CharT> > ((__in.getloc())); 
# 1491
const __int_type __eof = _Traits::eof(); 
# 1492
__int_type __c = ((__in.rdbuf())->sgetc()); 
# 1494
while ((__extracted < __n) && (!_Traits::eq_int_type(__c, __eof)) && (!(__ct.is(__ctype_base::space, _Traits::to_char_type(__c))))) 
# 1498
{ 
# 1499
if (__len == (sizeof(__buf) / sizeof(_CharT))) 
# 1500
{ 
# 1501
(__str.append(__buf, sizeof(__buf) / sizeof(_CharT))); 
# 1502
__len = 0; 
# 1503
}  
# 1504
(__buf[__len++]) = _Traits::to_char_type(__c); 
# 1505
++__extracted; 
# 1506
__c = ((__in.rdbuf())->snextc()); 
# 1507
}  
# 1508
(__str.append(__buf, __len)); 
# 1510
if (_Traits::eq_int_type(__c, __eof)) { 
# 1511
__err |= __ios_base::eofbit; }  
# 1512
(__in.width(0)); 
# 1513
} 
# 1514
catch (__cxxabiv1::__forced_unwind &) 
# 1515
{ 
# 1516
(__in._M_setstate(__ios_base::badbit)); 
# 1517
throw; 
# 1518
} 
# 1519
catch (...) 
# 1520
{ 
# 1524
(__in._M_setstate(__ios_base::badbit)); 
# 1525
}  
# 1526
}  
# 1528
if (!__extracted) { 
# 1529
__err |= __ios_base::failbit; }  
# 1530
if (__err) { 
# 1531
(__in.setstate(__err)); }  
# 1532
return __in; 
# 1533
} 
# 1535
template< class _CharT, class _Traits, class _Alloc> basic_istream< _CharT, _Traits>  &
# 1537
getline(basic_istream< _CharT, _Traits>  &__in, __cxx11::basic_string< _CharT, _Traits, _Alloc>  &
# 1538
__str, _CharT __delim) 
# 1539
{ 
# 1540
typedef basic_istream< _CharT, _Traits>  __istream_type; 
# 1541
typedef __cxx11::basic_string< _CharT, _Traits, _Alloc>  __string_type; 
# 1542
typedef typename basic_istream< _CharT, _Traits> ::ios_base __ios_base; 
# 1543
typedef typename basic_istream< _CharT, _Traits> ::int_type __int_type; 
# 1544
typedef typename __cxx11::basic_string< _CharT, _Traits, _Alloc> ::size_type __size_type; 
# 1546
__size_type __extracted = (0); 
# 1547
const __size_type __n = (__str.max_size()); 
# 1548
typename basic_istream< _CharT, _Traits> ::ios_base::iostate __err = (__ios_base::goodbit); 
# 1549
typename basic_istream< _CharT, _Traits> ::sentry __cerb(__in, true); 
# 1550
if (__cerb) 
# 1551
{ 
# 1552
try 
# 1553
{ 
# 1554
(__str.erase()); 
# 1555
const __int_type __idelim = _Traits::to_int_type(__delim); 
# 1556
const __int_type __eof = _Traits::eof(); 
# 1557
__int_type __c = ((__in.rdbuf())->sgetc()); 
# 1559
while ((__extracted < __n) && (!_Traits::eq_int_type(__c, __eof)) && (!_Traits::eq_int_type(__c, __idelim))) 
# 1562
{ 
# 1563
__str += _Traits::to_char_type(__c); 
# 1564
++__extracted; 
# 1565
__c = ((__in.rdbuf())->snextc()); 
# 1566
}  
# 1568
if (_Traits::eq_int_type(__c, __eof)) { 
# 1569
__err |= __ios_base::eofbit; } else { 
# 1570
if (_Traits::eq_int_type(__c, __idelim)) 
# 1571
{ 
# 1572
++__extracted; 
# 1573
((__in.rdbuf())->sbumpc()); 
# 1574
} else { 
# 1576
__err |= __ios_base::failbit; }  }  
# 1577
} 
# 1578
catch (__cxxabiv1::__forced_unwind &) 
# 1579
{ 
# 1580
(__in._M_setstate(__ios_base::badbit)); 
# 1581
throw; 
# 1582
} 
# 1583
catch (...) 
# 1584
{ 
# 1588
(__in._M_setstate(__ios_base::badbit)); 
# 1589
}  
# 1590
}  
# 1591
if (!__extracted) { 
# 1592
__err |= __ios_base::failbit; }  
# 1593
if (__err) { 
# 1594
(__in.setstate(__err)); }  
# 1595
return __in; 
# 1596
} 
# 1607 "/usr/include/c++/8/bits/basic_string.tcc" 3
extern template class __cxx11::basic_string< char, char_traits< char> , allocator< char> > ;
# 1615
extern template basic_istream< char>  &operator>>(basic_istream< char>  & __is, __cxx11::basic_string< char, char_traits< char> , allocator< char> >  & __str);
# 1618
extern template basic_ostream< char>  &operator<<(basic_ostream< char>  & __os, const __cxx11::basic_string< char, char_traits< char> , allocator< char> >  & __str);
# 1621
extern template basic_istream< char>  &getline(basic_istream< char>  & __is, __cxx11::basic_string< char, char_traits< char> , allocator< char> >  & __str, char __delim);
# 1624
extern template basic_istream< char>  &getline(basic_istream< char>  & __is, __cxx11::basic_string< char, char_traits< char> , allocator< char> >  & __str);
# 1630
extern template class __cxx11::basic_string< wchar_t, char_traits< wchar_t> , allocator< wchar_t> > ;
# 1636
extern template basic_istream< wchar_t>  &operator>>(basic_istream< wchar_t>  & __is, __cxx11::basic_string< wchar_t, char_traits< wchar_t> , allocator< wchar_t> >  & __str);
# 1639
extern template basic_ostream< wchar_t>  &operator<<(basic_ostream< wchar_t>  & __os, const __cxx11::basic_string< wchar_t, char_traits< wchar_t> , allocator< wchar_t> >  & __str);
# 1642
extern template basic_istream< wchar_t>  &getline(basic_istream< wchar_t>  & __is, __cxx11::basic_string< wchar_t, char_traits< wchar_t> , allocator< wchar_t> >  & __str, wchar_t __delim);
# 1645
extern template basic_istream< wchar_t>  &getline(basic_istream< wchar_t>  & __is, __cxx11::basic_string< wchar_t, char_traits< wchar_t> , allocator< wchar_t> >  & __str);
# 1652
}
# 43 "/usr/include/c++/8/bits/locale_classes.h" 3
namespace std __attribute((__visibility__("default"))) { 
# 62 "/usr/include/c++/8/bits/locale_classes.h" 3
class locale { 
# 67
public: typedef int category; 
# 70
class facet; 
# 71
class id; 
# 72
class _Impl; 
# 74
friend class facet; 
# 75
friend class _Impl; 
# 77
template< class _Facet> friend bool has_facet(const locale &) throw(); 
# 81
template< class _Facet> friend const _Facet &use_facet(const locale &); 
# 85
template< class _Cache> friend struct __use_cache; 
# 98 "/usr/include/c++/8/bits/locale_classes.h" 3
static const category none = 0; 
# 99
static const category ctype = (1L << 0); 
# 100
static const category numeric = (1L << 1); 
# 101
static const category collate = (1L << 2); 
# 102
static const category time = (1L << 3); 
# 103
static const category monetary = (1L << 4); 
# 104
static const category messages = (1L << 5); 
# 105
static const category all = (((((ctype | numeric) | collate) | time) | monetary) | messages); 
# 117 "/usr/include/c++/8/bits/locale_classes.h" 3
locale() throw(); 
# 126 "/usr/include/c++/8/bits/locale_classes.h" 3
locale(const locale & __other) throw(); 
# 137 "/usr/include/c++/8/bits/locale_classes.h" 3
explicit locale(const char * __s); 
# 151 "/usr/include/c++/8/bits/locale_classes.h" 3
locale(const locale & __base, const char * __s, category __cat); 
# 163 "/usr/include/c++/8/bits/locale_classes.h" 3
explicit locale(const __cxx11::string &__s) : locale(__s.c_str()) { } 
# 177 "/usr/include/c++/8/bits/locale_classes.h" 3
locale(const locale &__base, const __cxx11::string &__s, category __cat) : locale(__base, __s.c_str(), __cat) 
# 178
{ } 
# 192 "/usr/include/c++/8/bits/locale_classes.h" 3
locale(const locale & __base, const locale & __add, category __cat); 
# 205 "/usr/include/c++/8/bits/locale_classes.h" 3
template< class _Facet> locale(const locale & __other, _Facet * __f); 
# 209
~locale() throw(); 
# 220 "/usr/include/c++/8/bits/locale_classes.h" 3
const locale &operator=(const locale & __other) throw(); 
# 234 "/usr/include/c++/8/bits/locale_classes.h" 3
template< class _Facet> locale combine(const locale & __other) const; 
# 243
__attribute((__abi_tag__("cxx11"))) __cxx11::string 
# 245
name() const; 
# 255 "/usr/include/c++/8/bits/locale_classes.h" 3
bool operator==(const locale & __other) const throw(); 
# 264
bool operator!=(const locale &__other) const throw() 
# 265
{ return !this->operator==(__other); } 
# 282 "/usr/include/c++/8/bits/locale_classes.h" 3
template< class _Char, class _Traits, class _Alloc> bool operator()(const __cxx11::basic_string< _Char, _Traits, _Alloc>  & __s1, const __cxx11::basic_string< _Char, _Traits, _Alloc>  & __s2) const; 
# 299 "/usr/include/c++/8/bits/locale_classes.h" 3
static locale global(const locale & __loc); 
# 305
static const locale &classic(); 
# 309
private: _Impl *_M_impl; 
# 312
static _Impl *_S_classic; 
# 315
static _Impl *_S_global; 
# 321
static const char *const *const _S_categories; 
# 333 "/usr/include/c++/8/bits/locale_classes.h" 3
enum { _S_categories_size = 12}; 
# 336
static __gthread_once_t _S_once; 
# 340
explicit locale(_Impl *) throw(); 
# 343
static void _S_initialize(); 
# 346
static void _S_initialize_once() throw(); 
# 349
static category _S_normalize_category(category); 
# 352
void _M_coalesce(const locale & __base, const locale & __add, category __cat); 
# 355
static const id *const _S_twinned_facets[]; 
# 357
}; 
# 371 "/usr/include/c++/8/bits/locale_classes.h" 3
class locale::facet { 
# 374
friend class locale; 
# 375
friend class _Impl; 
# 377
mutable _Atomic_word _M_refcount; 
# 380
static __c_locale _S_c_locale; 
# 383
static const char _S_c_name[2]; 
# 386
static __gthread_once_t _S_once; 
# 390
static void _S_initialize_once(); 
# 403 "/usr/include/c++/8/bits/locale_classes.h" 3
protected: explicit facet(size_t __refs = 0) throw() : _M_refcount((__refs) ? 1 : 0) 
# 404
{ } 
# 408
virtual ~facet(); 
# 411
static void _S_create_c_locale(__c_locale & __cloc, const char * __s, __c_locale __old = 0); 
# 415
static __c_locale _S_clone_c_locale(__c_locale & __cloc) throw(); 
# 418
static void _S_destroy_c_locale(__c_locale & __cloc); 
# 421
static __c_locale _S_lc_ctype_c_locale(__c_locale __cloc, const char * __s); 
# 426
static __c_locale _S_get_c_locale(); 
# 428
__attribute((const)) static const char *
# 429
_S_get_c_name() throw(); 
# 438 "/usr/include/c++/8/bits/locale_classes.h" 3
facet(const facet &) = delete;
# 441
facet &operator=(const facet &) = delete;
# 446
private: void _M_add_reference() const throw() 
# 447
{ __gnu_cxx::__atomic_add_dispatch(&(_M_refcount), 1); } 
# 450
void _M_remove_reference() const throw() 
# 451
{ 
# 453
; 
# 454
if (__gnu_cxx::__exchange_and_add_dispatch(&(_M_refcount), -1) == 1) 
# 455
{ 
# 456
; 
# 457
try 
# 458
{ delete this; } 
# 459
catch (...) 
# 460
{ }  
# 461
}  
# 462
} 
# 464
const facet *_M_sso_shim(const id *) const; 
# 465
const facet *_M_cow_shim(const id *) const; 
# 468
protected: class __shim; 
# 469
}; 
# 483 "/usr/include/c++/8/bits/locale_classes.h" 3
class locale::id { 
# 486
friend class locale; 
# 487
friend class _Impl; 
# 489
template< class _Facet> friend const _Facet &use_facet(const locale &); 
# 493
template< class _Facet> friend bool has_facet(const locale &) throw(); 
# 500
mutable size_t _M_index; 
# 503
static _Atomic_word _S_refcount; 
# 506
void operator=(const id &); 
# 508
id(const id &); 
# 514
public: id() { } 
# 517
size_t _M_id() const throw(); 
# 518
}; 
# 522
class locale::_Impl { 
# 526
friend class locale; 
# 527
friend class facet; 
# 529
template< class _Facet> friend bool has_facet(const locale &) throw(); 
# 533
template< class _Facet> friend const _Facet &use_facet(const locale &); 
# 537
template< class _Cache> friend struct __use_cache; 
# 542
_Atomic_word _M_refcount; 
# 543
const facet **_M_facets; 
# 544
size_t _M_facets_size; 
# 545
const facet **_M_caches; 
# 546
char **_M_names; 
# 547
static const id *const _S_id_ctype[]; 
# 548
static const id *const _S_id_numeric[]; 
# 549
static const id *const _S_id_collate[]; 
# 550
static const id *const _S_id_time[]; 
# 551
static const id *const _S_id_monetary[]; 
# 552
static const id *const _S_id_messages[]; 
# 553
static const id *const *const _S_facet_categories[]; 
# 556
void _M_add_reference() throw() 
# 557
{ __gnu_cxx::__atomic_add_dispatch(&(_M_refcount), 1); } 
# 560
void _M_remove_reference() throw() 
# 561
{ 
# 563
; 
# 564
if (__gnu_cxx::__exchange_and_add_dispatch(&(_M_refcount), -1) == 1) 
# 565
{ 
# 566
; 
# 567
try 
# 568
{ delete this; } 
# 569
catch (...) 
# 570
{ }  
# 571
}  
# 572
} 
# 574
_Impl(const _Impl &, size_t); 
# 575
_Impl(const char *, size_t); 
# 576
_Impl(size_t) throw(); 
# 578
~_Impl() throw(); 
# 580
_Impl(const _Impl &); 
# 583
void operator=(const _Impl &); 
# 586
bool _M_check_same_name() 
# 587
{ 
# 588
bool __ret = true; 
# 589
if ((_M_names)[1]) { 
# 591
for (size_t __i = (0); __ret && (__i < ((_S_categories_size) - 1)); ++__i) { 
# 592
__ret = (__builtin_strcmp((_M_names)[__i], (_M_names)[__i + (1)]) == 0); }  }  
# 593
return __ret; 
# 594
} 
# 597
void _M_replace_categories(const _Impl *, category); 
# 600
void _M_replace_category(const _Impl *, const id *const *); 
# 603
void _M_replace_facet(const _Impl *, const id *); 
# 606
void _M_install_facet(const id *, const facet *); 
# 608
template< class _Facet> void 
# 610
_M_init_facet(_Facet *__facet) 
# 611
{ this->_M_install_facet(&_Facet::id, __facet); } 
# 613
template< class _Facet> void 
# 615
_M_init_facet_unchecked(_Facet *__facet) 
# 616
{ 
# 617
(__facet->_M_add_reference()); 
# 618
((_M_facets)[(_Facet::id._M_id)()]) = __facet; 
# 619
} 
# 622
void _M_install_cache(const facet *, size_t); 
# 624
void _M_init_extra(facet **); 
# 625
void _M_init_extra(void *, void *, const char *, const char *); 
# 626
}; 
# 641 "/usr/include/c++/8/bits/locale_classes.h" 3
template< class _CharT> 
# 642
class __cxx11::collate : public locale::facet { 
# 648
public: typedef _CharT char_type; 
# 649
typedef basic_string< _CharT, char_traits< _CharT> , allocator< _CharT> >  string_type; 
# 655
protected: __c_locale _M_c_locale_collate; 
# 659
public: static locale::id id; 
# 669 "/usr/include/c++/8/bits/locale_classes.h" 3
explicit collate(size_t __refs = 0) : locale::facet(__refs), _M_c_locale_collate(_S_get_c_locale()) 
# 671
{ } 
# 683 "/usr/include/c++/8/bits/locale_classes.h" 3
explicit collate(__c_locale __cloc, size_t __refs = 0) : locale::facet(__refs), _M_c_locale_collate(_S_clone_c_locale(__cloc)) 
# 685
{ } 
# 700 "/usr/include/c++/8/bits/locale_classes.h" 3
int compare(const _CharT *__lo1, const _CharT *__hi1, const _CharT *
# 701
__lo2, const _CharT *__hi2) const 
# 702
{ return do_compare(__lo1, __hi1, __lo2, __hi2); } 
# 719 "/usr/include/c++/8/bits/locale_classes.h" 3
string_type transform(const _CharT *__lo, const _CharT *__hi) const 
# 720
{ return do_transform(__lo, __hi); } 
# 733 "/usr/include/c++/8/bits/locale_classes.h" 3
long hash(const _CharT *__lo, const _CharT *__hi) const 
# 734
{ return do_hash(__lo, __hi); } 
# 738
int _M_compare(const _CharT *, const _CharT *) const throw(); 
# 741
size_t _M_transform(_CharT *, const _CharT *, size_t) const throw(); 
# 746
protected: virtual ~collate() 
# 747
{ _S_destroy_c_locale(_M_c_locale_collate); } 
# 762 "/usr/include/c++/8/bits/locale_classes.h" 3
virtual int do_compare(const _CharT * __lo1, const _CharT * __hi1, const _CharT * __lo2, const _CharT * __hi2) const; 
# 776 "/usr/include/c++/8/bits/locale_classes.h" 3
virtual string_type do_transform(const _CharT * __lo, const _CharT * __hi) const; 
# 789 "/usr/include/c++/8/bits/locale_classes.h" 3
virtual long do_hash(const _CharT * __lo, const _CharT * __hi) const; 
# 790
}; 
# 792
template< class _CharT> locale::id 
# 793
__cxx11::collate< _CharT> ::id; 
# 798
template<> int collate< char> ::_M_compare(const char *, const char *) const throw(); 
# 802
template<> size_t collate< char> ::_M_transform(char *, const char *, size_t) const throw(); 
# 807
template<> int collate< wchar_t> ::_M_compare(const wchar_t *, const wchar_t *) const throw(); 
# 811
template<> size_t collate< wchar_t> ::_M_transform(wchar_t *, const wchar_t *, size_t) const throw(); 
# 815
template< class _CharT> 
# 816
class __cxx11::collate_byname : public collate< _CharT>  { 
# 821
public: typedef _CharT char_type; 
# 822
typedef basic_string< _CharT, char_traits< _CharT> , allocator< _CharT> >  string_type; 
# 826
explicit collate_byname(const char *__s, std::size_t __refs = 0) : __cxx11::collate< _CharT> (__refs) 
# 828
{ 
# 829
if ((__builtin_strcmp(__s, "C") != 0) && (__builtin_strcmp(__s, "POSIX") != 0)) 
# 831
{ 
# 832
(this->_S_destroy_c_locale((this->_M_c_locale_collate))); 
# 833
(this->_S_create_c_locale((this->_M_c_locale_collate), __s)); 
# 834
}  
# 835
} 
# 839
explicit collate_byname(const __cxx11::string &__s, std::size_t __refs = 0) : collate_byname(__s.c_str(), __refs) 
# 840
{ } 
# 845
protected: virtual ~collate_byname() { } 
# 846
}; 
# 849
}
# 39 "/usr/include/c++/8/bits/locale_classes.tcc" 3
namespace std __attribute((__visibility__("default"))) { 
# 43
template< class _Facet> 
# 45
locale::locale(const locale &__other, _Facet *__f) 
# 46
{ 
# 47
(_M_impl) = (new _Impl(*(__other._M_impl), 1)); 
# 49
try 
# 50
{ (_M_impl)->_M_install_facet(&_Facet::id, __f); } 
# 51
catch (...) 
# 52
{ 
# 53
(_M_impl)->_M_remove_reference(); 
# 54
throw; 
# 55
}  
# 56
delete [] (((_M_impl)->_M_names)[0]); 
# 57
(((_M_impl)->_M_names)[0]) = (0); 
# 58
} 
# 60
template< class _Facet> locale 
# 63
locale::combine(const locale &__other) const 
# 64
{ 
# 65
_Impl *__tmp = new _Impl(*(_M_impl), 1); 
# 66
try 
# 67
{ 
# 68
__tmp->_M_replace_facet(__other._M_impl, &_Facet::id); 
# 69
} 
# 70
catch (...) 
# 71
{ 
# 72
__tmp->_M_remove_reference(); 
# 73
throw; 
# 74
}  
# 75
return ((locale)(__tmp)); 
# 76
} 
# 78
template< class _CharT, class _Traits, class _Alloc> bool 
# 81
locale::operator()(const __cxx11::basic_string< _CharT, _Traits, _Alloc>  &__s1, const __cxx11::basic_string< _CharT, _Traits, _Alloc>  &
# 82
__s2) const 
# 83
{ 
# 84
typedef __cxx11::collate< _CharT>  __collate_type; 
# 85
const __collate_type &__collate = use_facet< __cxx11::collate< _CharT> > (*this); 
# 86
return (__collate.compare((__s1.data()), (__s1.data()) + (__s1.length()), (__s2.data()), (__s2.data()) + (__s2.length()))) < 0; 
# 88
} 
# 102 "/usr/include/c++/8/bits/locale_classes.tcc" 3
template< class _Facet> bool 
# 104
has_facet(const locale &__loc) throw() 
# 105
{ 
# 106
const size_t __i = (_Facet::id._M_id)(); 
# 107
const locale::facet **__facets = (__loc._M_impl)->_M_facets; 
# 108
return (__i < ((__loc._M_impl)->_M_facets_size)) && (dynamic_cast< const _Facet *>(__facets[__i])); 
# 114
} 
# 130 "/usr/include/c++/8/bits/locale_classes.tcc" 3
template< class _Facet> const _Facet &
# 132
use_facet(const locale &__loc) 
# 133
{ 
# 134
const size_t __i = (_Facet::id._M_id)(); 
# 135
const locale::facet **__facets = (__loc._M_impl)->_M_facets; 
# 136
if ((__i >= ((__loc._M_impl)->_M_facets_size)) || (!(__facets[__i]))) { 
# 137
__throw_bad_cast(); }  
# 139
return dynamic_cast< const _Facet &>(*(__facets[__i])); 
# 143
} 
# 147
template< class _CharT> int 
# 149
__cxx11::collate< _CharT> ::_M_compare(const _CharT *, const _CharT *) const throw() 
# 150
{ return 0; } 
# 153
template< class _CharT> size_t 
# 155
__cxx11::collate< _CharT> ::_M_transform(_CharT *, const _CharT *, size_t) const throw() 
# 156
{ return 0; } 
# 158
template< class _CharT> int 
# 161
__cxx11::collate< _CharT> ::do_compare(const _CharT *__lo1, const _CharT *__hi1, const _CharT *
# 162
__lo2, const _CharT *__hi2) const 
# 163
{ 
# 166
const string_type __one(__lo1, __hi1); 
# 167
const string_type __two(__lo2, __hi2); 
# 169
const _CharT *__p = (__one.c_str()); 
# 170
const _CharT *__pend = (__one.data()) + (__one.length()); 
# 171
const _CharT *__q = (__two.c_str()); 
# 172
const _CharT *__qend = (__two.data()) + (__two.length()); 
# 177
for (; ;) 
# 178
{ 
# 179
const int __res = _M_compare(__p, __q); 
# 180
if (__res) { 
# 181
return __res; }  
# 183
__p += char_traits< _CharT> ::length(__p); 
# 184
__q += char_traits< _CharT> ::length(__q); 
# 185
if ((__p == __pend) && (__q == __qend)) { 
# 186
return 0; } else { 
# 187
if (__p == __pend) { 
# 188
return -1; } else { 
# 189
if (__q == __qend) { 
# 190
return 1; }  }  }  
# 192
__p++; 
# 193
__q++; 
# 194
}  
# 195
} 
# 197
template< class _CharT> typename __cxx11::collate< _CharT> ::string_type 
# 200
__cxx11::collate< _CharT> ::do_transform(const _CharT *__lo, const _CharT *__hi) const 
# 201
{ 
# 202
string_type __ret; 
# 205
const string_type __str(__lo, __hi); 
# 207
const _CharT *__p = (__str.c_str()); 
# 208
const _CharT *__pend = (__str.data()) + (__str.length()); 
# 210
size_t __len = (__hi - __lo) * 2; 
# 212
_CharT *__c = new _CharT [__len]; 
# 214
try 
# 215
{ 
# 219
for (; ;) 
# 220
{ 
# 222
size_t __res = _M_transform(__c, __p, __len); 
# 225
if (__res >= __len) 
# 226
{ 
# 227
__len = (__res + (1)); 
# 228
(delete [] __c), (__c = 0); 
# 229
__c = (new _CharT [__len]); 
# 230
__res = _M_transform(__c, __p, __len); 
# 231
}  
# 233
(__ret.append(__c, __res)); 
# 234
__p += char_traits< _CharT> ::length(__p); 
# 235
if (__p == __pend) { 
# 236
break; }  
# 238
__p++; 
# 239
(__ret.push_back(_CharT())); 
# 240
}  
# 241
} 
# 242
catch (...) 
# 243
{ 
# 244
delete [] __c; 
# 245
throw; 
# 246
}  
# 248
delete [] __c; 
# 250
return __ret; 
# 251
} 
# 253
template< class _CharT> long 
# 256
__cxx11::collate< _CharT> ::do_hash(const _CharT *__lo, const _CharT *__hi) const 
# 257
{ 
# 258
unsigned long __val = (0); 
# 259
for (; __lo < __hi; ++__lo) { 
# 260
__val = ((*__lo) + ((__val << 7) | (__val >> (__gnu_cxx::__numeric_traits_integer< unsigned long> ::__digits - 7)))); }  
# 264
return static_cast< long>(__val); 
# 265
} 
# 270
extern template class __cxx11::collate< char> ;
# 271
extern template class __cxx11::collate_byname< char> ;
# 273
extern template const __cxx11::collate< char>  &use_facet< __cxx11::collate< char> > (const locale &);
# 277
extern template bool has_facet< __cxx11::collate< char> > (const locale &) throw();
# 282
extern template class __cxx11::collate< wchar_t> ;
# 283
extern template class __cxx11::collate_byname< wchar_t> ;
# 285
extern template const __cxx11::collate< wchar_t>  &use_facet< __cxx11::collate< wchar_t> > (const locale &);
# 289
extern template bool has_facet< __cxx11::collate< wchar_t> > (const locale &) throw();
# 296
}
# 36 "/usr/include/x86_64-linux-gnu/c++/8/bits/error_constants.h" 3
namespace std __attribute((__visibility__("default"))) { 
# 40
enum class errc { 
# 42
address_family_not_supported = 97, 
# 43
address_in_use, 
# 44
address_not_available, 
# 45
already_connected = 106, 
# 46
argument_list_too_long = 7, 
# 47
argument_out_of_domain = 33, 
# 48
bad_address = 14, 
# 49
bad_file_descriptor = 9, 
# 52
bad_message = 74, 
# 55
broken_pipe = 32, 
# 56
connection_aborted = 103, 
# 57
connection_already_in_progress = 114, 
# 58
connection_refused = 111, 
# 59
connection_reset = 104, 
# 60
cross_device_link = 18, 
# 61
destination_address_required = 89, 
# 62
device_or_resource_busy = 16, 
# 63
directory_not_empty = 39, 
# 64
executable_format_error = 8, 
# 65
file_exists = 17, 
# 66
file_too_large = 27, 
# 67
filename_too_long = 36, 
# 68
function_not_supported = 38, 
# 69
host_unreachable = 113, 
# 72
identifier_removed = 43, 
# 75
illegal_byte_sequence = 84, 
# 76
inappropriate_io_control_operation = 25, 
# 77
interrupted = 4, 
# 78
invalid_argument = 22, 
# 79
invalid_seek = 29, 
# 80
io_error = 5, 
# 81
is_a_directory = 21, 
# 82
message_size = 90, 
# 83
network_down = 100, 
# 84
network_reset = 102, 
# 85
network_unreachable = 101, 
# 86
no_buffer_space = 105, 
# 87
no_child_process = 10, 
# 90
no_link = 67, 
# 93
no_lock_available = 37, 
# 96
no_message_available = 61, 
# 99
no_message = 42, 
# 100
no_protocol_option = 92, 
# 101
no_space_on_device = 28, 
# 104
no_stream_resources = 63, 
# 107
no_such_device_or_address = 6, 
# 108
no_such_device = 19, 
# 109
no_such_file_or_directory = 2, 
# 110
no_such_process, 
# 111
not_a_directory = 20, 
# 112
not_a_socket = 88, 
# 115
not_a_stream = 60, 
# 118
not_connected = 107, 
# 119
not_enough_memory = 12, 
# 122
not_supported = 95, 
# 126
operation_canceled = 125, 
# 129
operation_in_progress = 115, 
# 130
operation_not_permitted = 1, 
# 131
operation_not_supported = 95, 
# 132
operation_would_block = 11, 
# 135
owner_dead = 130, 
# 138
permission_denied = 13, 
# 141
protocol_error = 71, 
# 144
protocol_not_supported = 93, 
# 145
read_only_file_system = 30, 
# 146
resource_deadlock_would_occur = 35, 
# 147
resource_unavailable_try_again = 11, 
# 148
result_out_of_range = 34, 
# 151
state_not_recoverable = 131, 
# 155
stream_timeout = 62, 
# 159
text_file_busy = 26, 
# 162
timed_out = 110, 
# 163
too_many_files_open_in_system = 23, 
# 164
too_many_files_open, 
# 165
too_many_links = 31, 
# 166
too_many_symbolic_link_levels = 40, 
# 169
value_too_large = 75, 
# 172
wrong_protocol_type = 91
# 173
}; 
# 176
}
# 41 "/usr/include/c++/8/stdexcept" 3
namespace std __attribute((__visibility__("default"))) { 
# 48
struct __cow_string { 
# 50
union { 
# 51
const char *_M_p; 
# 52
char _M_bytes[sizeof(const char *)]; 
# 53
}; 
# 55
__cow_string(); 
# 56
__cow_string(const __cxx11::string &); 
# 57
__cow_string(const char *, size_t); 
# 58
__cow_string(const __cow_string &) noexcept; 
# 59
__cow_string &operator=(const __cow_string &) noexcept; 
# 60
~__cow_string(); 
# 62
__cow_string(__cow_string &&) noexcept; 
# 63
__cow_string &operator=(__cow_string &&) noexcept; 
# 65
}; 
# 67
typedef __cxx11::basic_string< char, char_traits< char> , allocator< char> >  __sso_string; 
# 113 "/usr/include/c++/8/stdexcept" 3
class logic_error : public exception { 
# 115
__cow_string _M_msg; 
# 120
public: explicit logic_error(const __cxx11::string & __arg); 
# 124
explicit logic_error(const char *); 
# 128
logic_error(const logic_error &) noexcept; 
# 129
logic_error &operator=(const logic_error &) noexcept; 
# 132
virtual ~logic_error() noexcept; 
# 137
virtual const char *what() const noexcept; 
# 143
}; 
# 147
class domain_error : public logic_error { 
# 150
public: explicit domain_error(const __cxx11::string & __arg); 
# 152
explicit domain_error(const char *); 
# 154
virtual ~domain_error() noexcept; 
# 155
}; 
# 158
class invalid_argument : public logic_error { 
# 161
public: explicit invalid_argument(const __cxx11::string & __arg); 
# 163
explicit invalid_argument(const char *); 
# 165
virtual ~invalid_argument() noexcept; 
# 166
}; 
# 170
class length_error : public logic_error { 
# 173
public: explicit length_error(const __cxx11::string & __arg); 
# 175
explicit length_error(const char *); 
# 177
virtual ~length_error() noexcept; 
# 178
}; 
# 182
class out_of_range : public logic_error { 
# 185
public: explicit out_of_range(const __cxx11::string & __arg); 
# 187
explicit out_of_range(const char *); 
# 189
virtual ~out_of_range() noexcept; 
# 190
}; 
# 197
class runtime_error : public exception { 
# 199
__cow_string _M_msg; 
# 204
public: explicit runtime_error(const __cxx11::string & __arg); 
# 208
explicit runtime_error(const char *); 
# 212
runtime_error(const runtime_error &) noexcept; 
# 213
runtime_error &operator=(const runtime_error &) noexcept; 
# 216
virtual ~runtime_error() noexcept; 
# 221
virtual const char *what() const noexcept; 
# 227
}; 
# 230
class range_error : public runtime_error { 
# 233
public: explicit range_error(const __cxx11::string & __arg); 
# 235
explicit range_error(const char *); 
# 237
virtual ~range_error() noexcept; 
# 238
}; 
# 241
class overflow_error : public runtime_error { 
# 244
public: explicit overflow_error(const __cxx11::string & __arg); 
# 246
explicit overflow_error(const char *); 
# 248
virtual ~overflow_error() noexcept; 
# 249
}; 
# 252
class underflow_error : public runtime_error { 
# 255
public: explicit underflow_error(const __cxx11::string & __arg); 
# 257
explicit underflow_error(const char *); 
# 259
virtual ~underflow_error() noexcept; 
# 260
}; 
# 265
}
# 43 "/usr/include/c++/8/system_error" 3
namespace std __attribute((__visibility__("default"))) { 
# 47
struct error_code; 
# 48
struct error_condition; 
# 49
class system_error; 
# 52
template< class _Tp> 
# 53
struct is_error_code_enum : public false_type { }; 
# 56
template< class _Tp> 
# 57
struct is_error_condition_enum : public false_type { }; 
# 60
template<> struct is_error_condition_enum< errc>  : public true_type { 
# 61
}; 
# 71 "/usr/include/c++/8/system_error" 3
inline namespace _V2 { 
# 74
class error_category { 
# 77
public: constexpr error_category() noexcept = default;
# 79
virtual ~error_category(); 
# 81
error_category(const error_category &) = delete;
# 82
error_category &operator=(const error_category &) = delete;
# 85
virtual const char *name() const noexcept = 0; 
# 95
private: 
# 93
__attribute((__abi_tag__("cxx11"))) virtual __cow_string 
# 95
_M_message(int) const; 
# 100
public: 
# 98
__attribute((__abi_tag__("cxx11"))) virtual __cxx11::string 
# 100
message(int) const = 0; 
# 112 "/usr/include/c++/8/system_error" 3
virtual error_condition default_error_condition(int __i) const noexcept; 
# 115
virtual bool equivalent(int __i, const error_condition & __cond) const noexcept; 
# 118
virtual bool equivalent(const error_code & __code, int __i) const noexcept; 
# 121
bool operator<(const error_category &__other) const noexcept 
# 122
{ return less< const error_category *> ()(this, &__other); } 
# 125
bool operator==(const error_category &__other) const noexcept 
# 126
{ return this == (&__other); } 
# 129
bool operator!=(const error_category &__other) const noexcept 
# 130
{ return this != (&__other); } 
# 131
}; 
# 134
__attribute((const)) const error_category &system_category() noexcept; 
# 135
__attribute((const)) const error_category &generic_category() noexcept; 
# 137
}
# 139
inline error_code make_error_code(errc) noexcept; 
# 141
template< class _Tp> struct hash; 
# 146
struct error_code { 
# 148
error_code() noexcept : _M_value(0), _M_cat(&system_category()) 
# 149
{ } 
# 151
error_code(int __v, const _V2::error_category &__cat) noexcept : _M_value(__v), _M_cat(&__cat) 
# 152
{ } 
# 154
template< class _ErrorCodeEnum, class  = typename enable_if< is_error_code_enum< _ErrorCodeEnum> ::value> ::type> 
# 156
error_code(_ErrorCodeEnum __e) noexcept 
# 157
{ (*this) = make_error_code(__e); } 
# 160
void assign(int __v, const _V2::error_category &__cat) noexcept 
# 161
{ 
# 162
(_M_value) = __v; 
# 163
(_M_cat) = (&__cat); 
# 164
} 
# 167
void clear() noexcept 
# 168
{ this->assign(0, system_category()); } 
# 171
template< class _ErrorCodeEnum> typename enable_if< is_error_code_enum< _ErrorCodeEnum> ::value, error_code &> ::type 
# 174
operator=(_ErrorCodeEnum __e) noexcept 
# 175
{ return (*this) = make_error_code(__e); } 
# 178
int value() const noexcept { return _M_value; } 
# 181
const _V2::error_category &category() const noexcept { return *(_M_cat); } 
# 184
error_condition default_error_condition() const noexcept; 
# 186
__attribute((__abi_tag__("cxx11"))) __cxx11::string 
# 188
message() const 
# 189
{ return this->category().message(this->value()); } 
# 191
explicit operator bool() const noexcept 
# 192
{ return (_M_value) != 0; } 
# 196
friend struct hash< error_code> ; 
# 198
private: int _M_value; 
# 199
const _V2::error_category *_M_cat; 
# 200
}; 
# 204
inline error_code make_error_code(errc __e) noexcept 
# 205
{ return error_code(static_cast< int>(__e), generic_category()); } 
# 208
inline bool operator<(const error_code &__lhs, const error_code &__rhs) noexcept 
# 209
{ 
# 210
return ((__lhs.category()) < (__rhs.category())) || (((__lhs.category()) == (__rhs.category())) && (__lhs.value() < __rhs.value())); 
# 213
} 
# 215
template< class _CharT, class _Traits> basic_ostream< _CharT, _Traits>  &
# 217
operator<<(basic_ostream< _CharT, _Traits>  &__os, const error_code &__e) 
# 218
{ return ((__os << __e.category().name()) << ':') << __e.value(); } 
# 220
inline error_condition make_error_condition(errc) noexcept; 
# 224
struct error_condition { 
# 226
error_condition() noexcept : _M_value(0), _M_cat(&generic_category()) 
# 227
{ } 
# 229
error_condition(int __v, const _V2::error_category &__cat) noexcept : _M_value(__v), _M_cat(&__cat) 
# 230
{ } 
# 232
template< class _ErrorConditionEnum, class  = typename enable_if< is_error_condition_enum< _ErrorConditionEnum> ::value> ::type> 
# 234
error_condition(_ErrorConditionEnum __e) noexcept 
# 235
{ (*this) = make_error_condition(__e); } 
# 238
void assign(int __v, const _V2::error_category &__cat) noexcept 
# 239
{ 
# 240
(_M_value) = __v; 
# 241
(_M_cat) = (&__cat); 
# 242
} 
# 245
template< class _ErrorConditionEnum> typename enable_if< is_error_condition_enum< _ErrorConditionEnum> ::value, error_condition &> ::type 
# 248
operator=(_ErrorConditionEnum __e) noexcept 
# 249
{ return (*this) = make_error_condition(__e); } 
# 252
void clear() noexcept 
# 253
{ this->assign(0, generic_category()); } 
# 257
int value() const noexcept { return _M_value; } 
# 260
const _V2::error_category &category() const noexcept { return *(_M_cat); } 
# 262
__attribute((__abi_tag__("cxx11"))) __cxx11::string 
# 264
message() const 
# 265
{ return this->category().message(this->value()); } 
# 267
explicit operator bool() const noexcept 
# 268
{ return (_M_value) != 0; } 
# 272
private: int _M_value; 
# 273
const _V2::error_category *_M_cat; 
# 274
}; 
# 278
inline error_condition make_error_condition(errc __e) noexcept 
# 279
{ return error_condition(static_cast< int>(__e), generic_category()); } 
# 282
inline bool operator<(const error_condition &__lhs, const error_condition &
# 283
__rhs) noexcept 
# 284
{ 
# 285
return ((__lhs.category()) < (__rhs.category())) || (((__lhs.category()) == (__rhs.category())) && (__lhs.value() < __rhs.value())); 
# 288
} 
# 292
inline bool operator==(const error_code &__lhs, const error_code &__rhs) noexcept 
# 293
{ return ((__lhs.category()) == (__rhs.category())) && (__lhs.value() == __rhs.value()); 
# 294
} 
# 297
inline bool operator==(const error_code &__lhs, const error_condition &__rhs) noexcept 
# 298
{ 
# 299
return __lhs.category().equivalent(__lhs.value(), __rhs) || __rhs.category().equivalent(__lhs, __rhs.value()); 
# 301
} 
# 304
inline bool operator==(const error_condition &__lhs, const error_code &__rhs) noexcept 
# 305
{ 
# 306
return __rhs.category().equivalent(__rhs.value(), __lhs) || __lhs.category().equivalent(__rhs, __lhs.value()); 
# 308
} 
# 311
inline bool operator==(const error_condition &__lhs, const error_condition &
# 312
__rhs) noexcept 
# 313
{ 
# 314
return ((__lhs.category()) == (__rhs.category())) && (__lhs.value() == __rhs.value()); 
# 316
} 
# 319
inline bool operator!=(const error_code &__lhs, const error_code &__rhs) noexcept 
# 320
{ return !((__lhs == __rhs)); } 
# 323
inline bool operator!=(const error_code &__lhs, const error_condition &__rhs) noexcept 
# 324
{ return !((__lhs == __rhs)); } 
# 327
inline bool operator!=(const error_condition &__lhs, const error_code &__rhs) noexcept 
# 328
{ return !((__lhs == __rhs)); } 
# 331
inline bool operator!=(const error_condition &__lhs, const error_condition &
# 332
__rhs) noexcept 
# 333
{ return !((__lhs == __rhs)); } 
# 341
class system_error : public runtime_error { 
# 344
error_code _M_code; 
# 347
public: system_error(error_code __ec = error_code()) : runtime_error(__ec.message()), _M_code(__ec) 
# 348
{ } 
# 350
system_error(error_code __ec, const __cxx11::string &__what) : runtime_error((((__what + (": "))) + (__ec.message()))), _M_code(__ec) 
# 351
{ } 
# 353
system_error(error_code __ec, const char *__what) : runtime_error((__what + (((": ") + (__ec.message()))))), _M_code(__ec) 
# 354
{ } 
# 356
system_error(int __v, const _V2::error_category &__ecat, const char *__what) : system_error(error_code(__v, __ecat), __what) 
# 357
{ } 
# 359
system_error(int __v, const _V2::error_category &__ecat) : runtime_error(error_code(__v, __ecat).message()), _M_code(__v, __ecat) 
# 361
{ } 
# 363
system_error(int __v, const _V2::error_category &__ecat, const __cxx11::string &__what) : runtime_error((((__what + (": "))) + (error_code(__v, __ecat).message()))), _M_code(__v, __ecat) 
# 365
{ } 
# 367
virtual ~system_error() noexcept; 
# 370
const error_code &code() const noexcept { return _M_code; } 
# 371
}; 
# 374
}
# 378
namespace std __attribute((__visibility__("default"))) { 
# 386
template<> struct hash< error_code>  : public __hash_base< unsigned long, error_code>  { 
# 390
size_t operator()(const error_code &__e) const noexcept 
# 391
{ 
# 392
const size_t __tmp = std::_Hash_impl::hash(__e._M_value); 
# 393
return std::_Hash_impl::__hash_combine(__e._M_cat, __tmp); 
# 394
} 
# 395
}; 
# 415 "/usr/include/c++/8/system_error" 3
}
# 49 "/usr/include/c++/8/bits/ios_base.h" 3
namespace std __attribute((__visibility__("default"))) { 
# 57
enum _Ios_Fmtflags { 
# 59
_S_boolalpha = 1, 
# 60
_S_dec, 
# 61
_S_fixed = 4, 
# 62
_S_hex = 8, 
# 63
_S_internal = 16, 
# 64
_S_left = 32, 
# 65
_S_oct = 64, 
# 66
_S_right = 128, 
# 67
_S_scientific = 256, 
# 68
_S_showbase = 512, 
# 69
_S_showpoint = 1024, 
# 70
_S_showpos = 2048, 
# 71
_S_skipws = 4096, 
# 72
_S_unitbuf = 8192, 
# 73
_S_uppercase = 16384, 
# 74
_S_adjustfield = 176, 
# 75
_S_basefield = 74, 
# 76
_S_floatfield = 260, 
# 77
_S_ios_fmtflags_end = 65536, 
# 78
_S_ios_fmtflags_max = 2147483647, 
# 79
_S_ios_fmtflags_min = (-2147483647-1)
# 80
}; 
# 83
constexpr _Ios_Fmtflags operator&(_Ios_Fmtflags __a, _Ios_Fmtflags __b) 
# 84
{ return (_Ios_Fmtflags)((static_cast< int>(__a)) & (static_cast< int>(__b))); } 
# 87
constexpr _Ios_Fmtflags operator|(_Ios_Fmtflags __a, _Ios_Fmtflags __b) 
# 88
{ return (_Ios_Fmtflags)((static_cast< int>(__a)) | (static_cast< int>(__b))); } 
# 91
constexpr _Ios_Fmtflags operator^(_Ios_Fmtflags __a, _Ios_Fmtflags __b) 
# 92
{ return (_Ios_Fmtflags)((static_cast< int>(__a)) ^ (static_cast< int>(__b))); } 
# 95
constexpr _Ios_Fmtflags operator~(_Ios_Fmtflags __a) 
# 96
{ return (_Ios_Fmtflags)(~(static_cast< int>(__a))); } 
# 99
inline const _Ios_Fmtflags &operator|=(_Ios_Fmtflags &__a, _Ios_Fmtflags __b) 
# 100
{ return __a = ((__a | __b)); } 
# 103
inline const _Ios_Fmtflags &operator&=(_Ios_Fmtflags &__a, _Ios_Fmtflags __b) 
# 104
{ return __a = ((__a & __b)); } 
# 107
inline const _Ios_Fmtflags &operator^=(_Ios_Fmtflags &__a, _Ios_Fmtflags __b) 
# 108
{ return __a = ((__a ^ __b)); } 
# 111
enum _Ios_Openmode { 
# 113
_S_app = 1, 
# 114
_S_ate, 
# 115
_S_bin = 4, 
# 116
_S_in = 8, 
# 117
_S_out = 16, 
# 118
_S_trunc = 32, 
# 119
_S_ios_openmode_end = 65536, 
# 120
_S_ios_openmode_max = 2147483647, 
# 121
_S_ios_openmode_min = (-2147483647-1)
# 122
}; 
# 125
constexpr _Ios_Openmode operator&(_Ios_Openmode __a, _Ios_Openmode __b) 
# 126
{ return (_Ios_Openmode)((static_cast< int>(__a)) & (static_cast< int>(__b))); } 
# 129
constexpr _Ios_Openmode operator|(_Ios_Openmode __a, _Ios_Openmode __b) 
# 130
{ return (_Ios_Openmode)((static_cast< int>(__a)) | (static_cast< int>(__b))); } 
# 133
constexpr _Ios_Openmode operator^(_Ios_Openmode __a, _Ios_Openmode __b) 
# 134
{ return (_Ios_Openmode)((static_cast< int>(__a)) ^ (static_cast< int>(__b))); } 
# 137
constexpr _Ios_Openmode operator~(_Ios_Openmode __a) 
# 138
{ return (_Ios_Openmode)(~(static_cast< int>(__a))); } 
# 141
inline const _Ios_Openmode &operator|=(_Ios_Openmode &__a, _Ios_Openmode __b) 
# 142
{ return __a = ((__a | __b)); } 
# 145
inline const _Ios_Openmode &operator&=(_Ios_Openmode &__a, _Ios_Openmode __b) 
# 146
{ return __a = ((__a & __b)); } 
# 149
inline const _Ios_Openmode &operator^=(_Ios_Openmode &__a, _Ios_Openmode __b) 
# 150
{ return __a = ((__a ^ __b)); } 
# 153
enum _Ios_Iostate { 
# 155
_S_goodbit, 
# 156
_S_badbit, 
# 157
_S_eofbit, 
# 158
_S_failbit = 4, 
# 159
_S_ios_iostate_end = 65536, 
# 160
_S_ios_iostate_max = 2147483647, 
# 161
_S_ios_iostate_min = (-2147483647-1)
# 162
}; 
# 165
constexpr _Ios_Iostate operator&(_Ios_Iostate __a, _Ios_Iostate __b) 
# 166
{ return (_Ios_Iostate)((static_cast< int>(__a)) & (static_cast< int>(__b))); } 
# 169
constexpr _Ios_Iostate operator|(_Ios_Iostate __a, _Ios_Iostate __b) 
# 170
{ return (_Ios_Iostate)((static_cast< int>(__a)) | (static_cast< int>(__b))); } 
# 173
constexpr _Ios_Iostate operator^(_Ios_Iostate __a, _Ios_Iostate __b) 
# 174
{ return (_Ios_Iostate)((static_cast< int>(__a)) ^ (static_cast< int>(__b))); } 
# 177
constexpr _Ios_Iostate operator~(_Ios_Iostate __a) 
# 178
{ return (_Ios_Iostate)(~(static_cast< int>(__a))); } 
# 181
inline const _Ios_Iostate &operator|=(_Ios_Iostate &__a, _Ios_Iostate __b) 
# 182
{ return __a = ((__a | __b)); } 
# 185
inline const _Ios_Iostate &operator&=(_Ios_Iostate &__a, _Ios_Iostate __b) 
# 186
{ return __a = ((__a & __b)); } 
# 189
inline const _Ios_Iostate &operator^=(_Ios_Iostate &__a, _Ios_Iostate __b) 
# 190
{ return __a = ((__a ^ __b)); } 
# 193
enum _Ios_Seekdir { 
# 195
_S_beg, 
# 196
_S_cur, 
# 197
_S_end, 
# 198
_S_ios_seekdir_end = 65536
# 199
}; 
# 203
enum class io_errc { stream = 1}; 
# 205
template<> struct is_error_code_enum< io_errc>  : public true_type { }; 
# 207
const _V2::error_category &iostream_category() noexcept; 
# 210
inline error_code make_error_code(io_errc __e) noexcept 
# 211
{ return error_code(static_cast< int>(__e), iostream_category()); } 
# 214
inline error_condition make_error_condition(io_errc __e) noexcept 
# 215
{ return error_condition(static_cast< int>(__e), iostream_category()); } 
# 228 "/usr/include/c++/8/bits/ios_base.h" 3
class ios_base { 
# 255 "/usr/include/c++/8/bits/ios_base.h" 3
public: class __attribute((__abi_tag__("cxx11"))) failure : public system_error { 
# 259
public: explicit failure(const __cxx11::string & __str); 
# 263
explicit failure(const __cxx11::string &, const error_code &); 
# 266
explicit failure(const char *, const error_code & = io_errc::stream); 
# 270
virtual ~failure() throw(); 
# 273
virtual const char *what() const throw(); 
# 274
}; 
# 323 "/usr/include/c++/8/bits/ios_base.h" 3
typedef _Ios_Fmtflags fmtflags; 
# 326
static const fmtflags boolalpha = _S_boolalpha; 
# 329
static const fmtflags dec = _S_dec; 
# 332
static const fmtflags fixed = _S_fixed; 
# 335
static const fmtflags hex = _S_hex; 
# 340
static const fmtflags internal = _S_internal; 
# 344
static const fmtflags left = _S_left; 
# 347
static const fmtflags oct = _S_oct; 
# 351
static const fmtflags right = _S_right; 
# 354
static const fmtflags scientific = _S_scientific; 
# 358
static const fmtflags showbase = _S_showbase; 
# 362
static const fmtflags showpoint = _S_showpoint; 
# 365
static const fmtflags showpos = _S_showpos; 
# 368
static const fmtflags skipws = _S_skipws; 
# 371
static const fmtflags unitbuf = _S_unitbuf; 
# 375
static const fmtflags uppercase = _S_uppercase; 
# 378
static const fmtflags adjustfield = _S_adjustfield; 
# 381
static const fmtflags basefield = _S_basefield; 
# 384
static const fmtflags floatfield = _S_floatfield; 
# 398 "/usr/include/c++/8/bits/ios_base.h" 3
typedef _Ios_Iostate iostate; 
# 402
static const iostate badbit = _S_badbit; 
# 405
static const iostate eofbit = _S_eofbit; 
# 410
static const iostate failbit = _S_failbit; 
# 413
static const iostate goodbit = _S_goodbit; 
# 429 "/usr/include/c++/8/bits/ios_base.h" 3
typedef _Ios_Openmode openmode; 
# 432
static const openmode app = _S_app; 
# 435
static const openmode ate = _S_ate; 
# 440
static const openmode binary = _S_bin; 
# 443
static const openmode in = _S_in; 
# 446
static const openmode out = _S_out; 
# 449
static const openmode trunc = _S_trunc; 
# 461 "/usr/include/c++/8/bits/ios_base.h" 3
typedef _Ios_Seekdir seekdir; 
# 464
static const seekdir beg = _S_beg; 
# 467
static const seekdir cur = _S_cur; 
# 470
static const seekdir end = _S_end; 
# 474
typedef int io_state; 
# 475
typedef int open_mode; 
# 476
typedef int seek_dir; 
# 478
typedef std::streampos streampos; 
# 479
typedef std::streamoff streamoff; 
# 489 "/usr/include/c++/8/bits/ios_base.h" 3
enum event { 
# 491
erase_event, 
# 492
imbue_event, 
# 493
copyfmt_event
# 494
}; 
# 506 "/usr/include/c++/8/bits/ios_base.h" 3
typedef void (*event_callback)(event __e, ios_base & __b, int __i); 
# 519 "/usr/include/c++/8/bits/ios_base.h" 3
void register_callback(event_callback __fn, int __index); 
# 522
protected: streamsize _M_precision; 
# 523
streamsize _M_width; 
# 524
fmtflags _M_flags; 
# 525
iostate _M_exception; 
# 526
iostate _M_streambuf_state; 
# 530
struct _Callback_list { 
# 533
_Callback_list *_M_next; 
# 534
event_callback _M_fn; 
# 535
int _M_index; 
# 536
_Atomic_word _M_refcount; 
# 538
_Callback_list(event_callback __fn, int __index, _Callback_list *
# 539
__cb) : _M_next(__cb), _M_fn(__fn), _M_index(__index), _M_refcount(0) 
# 540
{ } 
# 543
void _M_add_reference() { __gnu_cxx::__atomic_add_dispatch(&(_M_refcount), 1); } 
# 547
int _M_remove_reference() 
# 548
{ 
# 550
; 
# 551
int __res = __gnu_cxx::__exchange_and_add_dispatch(&(_M_refcount), -1); 
# 552
if (__res == 0) 
# 553
{ 
# 554
; 
# 555
}  
# 556
return __res; 
# 557
} 
# 558
}; 
# 560
_Callback_list *_M_callbacks; 
# 563
void _M_call_callbacks(event __ev) throw(); 
# 566
void _M_dispose_callbacks() throw(); 
# 569
struct _Words { 
# 571
void *_M_pword; 
# 572
long _M_iword; 
# 573
_Words() : _M_pword((0)), _M_iword((0)) { } 
# 574
}; 
# 577
_Words _M_word_zero; 
# 581
enum { _S_local_word_size = 8}; 
# 582
_Words _M_local_word[_S_local_word_size]; 
# 585
int _M_word_size; 
# 586
_Words *_M_word; 
# 589
_Words &_M_grow_words(int __index, bool __iword); 
# 592
locale _M_ios_locale; 
# 595
void _M_init() throw(); 
# 603
public: class Init { 
# 605
friend class ios_base; 
# 607
public: Init(); 
# 608
~Init(); 
# 611
private: static _Atomic_word _S_refcount; 
# 612
static bool _S_synced_with_stdio; 
# 613
}; 
# 621
fmtflags flags() const 
# 622
{ return _M_flags; } 
# 632 "/usr/include/c++/8/bits/ios_base.h" 3
fmtflags flags(fmtflags __fmtfl) 
# 633
{ 
# 634
fmtflags __old = _M_flags; 
# 635
(_M_flags) = __fmtfl; 
# 636
return __old; 
# 637
} 
# 648 "/usr/include/c++/8/bits/ios_base.h" 3
fmtflags setf(fmtflags __fmtfl) 
# 649
{ 
# 650
fmtflags __old = _M_flags; 
# 651
((_M_flags) |= __fmtfl); 
# 652
return __old; 
# 653
} 
# 665 "/usr/include/c++/8/bits/ios_base.h" 3
fmtflags setf(fmtflags __fmtfl, fmtflags __mask) 
# 666
{ 
# 667
fmtflags __old = _M_flags; 
# 668
((_M_flags) &= ((~__mask))); 
# 669
((_M_flags) |= ((__fmtfl & __mask))); 
# 670
return __old; 
# 671
} 
# 680
void unsetf(fmtflags __mask) 
# 681
{ ((_M_flags) &= ((~__mask))); } 
# 691 "/usr/include/c++/8/bits/ios_base.h" 3
streamsize precision() const 
# 692
{ return _M_precision; } 
# 700
streamsize precision(streamsize __prec) 
# 701
{ 
# 702
streamsize __old = _M_precision; 
# 703
(_M_precision) = __prec; 
# 704
return __old; 
# 705
} 
# 714
streamsize width() const 
# 715
{ return _M_width; } 
# 723
streamsize width(streamsize __wide) 
# 724
{ 
# 725
streamsize __old = _M_width; 
# 726
(_M_width) = __wide; 
# 727
return __old; 
# 728
} 
# 742 "/usr/include/c++/8/bits/ios_base.h" 3
static bool sync_with_stdio(bool __sync = true); 
# 754 "/usr/include/c++/8/bits/ios_base.h" 3
locale imbue(const locale & __loc) throw(); 
# 765 "/usr/include/c++/8/bits/ios_base.h" 3
locale getloc() const 
# 766
{ return _M_ios_locale; } 
# 776 "/usr/include/c++/8/bits/ios_base.h" 3
const locale &_M_getloc() const 
# 777
{ return _M_ios_locale; } 
# 795 "/usr/include/c++/8/bits/ios_base.h" 3
static int xalloc() throw(); 
# 811 "/usr/include/c++/8/bits/ios_base.h" 3
long &iword(int __ix) 
# 812
{ 
# 813
_Words &__word = (__ix < (_M_word_size)) ? (_M_word)[__ix] : this->_M_grow_words(__ix, true); 
# 815
return __word._M_iword; 
# 816
} 
# 832 "/usr/include/c++/8/bits/ios_base.h" 3
void *&pword(int __ix) 
# 833
{ 
# 834
_Words &__word = (__ix < (_M_word_size)) ? (_M_word)[__ix] : this->_M_grow_words(__ix, false); 
# 836
return __word._M_pword; 
# 837
} 
# 848 "/usr/include/c++/8/bits/ios_base.h" 3
virtual ~ios_base(); 
# 851
protected: ios_base() throw(); 
# 863 "/usr/include/c++/8/bits/ios_base.h" 3
public: ios_base(const ios_base &) = delete;
# 866
ios_base &operator=(const ios_base &) = delete;
# 870
protected: void _M_move(ios_base &) noexcept; 
# 873
void _M_swap(ios_base & __rhs) noexcept; 
# 875
}; 
# 880
inline ios_base &boolalpha(ios_base &__base) 
# 881
{ 
# 882
__base.setf(ios_base::boolalpha); 
# 883
return __base; 
# 884
} 
# 888
inline ios_base &noboolalpha(ios_base &__base) 
# 889
{ 
# 890
__base.unsetf(ios_base::boolalpha); 
# 891
return __base; 
# 892
} 
# 896
inline ios_base &showbase(ios_base &__base) 
# 897
{ 
# 898
__base.setf(ios_base::showbase); 
# 899
return __base; 
# 900
} 
# 904
inline ios_base &noshowbase(ios_base &__base) 
# 905
{ 
# 906
__base.unsetf(ios_base::showbase); 
# 907
return __base; 
# 908
} 
# 912
inline ios_base &showpoint(ios_base &__base) 
# 913
{ 
# 914
__base.setf(ios_base::showpoint); 
# 915
return __base; 
# 916
} 
# 920
inline ios_base &noshowpoint(ios_base &__base) 
# 921
{ 
# 922
__base.unsetf(ios_base::showpoint); 
# 923
return __base; 
# 924
} 
# 928
inline ios_base &showpos(ios_base &__base) 
# 929
{ 
# 930
__base.setf(ios_base::showpos); 
# 931
return __base; 
# 932
} 
# 936
inline ios_base &noshowpos(ios_base &__base) 
# 937
{ 
# 938
__base.unsetf(ios_base::showpos); 
# 939
return __base; 
# 940
} 
# 944
inline ios_base &skipws(ios_base &__base) 
# 945
{ 
# 946
__base.setf(ios_base::skipws); 
# 947
return __base; 
# 948
} 
# 952
inline ios_base &noskipws(ios_base &__base) 
# 953
{ 
# 954
__base.unsetf(ios_base::skipws); 
# 955
return __base; 
# 956
} 
# 960
inline ios_base &uppercase(ios_base &__base) 
# 961
{ 
# 962
__base.setf(ios_base::uppercase); 
# 963
return __base; 
# 964
} 
# 968
inline ios_base &nouppercase(ios_base &__base) 
# 969
{ 
# 970
__base.unsetf(ios_base::uppercase); 
# 971
return __base; 
# 972
} 
# 976
inline ios_base &unitbuf(ios_base &__base) 
# 977
{ 
# 978
__base.setf(ios_base::unitbuf); 
# 979
return __base; 
# 980
} 
# 984
inline ios_base &nounitbuf(ios_base &__base) 
# 985
{ 
# 986
__base.unsetf(ios_base::unitbuf); 
# 987
return __base; 
# 988
} 
# 993
inline ios_base &internal(ios_base &__base) 
# 994
{ 
# 995
__base.setf(ios_base::internal, ios_base::adjustfield); 
# 996
return __base; 
# 997
} 
# 1001
inline ios_base &left(ios_base &__base) 
# 1002
{ 
# 1003
__base.setf(ios_base::left, ios_base::adjustfield); 
# 1004
return __base; 
# 1005
} 
# 1009
inline ios_base &right(ios_base &__base) 
# 1010
{ 
# 1011
__base.setf(ios_base::right, ios_base::adjustfield); 
# 1012
return __base; 
# 1013
} 
# 1018
inline ios_base &dec(ios_base &__base) 
# 1019
{ 
# 1020
__base.setf(ios_base::dec, ios_base::basefield); 
# 1021
return __base; 
# 1022
} 
# 1026
inline ios_base &hex(ios_base &__base) 
# 1027
{ 
# 1028
__base.setf(ios_base::hex, ios_base::basefield); 
# 1029
return __base; 
# 1030
} 
# 1034
inline ios_base &oct(ios_base &__base) 
# 1035
{ 
# 1036
__base.setf(ios_base::oct, ios_base::basefield); 
# 1037
return __base; 
# 1038
} 
# 1043
inline ios_base &fixed(ios_base &__base) 
# 1044
{ 
# 1045
__base.setf(ios_base::fixed, ios_base::floatfield); 
# 1046
return __base; 
# 1047
} 
# 1051
inline ios_base &scientific(ios_base &__base) 
# 1052
{ 
# 1053
__base.setf(ios_base::scientific, ios_base::floatfield); 
# 1054
return __base; 
# 1055
} 
# 1063
inline ios_base &hexfloat(ios_base &__base) 
# 1064
{ 
# 1065
__base.setf((ios_base::fixed | ios_base::scientific), ios_base::floatfield); 
# 1066
return __base; 
# 1067
} 
# 1071
inline ios_base &defaultfloat(ios_base &__base) 
# 1072
{ 
# 1073
__base.unsetf(ios_base::floatfield); 
# 1074
return __base; 
# 1075
} 
# 1079
}
# 45 "/usr/include/c++/8/streambuf" 3
namespace std __attribute((__visibility__("default"))) { 
# 51
template< class _CharT, class _Traits> streamsize __copy_streambufs_eof(basic_streambuf< _CharT, _Traits>  *, basic_streambuf< _CharT, _Traits>  *, bool &); 
# 121 "/usr/include/c++/8/streambuf" 3
template< class _CharT, class _Traits> 
# 122
class basic_streambuf { 
# 131
public: typedef _CharT char_type; 
# 132
typedef _Traits traits_type; 
# 133
typedef typename _Traits::int_type int_type; 
# 134
typedef typename _Traits::pos_type pos_type; 
# 135
typedef typename _Traits::off_type off_type; 
# 140
typedef basic_streambuf __streambuf_type; 
# 143
friend class basic_ios< _CharT, _Traits> ; 
# 144
friend class basic_istream< _CharT, _Traits> ; 
# 145
friend class basic_ostream< _CharT, _Traits> ; 
# 146
friend class istreambuf_iterator< _CharT, _Traits> ; 
# 147
friend class ostreambuf_iterator< _CharT, _Traits> ; 
# 150
friend streamsize __copy_streambufs_eof<> (basic_streambuf *, basic_streambuf *, bool &); 
# 152
template< bool _IsMove, class _CharT2> friend typename __gnu_cxx::__enable_if< __is_char< _CharT2> ::__value, _CharT2 *> ::__type __copy_move_a2(istreambuf_iterator< _CharT2, char_traits< _CharT2> > , istreambuf_iterator< _CharT2, char_traits< _CharT2> > , _CharT2 *); 
# 158
template< class _CharT2> friend typename __gnu_cxx::__enable_if< __is_char< _CharT2> ::__value, istreambuf_iterator< _CharT2, char_traits< _CharT2> > > ::__type find(istreambuf_iterator< _CharT2, char_traits< _CharT2> > , istreambuf_iterator< _CharT2, char_traits< _CharT2> > , const _CharT2 &); 
# 164
template< class _CharT2, class _Distance> friend typename __gnu_cxx::__enable_if< __is_char< _CharT2> ::__value, void> ::__type advance(istreambuf_iterator< _CharT2, char_traits< _CharT2> >  &, _Distance); 
# 169
template< class _CharT2, class _Traits2> friend basic_istream< _CharT2, _Traits2>  &operator>>(basic_istream< _CharT2, _Traits2>  &, _CharT2 *); 
# 173
template< class _CharT2, class _Traits2, class _Alloc> friend basic_istream< _CharT2, _Traits2>  &operator>>(basic_istream< _CharT2, _Traits2>  &, __cxx11::basic_string< _CharT2, _Traits2, _Alloc>  &); 
# 178
template< class _CharT2, class _Traits2, class _Alloc> friend basic_istream< _CharT2, _Traits2>  &getline(basic_istream< _CharT2, _Traits2>  &, __cxx11::basic_string< _CharT2, _Traits2, _Alloc>  &, _CharT2); 
# 191
protected: char_type *_M_in_beg; 
# 192
char_type *_M_in_cur; 
# 193
char_type *_M_in_end; 
# 194
char_type *_M_out_beg; 
# 195
char_type *_M_out_cur; 
# 196
char_type *_M_out_end; 
# 199
locale _M_buf_locale; 
# 204
public: virtual ~basic_streambuf() 
# 205
{ } 
# 216 "/usr/include/c++/8/streambuf" 3
locale pubimbue(const locale &__loc) 
# 217
{ 
# 218
locale __tmp(getloc()); 
# 219
imbue(__loc); 
# 220
((_M_buf_locale) = __loc); 
# 221
return __tmp; 
# 222
} 
# 233 "/usr/include/c++/8/streambuf" 3
locale getloc() const 
# 234
{ return _M_buf_locale; } 
# 246 "/usr/include/c++/8/streambuf" 3
basic_streambuf *pubsetbuf(char_type *__s, streamsize __n) 
# 247
{ return setbuf(__s, __n); } 
# 258 "/usr/include/c++/8/streambuf" 3
pos_type pubseekoff(off_type __off, ios_base::seekdir __way, ios_base::openmode 
# 259
__mode = (ios_base::in | ios_base::out)) 
# 260
{ return seekoff(__off, __way, __mode); } 
# 270 "/usr/include/c++/8/streambuf" 3
pos_type pubseekpos(pos_type __sp, ios_base::openmode 
# 271
__mode = (ios_base::in | ios_base::out)) 
# 272
{ return seekpos(__sp, __mode); } 
# 278
int pubsync() { return sync(); } 
# 291 "/usr/include/c++/8/streambuf" 3
streamsize in_avail() 
# 292
{ 
# 293
const streamsize __ret = egptr() - gptr(); 
# 294
return (__ret) ? __ret : showmanyc(); 
# 295
} 
# 305 "/usr/include/c++/8/streambuf" 3
int_type snextc() 
# 306
{ 
# 307
int_type __ret = traits_type::eof(); 
# 308
if (__builtin_expect(!traits_type::eq_int_type(sbumpc(), __ret), true)) { 
# 310
__ret = sgetc(); }  
# 311
return __ret; 
# 312
} 
# 323 "/usr/include/c++/8/streambuf" 3
int_type sbumpc() 
# 324
{ 
# 325
int_type __ret; 
# 326
if (__builtin_expect(gptr() < egptr(), true)) 
# 327
{ 
# 328
__ret = traits_type::to_int_type(*gptr()); 
# 329
gbump(1); 
# 330
} else { 
# 332
__ret = uflow(); }  
# 333
return __ret; 
# 334
} 
# 345 "/usr/include/c++/8/streambuf" 3
int_type sgetc() 
# 346
{ 
# 347
int_type __ret; 
# 348
if (__builtin_expect(gptr() < egptr(), true)) { 
# 349
__ret = traits_type::to_int_type(*gptr()); } else { 
# 351
__ret = underflow(); }  
# 352
return __ret; 
# 353
} 
# 364 "/usr/include/c++/8/streambuf" 3
streamsize sgetn(char_type *__s, streamsize __n) 
# 365
{ return xsgetn(__s, __n); } 
# 379 "/usr/include/c++/8/streambuf" 3
int_type sputbackc(char_type __c) 
# 380
{ 
# 381
int_type __ret; 
# 382
const bool __testpos = eback() < gptr(); 
# 383
if (__builtin_expect((!__testpos) || (!traits_type::eq(__c, gptr()[-1])), false)) { 
# 385
__ret = pbackfail(traits_type::to_int_type(__c)); } else 
# 387
{ 
# 388
gbump(-1); 
# 389
__ret = traits_type::to_int_type(*gptr()); 
# 390
}  
# 391
return __ret; 
# 392
} 
# 404 "/usr/include/c++/8/streambuf" 3
int_type sungetc() 
# 405
{ 
# 406
int_type __ret; 
# 407
if (__builtin_expect(eback() < gptr(), true)) 
# 408
{ 
# 409
gbump(-1); 
# 410
__ret = traits_type::to_int_type(*gptr()); 
# 411
} else { 
# 413
__ret = pbackfail(); }  
# 414
return __ret; 
# 415
} 
# 431 "/usr/include/c++/8/streambuf" 3
int_type sputc(char_type __c) 
# 432
{ 
# 433
int_type __ret; 
# 434
if (__builtin_expect(pptr() < epptr(), true)) 
# 435
{ 
# 436
(*pptr()) = __c; 
# 437
pbump(1); 
# 438
__ret = traits_type::to_int_type(__c); 
# 439
} else { 
# 441
__ret = overflow(traits_type::to_int_type(__c)); }  
# 442
return __ret; 
# 443
} 
# 457 "/usr/include/c++/8/streambuf" 3
streamsize sputn(const char_type *__s, streamsize __n) 
# 458
{ return xsputn(__s, __n); } 
# 470 "/usr/include/c++/8/streambuf" 3
protected: basic_streambuf() : _M_in_beg((0)), _M_in_cur((0)), _M_in_end((0)), _M_out_beg((0)), _M_out_cur((0)), _M_out_end((0)), _M_buf_locale(locale()) 
# 474
{ } 
# 489 "/usr/include/c++/8/streambuf" 3
char_type *eback() const { return _M_in_beg; } 
# 492
char_type *gptr() const { return _M_in_cur; } 
# 495
char_type *egptr() const { return _M_in_end; } 
# 505 "/usr/include/c++/8/streambuf" 3
void gbump(int __n) { (_M_in_cur) += __n; } 
# 516 "/usr/include/c++/8/streambuf" 3
void setg(char_type *__gbeg, char_type *__gnext, char_type *__gend) 
# 517
{ 
# 518
(_M_in_beg) = __gbeg; 
# 519
(_M_in_cur) = __gnext; 
# 520
(_M_in_end) = __gend; 
# 521
} 
# 536 "/usr/include/c++/8/streambuf" 3
char_type *pbase() const { return _M_out_beg; } 
# 539
char_type *pptr() const { return _M_out_cur; } 
# 542
char_type *epptr() const { return _M_out_end; } 
# 552 "/usr/include/c++/8/streambuf" 3
void pbump(int __n) { (_M_out_cur) += __n; } 
# 562 "/usr/include/c++/8/streambuf" 3
void setp(char_type *__pbeg, char_type *__pend) 
# 563
{ 
# 564
(_M_out_beg) = ((_M_out_cur) = __pbeg); 
# 565
(_M_out_end) = __pend; 
# 566
} 
# 583 "/usr/include/c++/8/streambuf" 3
virtual void imbue(const locale &__loc __attribute((__unused__))) 
# 584
{ } 
# 598 "/usr/include/c++/8/streambuf" 3
virtual basic_streambuf *setbuf(char_type *, streamsize) 
# 599
{ return this; } 
# 609 "/usr/include/c++/8/streambuf" 3
virtual pos_type seekoff(off_type, ios_base::seekdir, ios_base::openmode = (ios_base::in | ios_base::out)) 
# 611
{ return (pos_type)((off_type)(-1)); } 
# 621 "/usr/include/c++/8/streambuf" 3
virtual pos_type seekpos(pos_type, ios_base::openmode = (ios_base::in | ios_base::out)) 
# 623
{ return (pos_type)((off_type)(-1)); } 
# 634 "/usr/include/c++/8/streambuf" 3
virtual int sync() { return 0; } 
# 656 "/usr/include/c++/8/streambuf" 3
virtual streamsize showmanyc() { return 0; } 
# 672 "/usr/include/c++/8/streambuf" 3
virtual streamsize xsgetn(char_type * __s, streamsize __n); 
# 694 "/usr/include/c++/8/streambuf" 3
virtual int_type underflow() 
# 695
{ return traits_type::eof(); } 
# 707 "/usr/include/c++/8/streambuf" 3
virtual int_type uflow() 
# 708
{ 
# 709
int_type __ret = traits_type::eof(); 
# 710
const bool __testeof = traits_type::eq_int_type(underflow(), __ret); 
# 712
if (!__testeof) 
# 713
{ 
# 714
__ret = traits_type::to_int_type(*gptr()); 
# 715
gbump(1); 
# 716
}  
# 717
return __ret; 
# 718
} 
# 731 "/usr/include/c++/8/streambuf" 3
virtual int_type pbackfail(int_type __c __attribute((__unused__)) = traits_type::eof()) 
# 732
{ return traits_type::eof(); } 
# 749 "/usr/include/c++/8/streambuf" 3
virtual streamsize xsputn(const char_type * __s, streamsize __n); 
# 775 "/usr/include/c++/8/streambuf" 3
virtual int_type overflow(int_type __c __attribute((__unused__)) = traits_type::eof()) 
# 776
{ return traits_type::eof(); } 
# 793 "/usr/include/c++/8/streambuf" 3
public: 
# 790
[[__deprecated__("stossc is deprecated, use sbumpc instead" )]] void 
# 793
stossc() 
# 794
{ 
# 795
if (gptr() < egptr()) { 
# 796
gbump(1); } else { 
# 798
uflow(); }  
# 799
} 
# 804
void __safe_gbump(streamsize __n) { (_M_in_cur) += __n; } 
# 807
void __safe_pbump(streamsize __n) { (_M_out_cur) += __n; } 
# 814
protected: basic_streambuf(const basic_streambuf &); 
# 817
basic_streambuf &operator=(const basic_streambuf &); 
# 821
void swap(basic_streambuf &__sb) 
# 822
{ 
# 823
std::swap(_M_in_beg, __sb._M_in_beg); 
# 824
std::swap(_M_in_cur, __sb._M_in_cur); 
# 825
std::swap(_M_in_end, __sb._M_in_end); 
# 826
std::swap(_M_out_beg, __sb._M_out_beg); 
# 827
std::swap(_M_out_cur, __sb._M_out_cur); 
# 828
std::swap(_M_out_end, __sb._M_out_end); 
# 829
std::swap(_M_buf_locale, __sb._M_buf_locale); 
# 830
} 
# 832
}; 
# 835
template < typename _CharT, typename _Traits >
    std :: basic_streambuf < _CharT, _Traits > ::
    basic_streambuf ( const basic_streambuf & ) = default;
# 839
template < typename _CharT, typename _Traits >
    std :: basic_streambuf < _CharT, _Traits > &
    std :: basic_streambuf < _CharT, _Traits > ::
    operator = ( const basic_streambuf & ) = default;
# 848
template<> streamsize __copy_streambufs_eof(basic_streambuf< char, char_traits< char> >  * __sbin, basic_streambuf< char, char_traits< char> >  * __sbout, bool & __ineof); 
# 853
template<> streamsize __copy_streambufs_eof(basic_streambuf< wchar_t, char_traits< wchar_t> >  * __sbin, basic_streambuf< wchar_t, char_traits< wchar_t> >  * __sbout, bool & __ineof); 
# 860
}
# 39 "/usr/include/c++/8/bits/streambuf.tcc" 3
namespace std __attribute((__visibility__("default"))) { 
# 43
template< class _CharT, class _Traits> streamsize 
# 46
basic_streambuf< _CharT, _Traits> ::xsgetn(char_type *__s, streamsize __n) 
# 47
{ 
# 48
streamsize __ret = (0); 
# 49
while (__ret < __n) 
# 50
{ 
# 51
const streamsize __buf_len = egptr() - gptr(); 
# 52
if (__buf_len) 
# 53
{ 
# 54
const streamsize __remaining = __n - __ret; 
# 55
const streamsize __len = std::min(__buf_len, __remaining); 
# 56
traits_type::copy(__s, gptr(), __len); 
# 57
__ret += __len; 
# 58
__s += __len; 
# 59
__safe_gbump(__len); 
# 60
}  
# 62
if (__ret < __n) 
# 63
{ 
# 64
const int_type __c = uflow(); 
# 65
if (!traits_type::eq_int_type(__c, traits_type::eof())) 
# 66
{ 
# 67
traits_type::assign(*(__s++), traits_type::to_char_type(__c)); 
# 68
++__ret; 
# 69
} else { 
# 71
break; }  
# 72
}  
# 73
}  
# 74
return __ret; 
# 75
} 
# 77
template< class _CharT, class _Traits> streamsize 
# 80
basic_streambuf< _CharT, _Traits> ::xsputn(const char_type *__s, streamsize __n) 
# 81
{ 
# 82
streamsize __ret = (0); 
# 83
while (__ret < __n) 
# 84
{ 
# 85
const streamsize __buf_len = epptr() - pptr(); 
# 86
if (__buf_len) 
# 87
{ 
# 88
const streamsize __remaining = __n - __ret; 
# 89
const streamsize __len = std::min(__buf_len, __remaining); 
# 90
traits_type::copy(pptr(), __s, __len); 
# 91
__ret += __len; 
# 92
__s += __len; 
# 93
__safe_pbump(__len); 
# 94
}  
# 96
if (__ret < __n) 
# 97
{ 
# 98
int_type __c = overflow(traits_type::to_int_type(*__s)); 
# 99
if (!traits_type::eq_int_type(__c, traits_type::eof())) 
# 100
{ 
# 101
++__ret; 
# 102
++__s; 
# 103
} else { 
# 105
break; }  
# 106
}  
# 107
}  
# 108
return __ret; 
# 109
} 
# 114
template< class _CharT, class _Traits> streamsize 
# 116
__copy_streambufs_eof(basic_streambuf< _CharT, _Traits>  *__sbin, basic_streambuf< _CharT, _Traits>  *
# 117
__sbout, bool &
# 118
__ineof) 
# 119
{ 
# 120
streamsize __ret = (0); 
# 121
__ineof = true; 
# 122
typename _Traits::int_type __c = (__sbin->sgetc()); 
# 123
while (!_Traits::eq_int_type(__c, _Traits::eof())) 
# 124
{ 
# 125
__c = (__sbout->sputc(_Traits::to_char_type(__c))); 
# 126
if (_Traits::eq_int_type(__c, _Traits::eof())) 
# 127
{ 
# 128
__ineof = false; 
# 129
break; 
# 130
}  
# 131
++__ret; 
# 132
__c = (__sbin->snextc()); 
# 133
}  
# 134
return __ret; 
# 135
} 
# 137
template< class _CharT, class _Traits> inline streamsize 
# 139
__copy_streambufs(basic_streambuf< _CharT, _Traits>  *__sbin, basic_streambuf< _CharT, _Traits>  *
# 140
__sbout) 
# 141
{ 
# 142
bool __ineof; 
# 143
return __copy_streambufs_eof(__sbin, __sbout, __ineof); 
# 144
} 
# 149
extern template class basic_streambuf< char, char_traits< char> > ;
# 150
extern template streamsize __copy_streambufs(basic_streambuf< char, char_traits< char> >  * __sbin, basic_streambuf< char, char_traits< char> >  * __sbout);
# 154
extern template streamsize __copy_streambufs_eof< char, char_traits< char> > (basic_streambuf< char, char_traits< char> >  *, basic_streambuf< char, char_traits< char> >  *, bool &);
# 160
extern template class basic_streambuf< wchar_t, char_traits< wchar_t> > ;
# 161
extern template streamsize __copy_streambufs(basic_streambuf< wchar_t, char_traits< wchar_t> >  * __sbin, basic_streambuf< wchar_t, char_traits< wchar_t> >  * __sbout);
# 165
extern template streamsize __copy_streambufs_eof< wchar_t, char_traits< wchar_t> > (basic_streambuf< wchar_t, char_traits< wchar_t> >  *, basic_streambuf< wchar_t, char_traits< wchar_t> >  *, bool &);
# 173
}
# 38 "/usr/include/x86_64-linux-gnu/bits/wctype-wchar.h" 3
typedef unsigned long wctype_t; 
# 57 "/usr/include/x86_64-linux-gnu/bits/wctype-wchar.h" 3
enum { 
# 58
__ISwupper, 
# 59
__ISwlower, 
# 60
__ISwalpha, 
# 61
__ISwdigit, 
# 62
__ISwxdigit, 
# 63
__ISwspace, 
# 64
__ISwprint, 
# 65
__ISwgraph, 
# 66
__ISwblank, 
# 67
__ISwcntrl, 
# 68
__ISwpunct, 
# 69
__ISwalnum, 
# 71
_ISwupper = 16777216, 
# 72
_ISwlower = 33554432, 
# 73
_ISwalpha = 67108864, 
# 74
_ISwdigit = 134217728, 
# 75
_ISwxdigit = 268435456, 
# 76
_ISwspace = 536870912, 
# 77
_ISwprint = 1073741824, 
# 78
_ISwgraph = (-2147483647-1), 
# 79
_ISwblank = 65536, 
# 80
_ISwcntrl = 131072, 
# 81
_ISwpunct = 262144, 
# 82
_ISwalnum = 524288
# 83
}; 
# 87
extern "C" {
# 95
extern int iswalnum(wint_t __wc) throw(); 
# 101
extern int iswalpha(wint_t __wc) throw(); 
# 104
extern int iswcntrl(wint_t __wc) throw(); 
# 108
extern int iswdigit(wint_t __wc) throw(); 
# 112
extern int iswgraph(wint_t __wc) throw(); 
# 117
extern int iswlower(wint_t __wc) throw(); 
# 120
extern int iswprint(wint_t __wc) throw(); 
# 125
extern int iswpunct(wint_t __wc) throw(); 
# 130
extern int iswspace(wint_t __wc) throw(); 
# 135
extern int iswupper(wint_t __wc) throw(); 
# 140
extern int iswxdigit(wint_t __wc) throw(); 
# 146
extern int iswblank(wint_t __wc) throw(); 
# 155 "/usr/include/x86_64-linux-gnu/bits/wctype-wchar.h" 3
extern wctype_t wctype(const char * __property) throw(); 
# 159
extern int iswctype(wint_t __wc, wctype_t __desc) throw(); 
# 166
extern wint_t towlower(wint_t __wc) throw(); 
# 169
extern wint_t towupper(wint_t __wc) throw(); 
# 171
}
# 44 "/usr/include/wctype.h" 3
extern "C" {
# 48
typedef const __int32_t *wctrans_t; 
# 52
extern wctrans_t wctrans(const char * __property) throw(); 
# 55
extern wint_t towctrans(wint_t __wc, wctrans_t __desc) throw(); 
# 63
extern int iswalnum_l(wint_t __wc, locale_t __locale) throw(); 
# 69
extern int iswalpha_l(wint_t __wc, locale_t __locale) throw(); 
# 72
extern int iswcntrl_l(wint_t __wc, locale_t __locale) throw(); 
# 76
extern int iswdigit_l(wint_t __wc, locale_t __locale) throw(); 
# 80
extern int iswgraph_l(wint_t __wc, locale_t __locale) throw(); 
# 85
extern int iswlower_l(wint_t __wc, locale_t __locale) throw(); 
# 88
extern int iswprint_l(wint_t __wc, locale_t __locale) throw(); 
# 93
extern int iswpunct_l(wint_t __wc, locale_t __locale) throw(); 
# 98
extern int iswspace_l(wint_t __wc, locale_t __locale) throw(); 
# 103
extern int iswupper_l(wint_t __wc, locale_t __locale) throw(); 
# 108
extern int iswxdigit_l(wint_t __wc, locale_t __locale) throw(); 
# 113
extern int iswblank_l(wint_t __wc, locale_t __locale) throw(); 
# 117
extern wctype_t wctype_l(const char * __property, locale_t __locale) throw(); 
# 122
extern int iswctype_l(wint_t __wc, wctype_t __desc, locale_t __locale) throw(); 
# 130
extern wint_t towlower_l(wint_t __wc, locale_t __locale) throw(); 
# 133
extern wint_t towupper_l(wint_t __wc, locale_t __locale) throw(); 
# 137
extern wctrans_t wctrans_l(const char * __property, locale_t __locale) throw(); 
# 141
extern wint_t towctrans_l(wint_t __wc, wctrans_t __desc, locale_t __locale) throw(); 
# 146
}
# 80 "/usr/include/c++/8/cwctype" 3
namespace std { 
# 82
using ::wctrans_t;
# 83
using ::wctype_t;
# 86
using ::iswalnum;
# 87
using ::iswalpha;
# 89
using ::iswblank;
# 91
using ::iswcntrl;
# 92
using ::iswctype;
# 93
using ::iswdigit;
# 94
using ::iswgraph;
# 95
using ::iswlower;
# 96
using ::iswprint;
# 97
using ::iswpunct;
# 98
using ::iswspace;
# 99
using ::iswupper;
# 100
using ::iswxdigit;
# 101
using ::towctrans;
# 102
using ::towlower;
# 103
using ::towupper;
# 104
using ::wctrans;
# 105
using ::wctype;
# 106
}
# 36 "/usr/include/x86_64-linux-gnu/c++/8/bits/ctype_base.h" 3
namespace std __attribute((__visibility__("default"))) { 
# 41
struct ctype_base { 
# 44
typedef const int *__to_type; 
# 48
typedef unsigned short mask; 
# 49
static const mask upper = (_ISupper); 
# 50
static const mask lower = (_ISlower); 
# 51
static const mask alpha = (_ISalpha); 
# 52
static const mask digit = (_ISdigit); 
# 53
static const mask xdigit = (_ISxdigit); 
# 54
static const mask space = (_ISspace); 
# 55
static const mask print = (_ISprint); 
# 56
static const mask graph = (((_ISalpha) | (_ISdigit)) | (_ISpunct)); 
# 57
static const mask cntrl = (_IScntrl); 
# 58
static const mask punct = (_ISpunct); 
# 59
static const mask alnum = ((_ISalpha) | (_ISdigit)); 
# 61
static const mask blank = (_ISblank); 
# 63
}; 
# 66
}
# 38 "/usr/include/c++/8/bits/streambuf_iterator.h" 3
namespace std __attribute((__visibility__("default"))) { 
# 49 "/usr/include/c++/8/bits/streambuf_iterator.h" 3
template< class _CharT, class _Traits> 
# 50
class istreambuf_iterator : public iterator< input_iterator_tag, _CharT, typename _Traits::off_type, _CharT *, _CharT>  { 
# 64
public: typedef _CharT char_type; 
# 65
typedef _Traits traits_type; 
# 66
typedef typename _Traits::int_type int_type; 
# 67
typedef basic_streambuf< _CharT, _Traits>  streambuf_type; 
# 68
typedef basic_istream< _CharT, _Traits>  istream_type; 
# 71
template< class _CharT2> friend typename __gnu_cxx::__enable_if< __is_char< _CharT2> ::__value, ostreambuf_iterator< _CharT2, char_traits< _CharT2> > > ::__type copy(std::istreambuf_iterator< _CharT2, char_traits< _CharT2> > , std::istreambuf_iterator< _CharT2, char_traits< _CharT2> > , ostreambuf_iterator< _CharT2, char_traits< _CharT2> > ); 
# 77
template< bool _IsMove, class _CharT2> friend typename __gnu_cxx::__enable_if< __is_char< _CharT2> ::__value, _CharT2 *> ::__type __copy_move_a2(std::istreambuf_iterator< _CharT2, char_traits< _CharT2> > , std::istreambuf_iterator< _CharT2, char_traits< _CharT2> > , _CharT2 *); 
# 83
template< class _CharT2> friend typename __gnu_cxx::__enable_if< __is_char< _CharT2> ::__value, std::istreambuf_iterator< _CharT2, char_traits< _CharT2> > > ::__type find(std::istreambuf_iterator< _CharT2, char_traits< _CharT2> > , std::istreambuf_iterator< _CharT2, char_traits< _CharT2> > , const _CharT2 &); 
# 89
template< class _CharT2, class _Distance> friend typename __gnu_cxx::__enable_if< __is_char< _CharT2> ::__value, void> ::__type advance(std::istreambuf_iterator< _CharT2, char_traits< _CharT2> >  &, _Distance); 
# 102
private: mutable streambuf_type *_M_sbuf; 
# 103
int_type _M_c; 
# 107
public: constexpr istreambuf_iterator() noexcept : _M_sbuf((0)), _M_c(traits_type::eof()) 
# 108
{ } 
# 111
istreambuf_iterator(const istreambuf_iterator &) noexcept = default;
# 113
~istreambuf_iterator() = default;
# 117
istreambuf_iterator(istream_type &__s) noexcept : _M_sbuf((__s.rdbuf())), _M_c(traits_type::eof()) 
# 118
{ } 
# 121
istreambuf_iterator(streambuf_type *__s) noexcept : _M_sbuf(__s), _M_c(traits_type::eof()) 
# 122
{ } 
# 128
char_type operator*() const 
# 129
{ 
# 130
int_type __c = _M_get(); 
# 139 "/usr/include/c++/8/bits/streambuf_iterator.h" 3
return traits_type::to_char_type(__c); 
# 140
} 
# 144
istreambuf_iterator &operator++() 
# 145
{ 
# 149
; 
# 151
((_M_sbuf)->sbumpc()); 
# 152
(_M_c) = traits_type::eof(); 
# 153
return *this; 
# 154
} 
# 158
istreambuf_iterator operator++(int) 
# 159
{ 
# 163
; 
# 165
istreambuf_iterator __old = *this; 
# 166
(__old._M_c) = ((_M_sbuf)->sbumpc()); 
# 167
(_M_c) = traits_type::eof(); 
# 168
return __old; 
# 169
} 
# 176
bool equal(const istreambuf_iterator &__b) const 
# 177
{ return _M_at_eof() == __b._M_at_eof(); } 
# 181
private: int_type _M_get() const 
# 182
{ 
# 183
int_type __ret = _M_c; 
# 184
if ((_M_sbuf) && (_S_is_eof)(__ret) && (_S_is_eof)(__ret = ((_M_sbuf)->sgetc()))) { 
# 185
(_M_sbuf) = 0; }  
# 186
return __ret; 
# 187
} 
# 190
bool _M_at_eof() const 
# 191
{ return (_S_is_eof)(_M_get()); } 
# 194
static bool _S_is_eof(int_type __c) 
# 195
{ 
# 196
const int_type __eof = traits_type::eof(); 
# 197
return traits_type::eq_int_type(__c, __eof); 
# 198
} 
# 199
}; 
# 201
template< class _CharT, class _Traits> inline bool 
# 203
operator==(const istreambuf_iterator< _CharT, _Traits>  &__a, const istreambuf_iterator< _CharT, _Traits>  &
# 204
__b) 
# 205
{ return (__a.equal(__b)); } 
# 207
template< class _CharT, class _Traits> inline bool 
# 209
operator!=(const istreambuf_iterator< _CharT, _Traits>  &__a, const istreambuf_iterator< _CharT, _Traits>  &
# 210
__b) 
# 211
{ return !(__a.equal(__b)); } 
# 214
template< class _CharT, class _Traits> 
# 215
class ostreambuf_iterator : public iterator< output_iterator_tag, void, void, void, void>  { 
# 222
public: typedef _CharT char_type; 
# 223
typedef _Traits traits_type; 
# 224
typedef basic_streambuf< _CharT, _Traits>  streambuf_type; 
# 225
typedef basic_ostream< _CharT, _Traits>  ostream_type; 
# 228
template< class _CharT2> friend typename __gnu_cxx::__enable_if< __is_char< _CharT2> ::__value, std::ostreambuf_iterator< _CharT2, char_traits< _CharT2> > > ::__type copy(istreambuf_iterator< _CharT2, char_traits< _CharT2> > , istreambuf_iterator< _CharT2, char_traits< _CharT2> > , std::ostreambuf_iterator< _CharT2, char_traits< _CharT2> > ); 
# 235
private: streambuf_type *_M_sbuf; 
# 236
bool _M_failed; 
# 240
public: ostreambuf_iterator(ostream_type &__s) noexcept : _M_sbuf((__s.rdbuf())), _M_failed((!(_M_sbuf))) 
# 241
{ } 
# 244
ostreambuf_iterator(streambuf_type *__s) noexcept : _M_sbuf(__s), _M_failed((!(_M_sbuf))) 
# 245
{ } 
# 249
ostreambuf_iterator &operator=(_CharT __c) 
# 250
{ 
# 251
if ((!(_M_failed)) && _Traits::eq_int_type(((_M_sbuf)->sputc(__c)), _Traits::eof())) { 
# 253
(_M_failed) = true; }  
# 254
return *this; 
# 255
} 
# 259
ostreambuf_iterator &operator*() 
# 260
{ return *this; } 
# 264
ostreambuf_iterator &operator++(int) 
# 265
{ return *this; } 
# 269
ostreambuf_iterator &operator++() 
# 270
{ return *this; } 
# 274
bool failed() const noexcept 
# 275
{ return _M_failed; } 
# 278
ostreambuf_iterator &_M_put(const _CharT *__ws, streamsize __len) 
# 279
{ 
# 280
if ((__builtin_expect(!(_M_failed), true)) && (__builtin_expect(((this->_M_sbuf)->sputn(__ws, __len)) != __len, false))) { 
# 283
(_M_failed) = true; }  
# 284
return *this; 
# 285
} 
# 286
}; 
# 289
template< class _CharT> typename __gnu_cxx::__enable_if< __is_char< _CharT> ::__value, ostreambuf_iterator< _CharT, char_traits< _CharT> > > ::__type 
# 292
copy(istreambuf_iterator< _CharT, char_traits< _CharT> >  __first, istreambuf_iterator< _CharT, char_traits< _CharT> >  
# 293
__last, ostreambuf_iterator< _CharT, char_traits< _CharT> >  
# 294
__result) 
# 295
{ 
# 296
if ((__first._M_sbuf) && (!(__last._M_sbuf)) && (!(__result._M_failed))) 
# 297
{ 
# 298
bool __ineof; 
# 299
__copy_streambufs_eof((__first._M_sbuf), (__result._M_sbuf), __ineof); 
# 300
if (!__ineof) { 
# 301
(__result._M_failed) = true; }  
# 302
}  
# 303
return __result; 
# 304
} 
# 306
template< bool _IsMove, class _CharT> typename __gnu_cxx::__enable_if< __is_char< _CharT> ::__value, ostreambuf_iterator< _CharT, char_traits< _CharT> > > ::__type 
# 309
__copy_move_a2(_CharT *__first, _CharT *__last, ostreambuf_iterator< _CharT, char_traits< _CharT> >  
# 310
__result) 
# 311
{ 
# 312
const streamsize __num = __last - __first; 
# 313
if (__num > (0)) { 
# 314
(__result._M_put(__first, __num)); }  
# 315
return __result; 
# 316
} 
# 318
template< bool _IsMove, class _CharT> typename __gnu_cxx::__enable_if< __is_char< _CharT> ::__value, ostreambuf_iterator< _CharT, char_traits< _CharT> > > ::__type 
# 321
__copy_move_a2(const _CharT *__first, const _CharT *__last, ostreambuf_iterator< _CharT, char_traits< _CharT> >  
# 322
__result) 
# 323
{ 
# 324
const streamsize __num = __last - __first; 
# 325
if (__num > (0)) { 
# 326
(__result._M_put(__first, __num)); }  
# 327
return __result; 
# 328
} 
# 330
template< bool _IsMove, class _CharT> typename __gnu_cxx::__enable_if< __is_char< _CharT> ::__value, _CharT *> ::__type 
# 333
__copy_move_a2(istreambuf_iterator< _CharT, char_traits< _CharT> >  __first, istreambuf_iterator< _CharT, char_traits< _CharT> >  
# 334
__last, _CharT *__result) 
# 335
{ 
# 336
typedef istreambuf_iterator< _CharT, char_traits< _CharT> >  __is_iterator_type; 
# 337
typedef typename istreambuf_iterator< _CharT, char_traits< _CharT> > ::traits_type traits_type; 
# 338
typedef typename istreambuf_iterator< _CharT, char_traits< _CharT> > ::streambuf_type streambuf_type; 
# 339
typedef typename istreambuf_iterator< _CharT, char_traits< _CharT> > ::traits_type::int_type int_type; 
# 341
if ((__first._M_sbuf) && (!(__last._M_sbuf))) 
# 342
{ 
# 343
streambuf_type *__sb = ((__first._M_sbuf)); 
# 344
int_type __c = (__sb->sgetc()); 
# 345
while (!traits_type::eq_int_type(__c, traits_type::eof())) 
# 346
{ 
# 347
const streamsize __n = (__sb->egptr()) - (__sb->gptr()); 
# 348
if (__n > (1)) 
# 349
{ 
# 350
traits_type::copy(__result, (__sb->gptr()), __n); 
# 351
(__sb->__safe_gbump(__n)); 
# 352
__result += __n; 
# 353
__c = (__sb->underflow()); 
# 354
} else 
# 356
{ 
# 357
(*(__result++)) = traits_type::to_char_type(__c); 
# 358
__c = (__sb->snextc()); 
# 359
}  
# 360
}  
# 361
}  
# 362
return __result; 
# 363
} 
# 365
template< class _CharT> typename __gnu_cxx::__enable_if< __is_char< _CharT> ::__value, istreambuf_iterator< _CharT, char_traits< _CharT> > > ::__type 
# 368
find(istreambuf_iterator< _CharT, char_traits< _CharT> >  __first, istreambuf_iterator< _CharT, char_traits< _CharT> >  
# 369
__last, const _CharT &__val) 
# 370
{ 
# 371
typedef istreambuf_iterator< _CharT, char_traits< _CharT> >  __is_iterator_type; 
# 372
typedef typename istreambuf_iterator< _CharT, char_traits< _CharT> > ::traits_type traits_type; 
# 373
typedef typename istreambuf_iterator< _CharT, char_traits< _CharT> > ::streambuf_type streambuf_type; 
# 374
typedef typename istreambuf_iterator< _CharT, char_traits< _CharT> > ::traits_type::int_type int_type; 
# 375
const int_type __eof = traits_type::eof(); 
# 377
if ((__first._M_sbuf) && (!(__last._M_sbuf))) 
# 378
{ 
# 379
const int_type __ival = traits_type::to_int_type(__val); 
# 380
streambuf_type *__sb = ((__first._M_sbuf)); 
# 381
int_type __c = (__sb->sgetc()); 
# 382
while ((!traits_type::eq_int_type(__c, __eof)) && (!traits_type::eq_int_type(__c, __ival))) 
# 384
{ 
# 385
streamsize __n = (__sb->egptr()) - (__sb->gptr()); 
# 386
if (__n > (1)) 
# 387
{ 
# 388
const _CharT *__p = traits_type::find((__sb->gptr()), __n, __val); 
# 390
if (__p) { 
# 391
__n = (__p - (__sb->gptr())); }  
# 392
(__sb->__safe_gbump(__n)); 
# 393
__c = (__sb->sgetc()); 
# 394
} else { 
# 396
__c = (__sb->snextc()); }  
# 397
}  
# 399
(__first._M_c) = __eof; 
# 400
}  
# 402
return __first; 
# 403
} 
# 405
template< class _CharT, class _Distance> typename __gnu_cxx::__enable_if< __is_char< _CharT> ::__value, void> ::__type 
# 408
advance(istreambuf_iterator< _CharT, char_traits< _CharT> >  &__i, _Distance __n) 
# 409
{ 
# 410
if (__n == 0) { 
# 411
return; }  
# 413
; 
# 416
; 
# 418
typedef istreambuf_iterator< _CharT, char_traits< _CharT> >  __is_iterator_type; 
# 419
typedef typename istreambuf_iterator< _CharT, char_traits< _CharT> > ::traits_type traits_type; 
# 420
typedef typename istreambuf_iterator< _CharT, char_traits< _CharT> > ::streambuf_type streambuf_type; 
# 421
typedef typename istreambuf_iterator< _CharT, char_traits< _CharT> > ::traits_type::int_type int_type; 
# 422
const int_type __eof = traits_type::eof(); 
# 424
streambuf_type *__sb = ((__i._M_sbuf)); 
# 425
while (__n > 0) 
# 426
{ 
# 427
streamsize __size = (__sb->egptr()) - (__sb->gptr()); 
# 428
if (__size > __n) 
# 429
{ 
# 430
(__sb->__safe_gbump(__n)); 
# 431
break; 
# 432
}  
# 434
(__sb->__safe_gbump(__size)); 
# 435
__n -= __size; 
# 436
if (traits_type::eq_int_type((__sb->underflow()), __eof)) 
# 437
{ 
# 440
; 
# 441
break; 
# 442
}  
# 443
}  
# 445
(__i._M_c) = __eof; 
# 446
} 
# 451
}
# 50 "/usr/include/c++/8/bits/locale_facets.h" 3
namespace std __attribute((__visibility__("default"))) { 
# 71 "/usr/include/c++/8/bits/locale_facets.h" 3
template< class _Tp> void __convert_to_v(const char *, _Tp &, ios_base::iostate &, const __c_locale &) throw(); 
# 79
template<> void __convert_to_v(const char *, float &, ios_base::iostate &, const __c_locale &) throw(); 
# 84
template<> void __convert_to_v(const char *, double &, ios_base::iostate &, const __c_locale &) throw(); 
# 89
template<> void __convert_to_v(const char *, long double &, ios_base::iostate &, const __c_locale &) throw(); 
# 94
template< class _CharT, class _Traits> 
# 95
struct __pad { 
# 98
static void _S_pad(ios_base & __io, _CharT __fill, _CharT * __news, const _CharT * __olds, streamsize __newlen, streamsize __oldlen); 
# 100
}; 
# 107
template< class _CharT> _CharT *__add_grouping(_CharT * __s, _CharT __sep, const char * __gbeg, size_t __gsize, const _CharT * __first, const _CharT * __last); 
# 116
template< class _CharT> inline ostreambuf_iterator< _CharT, char_traits< _CharT> >  
# 119
__write(ostreambuf_iterator< _CharT, char_traits< _CharT> >  __s, const _CharT *__ws, int __len) 
# 120
{ 
# 121
(__s._M_put(__ws, __len)); 
# 122
return __s; 
# 123
} 
# 126
template< class _CharT, class _OutIter> inline _OutIter 
# 129
__write(_OutIter __s, const _CharT *__ws, int __len) 
# 130
{ 
# 131
for (int __j = 0; __j < __len; (__j++), (++__s)) { 
# 132
(*__s) = (__ws[__j]); }  
# 133
return __s; 
# 134
} 
# 149 "/usr/include/c++/8/bits/locale_facets.h" 3
template< class _CharT> 
# 150
class __ctype_abstract_base : public locale::facet, public ctype_base { 
# 155
public: typedef _CharT char_type; 
# 169 "/usr/include/c++/8/bits/locale_facets.h" 3
bool is(mask __m, char_type __c) const 
# 170
{ return (this->do_is(__m, __c)); } 
# 186 "/usr/include/c++/8/bits/locale_facets.h" 3
const char_type *is(const char_type *__lo, const char_type *__hi, mask *__vec) const 
# 187
{ return (this->do_is(__lo, __hi, __vec)); } 
# 202 "/usr/include/c++/8/bits/locale_facets.h" 3
const char_type *scan_is(mask __m, const char_type *__lo, const char_type *__hi) const 
# 203
{ return do_scan_is(__m, __lo, __hi); } 
# 218 "/usr/include/c++/8/bits/locale_facets.h" 3
const char_type *scan_not(mask __m, const char_type *__lo, const char_type *__hi) const 
# 219
{ return do_scan_not(__m, __lo, __hi); } 
# 232 "/usr/include/c++/8/bits/locale_facets.h" 3
char_type toupper(char_type __c) const 
# 233
{ return (this->do_toupper(__c)); } 
# 247 "/usr/include/c++/8/bits/locale_facets.h" 3
const char_type *toupper(char_type *__lo, const char_type *__hi) const 
# 248
{ return (this->do_toupper(__lo, __hi)); } 
# 261 "/usr/include/c++/8/bits/locale_facets.h" 3
char_type tolower(char_type __c) const 
# 262
{ return (this->do_tolower(__c)); } 
# 276 "/usr/include/c++/8/bits/locale_facets.h" 3
const char_type *tolower(char_type *__lo, const char_type *__hi) const 
# 277
{ return (this->do_tolower(__lo, __hi)); } 
# 293 "/usr/include/c++/8/bits/locale_facets.h" 3
char_type widen(char __c) const 
# 294
{ return (this->do_widen(__c)); } 
# 312 "/usr/include/c++/8/bits/locale_facets.h" 3
const char *widen(const char *__lo, const char *__hi, char_type *__to) const 
# 313
{ return (this->do_widen(__lo, __hi, __to)); } 
# 331 "/usr/include/c++/8/bits/locale_facets.h" 3
char narrow(char_type __c, char __dfault) const 
# 332
{ return (this->do_narrow(__c, __dfault)); } 
# 353 "/usr/include/c++/8/bits/locale_facets.h" 3
const char_type *narrow(const char_type *__lo, const char_type *__hi, char 
# 354
__dfault, char *__to) const 
# 355
{ return (this->do_narrow(__lo, __hi, __dfault, __to)); } 
# 359
protected: explicit __ctype_abstract_base(size_t __refs = 0) : locale::facet(__refs) { } 
# 362
virtual ~__ctype_abstract_base() { } 
# 378 "/usr/include/c++/8/bits/locale_facets.h" 3
virtual bool do_is(mask __m, char_type __c) const = 0; 
# 397 "/usr/include/c++/8/bits/locale_facets.h" 3
virtual const char_type *do_is(const char_type * __lo, const char_type * __hi, mask * __vec) const = 0; 
# 416 "/usr/include/c++/8/bits/locale_facets.h" 3
virtual const char_type *do_scan_is(mask __m, const char_type * __lo, const char_type * __hi) const = 0; 
# 435 "/usr/include/c++/8/bits/locale_facets.h" 3
virtual const char_type *do_scan_not(mask __m, const char_type * __lo, const char_type * __hi) const = 0; 
# 453 "/usr/include/c++/8/bits/locale_facets.h" 3
virtual char_type do_toupper(char_type __c) const = 0; 
# 470 "/usr/include/c++/8/bits/locale_facets.h" 3
virtual const char_type *do_toupper(char_type * __lo, const char_type * __hi) const = 0; 
# 486 "/usr/include/c++/8/bits/locale_facets.h" 3
virtual char_type do_tolower(char_type __c) const = 0; 
# 503 "/usr/include/c++/8/bits/locale_facets.h" 3
virtual const char_type *do_tolower(char_type * __lo, const char_type * __hi) const = 0; 
# 522 "/usr/include/c++/8/bits/locale_facets.h" 3
virtual char_type do_widen(char __c) const = 0; 
# 543 "/usr/include/c++/8/bits/locale_facets.h" 3
virtual const char *do_widen(const char * __lo, const char * __hi, char_type * __to) const = 0; 
# 564 "/usr/include/c++/8/bits/locale_facets.h" 3
virtual char do_narrow(char_type __c, char __dfault) const = 0; 
# 589 "/usr/include/c++/8/bits/locale_facets.h" 3
virtual const char_type *do_narrow(const char_type * __lo, const char_type * __hi, char __dfault, char * __to) const = 0; 
# 591
}; 
# 611 "/usr/include/c++/8/bits/locale_facets.h" 3
template< class _CharT> 
# 612
class ctype : public __ctype_abstract_base< _CharT>  { 
# 616
public: typedef _CharT char_type; 
# 617
typedef typename std::__ctype_abstract_base< _CharT> ::mask mask; 
# 620
static std::locale::id id; 
# 623
explicit ctype(std::size_t __refs = 0) : std::__ctype_abstract_base< _CharT> (__refs) { } 
# 627
protected: virtual ~ctype(); 
# 630
virtual bool do_is(mask __m, char_type __c) const; 
# 633
virtual const char_type *do_is(const char_type * __lo, const char_type * __hi, mask * __vec) const; 
# 636
virtual const char_type *do_scan_is(mask __m, const char_type * __lo, const char_type * __hi) const; 
# 639
virtual const char_type *do_scan_not(mask __m, const char_type * __lo, const char_type * __hi) const; 
# 643
virtual char_type do_toupper(char_type __c) const; 
# 646
virtual const char_type *do_toupper(char_type * __lo, const char_type * __hi) const; 
# 649
virtual char_type do_tolower(char_type __c) const; 
# 652
virtual const char_type *do_tolower(char_type * __lo, const char_type * __hi) const; 
# 655
virtual char_type do_widen(char __c) const; 
# 658
virtual const char *do_widen(const char * __lo, const char * __hi, char_type * __dest) const; 
# 661
virtual char do_narrow(char_type, char __dfault) const; 
# 664
virtual const char_type *do_narrow(const char_type * __lo, const char_type * __hi, char __dfault, char * __to) const; 
# 666
}; 
# 668
template< class _CharT> locale::id 
# 669
ctype< _CharT> ::id; 
# 681 "/usr/include/c++/8/bits/locale_facets.h" 3
template<> class ctype< char>  : public locale::facet, public ctype_base { 
# 686
public: typedef char char_type; 
# 690
protected: __c_locale _M_c_locale_ctype; 
# 691
bool _M_del; 
# 692
__to_type _M_toupper; 
# 693
__to_type _M_tolower; 
# 694
const mask *_M_table; 
# 695
mutable char _M_widen_ok; 
# 696
mutable char _M_widen[1 + (static_cast< unsigned char>(-1))]; 
# 697
mutable char _M_narrow[1 + (static_cast< unsigned char>(-1))]; 
# 698
mutable char _M_narrow_ok; 
# 703
public: static locale::id id; 
# 705
static const size_t table_size = (1 + (static_cast< unsigned char>(-1))); 
# 718 "/usr/include/c++/8/bits/locale_facets.h" 3
explicit ctype(const mask * __table = 0, bool __del = false, size_t __refs = 0); 
# 731 "/usr/include/c++/8/bits/locale_facets.h" 3
explicit ctype(__c_locale __cloc, const mask * __table = 0, bool __del = false, size_t __refs = 0); 
# 744 "/usr/include/c++/8/bits/locale_facets.h" 3
inline bool is(mask __m, char __c) const; 
# 759 "/usr/include/c++/8/bits/locale_facets.h" 3
inline const char *is(const char * __lo, const char * __hi, mask * __vec) const; 
# 773 "/usr/include/c++/8/bits/locale_facets.h" 3
inline const char *scan_is(mask __m, const char * __lo, const char * __hi) const; 
# 787 "/usr/include/c++/8/bits/locale_facets.h" 3
inline const char *scan_not(mask __m, const char * __lo, const char * __hi) const; 
# 802 "/usr/include/c++/8/bits/locale_facets.h" 3
char_type toupper(char_type __c) const 
# 803
{ return this->do_toupper(__c); } 
# 819 "/usr/include/c++/8/bits/locale_facets.h" 3
const char_type *toupper(char_type *__lo, const char_type *__hi) const 
# 820
{ return this->do_toupper(__lo, __hi); } 
# 835 "/usr/include/c++/8/bits/locale_facets.h" 3
char_type tolower(char_type __c) const 
# 836
{ return this->do_tolower(__c); } 
# 852 "/usr/include/c++/8/bits/locale_facets.h" 3
const char_type *tolower(char_type *__lo, const char_type *__hi) const 
# 853
{ return this->do_tolower(__lo, __hi); } 
# 872 "/usr/include/c++/8/bits/locale_facets.h" 3
char_type widen(char __c) const 
# 873
{ 
# 874
if (_M_widen_ok) { 
# 875
return (_M_widen)[static_cast< unsigned char>(__c)]; }  
# 876
this->_M_widen_init(); 
# 877
return this->do_widen(__c); 
# 878
} 
# 899 "/usr/include/c++/8/bits/locale_facets.h" 3
const char *widen(const char *__lo, const char *__hi, char_type *__to) const 
# 900
{ 
# 901
if ((_M_widen_ok) == 1) 
# 902
{ 
# 903
if (__builtin_expect(__hi != __lo, true)) { 
# 904
__builtin_memcpy(__to, __lo, __hi - __lo); }  
# 905
return __hi; 
# 906
}  
# 907
if (!(_M_widen_ok)) { 
# 908
this->_M_widen_init(); }  
# 909
return this->do_widen(__lo, __hi, __to); 
# 910
} 
# 931 "/usr/include/c++/8/bits/locale_facets.h" 3
char narrow(char_type __c, char __dfault) const 
# 932
{ 
# 933
if ((_M_narrow)[static_cast< unsigned char>(__c)]) { 
# 934
return (_M_narrow)[static_cast< unsigned char>(__c)]; }  
# 935
const char __t = this->do_narrow(__c, __dfault); 
# 936
if (__t != __dfault) { 
# 937
((_M_narrow)[static_cast< unsigned char>(__c)]) = __t; }  
# 938
return __t; 
# 939
} 
# 964 "/usr/include/c++/8/bits/locale_facets.h" 3
const char_type *narrow(const char_type *__lo, const char_type *__hi, char 
# 965
__dfault, char *__to) const 
# 966
{ 
# 967
if (__builtin_expect((_M_narrow_ok) == 1, true)) 
# 968
{ 
# 969
if (__builtin_expect(__hi != __lo, true)) { 
# 970
__builtin_memcpy(__to, __lo, __hi - __lo); }  
# 971
return __hi; 
# 972
}  
# 973
if (!(_M_narrow_ok)) { 
# 974
this->_M_narrow_init(); }  
# 975
return this->do_narrow(__lo, __hi, __dfault, __to); 
# 976
} 
# 983
const mask *table() const throw() 
# 984
{ return _M_table; } 
# 988
static const mask *classic_table() throw(); 
# 998
protected: virtual ~ctype(); 
# 1014 "/usr/include/c++/8/bits/locale_facets.h" 3
virtual char_type do_toupper(char_type __c) const; 
# 1031 "/usr/include/c++/8/bits/locale_facets.h" 3
virtual const char_type *do_toupper(char_type * __lo, const char_type * __hi) const; 
# 1047 "/usr/include/c++/8/bits/locale_facets.h" 3
virtual char_type do_tolower(char_type __c) const; 
# 1064 "/usr/include/c++/8/bits/locale_facets.h" 3
virtual const char_type *do_tolower(char_type * __lo, const char_type * __hi) const; 
# 1084 "/usr/include/c++/8/bits/locale_facets.h" 3
virtual char_type do_widen(char __c) const 
# 1085
{ return __c; } 
# 1107 "/usr/include/c++/8/bits/locale_facets.h" 3
virtual const char *do_widen(const char *__lo, const char *__hi, char_type *__to) const 
# 1108
{ 
# 1109
if (__builtin_expect(__hi != __lo, true)) { 
# 1110
__builtin_memcpy(__to, __lo, __hi - __lo); }  
# 1111
return __hi; 
# 1112
} 
# 1134 "/usr/include/c++/8/bits/locale_facets.h" 3
virtual char do_narrow(char_type __c, char __dfault __attribute((__unused__))) const 
# 1135
{ return __c; } 
# 1160 "/usr/include/c++/8/bits/locale_facets.h" 3
virtual const char_type *do_narrow(const char_type *__lo, const char_type *__hi, char 
# 1161
__dfault __attribute((__unused__)), char *__to) const 
# 1162
{ 
# 1163
if (__builtin_expect(__hi != __lo, true)) { 
# 1164
__builtin_memcpy(__to, __lo, __hi - __lo); }  
# 1165
return __hi; 
# 1166
} 
# 1169
private: void _M_narrow_init() const; 
# 1170
void _M_widen_init() const; 
# 1171
}; 
# 1186 "/usr/include/c++/8/bits/locale_facets.h" 3
template<> class ctype< wchar_t>  : public __ctype_abstract_base< wchar_t>  { 
# 1191
public: typedef wchar_t char_type; 
# 1192
typedef wctype_t __wmask_type; 
# 1195
protected: __c_locale _M_c_locale_ctype; 
# 1198
bool _M_narrow_ok; 
# 1199
char _M_narrow[128]; 
# 1200
wint_t _M_widen[1 + (static_cast< unsigned char>(-1))]; 
# 1203
mask _M_bit[16]; 
# 1204
__wmask_type _M_wmask[16]; 
# 1209
public: static locale::id id; 
# 1219 "/usr/include/c++/8/bits/locale_facets.h" 3
explicit ctype(size_t __refs = 0); 
# 1230 "/usr/include/c++/8/bits/locale_facets.h" 3
explicit ctype(__c_locale __cloc, size_t __refs = 0); 
# 1234
protected: __wmask_type _M_convert_to_wmask(const mask __m) const throw(); 
# 1238
virtual ~ctype(); 
# 1254 "/usr/include/c++/8/bits/locale_facets.h" 3
virtual bool do_is(mask __m, char_type __c) const; 
# 1273 "/usr/include/c++/8/bits/locale_facets.h" 3
virtual const char_type *do_is(const char_type * __lo, const char_type * __hi, mask * __vec) const; 
# 1291 "/usr/include/c++/8/bits/locale_facets.h" 3
virtual const char_type *do_scan_is(mask __m, const char_type * __lo, const char_type * __hi) const; 
# 1309 "/usr/include/c++/8/bits/locale_facets.h" 3
virtual const char_type *do_scan_not(mask __m, const char_type * __lo, const char_type * __hi) const; 
# 1326 "/usr/include/c++/8/bits/locale_facets.h" 3
virtual char_type do_toupper(char_type __c) const; 
# 1343 "/usr/include/c++/8/bits/locale_facets.h" 3
virtual const char_type *do_toupper(char_type * __lo, const char_type * __hi) const; 
# 1359 "/usr/include/c++/8/bits/locale_facets.h" 3
virtual char_type do_tolower(char_type __c) const; 
# 1376 "/usr/include/c++/8/bits/locale_facets.h" 3
virtual const char_type *do_tolower(char_type * __lo, const char_type * __hi) const; 
# 1396 "/usr/include/c++/8/bits/locale_facets.h" 3
virtual char_type do_widen(char __c) const; 
# 1418 "/usr/include/c++/8/bits/locale_facets.h" 3
virtual const char *do_widen(const char * __lo, const char * __hi, char_type * __to) const; 
# 1441 "/usr/include/c++/8/bits/locale_facets.h" 3
virtual char do_narrow(char_type __c, char __dfault) const; 
# 1467 "/usr/include/c++/8/bits/locale_facets.h" 3
virtual const char_type *do_narrow(const char_type * __lo, const char_type * __hi, char __dfault, char * __to) const; 
# 1472
void _M_initialize_ctype() throw(); 
# 1473
}; 
# 1477
template< class _CharT> 
# 1478
class ctype_byname : public ctype< _CharT>  { 
# 1481
public: typedef typename std::ctype< _CharT> ::mask mask; 
# 1484
explicit ctype_byname(const char * __s, std::size_t __refs = 0); 
# 1488
explicit ctype_byname(const __cxx11::string &__s, std::size_t __refs = 0) : ctype_byname(__s.c_str(), __refs) 
# 1489
{ } 
# 1494
protected: virtual ~ctype_byname() { } 
# 1495
}; 
# 1499
template<> class ctype_byname< char>  : public ctype< char>  { 
# 1503
public: explicit ctype_byname(const char * __s, size_t __refs = 0); 
# 1507
explicit ctype_byname(const __cxx11::string & __s, size_t __refs = 0); 
# 1512
protected: virtual ~ctype_byname(); 
# 1513
}; 
# 1517
template<> class ctype_byname< wchar_t>  : public ctype< wchar_t>  { 
# 1521
public: explicit ctype_byname(const char * __s, size_t __refs = 0); 
# 1525
explicit ctype_byname(const __cxx11::string & __s, size_t __refs = 0); 
# 1530
protected: virtual ~ctype_byname(); 
# 1531
}; 
# 1535
}
# 37 "/usr/include/x86_64-linux-gnu/c++/8/bits/ctype_inline.h" 3
namespace std __attribute((__visibility__("default"))) { 
# 43
inline bool ctype< char> ::is(mask __m, char __c) const 
# 44
{ return ((_M_table)[static_cast< unsigned char>(__c)]) & __m; } 
# 48
inline const char *ctype< char> ::is(const char *__low, const char *__high, mask *__vec) const 
# 49
{ 
# 50
while (__low < __high) { 
# 51
(*(__vec++)) = ((_M_table)[static_cast< unsigned char>(*(__low++))]); }  
# 52
return __high; 
# 53
} 
# 57
inline const char *ctype< char> ::scan_is(mask __m, const char *__low, const char *__high) const 
# 58
{ 
# 59
while ((__low < __high) && (!(((_M_table)[static_cast< unsigned char>(*__low)]) & __m))) { 
# 61
++__low; }  
# 62
return __low; 
# 63
} 
# 67
inline const char *ctype< char> ::scan_not(mask __m, const char *__low, const char *__high) const 
# 68
{ 
# 69
while ((__low < __high) && ((((_M_table)[static_cast< unsigned char>(*__low)]) & __m) != 0)) { 
# 71
++__low; }  
# 72
return __low; 
# 73
} 
# 76
}
# 1540 "/usr/include/c++/8/bits/locale_facets.h" 3
namespace std __attribute((__visibility__("default"))) { 
# 1545
class __num_base { 
# 1551
public: enum { 
# 1552
_S_ominus, 
# 1553
_S_oplus, 
# 1554
_S_ox, 
# 1555
_S_oX, 
# 1556
_S_odigits, 
# 1557
_S_odigits_end = 20, 
# 1558
_S_oudigits = 20, 
# 1559
_S_oudigits_end = 36, 
# 1560
_S_oe = 18, 
# 1561
_S_oE = 34, 
# 1562
_S_oend = 36
# 1563
}; 
# 1570
static const char *_S_atoms_out; 
# 1574
static const char *_S_atoms_in; 
# 1577
enum { 
# 1578
_S_iminus, 
# 1579
_S_iplus, 
# 1580
_S_ix, 
# 1581
_S_iX, 
# 1582
_S_izero, 
# 1583
_S_ie = 18, 
# 1584
_S_iE = 24, 
# 1585
_S_iend = 26
# 1586
}; 
# 1591
static void _S_format_float(const ios_base & __io, char * __fptr, char __mod) throw(); 
# 1592
}; 
# 1594
template< class _CharT> 
# 1595
struct __numpunct_cache : public locale::facet { 
# 1597
const char *_M_grouping; 
# 1598
size_t _M_grouping_size; 
# 1599
bool _M_use_grouping; 
# 1600
const _CharT *_M_truename; 
# 1601
size_t _M_truename_size; 
# 1602
const _CharT *_M_falsename; 
# 1603
size_t _M_falsename_size; 
# 1604
_CharT _M_decimal_point; 
# 1605
_CharT _M_thousands_sep; 
# 1611
_CharT _M_atoms_out[__num_base::_S_oend]; 
# 1617
_CharT _M_atoms_in[__num_base::_S_iend]; 
# 1619
bool _M_allocated; 
# 1621
__numpunct_cache(size_t __refs = 0) : locale::facet(__refs), _M_grouping((0)), _M_grouping_size((0)), _M_use_grouping(false), _M_truename((0)), _M_truename_size((0)), _M_falsename((0)), _M_falsename_size((0)), _M_decimal_point(_CharT()), _M_thousands_sep(_CharT()), _M_allocated(false) 
# 1627
{ } 
# 1629
virtual ~__numpunct_cache(); 
# 1632
void _M_cache(const locale & __loc); 
# 1636
private: __numpunct_cache &operator=(const __numpunct_cache &); 
# 1639
explicit __numpunct_cache(const __numpunct_cache &); 
# 1640
}; 
# 1642
template< class _CharT> 
# 1643
__numpunct_cache< _CharT> ::~__numpunct_cache() 
# 1644
{ 
# 1645
if (_M_allocated) 
# 1646
{ 
# 1647
delete [] (_M_grouping); 
# 1648
delete [] (_M_truename); 
# 1649
delete [] (_M_falsename); 
# 1650
}  
# 1651
} 
# 1653
inline namespace __cxx11 { 
# 1669 "/usr/include/c++/8/bits/locale_facets.h" 3
template< class _CharT> 
# 1670
class numpunct : public locale::facet { 
# 1676
public: typedef _CharT char_type; 
# 1677
typedef basic_string< _CharT, char_traits< _CharT> , allocator< _CharT> >  string_type; 
# 1679
typedef __numpunct_cache< _CharT>  __cache_type; 
# 1682
protected: __cache_type *_M_data; 
# 1686
public: static locale::id id; 
# 1694
explicit numpunct(size_t __refs = 0) : locale::facet(__refs), _M_data((0)) 
# 1696
{ _M_initialize_numpunct(); } 
# 1708 "/usr/include/c++/8/bits/locale_facets.h" 3
explicit numpunct(__cache_type *__cache, size_t __refs = 0) : locale::facet(__refs), _M_data(__cache) 
# 1710
{ _M_initialize_numpunct(); } 
# 1722 "/usr/include/c++/8/bits/locale_facets.h" 3
explicit numpunct(__c_locale __cloc, size_t __refs = 0) : locale::facet(__refs), _M_data((0)) 
# 1724
{ _M_initialize_numpunct(__cloc); } 
# 1736 "/usr/include/c++/8/bits/locale_facets.h" 3
char_type decimal_point() const 
# 1737
{ return do_decimal_point(); } 
# 1749 "/usr/include/c++/8/bits/locale_facets.h" 3
char_type thousands_sep() const 
# 1750
{ return do_thousands_sep(); } 
# 1780 "/usr/include/c++/8/bits/locale_facets.h" 3
string grouping() const 
# 1781
{ return do_grouping(); } 
# 1793 "/usr/include/c++/8/bits/locale_facets.h" 3
string_type truename() const 
# 1794
{ return do_truename(); } 
# 1806 "/usr/include/c++/8/bits/locale_facets.h" 3
string_type falsename() const 
# 1807
{ return do_falsename(); } 
# 1812
protected: virtual ~numpunct(); 
# 1823 "/usr/include/c++/8/bits/locale_facets.h" 3
virtual char_type do_decimal_point() const 
# 1824
{ return (_M_data)->_M_decimal_point; } 
# 1835 "/usr/include/c++/8/bits/locale_facets.h" 3
virtual char_type do_thousands_sep() const 
# 1836
{ return (_M_data)->_M_thousands_sep; } 
# 1848 "/usr/include/c++/8/bits/locale_facets.h" 3
virtual string do_grouping() const 
# 1849
{ return (_M_data)->_M_grouping; } 
# 1861 "/usr/include/c++/8/bits/locale_facets.h" 3
virtual string_type do_truename() const 
# 1862
{ return (_M_data)->_M_truename; } 
# 1874 "/usr/include/c++/8/bits/locale_facets.h" 3
virtual string_type do_falsename() const 
# 1875
{ return (_M_data)->_M_falsename; } 
# 1879
void _M_initialize_numpunct(__c_locale __cloc = 0); 
# 1880
}; 
# 1882
template< class _CharT> locale::id 
# 1883
numpunct< _CharT> ::id; 
# 1886
template<> numpunct< char> ::~numpunct(); 
# 1890
template<> void numpunct< char> ::_M_initialize_numpunct(__c_locale __cloc); 
# 1894
template<> numpunct< wchar_t> ::~numpunct(); 
# 1898
template<> void numpunct< wchar_t> ::_M_initialize_numpunct(__c_locale __cloc); 
# 1902
template< class _CharT> 
# 1903
class numpunct_byname : public numpunct< _CharT>  { 
# 1906
public: typedef _CharT char_type; 
# 1907
typedef basic_string< _CharT, char_traits< _CharT> , allocator< _CharT> >  string_type; 
# 1910
explicit numpunct_byname(const char *__s, std::size_t __refs = 0) : __cxx11::numpunct< _CharT> (__refs) 
# 1912
{ 
# 1913
if ((__builtin_strcmp(__s, "C") != 0) && (__builtin_strcmp(__s, "POSIX") != 0)) 
# 1915
{ 
# 1916
std::__c_locale __tmp; 
# 1917
(this->_S_create_c_locale(__tmp, __s)); 
# 1918
(this->_M_initialize_numpunct(__tmp)); 
# 1919
(this->_S_destroy_c_locale(__tmp)); 
# 1920
}  
# 1921
} 
# 1925
explicit numpunct_byname(const __cxx11::string &__s, std::size_t __refs = 0) : numpunct_byname(__s.c_str(), __refs) 
# 1926
{ } 
# 1931
protected: virtual ~numpunct_byname() { } 
# 1932
}; 
# 1934
}
# 1951 "/usr/include/c++/8/bits/locale_facets.h" 3
template< class _CharT, class _InIter> 
# 1952
class num_get : public locale::facet { 
# 1958
public: typedef _CharT char_type; 
# 1959
typedef _InIter iter_type; 
# 1963
static locale::id id; 
# 1973 "/usr/include/c++/8/bits/locale_facets.h" 3
explicit num_get(size_t __refs = 0) : locale::facet(__refs) { } 
# 1999 "/usr/include/c++/8/bits/locale_facets.h" 3
iter_type get(iter_type __in, iter_type __end, ios_base &__io, ios_base::iostate &
# 2000
__err, bool &__v) const 
# 2001
{ return (this->do_get(__in, __end, __io, __err, __v)); } 
# 2036 "/usr/include/c++/8/bits/locale_facets.h" 3
iter_type get(iter_type __in, iter_type __end, ios_base &__io, ios_base::iostate &
# 2037
__err, long &__v) const 
# 2038
{ return (this->do_get(__in, __end, __io, __err, __v)); } 
# 2041
iter_type get(iter_type __in, iter_type __end, ios_base &__io, ios_base::iostate &
# 2042
__err, unsigned short &__v) const 
# 2043
{ return (this->do_get(__in, __end, __io, __err, __v)); } 
# 2046
iter_type get(iter_type __in, iter_type __end, ios_base &__io, ios_base::iostate &
# 2047
__err, unsigned &__v) const 
# 2048
{ return (this->do_get(__in, __end, __io, __err, __v)); } 
# 2051
iter_type get(iter_type __in, iter_type __end, ios_base &__io, ios_base::iostate &
# 2052
__err, unsigned long &__v) const 
# 2053
{ return (this->do_get(__in, __end, __io, __err, __v)); } 
# 2057
iter_type get(iter_type __in, iter_type __end, ios_base &__io, ios_base::iostate &
# 2058
__err, long long &__v) const 
# 2059
{ return (this->do_get(__in, __end, __io, __err, __v)); } 
# 2062
iter_type get(iter_type __in, iter_type __end, ios_base &__io, ios_base::iostate &
# 2063
__err, unsigned long long &__v) const 
# 2064
{ return (this->do_get(__in, __end, __io, __err, __v)); } 
# 2096 "/usr/include/c++/8/bits/locale_facets.h" 3
iter_type get(iter_type __in, iter_type __end, ios_base &__io, ios_base::iostate &
# 2097
__err, float &__v) const 
# 2098
{ return (this->do_get(__in, __end, __io, __err, __v)); } 
# 2101
iter_type get(iter_type __in, iter_type __end, ios_base &__io, ios_base::iostate &
# 2102
__err, double &__v) const 
# 2103
{ return (this->do_get(__in, __end, __io, __err, __v)); } 
# 2106
iter_type get(iter_type __in, iter_type __end, ios_base &__io, ios_base::iostate &
# 2107
__err, long double &__v) const 
# 2108
{ return (this->do_get(__in, __end, __io, __err, __v)); } 
# 2139 "/usr/include/c++/8/bits/locale_facets.h" 3
iter_type get(iter_type __in, iter_type __end, ios_base &__io, ios_base::iostate &
# 2140
__err, void *&__v) const 
# 2141
{ return (this->do_get(__in, __end, __io, __err, __v)); } 
# 2145
protected: virtual ~num_get() { } 
# 2147
__attribute((__abi_tag__("cxx11"))) iter_type 
# 2149
_M_extract_float(iter_type, iter_type, ios_base &, ios_base::iostate &, __cxx11::string &) const; 
# 2152
template< class _ValueT> 
# 2153
__attribute((__abi_tag__("cxx11"))) iter_type 
# 2152
_M_extract_int(iter_type, iter_type, ios_base &, ios_base::iostate &, _ValueT &) const; 
# 2158
template< class _CharT2> typename __gnu_cxx::__enable_if< __is_char< _CharT2> ::__value, int> ::__type 
# 2160
_M_find(const _CharT2 *, size_t __len, _CharT2 __c) const 
# 2161
{ 
# 2162
int __ret = (-1); 
# 2163
if (__len <= (10)) 
# 2164
{ 
# 2165
if ((__c >= ((_CharT2)'0')) && (__c < ((_CharT2)(((_CharT2)'0') + __len)))) { 
# 2166
__ret = (__c - ((_CharT2)'0')); }  
# 2167
} else 
# 2169
{ 
# 2170
if ((__c >= ((_CharT2)'0')) && (__c <= ((_CharT2)'9'))) { 
# 2171
__ret = (__c - ((_CharT2)'0')); } else { 
# 2172
if ((__c >= ((_CharT2)'a')) && (__c <= ((_CharT2)'f'))) { 
# 2173
__ret = (10 + (__c - ((_CharT2)'a'))); } else { 
# 2174
if ((__c >= ((_CharT2)'A')) && (__c <= ((_CharT2)'F'))) { 
# 2175
__ret = (10 + (__c - ((_CharT2)'A'))); }  }  }  
# 2176
}  
# 2177
return __ret; 
# 2178
} 
# 2180
template< class _CharT2> typename __gnu_cxx::__enable_if< !__is_char< _CharT2> ::__value, int> ::__type 
# 2183
_M_find(const _CharT2 *__zero, size_t __len, _CharT2 __c) const 
# 2184
{ 
# 2185
int __ret = (-1); 
# 2186
const char_type *__q = char_traits< _CharT2> ::find(__zero, __len, __c); 
# 2187
if (__q) 
# 2188
{ 
# 2189
__ret = (__q - __zero); 
# 2190
if (__ret > 15) { 
# 2191
__ret -= 6; }  
# 2192
}  
# 2193
return __ret; 
# 2194
} 
# 2212 "/usr/include/c++/8/bits/locale_facets.h" 3
virtual iter_type do_get(iter_type, iter_type, ios_base &, ios_base::iostate &, bool &) const; 
# 2215
virtual iter_type do_get(iter_type __beg, iter_type __end, ios_base &__io, ios_base::iostate &
# 2216
__err, long &__v) const 
# 2217
{ return _M_extract_int(__beg, __end, __io, __err, __v); } 
# 2220
virtual iter_type do_get(iter_type __beg, iter_type __end, ios_base &__io, ios_base::iostate &
# 2221
__err, unsigned short &__v) const 
# 2222
{ return _M_extract_int(__beg, __end, __io, __err, __v); } 
# 2225
virtual iter_type do_get(iter_type __beg, iter_type __end, ios_base &__io, ios_base::iostate &
# 2226
__err, unsigned &__v) const 
# 2227
{ return _M_extract_int(__beg, __end, __io, __err, __v); } 
# 2230
virtual iter_type do_get(iter_type __beg, iter_type __end, ios_base &__io, ios_base::iostate &
# 2231
__err, unsigned long &__v) const 
# 2232
{ return _M_extract_int(__beg, __end, __io, __err, __v); } 
# 2236
virtual iter_type do_get(iter_type __beg, iter_type __end, ios_base &__io, ios_base::iostate &
# 2237
__err, long long &__v) const 
# 2238
{ return _M_extract_int(__beg, __end, __io, __err, __v); } 
# 2241
virtual iter_type do_get(iter_type __beg, iter_type __end, ios_base &__io, ios_base::iostate &
# 2242
__err, unsigned long long &__v) const 
# 2243
{ return _M_extract_int(__beg, __end, __io, __err, __v); } 
# 2247
virtual iter_type do_get(iter_type, iter_type, ios_base &, ios_base::iostate &, float &) const; 
# 2250
virtual iter_type do_get(iter_type, iter_type, ios_base &, ios_base::iostate &, double &) const; 
# 2260
virtual iter_type do_get(iter_type, iter_type, ios_base &, ios_base::iostate &, long double &) const; 
# 2265
virtual iter_type do_get(iter_type, iter_type, ios_base &, ios_base::iostate &, void *&) const; 
# 2274 "/usr/include/c++/8/bits/locale_facets.h" 3
}; 
# 2276
template< class _CharT, class _InIter> locale::id 
# 2277
num_get< _CharT, _InIter> ::id; 
# 2292 "/usr/include/c++/8/bits/locale_facets.h" 3
template< class _CharT, class _OutIter> 
# 2293
class num_put : public locale::facet { 
# 2299
public: typedef _CharT char_type; 
# 2300
typedef _OutIter iter_type; 
# 2304
static locale::id id; 
# 2314 "/usr/include/c++/8/bits/locale_facets.h" 3
explicit num_put(size_t __refs = 0) : locale::facet(__refs) { } 
# 2332 "/usr/include/c++/8/bits/locale_facets.h" 3
iter_type put(iter_type __s, ios_base &__io, char_type __fill, bool __v) const 
# 2333
{ return (this->do_put(__s, __io, __fill, __v)); } 
# 2374 "/usr/include/c++/8/bits/locale_facets.h" 3
iter_type put(iter_type __s, ios_base &__io, char_type __fill, long __v) const 
# 2375
{ return (this->do_put(__s, __io, __fill, __v)); } 
# 2378
iter_type put(iter_type __s, ios_base &__io, char_type __fill, unsigned long 
# 2379
__v) const 
# 2380
{ return (this->do_put(__s, __io, __fill, __v)); } 
# 2384
iter_type put(iter_type __s, ios_base &__io, char_type __fill, long long __v) const 
# 2385
{ return (this->do_put(__s, __io, __fill, __v)); } 
# 2388
iter_type put(iter_type __s, ios_base &__io, char_type __fill, unsigned long long 
# 2389
__v) const 
# 2390
{ return (this->do_put(__s, __io, __fill, __v)); } 
# 2437 "/usr/include/c++/8/bits/locale_facets.h" 3
iter_type put(iter_type __s, ios_base &__io, char_type __fill, double __v) const 
# 2438
{ return (this->do_put(__s, __io, __fill, __v)); } 
# 2441
iter_type put(iter_type __s, ios_base &__io, char_type __fill, long double 
# 2442
__v) const 
# 2443
{ return (this->do_put(__s, __io, __fill, __v)); } 
# 2462 "/usr/include/c++/8/bits/locale_facets.h" 3
iter_type put(iter_type __s, ios_base &__io, char_type __fill, const void *
# 2463
__v) const 
# 2464
{ return (this->do_put(__s, __io, __fill, __v)); } 
# 2467
protected: template< class _ValueT> iter_type _M_insert_float(iter_type, ios_base & __io, char_type __fill, char __mod, _ValueT __v) const; 
# 2473
void _M_group_float(const char * __grouping, size_t __grouping_size, char_type __sep, const char_type * __p, char_type * __new, char_type * __cs, int & __len) const; 
# 2477
template< class _ValueT> iter_type _M_insert_int(iter_type, ios_base & __io, char_type __fill, _ValueT __v) const; 
# 2483
void _M_group_int(const char * __grouping, size_t __grouping_size, char_type __sep, ios_base & __io, char_type * __new, char_type * __cs, int & __len) const; 
# 2488
void _M_pad(char_type __fill, streamsize __w, ios_base & __io, char_type * __new, const char_type * __cs, int & __len) const; 
# 2493
virtual ~num_put() { } 
# 2510 "/usr/include/c++/8/bits/locale_facets.h" 3
virtual iter_type do_put(iter_type __s, ios_base & __io, char_type __fill, bool __v) const; 
# 2513
virtual iter_type do_put(iter_type __s, ios_base &__io, char_type __fill, long __v) const 
# 2514
{ return _M_insert_int(__s, __io, __fill, __v); } 
# 2517
virtual iter_type do_put(iter_type __s, ios_base &__io, char_type __fill, unsigned long 
# 2518
__v) const 
# 2519
{ return _M_insert_int(__s, __io, __fill, __v); } 
# 2523
virtual iter_type do_put(iter_type __s, ios_base &__io, char_type __fill, long long 
# 2524
__v) const 
# 2525
{ return _M_insert_int(__s, __io, __fill, __v); } 
# 2528
virtual iter_type do_put(iter_type __s, ios_base &__io, char_type __fill, unsigned long long 
# 2529
__v) const 
# 2530
{ return _M_insert_int(__s, __io, __fill, __v); } 
# 2534
virtual iter_type do_put(iter_type, ios_base &, char_type, double) const; 
# 2542
virtual iter_type do_put(iter_type, ios_base &, char_type, long double) const; 
# 2546
virtual iter_type do_put(iter_type, ios_base &, char_type, const void *) const; 
# 2554
}; 
# 2556
template< class _CharT, class _OutIter> locale::id 
# 2557
num_put< _CharT, _OutIter> ::id; 
# 2567
template< class _CharT> inline bool 
# 2569
isspace(_CharT __c, const locale &__loc) 
# 2570
{ return (use_facet< ctype< _CharT> > (__loc).is(ctype_base::space, __c)); } 
# 2573
template< class _CharT> inline bool 
# 2575
isprint(_CharT __c, const locale &__loc) 
# 2576
{ return (use_facet< ctype< _CharT> > (__loc).is(ctype_base::print, __c)); } 
# 2579
template< class _CharT> inline bool 
# 2581
iscntrl(_CharT __c, const locale &__loc) 
# 2582
{ return (use_facet< ctype< _CharT> > (__loc).is(ctype_base::cntrl, __c)); } 
# 2585
template< class _CharT> inline bool 
# 2587
isupper(_CharT __c, const locale &__loc) 
# 2588
{ return (use_facet< ctype< _CharT> > (__loc).is(ctype_base::upper, __c)); } 
# 2591
template< class _CharT> inline bool 
# 2593
islower(_CharT __c, const locale &__loc) 
# 2594
{ return (use_facet< ctype< _CharT> > (__loc).is(ctype_base::lower, __c)); } 
# 2597
template< class _CharT> inline bool 
# 2599
isalpha(_CharT __c, const locale &__loc) 
# 2600
{ return (use_facet< ctype< _CharT> > (__loc).is(ctype_base::alpha, __c)); } 
# 2603
template< class _CharT> inline bool 
# 2605
isdigit(_CharT __c, const locale &__loc) 
# 2606
{ return (use_facet< ctype< _CharT> > (__loc).is(ctype_base::digit, __c)); } 
# 2609
template< class _CharT> inline bool 
# 2611
ispunct(_CharT __c, const locale &__loc) 
# 2612
{ return (use_facet< ctype< _CharT> > (__loc).is(ctype_base::punct, __c)); } 
# 2615
template< class _CharT> inline bool 
# 2617
isxdigit(_CharT __c, const locale &__loc) 
# 2618
{ return (use_facet< ctype< _CharT> > (__loc).is(ctype_base::xdigit, __c)); } 
# 2621
template< class _CharT> inline bool 
# 2623
isalnum(_CharT __c, const locale &__loc) 
# 2624
{ return (use_facet< ctype< _CharT> > (__loc).is(ctype_base::alnum, __c)); } 
# 2627
template< class _CharT> inline bool 
# 2629
isgraph(_CharT __c, const locale &__loc) 
# 2630
{ return (use_facet< ctype< _CharT> > (__loc).is(ctype_base::graph, __c)); } 
# 2634
template< class _CharT> inline bool 
# 2636
isblank(_CharT __c, const locale &__loc) 
# 2637
{ return (use_facet< ctype< _CharT> > (__loc).is(ctype_base::blank, __c)); } 
# 2641
template< class _CharT> inline _CharT 
# 2643
toupper(_CharT __c, const locale &__loc) 
# 2644
{ return (use_facet< ctype< _CharT> > (__loc).toupper(__c)); } 
# 2647
template< class _CharT> inline _CharT 
# 2649
tolower(_CharT __c, const locale &__loc) 
# 2650
{ return (use_facet< ctype< _CharT> > (__loc).tolower(__c)); } 
# 2653
}
# 35 "/usr/include/c++/8/bits/locale_facets.tcc" 3
namespace std __attribute((__visibility__("default"))) { 
# 41
template< class _Facet> 
# 42
struct __use_cache { 
# 45
const _Facet *operator()(const locale & __loc) const; 
# 46
}; 
# 49
template< class _CharT> 
# 50
struct __use_cache< __numpunct_cache< _CharT> >  { 
# 53
const __numpunct_cache< _CharT>  *operator()(const locale &__loc) const 
# 54
{ 
# 55
const size_t __i = (numpunct< _CharT> ::id._M_id)(); 
# 56
const locale::facet **__caches = (__loc._M_impl)->_M_caches; 
# 57
if (!(__caches[__i])) 
# 58
{ 
# 59
__numpunct_cache< _CharT>  *__tmp = (0); 
# 60
try 
# 61
{ 
# 62
__tmp = (new __numpunct_cache< _CharT> ); 
# 63
(__tmp->_M_cache(__loc)); 
# 64
} 
# 65
catch (...) 
# 66
{ 
# 67
delete __tmp; 
# 68
throw; 
# 69
}  
# 70
(__loc._M_impl)->_M_install_cache(__tmp, __i); 
# 71
}  
# 72
return static_cast< const __numpunct_cache< _CharT>  *>(__caches[__i]); 
# 73
} 
# 74
}; 
# 76
template< class _CharT> void 
# 78
__numpunct_cache< _CharT> ::_M_cache(const locale &__loc) 
# 79
{ 
# 80
const __cxx11::numpunct< _CharT>  &__np = use_facet< __cxx11::numpunct< _CharT> > (__loc); 
# 82
char *__grouping = (0); 
# 83
_CharT *__truename = (0); 
# 84
_CharT *__falsename = (0); 
# 85
try 
# 86
{ 
# 87
const __cxx11::string &__g = (__np.grouping()); 
# 88
(_M_grouping_size) = __g.size(); 
# 89
__grouping = (new char [_M_grouping_size]); 
# 90
__g.copy(__grouping, _M_grouping_size); 
# 91
(_M_use_grouping) = ((_M_grouping_size) && ((static_cast< signed char>(__grouping[0])) > 0) && ((__grouping[0]) != __gnu_cxx::__numeric_traits_integer< char> ::__max)); 
# 96
const __cxx11::basic_string< _CharT, char_traits< _CharT> , allocator< _CharT> >  &__tn = (__np.truename()); 
# 97
(_M_truename_size) = (__tn.size()); 
# 98
__truename = (new _CharT [_M_truename_size]); 
# 99
(__tn.copy(__truename, _M_truename_size)); 
# 101
const __cxx11::basic_string< _CharT, char_traits< _CharT> , allocator< _CharT> >  &__fn = (__np.falsename()); 
# 102
(_M_falsename_size) = (__fn.size()); 
# 103
__falsename = (new _CharT [_M_falsename_size]); 
# 104
(__fn.copy(__falsename, _M_falsename_size)); 
# 106
(_M_decimal_point) = (__np.decimal_point()); 
# 107
(_M_thousands_sep) = (__np.thousands_sep()); 
# 109
const ctype< _CharT>  &__ct = use_facet< ctype< _CharT> > (__loc); 
# 110
(__ct.widen(__num_base::_S_atoms_out, __num_base::_S_atoms_out + __num_base::_S_oend, _M_atoms_out)); 
# 113
(__ct.widen(__num_base::_S_atoms_in, __num_base::_S_atoms_in + __num_base::_S_iend, _M_atoms_in)); 
# 117
(_M_grouping) = __grouping; 
# 118
(_M_truename) = __truename; 
# 119
(_M_falsename) = __falsename; 
# 120
(_M_allocated) = true; 
# 121
} 
# 122
catch (...) 
# 123
{ 
# 124
delete [] __grouping; 
# 125
delete [] __truename; 
# 126
delete [] __falsename; 
# 127
throw; 
# 128
}  
# 129
} 
# 139 "/usr/include/c++/8/bits/locale_facets.tcc" 3
__attribute((__pure__)) bool 
# 140
__verify_grouping(const char * __grouping, size_t __grouping_size, const __cxx11::string & __grouping_tmp) throw(); 
# 145
template< class _CharT, class _InIter> 
# 146
__attribute((__abi_tag__("cxx11"))) _InIter 
# 149
num_get< _CharT, _InIter> ::_M_extract_float(_InIter __beg, _InIter __end, ios_base &__io, ios_base::iostate &
# 150
__err, __cxx11::string &__xtrc) const 
# 151
{ 
# 152
typedef char_traits< _CharT>  __traits_type; 
# 153
typedef __numpunct_cache< _CharT>  __cache_type; 
# 154
__use_cache< __numpunct_cache< _CharT> >  __uc; 
# 155
const locale &__loc = __io._M_getloc(); 
# 156
const __cache_type *__lc = __uc(__loc); 
# 157
const _CharT *__lit = ((__lc->_M_atoms_in)); 
# 158
char_type __c = (char_type()); 
# 161
bool __testeof = __beg == __end; 
# 164
if (!__testeof) 
# 165
{ 
# 166
__c = (*__beg); 
# 167
const bool __plus = __c == (__lit[__num_base::_S_iplus]); 
# 168
if ((__plus || (__c == (__lit[__num_base::_S_iminus]))) && (!((__lc->_M_use_grouping) && (__c == (__lc->_M_thousands_sep)))) && (!(__c == (__lc->_M_decimal_point)))) 
# 171
{ 
# 172
(__xtrc += (__plus ? '+' : '-')); 
# 173
if ((++__beg) != __end) { 
# 174
__c = (*__beg); } else { 
# 176
__testeof = true; }  
# 177
}  
# 178
}  
# 181
bool __found_mantissa = false; 
# 182
int __sep_pos = 0; 
# 183
while (!__testeof) 
# 184
{ 
# 185
if (((__lc->_M_use_grouping) && (__c == (__lc->_M_thousands_sep))) || (__c == (__lc->_M_decimal_point))) { 
# 187
break; } else { 
# 188
if (__c == (__lit[__num_base::_S_izero])) 
# 189
{ 
# 190
if (!__found_mantissa) 
# 191
{ 
# 192
(__xtrc += ('0')); 
# 193
__found_mantissa = true; 
# 194
}  
# 195
++__sep_pos; 
# 197
if ((++__beg) != __end) { 
# 198
__c = (*__beg); } else { 
# 200
__testeof = true; }  
# 201
} else { 
# 203
break; }  }  
# 204
}  
# 207
bool __found_dec = false; 
# 208
bool __found_sci = false; 
# 209
__cxx11::string __found_grouping; 
# 210
if (__lc->_M_use_grouping) { 
# 211
__found_grouping.reserve(32); }  
# 212
const char_type *__lit_zero = __lit + __num_base::_S_izero; 
# 214
if (!(__lc->_M_allocated)) { 
# 216
while (!__testeof) { 
# 217
{ 
# 218
const int __digit = _M_find(__lit_zero, 10, __c); 
# 219
if (__digit != (-1)) 
# 220
{ 
# 221
(__xtrc += (('0') + __digit)); 
# 222
__found_mantissa = true; 
# 223
} else { 
# 224
if ((__c == (__lc->_M_decimal_point)) && (!__found_dec) && (!__found_sci)) 
# 226
{ 
# 227
(__xtrc += ('.')); 
# 228
__found_dec = true; 
# 229
} else { 
# 230
if (((__c == (__lit[__num_base::_S_ie])) || (__c == (__lit[__num_base::_S_iE]))) && (!__found_sci) && __found_mantissa) 
# 233
{ 
# 235
(__xtrc += ('e')); 
# 236
__found_sci = true; 
# 239
if ((++__beg) != __end) 
# 240
{ 
# 241
__c = (*__beg); 
# 242
const bool __plus = __c == (__lit[__num_base::_S_iplus]); 
# 243
if (__plus || (__c == (__lit[__num_base::_S_iminus]))) { 
# 244
(__xtrc += (__plus ? '+' : '-')); } else { 
# 246
continue; }  
# 247
} else 
# 249
{ 
# 250
__testeof = true; 
# 251
break; 
# 252
}  
# 253
} else { 
# 255
break; }  }  }  
# 257
if ((++__beg) != __end) { 
# 258
__c = (*__beg); } else { 
# 260
__testeof = true; }  
# 261
} }  } else { 
# 263
while (!__testeof) { 
# 264
{ 
# 267
if ((__lc->_M_use_grouping) && (__c == (__lc->_M_thousands_sep))) 
# 268
{ 
# 269
if ((!__found_dec) && (!__found_sci)) 
# 270
{ 
# 273
if (__sep_pos) 
# 274
{ 
# 275
(__found_grouping += (static_cast< char>(__sep_pos))); 
# 276
__sep_pos = 0; 
# 277
} else 
# 279
{ 
# 282
__xtrc.clear(); 
# 283
break; 
# 284
}  
# 285
} else { 
# 287
break; }  
# 288
} else { 
# 289
if (__c == (__lc->_M_decimal_point)) 
# 290
{ 
# 291
if ((!__found_dec) && (!__found_sci)) 
# 292
{ 
# 296
if (__found_grouping.size()) { 
# 297
(__found_grouping += (static_cast< char>(__sep_pos))); }  
# 298
(__xtrc += ('.')); 
# 299
__found_dec = true; 
# 300
} else { 
# 302
break; }  
# 303
} else 
# 305
{ 
# 306
const char_type *__q = __traits_type::find(__lit_zero, 10, __c); 
# 308
if (__q) 
# 309
{ 
# 310
__xtrc += ('0' + (__q - __lit_zero)); 
# 311
__found_mantissa = true; 
# 312
++__sep_pos; 
# 313
} else { 
# 314
if (((__c == (__lit[__num_base::_S_ie])) || (__c == (__lit[__num_base::_S_iE]))) && (!__found_sci) && __found_mantissa) 
# 317
{ 
# 319
if ((__found_grouping.size()) && (!__found_dec)) { 
# 320
(__found_grouping += (static_cast< char>(__sep_pos))); }  
# 321
(__xtrc += ('e')); 
# 322
__found_sci = true; 
# 325
if ((++__beg) != __end) 
# 326
{ 
# 327
__c = (*__beg); 
# 328
const bool __plus = __c == (__lit[__num_base::_S_iplus]); 
# 329
if ((__plus || (__c == (__lit[__num_base::_S_iminus]))) && (!((__lc->_M_use_grouping) && (__c == (__lc->_M_thousands_sep)))) && (!(__c == (__lc->_M_decimal_point)))) { 
# 333
(__xtrc += (__plus ? '+' : '-')); } else { 
# 335
continue; }  
# 336
} else 
# 338
{ 
# 339
__testeof = true; 
# 340
break; 
# 341
}  
# 342
} else { 
# 344
break; }  }  
# 345
}  }  
# 347
if ((++__beg) != __end) { 
# 348
__c = (*__beg); } else { 
# 350
__testeof = true; }  
# 351
} }  }  
# 355
if (__found_grouping.size()) 
# 356
{ 
# 358
if ((!__found_dec) && (!__found_sci)) { 
# 359
(__found_grouping += (static_cast< char>(__sep_pos))); }  
# 361
if (!std::__verify_grouping((__lc->_M_grouping), (__lc->_M_grouping_size), __found_grouping)) { 
# 364
__err = ios_base::failbit; }  
# 365
}  
# 367
return __beg; 
# 368
} 
# 370
template< class _CharT, class _InIter> 
# 371
template< class _ValueT> 
# 372
__attribute((__abi_tag__("cxx11"))) _InIter 
# 375
num_get< _CharT, _InIter> ::_M_extract_int(_InIter __beg, _InIter __end, ios_base &__io, ios_base::iostate &
# 376
__err, _ValueT &__v) const 
# 377
{ 
# 378
typedef char_traits< _CharT>  __traits_type; 
# 379
using __gnu_cxx::__add_unsigned;
# 380
typedef typename __gnu_cxx::__add_unsigned< _ValueT> ::__type __unsigned_type; 
# 381
typedef __numpunct_cache< _CharT>  __cache_type; 
# 382
__use_cache< __numpunct_cache< _CharT> >  __uc; 
# 383
const locale &__loc = __io._M_getloc(); 
# 384
const __cache_type *__lc = __uc(__loc); 
# 385
const _CharT *__lit = ((__lc->_M_atoms_in)); 
# 386
char_type __c = (char_type()); 
# 389
const ios_base::fmtflags __basefield = ((__io.flags()) & ios_base::basefield); 
# 391
const bool __oct = __basefield == ios_base::oct; 
# 392
int __base = __oct ? 8 : ((__basefield == ios_base::hex) ? 16 : 10); 
# 395
bool __testeof = __beg == __end; 
# 398
bool __negative = false; 
# 399
if (!__testeof) 
# 400
{ 
# 401
__c = (*__beg); 
# 402
__negative = (__c == (__lit[__num_base::_S_iminus])); 
# 403
if ((__negative || (__c == (__lit[__num_base::_S_iplus]))) && (!((__lc->_M_use_grouping) && (__c == (__lc->_M_thousands_sep)))) && (!(__c == (__lc->_M_decimal_point)))) 
# 406
{ 
# 407
if ((++__beg) != __end) { 
# 408
__c = (*__beg); } else { 
# 410
__testeof = true; }  
# 411
}  
# 412
}  
# 416
bool __found_zero = false; 
# 417
int __sep_pos = 0; 
# 418
while (!__testeof) 
# 419
{ 
# 420
if (((__lc->_M_use_grouping) && (__c == (__lc->_M_thousands_sep))) || (__c == (__lc->_M_decimal_point))) { 
# 422
break; } else { 
# 423
if ((__c == (__lit[__num_base::_S_izero])) && ((!__found_zero) || (__base == 10))) 
# 425
{ 
# 426
__found_zero = true; 
# 427
++__sep_pos; 
# 428
if (__basefield == 0) { 
# 429
__base = 8; }  
# 430
if (__base == 8) { 
# 431
__sep_pos = 0; }  
# 432
} else { 
# 433
if (__found_zero && ((__c == (__lit[__num_base::_S_ix])) || (__c == (__lit[__num_base::_S_iX])))) 
# 436
{ 
# 437
if (__basefield == 0) { 
# 438
__base = 16; }  
# 439
if (__base == 16) 
# 440
{ 
# 441
__found_zero = false; 
# 442
__sep_pos = 0; 
# 443
} else { 
# 445
break; }  
# 446
} else { 
# 448
break; }  }  }  
# 450
if ((++__beg) != __end) 
# 451
{ 
# 452
__c = (*__beg); 
# 453
if (!__found_zero) { 
# 454
break; }  
# 455
} else { 
# 457
__testeof = true; }  
# 458
}  
# 462
const size_t __len = (__base == 16) ? (__num_base::_S_iend) - (__num_base::_S_izero) : __base; 
# 466
typedef __gnu_cxx::__numeric_traits< _ValueT>  __num_traits; 
# 467
__cxx11::string __found_grouping; 
# 468
if (__lc->_M_use_grouping) { 
# 469
__found_grouping.reserve(32); }  
# 470
bool __testfail = false; 
# 471
bool __testoverflow = false; 
# 472
const __unsigned_type __max = (__negative && __num_traits::__is_signed) ? -(static_cast< __unsigned_type>(__num_traits::__min)) : __num_traits::__max; 
# 476
const __unsigned_type __smax = __max / __base; 
# 477
__unsigned_type __result = (0); 
# 478
int __digit = 0; 
# 479
const char_type *__lit_zero = __lit + __num_base::_S_izero; 
# 481
if (!(__lc->_M_allocated)) { 
# 483
while (!__testeof) 
# 484
{ 
# 485
__digit = _M_find(__lit_zero, __len, __c); 
# 486
if (__digit == (-1)) { 
# 487
break; }  
# 489
if (__result > __smax) { 
# 490
__testoverflow = true; } else 
# 492
{ 
# 493
__result *= __base; 
# 494
__testoverflow |= (__result > (__max - __digit)); 
# 495
__result += __digit; 
# 496
++__sep_pos; 
# 497
}  
# 499
if ((++__beg) != __end) { 
# 500
__c = (*__beg); } else { 
# 502
__testeof = true; }  
# 503
}  } else { 
# 505
while (!__testeof) 
# 506
{ 
# 509
if ((__lc->_M_use_grouping) && (__c == (__lc->_M_thousands_sep))) 
# 510
{ 
# 513
if (__sep_pos) 
# 514
{ 
# 515
(__found_grouping += (static_cast< char>(__sep_pos))); 
# 516
__sep_pos = 0; 
# 517
} else 
# 519
{ 
# 520
__testfail = true; 
# 521
break; 
# 522
}  
# 523
} else { 
# 524
if (__c == (__lc->_M_decimal_point)) { 
# 525
break; } else 
# 527
{ 
# 528
const char_type *__q = __traits_type::find(__lit_zero, __len, __c); 
# 530
if (!__q) { 
# 531
break; }  
# 533
__digit = (__q - __lit_zero); 
# 534
if (__digit > 15) { 
# 535
__digit -= 6; }  
# 536
if (__result > __smax) { 
# 537
__testoverflow = true; } else 
# 539
{ 
# 540
__result *= __base; 
# 541
__testoverflow |= (__result > (__max - __digit)); 
# 542
__result += __digit; 
# 543
++__sep_pos; 
# 544
}  
# 545
}  }  
# 547
if ((++__beg) != __end) { 
# 548
__c = (*__beg); } else { 
# 550
__testeof = true; }  
# 551
}  }  
# 555
if (__found_grouping.size()) 
# 556
{ 
# 558
(__found_grouping += (static_cast< char>(__sep_pos))); 
# 560
if (!std::__verify_grouping((__lc->_M_grouping), (__lc->_M_grouping_size), __found_grouping)) { 
# 563
__err = ios_base::failbit; }  
# 564
}  
# 568
if (((!__sep_pos) && (!__found_zero) && (!(__found_grouping.size()))) || __testfail) 
# 570
{ 
# 571
__v = 0; 
# 572
__err = ios_base::failbit; 
# 573
} else { 
# 574
if (__testoverflow) 
# 575
{ 
# 576
if (__negative && __num_traits::__is_signed) { 
# 577
__v = __num_traits::__min; } else { 
# 579
__v = __num_traits::__max; }  
# 580
__err = ios_base::failbit; 
# 581
} else { 
# 583
__v = (__negative ? -__result : __result); }  }  
# 585
if (__testeof) { 
# 586
(__err |= ios_base::eofbit); }  
# 587
return __beg; 
# 588
} 
# 592
template< class _CharT, class _InIter> _InIter 
# 595
num_get< _CharT, _InIter> ::do_get(iter_type __beg, iter_type __end, ios_base &__io, ios_base::iostate &
# 596
__err, bool &__v) const 
# 597
{ 
# 598
if (!(((__io.flags()) & ios_base::boolalpha))) 
# 599
{ 
# 603
long __l = (-1); 
# 604
__beg = _M_extract_int(__beg, __end, __io, __err, __l); 
# 605
if ((__l == (0)) || (__l == (1))) { 
# 606
__v = ((bool)__l); } else 
# 608
{ 
# 611
__v = true; 
# 612
__err = ios_base::failbit; 
# 613
if (__beg == __end) { 
# 614
(__err |= ios_base::eofbit); }  
# 615
}  
# 616
} else 
# 618
{ 
# 620
typedef __numpunct_cache< _CharT>  __cache_type; 
# 621
__use_cache< __numpunct_cache< _CharT> >  __uc; 
# 622
const locale &__loc = __io._M_getloc(); 
# 623
const __cache_type *__lc = __uc(__loc); 
# 625
bool __testf = true; 
# 626
bool __testt = true; 
# 627
bool __donef = (__lc->_M_falsename_size) == 0; 
# 628
bool __donet = (__lc->_M_truename_size) == 0; 
# 629
bool __testeof = false; 
# 630
size_t __n = (0); 
# 631
while ((!__donef) || (!__donet)) 
# 632
{ 
# 633
if (__beg == __end) 
# 634
{ 
# 635
__testeof = true; 
# 636
break; 
# 637
}  
# 639
const char_type __c = (*__beg); 
# 641
if (!__donef) { 
# 642
__testf = (__c == ((__lc->_M_falsename)[__n])); }  
# 644
if ((!__testf) && __donet) { 
# 645
break; }  
# 647
if (!__donet) { 
# 648
__testt = (__c == ((__lc->_M_truename)[__n])); }  
# 650
if ((!__testt) && __donef) { 
# 651
break; }  
# 653
if ((!__testt) && (!__testf)) { 
# 654
break; }  
# 656
++__n; 
# 657
++__beg; 
# 659
__donef = ((!__testf) || (__n >= (__lc->_M_falsename_size))); 
# 660
__donet = ((!__testt) || (__n >= (__lc->_M_truename_size))); 
# 661
}  
# 662
if (__testf && (__n == (__lc->_M_falsename_size)) && __n) 
# 663
{ 
# 664
__v = false; 
# 665
if (__testt && (__n == (__lc->_M_truename_size))) { 
# 666
__err = ios_base::failbit; } else { 
# 668
__err = (__testeof ? ios_base::eofbit : ios_base::goodbit); }  
# 669
} else { 
# 670
if (__testt && (__n == (__lc->_M_truename_size)) && __n) 
# 671
{ 
# 672
__v = true; 
# 673
__err = (__testeof ? ios_base::eofbit : ios_base::goodbit); 
# 674
} else 
# 676
{ 
# 679
__v = false; 
# 680
__err = ios_base::failbit; 
# 681
if (__testeof) { 
# 682
(__err |= ios_base::eofbit); }  
# 683
}  }  
# 684
}  
# 685
return __beg; 
# 686
} 
# 688
template< class _CharT, class _InIter> _InIter 
# 691
num_get< _CharT, _InIter> ::do_get(iter_type __beg, iter_type __end, ios_base &__io, ios_base::iostate &
# 692
__err, float &__v) const 
# 693
{ 
# 694
__cxx11::string __xtrc; 
# 695
__xtrc.reserve(32); 
# 696
__beg = _M_extract_float(__beg, __end, __io, __err, __xtrc); 
# 697
std::__convert_to_v(__xtrc.c_str(), __v, __err, _S_get_c_locale()); 
# 698
if (__beg == __end) { 
# 699
(__err |= ios_base::eofbit); }  
# 700
return __beg; 
# 701
} 
# 703
template< class _CharT, class _InIter> _InIter 
# 706
num_get< _CharT, _InIter> ::do_get(iter_type __beg, iter_type __end, ios_base &__io, ios_base::iostate &
# 707
__err, double &__v) const 
# 708
{ 
# 709
__cxx11::string __xtrc; 
# 710
__xtrc.reserve(32); 
# 711
__beg = _M_extract_float(__beg, __end, __io, __err, __xtrc); 
# 712
std::__convert_to_v(__xtrc.c_str(), __v, __err, _S_get_c_locale()); 
# 713
if (__beg == __end) { 
# 714
(__err |= ios_base::eofbit); }  
# 715
return __beg; 
# 716
} 
# 735 "/usr/include/c++/8/bits/locale_facets.tcc" 3
template< class _CharT, class _InIter> _InIter 
# 738
num_get< _CharT, _InIter> ::do_get(iter_type __beg, iter_type __end, ios_base &__io, ios_base::iostate &
# 739
__err, long double &__v) const 
# 740
{ 
# 741
__cxx11::string __xtrc; 
# 742
__xtrc.reserve(32); 
# 743
__beg = _M_extract_float(__beg, __end, __io, __err, __xtrc); 
# 744
std::__convert_to_v(__xtrc.c_str(), __v, __err, _S_get_c_locale()); 
# 745
if (__beg == __end) { 
# 746
(__err |= ios_base::eofbit); }  
# 747
return __beg; 
# 748
} 
# 750
template< class _CharT, class _InIter> _InIter 
# 753
num_get< _CharT, _InIter> ::do_get(iter_type __beg, iter_type __end, ios_base &__io, ios_base::iostate &
# 754
__err, void *&__v) const 
# 755
{ 
# 757
typedef ios_base::fmtflags fmtflags; 
# 758
const fmtflags __fmt = __io.flags(); 
# 759
__io.flags((((__fmt & ((~ios_base::basefield)))) | ios_base::hex)); 
# 763
typedef __gnu_cxx::__conditional_type< true, unsigned long, unsigned long long> ::__type _UIntPtrType; 
# 765
_UIntPtrType __ul; 
# 766
__beg = _M_extract_int(__beg, __end, __io, __err, __ul); 
# 769
__io.flags(__fmt); 
# 771
__v = (reinterpret_cast< void *>(__ul)); 
# 772
return __beg; 
# 773
} 
# 777
template< class _CharT, class _OutIter> void 
# 780
num_put< _CharT, _OutIter> ::_M_pad(_CharT __fill, streamsize __w, ios_base &__io, _CharT *
# 781
__new, const _CharT *__cs, int &__len) const 
# 782
{ 
# 785
__pad< _CharT, char_traits< _CharT> > ::_S_pad(__io, __fill, __new, __cs, __w, __len); 
# 787
__len = (static_cast< int>(__w)); 
# 788
} 
# 792
template< class _CharT, class _ValueT> int 
# 794
__int_to_char(_CharT *__bufend, _ValueT __v, const _CharT *__lit, ios_base::fmtflags 
# 795
__flags, bool __dec) 
# 796
{ 
# 797
_CharT *__buf = __bufend; 
# 798
if (__builtin_expect(__dec, true)) 
# 799
{ 
# 801
do 
# 802
{ 
# 803
(*(--__buf)) = (__lit[(__v % 10) + __num_base::_S_odigits]); 
# 804
__v /= 10; 
# 805
} 
# 806
while (__v != 0); 
# 807
} else { 
# 808
if (((__flags & ios_base::basefield)) == ios_base::oct) 
# 809
{ 
# 811
do 
# 812
{ 
# 813
(*(--__buf)) = (__lit[(__v & 7) + __num_base::_S_odigits]); 
# 814
__v >>= 3; 
# 815
} 
# 816
while (__v != 0); 
# 817
} else 
# 819
{ 
# 821
const bool __uppercase = (__flags & ios_base::uppercase); 
# 822
const int __case_offset = __uppercase ? __num_base::_S_oudigits : __num_base::_S_odigits; 
# 824
do 
# 825
{ 
# 826
(*(--__buf)) = (__lit[(__v & 15) + __case_offset]); 
# 827
__v >>= 4; 
# 828
} 
# 829
while (__v != 0); 
# 830
}  }  
# 831
return __bufend - __buf; 
# 832
} 
# 836
template< class _CharT, class _OutIter> void 
# 839
num_put< _CharT, _OutIter> ::_M_group_int(const char *__grouping, size_t __grouping_size, _CharT __sep, ios_base &, _CharT *
# 840
__new, _CharT *__cs, int &__len) const 
# 841
{ 
# 842
_CharT *__p = std::__add_grouping(__new, __sep, __grouping, __grouping_size, __cs, __cs + __len); 
# 844
__len = (__p - __new); 
# 845
} 
# 847
template< class _CharT, class _OutIter> 
# 848
template< class _ValueT> _OutIter 
# 851
num_put< _CharT, _OutIter> ::_M_insert_int(_OutIter __s, ios_base &__io, _CharT __fill, _ValueT 
# 852
__v) const 
# 853
{ 
# 854
using __gnu_cxx::__add_unsigned;
# 855
typedef typename __gnu_cxx::__add_unsigned< _ValueT> ::__type __unsigned_type; 
# 856
typedef __numpunct_cache< _CharT>  __cache_type; 
# 857
__use_cache< __numpunct_cache< _CharT> >  __uc; 
# 858
const locale &__loc = __io._M_getloc(); 
# 859
const __cache_type *__lc = __uc(__loc); 
# 860
const _CharT *__lit = ((__lc->_M_atoms_out)); 
# 861
const ios_base::fmtflags __flags = __io.flags(); 
# 864
const int __ilen = ((5) * sizeof(_ValueT)); 
# 865
_CharT *__cs = static_cast< _CharT *>(__builtin_alloca(sizeof(_CharT) * __ilen)); 
# 870
const ios_base::fmtflags __basefield = (__flags & ios_base::basefield); 
# 871
const bool __dec = (__basefield != ios_base::oct) && (__basefield != ios_base::hex); 
# 873
const __unsigned_type __u = ((__v > 0) || (!__dec)) ? (__unsigned_type)__v : (-((__unsigned_type)__v)); 
# 876
int __len = __int_to_char(__cs + __ilen, __u, __lit, __flags, __dec); 
# 877
__cs += (__ilen - __len); 
# 880
if (__lc->_M_use_grouping) 
# 881
{ 
# 884
_CharT *__cs2 = static_cast< _CharT *>(__builtin_alloca((sizeof(_CharT) * (__len + 1)) * (2))); 
# 887
_M_group_int((__lc->_M_grouping), (__lc->_M_grouping_size), (__lc->_M_thousands_sep), __io, __cs2 + 2, __cs, __len); 
# 889
__cs = (__cs2 + 2); 
# 890
}  
# 893
if (__builtin_expect(__dec, true)) 
# 894
{ 
# 896
if (__v >= 0) 
# 897
{ 
# 898
if (((bool)((__flags & ios_base::showpos))) && __gnu_cxx::__numeric_traits< _ValueT> ::__is_signed) { 
# 900
((*(--__cs)) = (__lit[__num_base::_S_oplus])), (++__len); }  
# 901
} else { 
# 903
((*(--__cs)) = (__lit[__num_base::_S_ominus])), (++__len); }  
# 904
} else { 
# 905
if (((bool)((__flags & ios_base::showbase))) && __v) 
# 906
{ 
# 907
if (__basefield == ios_base::oct) { 
# 908
((*(--__cs)) = (__lit[__num_base::_S_odigits])), (++__len); } else 
# 910
{ 
# 912
const bool __uppercase = (__flags & ios_base::uppercase); 
# 913
(*(--__cs)) = (__lit[(__num_base::_S_ox) + __uppercase]); 
# 915
(*(--__cs)) = (__lit[__num_base::_S_odigits]); 
# 916
__len += 2; 
# 917
}  
# 918
}  }  
# 921
const streamsize __w = __io.width(); 
# 922
if (__w > (static_cast< streamsize>(__len))) 
# 923
{ 
# 924
_CharT *__cs3 = static_cast< _CharT *>(__builtin_alloca(sizeof(_CharT) * __w)); 
# 926
_M_pad(__fill, __w, __io, __cs3, __cs, __len); 
# 927
__cs = __cs3; 
# 928
}  
# 929
__io.width(0); 
# 933
return std::__write(__s, __cs, __len); 
# 934
} 
# 936
template< class _CharT, class _OutIter> void 
# 939
num_put< _CharT, _OutIter> ::_M_group_float(const char *__grouping, size_t __grouping_size, _CharT 
# 940
__sep, const _CharT *__p, _CharT *__new, _CharT *
# 941
__cs, int &__len) const 
# 942
{ 
# 946
const int __declen = (__p) ? __p - __cs : __len; 
# 947
_CharT *__p2 = std::__add_grouping(__new, __sep, __grouping, __grouping_size, __cs, __cs + __declen); 
# 952
int __newlen = __p2 - __new; 
# 953
if (__p) 
# 954
{ 
# 955
char_traits< _CharT> ::copy(__p2, __p, __len - __declen); 
# 956
__newlen += (__len - __declen); 
# 957
}  
# 958
__len = __newlen; 
# 959
} 
# 971 "/usr/include/c++/8/bits/locale_facets.tcc" 3
template< class _CharT, class _OutIter> 
# 972
template< class _ValueT> _OutIter 
# 975
num_put< _CharT, _OutIter> ::_M_insert_float(_OutIter __s, ios_base &__io, _CharT __fill, char __mod, _ValueT 
# 976
__v) const 
# 977
{ 
# 978
typedef __numpunct_cache< _CharT>  __cache_type; 
# 979
__use_cache< __numpunct_cache< _CharT> >  __uc; 
# 980
const locale &__loc = __io._M_getloc(); 
# 981
const __cache_type *__lc = __uc(__loc); 
# 984
const streamsize __prec = (__io.precision() < (0)) ? 6 : __io.precision(); 
# 986
const int __max_digits = (__gnu_cxx::__numeric_traits< _ValueT> ::__digits10); 
# 990
int __len; 
# 992
char __fbuf[16]; 
# 993
__num_base::_S_format_float(__io, __fbuf, __mod); 
# 997
const bool __use_prec = (((__io.flags()) & ios_base::floatfield)) != ios_base::floatfield; 
# 1002
int __cs_size = (__max_digits * 3); 
# 1003
char *__cs = static_cast< char *>(__builtin_alloca(__cs_size)); 
# 1004
if (__use_prec) { 
# 1005
__len = std::__convert_from_v(_S_get_c_locale(), __cs, __cs_size, __fbuf, __prec, __v); } else { 
# 1008
__len = std::__convert_from_v(_S_get_c_locale(), __cs, __cs_size, __fbuf, __v); }  
# 1012
if (__len >= __cs_size) 
# 1013
{ 
# 1014
__cs_size = (__len + 1); 
# 1015
__cs = (static_cast< char *>(__builtin_alloca(__cs_size))); 
# 1016
if (__use_prec) { 
# 1017
__len = std::__convert_from_v(_S_get_c_locale(), __cs, __cs_size, __fbuf, __prec, __v); } else { 
# 1020
__len = std::__convert_from_v(_S_get_c_locale(), __cs, __cs_size, __fbuf, __v); }  
# 1022
}  
# 1044 "/usr/include/c++/8/bits/locale_facets.tcc" 3
const ctype< _CharT>  &__ctype = use_facet< ctype< _CharT> > (__loc); 
# 1046
_CharT *__ws = static_cast< _CharT *>(__builtin_alloca(sizeof(_CharT) * __len)); 
# 1048
(__ctype.widen(__cs, __cs + __len, __ws)); 
# 1051
_CharT *__wp = (0); 
# 1052
const char *__p = char_traits< char> ::find(__cs, __len, '.'); 
# 1053
if (__p) 
# 1054
{ 
# 1055
__wp = (__ws + (__p - __cs)); 
# 1056
(*__wp) = (__lc->_M_decimal_point); 
# 1057
}  
# 1062
if ((__lc->_M_use_grouping) && ((__wp || (__len < 3)) || (((__cs[1]) <= ('9')) && ((__cs[2]) <= ('9')) && ((__cs[1]) >= ('0')) && ((__cs[2]) >= ('0'))))) 
# 1065
{ 
# 1068
_CharT *__ws2 = static_cast< _CharT *>(__builtin_alloca((sizeof(_CharT) * __len) * (2))); 
# 1071
streamsize __off = (0); 
# 1072
if (((__cs[0]) == ('-')) || ((__cs[0]) == ('+'))) 
# 1073
{ 
# 1074
__off = (1); 
# 1075
(__ws2[0]) = (__ws[0]); 
# 1076
__len -= 1; 
# 1077
}  
# 1079
_M_group_float((__lc->_M_grouping), (__lc->_M_grouping_size), (__lc->_M_thousands_sep), __wp, __ws2 + __off, __ws + __off, __len); 
# 1082
__len += __off; 
# 1084
__ws = __ws2; 
# 1085
}  
# 1088
const streamsize __w = __io.width(); 
# 1089
if (__w > (static_cast< streamsize>(__len))) 
# 1090
{ 
# 1091
_CharT *__ws3 = static_cast< _CharT *>(__builtin_alloca(sizeof(_CharT) * __w)); 
# 1093
_M_pad(__fill, __w, __io, __ws3, __ws, __len); 
# 1094
__ws = __ws3; 
# 1095
}  
# 1096
__io.width(0); 
# 1100
return std::__write(__s, __ws, __len); 
# 1101
} 
# 1103
template< class _CharT, class _OutIter> _OutIter 
# 1106
num_put< _CharT, _OutIter> ::do_put(iter_type __s, ios_base &__io, char_type __fill, bool __v) const 
# 1107
{ 
# 1108
const ios_base::fmtflags __flags = __io.flags(); 
# 1109
if (((__flags & ios_base::boolalpha)) == 0) 
# 1110
{ 
# 1111
const long __l = __v; 
# 1112
__s = _M_insert_int(__s, __io, __fill, __l); 
# 1113
} else 
# 1115
{ 
# 1116
typedef __numpunct_cache< _CharT>  __cache_type; 
# 1117
__use_cache< __numpunct_cache< _CharT> >  __uc; 
# 1118
const locale &__loc = __io._M_getloc(); 
# 1119
const __cache_type *__lc = __uc(__loc); 
# 1121
const _CharT *__name = __v ? __lc->_M_truename : (__lc->_M_falsename); 
# 1123
int __len = __v ? __lc->_M_truename_size : (__lc->_M_falsename_size); 
# 1126
const streamsize __w = __io.width(); 
# 1127
if (__w > (static_cast< streamsize>(__len))) 
# 1128
{ 
# 1129
const streamsize __plen = __w - __len; 
# 1130
_CharT *__ps = static_cast< _CharT *>(__builtin_alloca(sizeof(_CharT) * __plen)); 
# 1134
char_traits< _CharT> ::assign(__ps, __plen, __fill); 
# 1135
__io.width(0); 
# 1137
if (((__flags & ios_base::adjustfield)) == ios_base::left) 
# 1138
{ 
# 1139
__s = std::__write(__s, __name, __len); 
# 1140
__s = std::__write(__s, __ps, __plen); 
# 1141
} else 
# 1143
{ 
# 1144
__s = std::__write(__s, __ps, __plen); 
# 1145
__s = std::__write(__s, __name, __len); 
# 1146
}  
# 1147
return __s; 
# 1148
}  
# 1149
__io.width(0); 
# 1150
__s = std::__write(__s, __name, __len); 
# 1151
}  
# 1152
return __s; 
# 1153
} 
# 1155
template< class _CharT, class _OutIter> _OutIter 
# 1158
num_put< _CharT, _OutIter> ::do_put(iter_type __s, ios_base &__io, char_type __fill, double __v) const 
# 1159
{ return _M_insert_float(__s, __io, __fill, ((char)0), __v); } 
# 1169 "/usr/include/c++/8/bits/locale_facets.tcc" 3
template< class _CharT, class _OutIter> _OutIter 
# 1172
num_put< _CharT, _OutIter> ::do_put(iter_type __s, ios_base &__io, char_type __fill, long double 
# 1173
__v) const 
# 1174
{ return _M_insert_float(__s, __io, __fill, 'L', __v); } 
# 1176
template< class _CharT, class _OutIter> _OutIter 
# 1179
num_put< _CharT, _OutIter> ::do_put(iter_type __s, ios_base &__io, char_type __fill, const void *
# 1180
__v) const 
# 1181
{ 
# 1182
const ios_base::fmtflags __flags = __io.flags(); 
# 1183
const ios_base::fmtflags __fmt = (~((ios_base::basefield | ios_base::uppercase))); 
# 1185
__io.flags((((__flags & __fmt)) | ((ios_base::hex | ios_base::showbase)))); 
# 1189
typedef __gnu_cxx::__conditional_type< true, unsigned long, unsigned long long> ::__type _UIntPtrType; 
# 1191
__s = _M_insert_int(__s, __io, __fill, reinterpret_cast< _UIntPtrType>(__v)); 
# 1193
__io.flags(__flags); 
# 1194
return __s; 
# 1195
} 
# 1206 "/usr/include/c++/8/bits/locale_facets.tcc" 3
template< class _CharT, class _Traits> void 
# 1208
__pad< _CharT, _Traits> ::_S_pad(ios_base &__io, _CharT __fill, _CharT *
# 1209
__news, const _CharT *__olds, streamsize 
# 1210
__newlen, streamsize __oldlen) 
# 1211
{ 
# 1212
const size_t __plen = static_cast< size_t>(__newlen - __oldlen); 
# 1213
const ios_base::fmtflags __adjust = ((__io.flags()) & ios_base::adjustfield); 
# 1216
if (__adjust == ios_base::left) 
# 1217
{ 
# 1218
_Traits::copy(__news, __olds, __oldlen); 
# 1219
_Traits::assign(__news + __oldlen, __plen, __fill); 
# 1220
return; 
# 1221
}  
# 1223
size_t __mod = (0); 
# 1224
if (__adjust == ios_base::internal) 
# 1225
{ 
# 1229
const locale &__loc = __io._M_getloc(); 
# 1230
const ctype< _CharT>  &__ctype = use_facet< ctype< _CharT> > (__loc); 
# 1232
if (((__ctype.widen('-')) == (__olds[0])) || ((__ctype.widen('+')) == (__olds[0]))) 
# 1234
{ 
# 1235
(__news[0]) = (__olds[0]); 
# 1236
__mod = (1); 
# 1237
++__news; 
# 1238
} else { 
# 1239
if (((__ctype.widen('0')) == (__olds[0])) && (__oldlen > (1)) && (((__ctype.widen('x')) == (__olds[1])) || ((__ctype.widen('X')) == (__olds[1])))) 
# 1243
{ 
# 1244
(__news[0]) = (__olds[0]); 
# 1245
(__news[1]) = (__olds[1]); 
# 1246
__mod = (2); 
# 1247
__news += 2; 
# 1248
}  }  
# 1250
}  
# 1251
_Traits::assign(__news, __plen, __fill); 
# 1252
_Traits::copy(__news + __plen, __olds + __mod, __oldlen - __mod); 
# 1253
} 
# 1255
template< class _CharT> _CharT *
# 1257
__add_grouping(_CharT *__s, _CharT __sep, const char *
# 1258
__gbeg, size_t __gsize, const _CharT *
# 1259
__first, const _CharT *__last) 
# 1260
{ 
# 1261
size_t __idx = (0); 
# 1262
size_t __ctr = (0); 
# 1264
while (((__last - __first) > (__gbeg[__idx])) && ((static_cast< signed char>(__gbeg[__idx])) > 0) && ((__gbeg[__idx]) != __gnu_cxx::__numeric_traits_integer< char> ::__max)) 
# 1267
{ 
# 1268
__last -= (__gbeg[__idx]); 
# 1269
(__idx < (__gsize - (1))) ? ++__idx : (++__ctr); 
# 1270
}  
# 1272
while (__first != __last) { 
# 1273
(*(__s++)) = (*(__first++)); }  
# 1275
while (__ctr--) 
# 1276
{ 
# 1277
(*(__s++)) = __sep; 
# 1278
for (char __i = __gbeg[__idx]; __i > 0; --__i) { 
# 1279
(*(__s++)) = (*(__first++)); }  
# 1280
}  
# 1282
while (__idx--) 
# 1283
{ 
# 1284
(*(__s++)) = __sep; 
# 1285
for (char __i = __gbeg[__idx]; __i > 0; --__i) { 
# 1286
(*(__s++)) = (*(__first++)); }  
# 1287
}  
# 1289
return __s; 
# 1290
} 
# 1295
extern template class __cxx11::numpunct< char> ;
# 1296
extern template class __cxx11::numpunct_byname< char> ;
# 1297
extern template class num_get< char, istreambuf_iterator< char, char_traits< char> > > ;
# 1298
extern template class num_put< char, ostreambuf_iterator< char, char_traits< char> > > ;
# 1301
extern template const ctype< char>  &use_facet< ctype< char> > (const locale &);
# 1305
extern template const __cxx11::numpunct< char>  &use_facet< __cxx11::numpunct< char> > (const locale &);
# 1309
extern template const num_put< char, ostreambuf_iterator< char, char_traits< char> > >  &use_facet< num_put< char, ostreambuf_iterator< char, char_traits< char> > > > (const locale &);
# 1313
extern template const num_get< char, istreambuf_iterator< char, char_traits< char> > >  &use_facet< num_get< char, istreambuf_iterator< char, char_traits< char> > > > (const locale &);
# 1317
extern template bool has_facet< ctype< char> > (const locale &) throw();
# 1321
extern template bool has_facet< __cxx11::numpunct< char> > (const locale &) throw();
# 1325
extern template bool has_facet< num_put< char, ostreambuf_iterator< char, char_traits< char> > > > (const locale &) throw();
# 1329
extern template bool has_facet< num_get< char, istreambuf_iterator< char, char_traits< char> > > > (const locale &) throw();
# 1334
extern template class __cxx11::numpunct< wchar_t> ;
# 1335
extern template class __cxx11::numpunct_byname< wchar_t> ;
# 1336
extern template class num_get< wchar_t, istreambuf_iterator< wchar_t, char_traits< wchar_t> > > ;
# 1337
extern template class num_put< wchar_t, ostreambuf_iterator< wchar_t, char_traits< wchar_t> > > ;
# 1340
extern template const ctype< wchar_t>  &use_facet< ctype< wchar_t> > (const locale &);
# 1344
extern template const __cxx11::numpunct< wchar_t>  &use_facet< __cxx11::numpunct< wchar_t> > (const locale &);
# 1348
extern template const num_put< wchar_t, ostreambuf_iterator< wchar_t, char_traits< wchar_t> > >  &use_facet< num_put< wchar_t, ostreambuf_iterator< wchar_t, char_traits< wchar_t> > > > (const locale &);
# 1352
extern template const num_get< wchar_t, istreambuf_iterator< wchar_t, char_traits< wchar_t> > >  &use_facet< num_get< wchar_t, istreambuf_iterator< wchar_t, char_traits< wchar_t> > > > (const locale &);
# 1356
extern template bool has_facet< ctype< wchar_t> > (const locale &) throw();
# 1360
extern template bool has_facet< __cxx11::numpunct< wchar_t> > (const locale &) throw();
# 1364
extern template bool has_facet< num_put< wchar_t, ostreambuf_iterator< wchar_t, char_traits< wchar_t> > > > (const locale &) throw();
# 1368
extern template bool has_facet< num_get< wchar_t, istreambuf_iterator< wchar_t, char_traits< wchar_t> > > > (const locale &) throw();
# 1375
}
# 41 "/usr/include/c++/8/bits/basic_ios.h" 3
namespace std __attribute((__visibility__("default"))) { 
# 45
template< class _Facet> inline const _Facet &
# 47
__check_facet(const _Facet *__f) 
# 48
{ 
# 49
if (!__f) { 
# 50
__throw_bad_cast(); }  
# 51
return *__f; 
# 52
} 
# 66 "/usr/include/c++/8/bits/basic_ios.h" 3
template< class _CharT, class _Traits> 
# 67
class basic_ios : public ios_base { 
# 76
public: typedef _CharT char_type; 
# 77
typedef typename _Traits::int_type int_type; 
# 78
typedef typename _Traits::pos_type pos_type; 
# 79
typedef typename _Traits::off_type off_type; 
# 80
typedef _Traits traits_type; 
# 87
typedef ctype< _CharT>  __ctype_type; 
# 89
typedef num_put< _CharT, ostreambuf_iterator< _CharT, _Traits> >  __num_put_type; 
# 91
typedef num_get< _CharT, istreambuf_iterator< _CharT, _Traits> >  __num_get_type; 
# 96
protected: basic_ostream< _CharT, _Traits>  *_M_tie; 
# 97
mutable char_type _M_fill; 
# 98
mutable bool _M_fill_init; 
# 99
basic_streambuf< _CharT, _Traits>  *_M_streambuf; 
# 102
const __ctype_type *_M_ctype; 
# 104
const __num_put_type *_M_num_put; 
# 106
const __num_get_type *_M_num_get; 
# 117 "/usr/include/c++/8/bits/basic_ios.h" 3
public: explicit operator bool() const 
# 118
{ return !fail(); } 
# 125
bool operator!() const 
# 126
{ return fail(); } 
# 137 "/usr/include/c++/8/bits/basic_ios.h" 3
iostate rdstate() const 
# 138
{ return _M_streambuf_state; } 
# 148 "/usr/include/c++/8/bits/basic_ios.h" 3
void clear(iostate __state = goodbit); 
# 157
void setstate(iostate __state) 
# 158
{ clear(((rdstate()) | __state)); } 
# 164
void _M_setstate(iostate __state) 
# 165
{ 
# 168
((_M_streambuf_state) |= __state); 
# 169
if (((exceptions()) & __state)) { 
# 170
throw; }  
# 171
} 
# 180
bool good() const 
# 181
{ return (rdstate()) == 0; } 
# 190
bool eof() const 
# 191
{ return (((rdstate()) & eofbit)) != 0; } 
# 201 "/usr/include/c++/8/bits/basic_ios.h" 3
bool fail() const 
# 202
{ return (((rdstate()) & ((badbit | failbit)))) != 0; } 
# 211
bool bad() const 
# 212
{ return (((rdstate()) & badbit)) != 0; } 
# 222 "/usr/include/c++/8/bits/basic_ios.h" 3
iostate exceptions() const 
# 223
{ return _M_exception; } 
# 257 "/usr/include/c++/8/bits/basic_ios.h" 3
void exceptions(iostate __except) 
# 258
{ 
# 259
(_M_exception) = __except; 
# 260
clear(_M_streambuf_state); 
# 261
} 
# 270
explicit basic_ios(basic_streambuf< _CharT, _Traits>  *__sb) : ios_base(), _M_tie((0)), _M_fill(), _M_fill_init(false), _M_streambuf((0)), _M_ctype((0)), _M_num_put((0)), _M_num_get((0)) 
# 273
{ init(__sb); } 
# 282
virtual ~basic_ios() { } 
# 295 "/usr/include/c++/8/bits/basic_ios.h" 3
basic_ostream< _CharT, _Traits>  *tie() const 
# 296
{ return _M_tie; } 
# 307 "/usr/include/c++/8/bits/basic_ios.h" 3
basic_ostream< _CharT, _Traits>  *tie(basic_ostream< _CharT, _Traits>  *__tiestr) 
# 308
{ 
# 309
basic_ostream< _CharT, _Traits>  *__old = _M_tie; 
# 310
(_M_tie) = __tiestr; 
# 311
return __old; 
# 312
} 
# 321
basic_streambuf< _CharT, _Traits>  *rdbuf() const 
# 322
{ return _M_streambuf; } 
# 347 "/usr/include/c++/8/bits/basic_ios.h" 3
basic_streambuf< _CharT, _Traits>  *rdbuf(basic_streambuf< _CharT, _Traits>  * __sb); 
# 361 "/usr/include/c++/8/bits/basic_ios.h" 3
basic_ios &copyfmt(const basic_ios & __rhs); 
# 370
char_type fill() const 
# 371
{ 
# 372
if (!(_M_fill_init)) 
# 373
{ 
# 374
(_M_fill) = widen(' '); 
# 375
(_M_fill_init) = true; 
# 376
}  
# 377
return _M_fill; 
# 378
} 
# 390 "/usr/include/c++/8/bits/basic_ios.h" 3
char_type fill(char_type __ch) 
# 391
{ 
# 392
char_type __old = (this->fill()); 
# 393
(_M_fill) = __ch; 
# 394
return __old; 
# 395
} 
# 410 "/usr/include/c++/8/bits/basic_ios.h" 3
locale imbue(const locale & __loc); 
# 430 "/usr/include/c++/8/bits/basic_ios.h" 3
char narrow(char_type __c, char __dfault) const 
# 431
{ return (__check_facet(_M_ctype).narrow(__c, __dfault)); } 
# 449 "/usr/include/c++/8/bits/basic_ios.h" 3
char_type widen(char __c) const 
# 450
{ return (__check_facet(_M_ctype).widen(__c)); } 
# 460
protected: basic_ios() : ios_base(), _M_tie((0)), _M_fill(char_type()), _M_fill_init(false), _M_streambuf((0)), _M_ctype((0)), _M_num_put((0)), _M_num_get((0)) 
# 463
{ } 
# 472
void init(basic_streambuf< _CharT, _Traits>  * __sb); 
# 475
basic_ios(const basic_ios &) = delete;
# 476
basic_ios &operator=(const basic_ios &) = delete;
# 479
void move(basic_ios &__rhs) 
# 480
{ 
# 481
this->ios_base::_M_move(__rhs); 
# 482
_M_cache_locale(_M_ios_locale); 
# 483
(this->tie((__rhs.tie(nullptr)))); 
# 484
(_M_fill) = (__rhs._M_fill); 
# 485
(_M_fill_init) = (__rhs._M_fill_init); 
# 486
(_M_streambuf) = nullptr; 
# 487
} 
# 490
void move(basic_ios &&__rhs) 
# 491
{ (this->move(__rhs)); } 
# 494
void swap(basic_ios &__rhs) noexcept 
# 495
{ 
# 496
this->ios_base::_M_swap(__rhs); 
# 497
_M_cache_locale(_M_ios_locale); 
# 498
__rhs._M_cache_locale(__rhs._M_ios_locale); 
# 499
std::swap(_M_tie, __rhs._M_tie); 
# 500
std::swap(_M_fill, __rhs._M_fill); 
# 501
std::swap(_M_fill_init, __rhs._M_fill_init); 
# 502
} 
# 505
void set_rdbuf(basic_streambuf< _CharT, _Traits>  *__sb) 
# 506
{ (_M_streambuf) = __sb; } 
# 510
void _M_cache_locale(const locale & __loc); 
# 511
}; 
# 514
}
# 35 "/usr/include/c++/8/bits/basic_ios.tcc" 3
namespace std __attribute((__visibility__("default"))) { 
# 39
template< class _CharT, class _Traits> void 
# 41
basic_ios< _CharT, _Traits> ::clear(iostate __state) 
# 42
{ 
# 43
if ((this->rdbuf())) { 
# 44
(_M_streambuf_state) = __state; } else { 
# 46
(_M_streambuf_state) = ((__state | badbit)); }  
# 47
if (((exceptions()) & (rdstate()))) { 
# 48
__throw_ios_failure("basic_ios::clear"); }  
# 49
} 
# 51
template< class _CharT, class _Traits> basic_streambuf< _CharT, _Traits>  *
# 53
basic_ios< _CharT, _Traits> ::rdbuf(basic_streambuf< _CharT, _Traits>  *__sb) 
# 54
{ 
# 55
basic_streambuf< _CharT, _Traits>  *__old = _M_streambuf; 
# 56
(_M_streambuf) = __sb; 
# 57
clear(); 
# 58
return __old; 
# 59
} 
# 61
template< class _CharT, class _Traits> basic_ios< _CharT, _Traits>  &
# 63
basic_ios< _CharT, _Traits> ::copyfmt(const basic_ios &__rhs) 
# 64
{ 
# 67
if (this != (&__rhs)) 
# 68
{ 
# 73
_Words *__words = ((__rhs._M_word_size) <= (_S_local_word_size)) ? _M_local_word : (new _Words [__rhs._M_word_size]); 
# 77
_Callback_list *__cb = __rhs._M_callbacks; 
# 78
if (__cb) { 
# 79
__cb->_M_add_reference(); }  
# 80
this->ios_base::_M_call_callbacks(erase_event); 
# 81
if ((_M_word) != (_M_local_word)) 
# 82
{ 
# 83
delete [] (_M_word); 
# 84
(_M_word) = (0); 
# 85
}  
# 86
this->ios_base::_M_dispose_callbacks(); 
# 89
(_M_callbacks) = __cb; 
# 90
for (int __i = 0; __i < (__rhs._M_word_size); ++__i) { 
# 91
(__words[__i]) = ((__rhs._M_word)[__i]); }  
# 92
(_M_word) = __words; 
# 93
(_M_word_size) = (__rhs._M_word_size); 
# 95
this->flags(__rhs.flags()); 
# 96
this->width(__rhs.width()); 
# 97
this->precision(__rhs.precision()); 
# 98
(this->tie((__rhs.tie()))); 
# 99
(this->fill((__rhs.fill()))); 
# 100
((_M_ios_locale) = (__rhs.getloc())); 
# 101
_M_cache_locale(_M_ios_locale); 
# 103
this->ios_base::_M_call_callbacks(copyfmt_event); 
# 106
exceptions(__rhs.exceptions()); 
# 107
}  
# 108
return *this; 
# 109
} 
# 112
template< class _CharT, class _Traits> locale 
# 114
basic_ios< _CharT, _Traits> ::imbue(const locale &__loc) 
# 115
{ 
# 116
locale __old(this->getloc()); 
# 117
this->ios_base::imbue(__loc); 
# 118
_M_cache_locale(__loc); 
# 119
if ((this->rdbuf()) != 0) { 
# 120
((this->rdbuf())->pubimbue(__loc)); }  
# 121
return __old; 
# 122
} 
# 124
template< class _CharT, class _Traits> void 
# 126
basic_ios< _CharT, _Traits> ::init(basic_streambuf< _CharT, _Traits>  *__sb) 
# 127
{ 
# 129
this->ios_base::_M_init(); 
# 132
_M_cache_locale(_M_ios_locale); 
# 146 "/usr/include/c++/8/bits/basic_ios.tcc" 3
(_M_fill) = _CharT(); 
# 147
(_M_fill_init) = false; 
# 149
(_M_tie) = 0; 
# 150
(_M_exception) = goodbit; 
# 151
(_M_streambuf) = __sb; 
# 152
(_M_streambuf_state) = ((__sb) ? goodbit : badbit); 
# 153
} 
# 155
template< class _CharT, class _Traits> void 
# 157
basic_ios< _CharT, _Traits> ::_M_cache_locale(const locale &__loc) 
# 158
{ 
# 159
if (__builtin_expect(has_facet< __ctype_type> (__loc), true)) { 
# 160
(_M_ctype) = std::__addressof(use_facet< __ctype_type> (__loc)); } else { 
# 162
(_M_ctype) = 0; }  
# 164
if (__builtin_expect(has_facet< __num_put_type> (__loc), true)) { 
# 165
(_M_num_put) = std::__addressof(use_facet< __num_put_type> (__loc)); } else { 
# 167
(_M_num_put) = 0; }  
# 169
if (__builtin_expect(has_facet< __num_get_type> (__loc), true)) { 
# 170
(_M_num_get) = std::__addressof(use_facet< __num_get_type> (__loc)); } else { 
# 172
(_M_num_get) = 0; }  
# 173
} 
# 178
extern template class basic_ios< char, char_traits< char> > ;
# 181
extern template class basic_ios< wchar_t, char_traits< wchar_t> > ;
# 186
}
# 41 "/usr/include/c++/8/ostream" 3
namespace std __attribute((__visibility__("default"))) { 
# 57 "/usr/include/c++/8/ostream" 3
template< class _CharT, class _Traits> 
# 58
class basic_ostream : virtual public basic_ios< _CharT, _Traits>  { 
# 62
public: typedef _CharT char_type; 
# 63
typedef typename _Traits::int_type int_type; 
# 64
typedef typename _Traits::pos_type pos_type; 
# 65
typedef typename _Traits::off_type off_type; 
# 66
typedef _Traits traits_type; 
# 69
typedef basic_streambuf< _CharT, _Traits>  __streambuf_type; 
# 70
typedef std::basic_ios< _CharT, _Traits>  __ios_type; 
# 71
typedef basic_ostream __ostream_type; 
# 73
typedef num_put< _CharT, ostreambuf_iterator< _CharT, _Traits> >  __num_put_type; 
# 74
typedef ctype< _CharT>  __ctype_type; 
# 84 "/usr/include/c++/8/ostream" 3
explicit basic_ostream(__streambuf_type *__sb) 
# 85
{ (this->init(__sb)); } 
# 93
virtual ~basic_ostream() { } 
# 96
class sentry; 
# 97
friend class sentry; 
# 108 "/usr/include/c++/8/ostream" 3
__ostream_type &operator<<(__ostream_type &(*__pf)(__ostream_type &)) 
# 109
{ 
# 113
return __pf(*this); 
# 114
} 
# 117
__ostream_type &operator<<(__ios_type &(*__pf)(__ios_type &)) 
# 118
{ 
# 122
__pf(*this); 
# 123
return *this; 
# 124
} 
# 127
__ostream_type &operator<<(std::ios_base &(*__pf)(std::ios_base &)) 
# 128
{ 
# 132
__pf(*this); 
# 133
return *this; 
# 134
} 
# 166 "/usr/include/c++/8/ostream" 3
__ostream_type &operator<<(long __n) 
# 167
{ return _M_insert(__n); } 
# 170
__ostream_type &operator<<(unsigned long __n) 
# 171
{ return _M_insert(__n); } 
# 174
__ostream_type &operator<<(bool __n) 
# 175
{ return _M_insert(__n); } 
# 178
__ostream_type &operator<<(short __n); 
# 181
__ostream_type &operator<<(unsigned short __n) 
# 182
{ 
# 185
return _M_insert(static_cast< unsigned long>(__n)); 
# 186
} 
# 189
__ostream_type &operator<<(int __n); 
# 192
__ostream_type &operator<<(unsigned __n) 
# 193
{ 
# 196
return _M_insert(static_cast< unsigned long>(__n)); 
# 197
} 
# 201
__ostream_type &operator<<(long long __n) 
# 202
{ return _M_insert(__n); } 
# 205
__ostream_type &operator<<(unsigned long long __n) 
# 206
{ return _M_insert(__n); } 
# 220 "/usr/include/c++/8/ostream" 3
__ostream_type &operator<<(double __f) 
# 221
{ return _M_insert(__f); } 
# 224
__ostream_type &operator<<(float __f) 
# 225
{ 
# 228
return _M_insert(static_cast< double>(__f)); 
# 229
} 
# 232
__ostream_type &operator<<(long double __f) 
# 233
{ return _M_insert(__f); } 
# 245 "/usr/include/c++/8/ostream" 3
__ostream_type &operator<<(const void *__p) 
# 246
{ return _M_insert(__p); } 
# 270 "/usr/include/c++/8/ostream" 3
__ostream_type &operator<<(__streambuf_type * __sb); 
# 303 "/usr/include/c++/8/ostream" 3
__ostream_type &put(char_type __c); 
# 311
void _M_write(const char_type *__s, std::streamsize __n) 
# 312
{ 
# 313
const std::streamsize __put = ((this->rdbuf())->sputn(__s, __n)); 
# 314
if (__put != __n) { 
# 315
(this->setstate(ios_base::badbit)); }  
# 316
} 
# 335 "/usr/include/c++/8/ostream" 3
__ostream_type &write(const char_type * __s, std::streamsize __n); 
# 348 "/usr/include/c++/8/ostream" 3
__ostream_type &flush(); 
# 358 "/usr/include/c++/8/ostream" 3
pos_type tellp(); 
# 369 "/usr/include/c++/8/ostream" 3
__ostream_type &seekp(pos_type); 
# 381 "/usr/include/c++/8/ostream" 3
__ostream_type &seekp(off_type, std::ios_base::seekdir); 
# 384
protected: basic_ostream() 
# 385
{ (this->init(0)); } 
# 389
basic_ostream(basic_iostream< _CharT, _Traits>  &) { } 
# 391
basic_ostream(const basic_ostream &) = delete;
# 393
basic_ostream(basic_ostream &&__rhs) : __ios_type() 
# 395
{ __ios_type::move(__rhs); } 
# 399
basic_ostream &operator=(const basic_ostream &) = delete;
# 402
basic_ostream &operator=(basic_ostream &&__rhs) 
# 403
{ 
# 404
swap(__rhs); 
# 405
return *this; 
# 406
} 
# 409
void swap(basic_ostream &__rhs) 
# 410
{ __ios_type::swap(__rhs); } 
# 413
template< class _ValueT> __ostream_type &_M_insert(_ValueT __v); 
# 416
}; 
# 425 "/usr/include/c++/8/ostream" 3
template< class _CharT, class _Traits> 
# 426
class basic_ostream< _CharT, _Traits> ::sentry { 
# 429
bool _M_ok; 
# 430
basic_ostream &_M_os; 
# 445 "/usr/include/c++/8/ostream" 3
public: explicit sentry(basic_ostream & __os); 
# 447
#pragma GCC diagnostic push
#pragma GCC diagnostic ignored "-Wdeprecated-declarations"
# 456
~sentry() 
# 457
{ 
# 459
if (((bool)(((_M_os).flags()) & ios_base::unitbuf)) && (!uncaught_exception())) 
# 460
{ 
# 462
if (((_M_os).rdbuf()) && ((((_M_os).rdbuf())->pubsync()) == (-1))) { 
# 463
((_M_os).setstate(ios_base::badbit)); }  
# 464
}  
# 465
} 
#pragma GCC diagnostic pop
# 478 "/usr/include/c++/8/ostream" 3
explicit operator bool() const 
# 479
{ return _M_ok; } 
# 480
}; 
# 498 "/usr/include/c++/8/ostream" 3
template< class _CharT, class _Traits> inline basic_ostream< _CharT, _Traits>  &
# 500
operator<<(basic_ostream< _CharT, _Traits>  &__out, _CharT __c) 
# 501
{ return __ostream_insert(__out, &__c, 1); } 
# 503
template< class _CharT, class _Traits> inline basic_ostream< _CharT, _Traits>  &
# 505
operator<<(basic_ostream< _CharT, _Traits>  &__out, char __c) 
# 506
{ return __out << (__out.widen(__c)); } 
# 509
template< class _Traits> inline basic_ostream< char, _Traits>  &
# 511
operator<<(basic_ostream< char, _Traits>  &__out, char __c) 
# 512
{ return __ostream_insert(__out, &__c, 1); } 
# 515
template< class _Traits> inline basic_ostream< char, _Traits>  &
# 517
operator<<(basic_ostream< char, _Traits>  &__out, signed char __c) 
# 518
{ return __out << (static_cast< char>(__c)); } 
# 520
template< class _Traits> inline basic_ostream< char, _Traits>  &
# 522
operator<<(basic_ostream< char, _Traits>  &__out, unsigned char __c) 
# 523
{ return __out << (static_cast< char>(__c)); } 
# 540 "/usr/include/c++/8/ostream" 3
template< class _CharT, class _Traits> inline basic_ostream< _CharT, _Traits>  &
# 542
operator<<(basic_ostream< _CharT, _Traits>  &__out, const _CharT *__s) 
# 543
{ 
# 544
if (!__s) { 
# 545
(__out.setstate(ios_base::badbit)); } else { 
# 547
__ostream_insert(__out, __s, static_cast< streamsize>(_Traits::length(__s))); }  
# 549
return __out; 
# 550
} 
# 552
template< class _CharT, class _Traits> basic_ostream< _CharT, _Traits>  &operator<<(basic_ostream< _CharT, _Traits>  & __out, const char * __s); 
# 557
template< class _Traits> inline basic_ostream< char, _Traits>  &
# 559
operator<<(basic_ostream< char, _Traits>  &__out, const char *__s) 
# 560
{ 
# 561
if (!__s) { 
# 562
(__out.setstate(ios_base::badbit)); } else { 
# 564
__ostream_insert(__out, __s, static_cast< streamsize>(_Traits::length(__s))); }  
# 566
return __out; 
# 567
} 
# 570
template< class _Traits> inline basic_ostream< char, _Traits>  &
# 572
operator<<(basic_ostream< char, _Traits>  &__out, const signed char *__s) 
# 573
{ return __out << (reinterpret_cast< const char *>(__s)); } 
# 575
template< class _Traits> inline basic_ostream< char, _Traits>  &
# 577
operator<<(basic_ostream< char, _Traits>  &__out, const unsigned char *__s) 
# 578
{ return __out << (reinterpret_cast< const char *>(__s)); } 
# 591 "/usr/include/c++/8/ostream" 3
template< class _CharT, class _Traits> inline basic_ostream< _CharT, _Traits>  &
# 593
endl(basic_ostream< _CharT, _Traits>  &__os) 
# 594
{ return flush((__os.put((__os.widen('\n'))))); } 
# 603 "/usr/include/c++/8/ostream" 3
template< class _CharT, class _Traits> inline basic_ostream< _CharT, _Traits>  &
# 605
ends(basic_ostream< _CharT, _Traits>  &__os) 
# 606
{ return (__os.put(_CharT())); } 
# 613
template< class _CharT, class _Traits> inline basic_ostream< _CharT, _Traits>  &
# 615
flush(basic_ostream< _CharT, _Traits>  &__os) 
# 616
{ return (__os.flush()); } 
# 619
template< class _Ch, class _Up> basic_ostream< _Ch, _Up>  &__is_convertible_to_basic_ostream_test(basic_ostream< _Ch, _Up>  *); 
# 623
template< class _Tp, class  = void> 
# 624
struct __is_convertible_to_basic_ostream_impl { 
# 626
using __ostream_type = void; 
# 627
}; 
# 629
template< class _Tp> using __do_is_convertible_to_basic_ostream_impl = __decltype((__is_convertible_to_basic_ostream_test(declval< typename remove_reference< _Tp> ::type *> ()))); 
# 634
template< class _Tp> 
# 635
struct __is_convertible_to_basic_ostream_impl< _Tp, __void_t< __do_is_convertible_to_basic_ostream_impl< _Tp> > >  { 
# 639
using __ostream_type = __do_is_convertible_to_basic_ostream_impl< _Tp> ; 
# 641
}; 
# 643
template< class _Tp> 
# 644
struct __is_convertible_to_basic_ostream : public __is_convertible_to_basic_ostream_impl< _Tp>  { 
# 648
using type = __not_< is_void< typename std::__is_convertible_to_basic_ostream_impl< _Tp> ::__ostream_type> > ; 
# 650
static constexpr bool value = (type::value); 
# 651
}; 
# 653
template< class _Ostream, class _Tp, class  = void> 
# 654
struct __is_insertable : public false_type { }; 
# 656
template< class _Ostream, class _Tp> 
# 657
struct __is_insertable< _Ostream, _Tp, __void_t< __decltype((declval< _Ostream &> () << declval< const _Tp &> ()))> >  : public true_type { 
# 660
}; 
# 662
template< class _Ostream> using __rvalue_ostream_type = typename __is_convertible_to_basic_ostream< _Ostream> ::__ostream_type; 
# 677 "/usr/include/c++/8/ostream" 3
template< class _Ostream, class _Tp> inline typename enable_if< __and_< __not_< is_lvalue_reference< _Ostream> > , __is_convertible_to_basic_ostream< _Ostream> , __is_insertable< __rvalue_ostream_type< _Ostream> , const _Tp &> > ::value, __rvalue_ostream_type< _Ostream> > ::type 
# 685
operator<<(_Ostream &&__os, const _Tp &__x) 
# 686
{ 
# 687
__rvalue_ostream_type< _Ostream>  __ret_os = __os; 
# 688
__ret_os << __x; 
# 689
return __ret_os; 
# 690
} 
# 694
}
# 41 "/usr/include/c++/8/bits/ostream.tcc" 3
namespace std __attribute((__visibility__("default"))) { 
# 45
template< class _CharT, class _Traits> 
# 47
basic_ostream< _CharT, _Traits> ::sentry::sentry(basic_ostream &__os) : _M_ok(false), _M_os(__os) 
# 49
{ 
# 51
if ((__os.tie()) && (__os.good())) { 
# 52
((__os.tie())->flush()); }  
# 54
if ((__os.good())) { 
# 55
(_M_ok) = true; } else { 
# 57
(__os.setstate(ios_base::failbit)); }  
# 58
} 
# 60
template< class _CharT, class _Traits> 
# 61
template< class _ValueT> basic_ostream< _CharT, _Traits>  &
# 64
basic_ostream< _CharT, _Traits> ::_M_insert(_ValueT __v) 
# 65
{ 
# 66
sentry __cerb(*this); 
# 67
if (__cerb) 
# 68
{ 
# 69
std::ios_base::iostate __err = std::ios_base::goodbit; 
# 70
try 
# 71
{ 
# 72
const __num_put_type &__np = __check_facet((this->_M_num_put)); 
# 73
if (((__np.put(*this, *this, (this->fill()), __v)).failed())) { 
# 74
(__err |= std::ios_base::badbit); }  
# 75
} 
# 76
catch (__cxxabiv1::__forced_unwind &) 
# 77
{ 
# 78
(this->_M_setstate(ios_base::badbit)); 
# 79
throw; 
# 80
} 
# 81
catch (...) 
# 82
{ (this->_M_setstate(ios_base::badbit)); }  
# 83
if (__err) { 
# 84
(this->setstate(__err)); }  
# 85
}  
# 86
return *this; 
# 87
} 
# 89
template< class _CharT, class _Traits> basic_ostream< _CharT, _Traits>  &
# 92
basic_ostream< _CharT, _Traits> ::operator<<(short __n) 
# 93
{ 
# 96
const std::ios_base::fmtflags __fmt = (this->flags()) & ios_base::basefield; 
# 97
if ((__fmt == std::ios_base::oct) || (__fmt == std::ios_base::hex)) { 
# 98
return _M_insert(static_cast< long>(static_cast< unsigned short>(__n))); } else { 
# 100
return _M_insert(static_cast< long>(__n)); }  
# 101
} 
# 103
template< class _CharT, class _Traits> basic_ostream< _CharT, _Traits>  &
# 106
basic_ostream< _CharT, _Traits> ::operator<<(int __n) 
# 107
{ 
# 110
const std::ios_base::fmtflags __fmt = (this->flags()) & ios_base::basefield; 
# 111
if ((__fmt == std::ios_base::oct) || (__fmt == std::ios_base::hex)) { 
# 112
return _M_insert(static_cast< long>(static_cast< unsigned>(__n))); } else { 
# 114
return _M_insert(static_cast< long>(__n)); }  
# 115
} 
# 117
template< class _CharT, class _Traits> basic_ostream< _CharT, _Traits>  &
# 120
basic_ostream< _CharT, _Traits> ::operator<<(__streambuf_type *__sbin) 
# 121
{ 
# 122
std::ios_base::iostate __err = std::ios_base::goodbit; 
# 123
sentry __cerb(*this); 
# 124
if (__cerb && __sbin) 
# 125
{ 
# 126
try 
# 127
{ 
# 128
if (!__copy_streambufs(__sbin, (this->rdbuf()))) { 
# 129
(__err |= std::ios_base::failbit); }  
# 130
} 
# 131
catch (__cxxabiv1::__forced_unwind &) 
# 132
{ 
# 133
(this->_M_setstate(ios_base::badbit)); 
# 134
throw; 
# 135
} 
# 136
catch (...) 
# 137
{ (this->_M_setstate(ios_base::failbit)); }  
# 138
} else { 
# 139
if (!__sbin) { 
# 140
(__err |= std::ios_base::badbit); }  }  
# 141
if (__err) { 
# 142
(this->setstate(__err)); }  
# 143
return *this; 
# 144
} 
# 146
template< class _CharT, class _Traits> basic_ostream< _CharT, _Traits>  &
# 149
basic_ostream< _CharT, _Traits> ::put(char_type __c) 
# 150
{ 
# 157
sentry __cerb(*this); 
# 158
if (__cerb) 
# 159
{ 
# 160
std::ios_base::iostate __err = std::ios_base::goodbit; 
# 161
try 
# 162
{ 
# 163
const int_type __put = ((this->rdbuf())->sputc(__c)); 
# 164
if (traits_type::eq_int_type(__put, traits_type::eof())) { 
# 165
(__err |= std::ios_base::badbit); }  
# 166
} 
# 167
catch (__cxxabiv1::__forced_unwind &) 
# 168
{ 
# 169
(this->_M_setstate(ios_base::badbit)); 
# 170
throw; 
# 171
} 
# 172
catch (...) 
# 173
{ (this->_M_setstate(ios_base::badbit)); }  
# 174
if (__err) { 
# 175
(this->setstate(__err)); }  
# 176
}  
# 177
return *this; 
# 178
} 
# 180
template< class _CharT, class _Traits> basic_ostream< _CharT, _Traits>  &
# 183
basic_ostream< _CharT, _Traits> ::write(const _CharT *__s, std::streamsize __n) 
# 184
{ 
# 192
sentry __cerb(*this); 
# 193
if (__cerb) 
# 194
{ 
# 195
try 
# 196
{ _M_write(__s, __n); } 
# 197
catch (__cxxabiv1::__forced_unwind &) 
# 198
{ 
# 199
(this->_M_setstate(ios_base::badbit)); 
# 200
throw; 
# 201
} 
# 202
catch (...) 
# 203
{ (this->_M_setstate(ios_base::badbit)); }  
# 204
}  
# 205
return *this; 
# 206
} 
# 208
template< class _CharT, class _Traits> typename basic_ostream< _CharT, _Traits> ::__ostream_type &
# 211
basic_ostream< _CharT, _Traits> ::flush() 
# 212
{ 
# 216
std::ios_base::iostate __err = std::ios_base::goodbit; 
# 217
try 
# 218
{ 
# 219
if ((this->rdbuf()) && (((this->rdbuf())->pubsync()) == (-1))) { 
# 220
(__err |= std::ios_base::badbit); }  
# 221
} 
# 222
catch (__cxxabiv1::__forced_unwind &) 
# 223
{ 
# 224
(this->_M_setstate(ios_base::badbit)); 
# 225
throw; 
# 226
} 
# 227
catch (...) 
# 228
{ (this->_M_setstate(ios_base::badbit)); }  
# 229
if (__err) { 
# 230
(this->setstate(__err)); }  
# 231
return *this; 
# 232
} 
# 234
template< class _CharT, class _Traits> typename basic_ostream< _CharT, _Traits> ::pos_type 
# 237
basic_ostream< _CharT, _Traits> ::tellp() 
# 238
{ 
# 239
pos_type __ret = ((pos_type)(-1)); 
# 240
try 
# 241
{ 
# 242
if (!(this->fail())) { 
# 243
__ret = ((this->rdbuf())->pubseekoff(0, ios_base::cur, ios_base::out)); }  
# 244
} 
# 245
catch (__cxxabiv1::__forced_unwind &) 
# 246
{ 
# 247
(this->_M_setstate(ios_base::badbit)); 
# 248
throw; 
# 249
} 
# 250
catch (...) 
# 251
{ (this->_M_setstate(ios_base::badbit)); }  
# 252
return __ret; 
# 253
} 
# 255
template< class _CharT, class _Traits> basic_ostream< _CharT, _Traits>  &
# 258
basic_ostream< _CharT, _Traits> ::seekp(pos_type __pos) 
# 259
{ 
# 260
std::ios_base::iostate __err = std::ios_base::goodbit; 
# 261
try 
# 262
{ 
# 263
if (!(this->fail())) 
# 264
{ 
# 267
const pos_type __p = ((this->rdbuf())->pubseekpos(__pos, ios_base::out)); 
# 271
if (__p == ((pos_type)((off_type)(-1)))) { 
# 272
(__err |= std::ios_base::failbit); }  
# 273
}  
# 274
} 
# 275
catch (__cxxabiv1::__forced_unwind &) 
# 276
{ 
# 277
(this->_M_setstate(ios_base::badbit)); 
# 278
throw; 
# 279
} 
# 280
catch (...) 
# 281
{ (this->_M_setstate(ios_base::badbit)); }  
# 282
if (__err) { 
# 283
(this->setstate(__err)); }  
# 284
return *this; 
# 285
} 
# 287
template< class _CharT, class _Traits> basic_ostream< _CharT, _Traits>  &
# 290
basic_ostream< _CharT, _Traits> ::seekp(off_type __off, std::ios_base::seekdir __dir) 
# 291
{ 
# 292
std::ios_base::iostate __err = std::ios_base::goodbit; 
# 293
try 
# 294
{ 
# 295
if (!(this->fail())) 
# 296
{ 
# 299
const pos_type __p = ((this->rdbuf())->pubseekoff(__off, __dir, ios_base::out)); 
# 303
if (__p == ((pos_type)((off_type)(-1)))) { 
# 304
(__err |= std::ios_base::failbit); }  
# 305
}  
# 306
} 
# 307
catch (__cxxabiv1::__forced_unwind &) 
# 308
{ 
# 309
(this->_M_setstate(ios_base::badbit)); 
# 310
throw; 
# 311
} 
# 312
catch (...) 
# 313
{ (this->_M_setstate(ios_base::badbit)); }  
# 314
if (__err) { 
# 315
(this->setstate(__err)); }  
# 316
return *this; 
# 317
} 
# 319
template< class _CharT, class _Traits> basic_ostream< _CharT, _Traits>  &
# 321
operator<<(basic_ostream< _CharT, _Traits>  &__out, const char *__s) 
# 322
{ 
# 323
if (!__s) { 
# 324
(__out.setstate(ios_base::badbit)); } else 
# 326
{ 
# 329
const size_t __clen = char_traits< char> ::length(__s); 
# 330
try 
# 331
{ 
# 332
struct __ptr_guard { 
# 334
_CharT *__p; 
# 335
__ptr_guard(_CharT *__ip) : __p(__ip) { } 
# 336
~__ptr_guard() { delete [] (__p); } 
# 337
_CharT *__get() { return __p; } 
# 338
} __pg(new _CharT [__clen]); 
# 340
_CharT *__ws = __pg.__get(); 
# 341
for (size_t __i = (0); __i < __clen; ++__i) { 
# 342
(__ws[__i]) = (__out.widen(__s[__i])); }  
# 343
__ostream_insert(__out, __ws, __clen); 
# 344
} 
# 345
catch (__cxxabiv1::__forced_unwind &) 
# 346
{ 
# 347
(__out._M_setstate(ios_base::badbit)); 
# 348
throw; 
# 349
} 
# 350
catch (...) 
# 351
{ (__out._M_setstate(ios_base::badbit)); }  
# 352
}  
# 353
return __out; 
# 354
} 
# 359
extern template class basic_ostream< char, char_traits< char> > ;
# 360
extern template basic_ostream< char, char_traits< char> >  &endl(basic_ostream< char, char_traits< char> >  & __os);
# 361
extern template basic_ostream< char, char_traits< char> >  &ends(basic_ostream< char, char_traits< char> >  & __os);
# 362
extern template basic_ostream< char, char_traits< char> >  &flush(basic_ostream< char, char_traits< char> >  & __os);
# 363
extern template basic_ostream< char, char_traits< char> >  &operator<<(basic_ostream< char, char_traits< char> >  & __out, char __c);
# 364
extern template basic_ostream< char, char_traits< char> >  &operator<<(basic_ostream< char, char_traits< char> >  & __out, unsigned char __c);
# 365
extern template basic_ostream< char, char_traits< char> >  &operator<<(basic_ostream< char, char_traits< char> >  & __out, signed char __c);
# 366
extern template basic_ostream< char, char_traits< char> >  &operator<<(basic_ostream< char, char_traits< char> >  & __out, const char * __s);
# 367
extern template basic_ostream< char, char_traits< char> >  &operator<<(basic_ostream< char, char_traits< char> >  & __out, const unsigned char * __s);
# 368
extern template basic_ostream< char, char_traits< char> >  &operator<<(basic_ostream< char, char_traits< char> >  & __out, const signed char * __s);
# 370
extern template basic_ostream< char, char_traits< char> > ::__ostream_type &basic_ostream< char, char_traits< char> > ::_M_insert(long __v);
# 371
extern template basic_ostream< char, char_traits< char> > ::__ostream_type &basic_ostream< char, char_traits< char> > ::_M_insert(unsigned long __v);
# 372
extern template basic_ostream< char, char_traits< char> > ::__ostream_type &basic_ostream< char, char_traits< char> > ::_M_insert(bool __v);
# 374
extern template basic_ostream< char, char_traits< char> > ::__ostream_type &basic_ostream< char, char_traits< char> > ::_M_insert(long long __v);
# 375
extern template basic_ostream< char, char_traits< char> > ::__ostream_type &basic_ostream< char, char_traits< char> > ::_M_insert(unsigned long long __v);
# 377
extern template basic_ostream< char, char_traits< char> > ::__ostream_type &basic_ostream< char, char_traits< char> > ::_M_insert(double __v);
# 378
extern template basic_ostream< char, char_traits< char> > ::__ostream_type &basic_ostream< char, char_traits< char> > ::_M_insert(long double __v);
# 379
extern template basic_ostream< char, char_traits< char> > ::__ostream_type &basic_ostream< char, char_traits< char> > ::_M_insert(const void * __v);
# 382
extern template class basic_ostream< wchar_t, char_traits< wchar_t> > ;
# 383
extern template basic_ostream< wchar_t, char_traits< wchar_t> >  &endl(basic_ostream< wchar_t, char_traits< wchar_t> >  & __os);
# 384
extern template basic_ostream< wchar_t, char_traits< wchar_t> >  &ends(basic_ostream< wchar_t, char_traits< wchar_t> >  & __os);
# 385
extern template basic_ostream< wchar_t, char_traits< wchar_t> >  &flush(basic_ostream< wchar_t, char_traits< wchar_t> >  & __os);
# 386
extern template basic_ostream< wchar_t, char_traits< wchar_t> >  &operator<<(basic_ostream< wchar_t, char_traits< wchar_t> >  & __out, wchar_t __c);
# 387
extern template basic_ostream< wchar_t, char_traits< wchar_t> >  &operator<<(basic_ostream< wchar_t, char_traits< wchar_t> >  & __out, char __c);
# 388
extern template basic_ostream< wchar_t, char_traits< wchar_t> >  &operator<<(basic_ostream< wchar_t, char_traits< wchar_t> >  & __out, const wchar_t * __s);
# 389
extern template basic_ostream< wchar_t, char_traits< wchar_t> >  &operator<<(basic_ostream< wchar_t, char_traits< wchar_t> >  & __out, const char * __s);
# 391
extern template basic_ostream< wchar_t, char_traits< wchar_t> > ::__ostream_type &basic_ostream< wchar_t, char_traits< wchar_t> > ::_M_insert(long __v);
# 392
extern template basic_ostream< wchar_t, char_traits< wchar_t> > ::__ostream_type &basic_ostream< wchar_t, char_traits< wchar_t> > ::_M_insert(unsigned long __v);
# 393
extern template basic_ostream< wchar_t, char_traits< wchar_t> > ::__ostream_type &basic_ostream< wchar_t, char_traits< wchar_t> > ::_M_insert(bool __v);
# 395
extern template basic_ostream< wchar_t, char_traits< wchar_t> > ::__ostream_type &basic_ostream< wchar_t, char_traits< wchar_t> > ::_M_insert(long long __v);
# 396
extern template basic_ostream< wchar_t, char_traits< wchar_t> > ::__ostream_type &basic_ostream< wchar_t, char_traits< wchar_t> > ::_M_insert(unsigned long long __v);
# 398
extern template basic_ostream< wchar_t, char_traits< wchar_t> > ::__ostream_type &basic_ostream< wchar_t, char_traits< wchar_t> > ::_M_insert(double __v);
# 399
extern template basic_ostream< wchar_t, char_traits< wchar_t> > ::__ostream_type &basic_ostream< wchar_t, char_traits< wchar_t> > ::_M_insert(long double __v);
# 400
extern template basic_ostream< wchar_t, char_traits< wchar_t> > ::__ostream_type &basic_ostream< wchar_t, char_traits< wchar_t> > ::_M_insert(const void * __v);
# 405
}
# 41 "/usr/include/c++/8/istream" 3
namespace std __attribute((__visibility__("default"))) { 
# 57 "/usr/include/c++/8/istream" 3
template< class _CharT, class _Traits> 
# 58
class basic_istream : virtual public basic_ios< _CharT, _Traits>  { 
# 62
public: typedef _CharT char_type; 
# 63
typedef typename _Traits::int_type int_type; 
# 64
typedef typename _Traits::pos_type pos_type; 
# 65
typedef typename _Traits::off_type off_type; 
# 66
typedef _Traits traits_type; 
# 69
typedef basic_streambuf< _CharT, _Traits>  __streambuf_type; 
# 70
typedef std::basic_ios< _CharT, _Traits>  __ios_type; 
# 71
typedef basic_istream __istream_type; 
# 73
typedef num_get< _CharT, istreambuf_iterator< _CharT, _Traits> >  __num_get_type; 
# 74
typedef ctype< _CharT>  __ctype_type; 
# 82
protected: std::streamsize _M_gcount; 
# 93
public: explicit basic_istream(__streambuf_type *__sb) : _M_gcount(((std::streamsize)0)) 
# 95
{ (this->init(__sb)); } 
# 103
virtual ~basic_istream() 
# 104
{ (_M_gcount) = ((std::streamsize)0); } 
# 107
class sentry; 
# 108
friend class sentry; 
# 120 "/usr/include/c++/8/istream" 3
__istream_type &operator>>(__istream_type &(*__pf)(__istream_type &)) 
# 121
{ return __pf(*this); } 
# 124
__istream_type &operator>>(__ios_type &(*__pf)(__ios_type &)) 
# 125
{ 
# 126
__pf(*this); 
# 127
return *this; 
# 128
} 
# 131
__istream_type &operator>>(std::ios_base &(*__pf)(std::ios_base &)) 
# 132
{ 
# 133
__pf(*this); 
# 134
return *this; 
# 135
} 
# 168 "/usr/include/c++/8/istream" 3
__istream_type &operator>>(bool &__n) 
# 169
{ return _M_extract(__n); } 
# 172
__istream_type &operator>>(short & __n); 
# 175
__istream_type &operator>>(unsigned short &__n) 
# 176
{ return _M_extract(__n); } 
# 179
__istream_type &operator>>(int & __n); 
# 182
__istream_type &operator>>(unsigned &__n) 
# 183
{ return _M_extract(__n); } 
# 186
__istream_type &operator>>(long &__n) 
# 187
{ return _M_extract(__n); } 
# 190
__istream_type &operator>>(unsigned long &__n) 
# 191
{ return _M_extract(__n); } 
# 195
__istream_type &operator>>(long long &__n) 
# 196
{ return _M_extract(__n); } 
# 199
__istream_type &operator>>(unsigned long long &__n) 
# 200
{ return _M_extract(__n); } 
# 214 "/usr/include/c++/8/istream" 3
__istream_type &operator>>(float &__f) 
# 215
{ return _M_extract(__f); } 
# 218
__istream_type &operator>>(double &__f) 
# 219
{ return _M_extract(__f); } 
# 222
__istream_type &operator>>(long double &__f) 
# 223
{ return _M_extract(__f); } 
# 235 "/usr/include/c++/8/istream" 3
__istream_type &operator>>(void *&__p) 
# 236
{ return _M_extract(__p); } 
# 259 "/usr/include/c++/8/istream" 3
__istream_type &operator>>(__streambuf_type * __sb); 
# 269 "/usr/include/c++/8/istream" 3
std::streamsize gcount() const 
# 270
{ return _M_gcount; } 
# 302 "/usr/include/c++/8/istream" 3
int_type get(); 
# 316 "/usr/include/c++/8/istream" 3
__istream_type &get(char_type & __c); 
# 343 "/usr/include/c++/8/istream" 3
__istream_type &get(char_type * __s, std::streamsize __n, char_type __delim); 
# 354 "/usr/include/c++/8/istream" 3
__istream_type &get(char_type *__s, std::streamsize __n) 
# 355
{ return (this->get(__s, __n, (this->widen('\n')))); } 
# 377 "/usr/include/c++/8/istream" 3
__istream_type &get(__streambuf_type & __sb, char_type __delim); 
# 387 "/usr/include/c++/8/istream" 3
__istream_type &get(__streambuf_type &__sb) 
# 388
{ return (this->get(__sb, (this->widen('\n')))); } 
# 416 "/usr/include/c++/8/istream" 3
__istream_type &getline(char_type * __s, std::streamsize __n, char_type __delim); 
# 427 "/usr/include/c++/8/istream" 3
__istream_type &getline(char_type *__s, std::streamsize __n) 
# 428
{ return (this->getline(__s, __n, (this->widen('\n')))); } 
# 451 "/usr/include/c++/8/istream" 3
__istream_type &ignore(std::streamsize __n, int_type __delim); 
# 454
__istream_type &ignore(std::streamsize __n); 
# 457
__istream_type &ignore(); 
# 468 "/usr/include/c++/8/istream" 3
int_type peek(); 
# 486 "/usr/include/c++/8/istream" 3
__istream_type &read(char_type * __s, std::streamsize __n); 
# 505 "/usr/include/c++/8/istream" 3
std::streamsize readsome(char_type * __s, std::streamsize __n); 
# 522 "/usr/include/c++/8/istream" 3
__istream_type &putback(char_type __c); 
# 538 "/usr/include/c++/8/istream" 3
__istream_type &unget(); 
# 556 "/usr/include/c++/8/istream" 3
int sync(); 
# 571 "/usr/include/c++/8/istream" 3
pos_type tellg(); 
# 586 "/usr/include/c++/8/istream" 3
__istream_type &seekg(pos_type); 
# 602 "/usr/include/c++/8/istream" 3
__istream_type &seekg(off_type, std::ios_base::seekdir); 
# 606
protected: basic_istream() : _M_gcount(((std::streamsize)0)) 
# 608
{ (this->init(0)); } 
# 611
basic_istream(const basic_istream &) = delete;
# 613
basic_istream(basic_istream &&__rhs) : __ios_type(), _M_gcount(__rhs._M_gcount) 
# 615
{ 
# 616
__ios_type::move(__rhs); 
# 617
(__rhs._M_gcount) = (0); 
# 618
} 
# 622
basic_istream &operator=(const basic_istream &) = delete;
# 625
basic_istream &operator=(basic_istream &&__rhs) 
# 626
{ 
# 627
swap(__rhs); 
# 628
return *this; 
# 629
} 
# 632
void swap(basic_istream &__rhs) 
# 633
{ 
# 634
__ios_type::swap(__rhs); 
# 635
std::swap(_M_gcount, __rhs._M_gcount); 
# 636
} 
# 639
template< class _ValueT> __istream_type &_M_extract(_ValueT & __v); 
# 642
}; 
# 648
template<> basic_istream< char, char_traits< char> >  &basic_istream< char, char_traits< char> > ::getline(char_type * __s, streamsize __n, char_type __delim); 
# 653
template<> basic_istream< char, char_traits< char> >  &basic_istream< char, char_traits< char> > ::ignore(streamsize __n); 
# 658
template<> basic_istream< char, char_traits< char> >  &basic_istream< char, char_traits< char> > ::ignore(streamsize __n, int_type __delim); 
# 664
template<> basic_istream< wchar_t, char_traits< wchar_t> >  &basic_istream< wchar_t, char_traits< wchar_t> > ::getline(char_type * __s, streamsize __n, char_type __delim); 
# 669
template<> basic_istream< wchar_t, char_traits< wchar_t> >  &basic_istream< wchar_t, char_traits< wchar_t> > ::ignore(streamsize __n); 
# 674
template<> basic_istream< wchar_t, char_traits< wchar_t> >  &basic_istream< wchar_t, char_traits< wchar_t> > ::ignore(streamsize __n, int_type __delim); 
# 685 "/usr/include/c++/8/istream" 3
template< class _CharT, class _Traits> 
# 686
class basic_istream< _CharT, _Traits> ::sentry { 
# 689
bool _M_ok; 
# 693
public: typedef _Traits traits_type; 
# 694
typedef basic_streambuf< _CharT, _Traits>  __streambuf_type; 
# 695
typedef basic_istream __istream_type; 
# 696
typedef typename std::basic_istream< _CharT, _Traits> ::__ctype_type __ctype_type; 
# 697
typedef typename _Traits::int_type __int_type; 
# 722 "/usr/include/c++/8/istream" 3
explicit sentry(basic_istream & __is, bool __noskipws = false); 
# 734 "/usr/include/c++/8/istream" 3
explicit operator bool() const 
# 735
{ return _M_ok; } 
# 736
}; 
# 750 "/usr/include/c++/8/istream" 3
template< class _CharT, class _Traits> basic_istream< _CharT, _Traits>  &operator>>(basic_istream< _CharT, _Traits>  & __in, _CharT & __c); 
# 754
template< class _Traits> inline basic_istream< char, _Traits>  &
# 756
operator>>(basic_istream< char, _Traits>  &__in, unsigned char &__c) 
# 757
{ return __in >> (reinterpret_cast< char &>(__c)); } 
# 759
template< class _Traits> inline basic_istream< char, _Traits>  &
# 761
operator>>(basic_istream< char, _Traits>  &__in, signed char &__c) 
# 762
{ return __in >> (reinterpret_cast< char &>(__c)); } 
# 792 "/usr/include/c++/8/istream" 3
template< class _CharT, class _Traits> basic_istream< _CharT, _Traits>  &operator>>(basic_istream< _CharT, _Traits>  & __in, _CharT * __s); 
# 799
template<> basic_istream< char, char_traits< char> >  &operator>>(basic_istream< char, char_traits< char> >  & __in, char * __s); 
# 801
template< class _Traits> inline basic_istream< char, _Traits>  &
# 803
operator>>(basic_istream< char, _Traits>  &__in, unsigned char *__s) 
# 804
{ return __in >> (reinterpret_cast< char *>(__s)); } 
# 806
template< class _Traits> inline basic_istream< char, _Traits>  &
# 808
operator>>(basic_istream< char, _Traits>  &__in, signed char *__s) 
# 809
{ return __in >> (reinterpret_cast< char *>(__s)); } 
# 823 "/usr/include/c++/8/istream" 3
template< class _CharT, class _Traits> 
# 824
class basic_iostream : public basic_istream< _CharT, _Traits> , public basic_ostream< _CharT, _Traits>  { 
# 832
public: typedef _CharT char_type; 
# 833
typedef typename _Traits::int_type int_type; 
# 834
typedef typename _Traits::pos_type pos_type; 
# 835
typedef typename _Traits::off_type off_type; 
# 836
typedef _Traits traits_type; 
# 839
typedef std::basic_istream< _CharT, _Traits>  __istream_type; 
# 840
typedef std::basic_ostream< _CharT, _Traits>  __ostream_type; 
# 849
explicit basic_iostream(basic_streambuf< _CharT, _Traits>  *__sb) : __istream_type(__sb), __ostream_type(__sb) 
# 850
{ } 
# 856
virtual ~basic_iostream() { } 
# 859
protected: basic_iostream() : __istream_type(), __ostream_type() 
# 860
{ } 
# 863
basic_iostream(const basic_iostream &) = delete;
# 865
basic_iostream(basic_iostream &&__rhs) : __istream_type(std::move(__rhs)), __ostream_type(*this) 
# 867
{ } 
# 871
basic_iostream &operator=(const basic_iostream &) = delete;
# 874
basic_iostream &operator=(basic_iostream &&__rhs) 
# 875
{ 
# 876
swap(__rhs); 
# 877
return *this; 
# 878
} 
# 881
void swap(basic_iostream &__rhs) 
# 882
{ __istream_type::swap(__rhs); } 
# 884
}; 
# 906 "/usr/include/c++/8/istream" 3
template< class _CharT, class _Traits> basic_istream< _CharT, _Traits>  &ws(basic_istream< _CharT, _Traits>  & __is); 
# 911
template< class _Ch, class _Up> basic_istream< _Ch, _Up>  &__is_convertible_to_basic_istream_test(basic_istream< _Ch, _Up>  *); 
# 915
template< class _Tp, class  = void> 
# 916
struct __is_convertible_to_basic_istream_impl { 
# 918
using __istream_type = void; 
# 919
}; 
# 921
template< class _Tp> using __do_is_convertible_to_basic_istream_impl = __decltype((__is_convertible_to_basic_istream_test(declval< typename remove_reference< _Tp> ::type *> ()))); 
# 926
template< class _Tp> 
# 927
struct __is_convertible_to_basic_istream_impl< _Tp, __void_t< __do_is_convertible_to_basic_istream_impl< _Tp> > >  { 
# 931
using __istream_type = __do_is_convertible_to_basic_istream_impl< _Tp> ; 
# 933
}; 
# 935
template< class _Tp> 
# 936
struct __is_convertible_to_basic_istream : public __is_convertible_to_basic_istream_impl< _Tp>  { 
# 940
using type = __not_< is_void< typename std::__is_convertible_to_basic_istream_impl< _Tp> ::__istream_type> > ; 
# 942
static constexpr bool value = (type::value); 
# 943
}; 
# 945
template< class _Istream, class _Tp, class  = void> 
# 946
struct __is_extractable : public false_type { }; 
# 948
template< class _Istream, class _Tp> 
# 949
struct __is_extractable< _Istream, _Tp, __void_t< __decltype((declval< _Istream &> () >> declval< _Tp> ()))> >  : public true_type { 
# 952
}; 
# 954
template< class _Istream> using __rvalue_istream_type = typename __is_convertible_to_basic_istream< _Istream> ::__istream_type; 
# 972 "/usr/include/c++/8/istream" 3
template< class _Istream, class _Tp> inline typename enable_if< __and_< __not_< is_lvalue_reference< _Istream> > , __is_convertible_to_basic_istream< _Istream> , __is_extractable< __rvalue_istream_type< _Istream> , _Tp &&> > ::value, __rvalue_istream_type< _Istream> > ::type 
# 980
operator>>(_Istream &&__is, _Tp &&__x) 
# 981
{ 
# 982
__rvalue_istream_type< _Istream>  __ret_is = __is; 
# 983
__ret_is >> std::forward< _Tp> (__x); 
# 984
return __ret_is; 
# 985
} 
# 989
}
# 41 "/usr/include/c++/8/bits/istream.tcc" 3
namespace std __attribute((__visibility__("default"))) { 
# 45
template< class _CharT, class _Traits> 
# 47
basic_istream< _CharT, _Traits> ::sentry::sentry(basic_istream &__in, bool __noskip) : _M_ok(false) 
# 48
{ 
# 49
std::ios_base::iostate __err = std::ios_base::goodbit; 
# 50
if ((__in.good())) { 
# 51
try 
# 52
{ 
# 53
if ((__in.tie())) { 
# 54
((__in.tie())->flush()); }  
# 55
if ((!__noskip) && ((bool)((__in.flags()) & ios_base::skipws))) 
# 56
{ 
# 57
const __int_type __eof = traits_type::eof(); 
# 58
__streambuf_type *__sb = (__in.rdbuf()); 
# 59
__int_type __c = (__sb->sgetc()); 
# 61
const __ctype_type &__ct = __check_facet((__in._M_ctype)); 
# 62
while ((!traits_type::eq_int_type(__c, __eof)) && (__ct.is(ctype_base::space, traits_type::to_char_type(__c)))) { 
# 65
__c = (__sb->snextc()); }  
# 70
if (traits_type::eq_int_type(__c, __eof)) { 
# 71
(__err |= std::ios_base::eofbit); }  
# 72
}  
# 73
} 
# 74
catch (__cxxabiv1::__forced_unwind &) 
# 75
{ 
# 76
(__in._M_setstate(ios_base::badbit)); 
# 77
throw; 
# 78
} 
# 79
catch (...) 
# 80
{ (__in._M_setstate(ios_base::badbit)); }  }  
# 82
if ((__in.good()) && (__err == std::ios_base::goodbit)) { 
# 83
(_M_ok) = true; } else 
# 85
{ 
# 86
(__err |= std::ios_base::failbit); 
# 87
(__in.setstate(__err)); 
# 88
}  
# 89
} 
# 91
template< class _CharT, class _Traits> 
# 92
template< class _ValueT> basic_istream< _CharT, _Traits>  &
# 95
basic_istream< _CharT, _Traits> ::_M_extract(_ValueT &__v) 
# 96
{ 
# 97
sentry __cerb(*this, false); 
# 98
if (__cerb) 
# 99
{ 
# 100
std::ios_base::iostate __err = std::ios_base::goodbit; 
# 101
try 
# 102
{ 
# 103
const __num_get_type &__ng = __check_facet((this->_M_num_get)); 
# 104
(__ng.get(*this, 0, *this, __err, __v)); 
# 105
} 
# 106
catch (__cxxabiv1::__forced_unwind &) 
# 107
{ 
# 108
(this->_M_setstate(ios_base::badbit)); 
# 109
throw; 
# 110
} 
# 111
catch (...) 
# 112
{ (this->_M_setstate(ios_base::badbit)); }  
# 113
if (__err) { 
# 114
(this->setstate(__err)); }  
# 115
}  
# 116
return *this; 
# 117
} 
# 119
template< class _CharT, class _Traits> basic_istream< _CharT, _Traits>  &
# 122
basic_istream< _CharT, _Traits> ::operator>>(short &__n) 
# 123
{ 
# 126
sentry __cerb(*this, false); 
# 127
if (__cerb) 
# 128
{ 
# 129
std::ios_base::iostate __err = std::ios_base::goodbit; 
# 130
try 
# 131
{ 
# 132
long __l; 
# 133
const __num_get_type &__ng = __check_facet((this->_M_num_get)); 
# 134
(__ng.get(*this, 0, *this, __err, __l)); 
# 138
if (__l < __gnu_cxx::__numeric_traits_integer< short> ::__min) 
# 139
{ 
# 140
(__err |= std::ios_base::failbit); 
# 141
__n = __gnu_cxx::__numeric_traits_integer< short> ::__min; 
# 142
} else { 
# 143
if (__l > __gnu_cxx::__numeric_traits_integer< short> ::__max) 
# 144
{ 
# 145
(__err |= std::ios_base::failbit); 
# 146
__n = __gnu_cxx::__numeric_traits_integer< short> ::__max; 
# 147
} else { 
# 149
__n = ((short)__l); }  }  
# 150
} 
# 151
catch (__cxxabiv1::__forced_unwind &) 
# 152
{ 
# 153
(this->_M_setstate(ios_base::badbit)); 
# 154
throw; 
# 155
} 
# 156
catch (...) 
# 157
{ (this->_M_setstate(ios_base::badbit)); }  
# 158
if (__err) { 
# 159
(this->setstate(__err)); }  
# 160
}  
# 161
return *this; 
# 162
} 
# 164
template< class _CharT, class _Traits> basic_istream< _CharT, _Traits>  &
# 167
basic_istream< _CharT, _Traits> ::operator>>(int &__n) 
# 168
{ 
# 171
sentry __cerb(*this, false); 
# 172
if (__cerb) 
# 173
{ 
# 174
std::ios_base::iostate __err = std::ios_base::goodbit; 
# 175
try 
# 176
{ 
# 177
long __l; 
# 178
const __num_get_type &__ng = __check_facet((this->_M_num_get)); 
# 179
(__ng.get(*this, 0, *this, __err, __l)); 
# 183
if (__l < __gnu_cxx::__numeric_traits_integer< int> ::__min) 
# 184
{ 
# 185
(__err |= std::ios_base::failbit); 
# 186
__n = __gnu_cxx::__numeric_traits_integer< int> ::__min; 
# 187
} else { 
# 188
if (__l > __gnu_cxx::__numeric_traits_integer< int> ::__max) 
# 189
{ 
# 190
(__err |= std::ios_base::failbit); 
# 191
__n = __gnu_cxx::__numeric_traits_integer< int> ::__max; 
# 192
} else { 
# 194
__n = ((int)__l); }  }  
# 195
} 
# 196
catch (__cxxabiv1::__forced_unwind &) 
# 197
{ 
# 198
(this->_M_setstate(ios_base::badbit)); 
# 199
throw; 
# 200
} 
# 201
catch (...) 
# 202
{ (this->_M_setstate(ios_base::badbit)); }  
# 203
if (__err) { 
# 204
(this->setstate(__err)); }  
# 205
}  
# 206
return *this; 
# 207
} 
# 209
template< class _CharT, class _Traits> basic_istream< _CharT, _Traits>  &
# 212
basic_istream< _CharT, _Traits> ::operator>>(__streambuf_type *__sbout) 
# 213
{ 
# 214
std::ios_base::iostate __err = std::ios_base::goodbit; 
# 215
sentry __cerb(*this, false); 
# 216
if (__cerb && __sbout) 
# 217
{ 
# 218
try 
# 219
{ 
# 220
bool __ineof; 
# 221
if (!__copy_streambufs_eof((this->rdbuf()), __sbout, __ineof)) { 
# 222
(__err |= std::ios_base::failbit); }  
# 223
if (__ineof) { 
# 224
(__err |= std::ios_base::eofbit); }  
# 225
} 
# 226
catch (__cxxabiv1::__forced_unwind &) 
# 227
{ 
# 228
(this->_M_setstate(ios_base::failbit)); 
# 229
throw; 
# 230
} 
# 231
catch (...) 
# 232
{ (this->_M_setstate(ios_base::failbit)); }  
# 233
} else { 
# 234
if (!__sbout) { 
# 235
(__err |= std::ios_base::failbit); }  }  
# 236
if (__err) { 
# 237
(this->setstate(__err)); }  
# 238
return *this; 
# 239
} 
# 241
template< class _CharT, class _Traits> typename basic_istream< _CharT, _Traits> ::int_type 
# 244
basic_istream< _CharT, _Traits> ::get() 
# 245
{ 
# 246
const int_type __eof = traits_type::eof(); 
# 247
int_type __c = __eof; 
# 248
(_M_gcount) = (0); 
# 249
std::ios_base::iostate __err = std::ios_base::goodbit; 
# 250
sentry __cerb(*this, true); 
# 251
if (__cerb) 
# 252
{ 
# 253
try 
# 254
{ 
# 255
__c = ((this->rdbuf())->sbumpc()); 
# 257
if (!traits_type::eq_int_type(__c, __eof)) { 
# 258
(_M_gcount) = (1); } else { 
# 260
(__err |= std::ios_base::eofbit); }  
# 261
} 
# 262
catch (__cxxabiv1::__forced_unwind &) 
# 263
{ 
# 264
(this->_M_setstate(ios_base::badbit)); 
# 265
throw; 
# 266
} 
# 267
catch (...) 
# 268
{ (this->_M_setstate(ios_base::badbit)); }  
# 269
}  
# 270
if (!(_M_gcount)) { 
# 271
(__err |= std::ios_base::failbit); }  
# 272
if (__err) { 
# 273
(this->setstate(__err)); }  
# 274
return __c; 
# 275
} 
# 277
template< class _CharT, class _Traits> basic_istream< _CharT, _Traits>  &
# 280
basic_istream< _CharT, _Traits> ::get(char_type &__c) 
# 281
{ 
# 282
(_M_gcount) = (0); 
# 283
std::ios_base::iostate __err = std::ios_base::goodbit; 
# 284
sentry __cerb(*this, true); 
# 285
if (__cerb) 
# 286
{ 
# 287
try 
# 288
{ 
# 289
const int_type __cb = ((this->rdbuf())->sbumpc()); 
# 291
if (!traits_type::eq_int_type(__cb, traits_type::eof())) 
# 292
{ 
# 293
(_M_gcount) = (1); 
# 294
__c = traits_type::to_char_type(__cb); 
# 295
} else { 
# 297
(__err |= std::ios_base::eofbit); }  
# 298
} 
# 299
catch (__cxxabiv1::__forced_unwind &) 
# 300
{ 
# 301
(this->_M_setstate(ios_base::badbit)); 
# 302
throw; 
# 303
} 
# 304
catch (...) 
# 305
{ (this->_M_setstate(ios_base::badbit)); }  
# 306
}  
# 307
if (!(_M_gcount)) { 
# 308
(__err |= std::ios_base::failbit); }  
# 309
if (__err) { 
# 310
(this->setstate(__err)); }  
# 311
return *this; 
# 312
} 
# 314
template< class _CharT, class _Traits> basic_istream< _CharT, _Traits>  &
# 317
basic_istream< _CharT, _Traits> ::get(char_type *__s, std::streamsize __n, char_type __delim) 
# 318
{ 
# 319
(_M_gcount) = (0); 
# 320
std::ios_base::iostate __err = std::ios_base::goodbit; 
# 321
sentry __cerb(*this, true); 
# 322
if (__cerb) 
# 323
{ 
# 324
try 
# 325
{ 
# 326
const int_type __idelim = traits_type::to_int_type(__delim); 
# 327
const int_type __eof = traits_type::eof(); 
# 328
__streambuf_type *__sb = (this->rdbuf()); 
# 329
int_type __c = (__sb->sgetc()); 
# 331
while ((((_M_gcount) + (1)) < __n) && (!traits_type::eq_int_type(__c, __eof)) && (!traits_type::eq_int_type(__c, __idelim))) 
# 334
{ 
# 335
(*(__s++)) = traits_type::to_char_type(__c); 
# 336
++(_M_gcount); 
# 337
__c = (__sb->snextc()); 
# 338
}  
# 339
if (traits_type::eq_int_type(__c, __eof)) { 
# 340
(__err |= std::ios_base::eofbit); }  
# 341
} 
# 342
catch (__cxxabiv1::__forced_unwind &) 
# 343
{ 
# 344
(this->_M_setstate(ios_base::badbit)); 
# 345
throw; 
# 346
} 
# 347
catch (...) 
# 348
{ (this->_M_setstate(ios_base::badbit)); }  
# 349
}  
# 352
if (__n > (0)) { 
# 353
(*__s) = char_type(); }  
# 354
if (!(_M_gcount)) { 
# 355
(__err |= std::ios_base::failbit); }  
# 356
if (__err) { 
# 357
(this->setstate(__err)); }  
# 358
return *this; 
# 359
} 
# 361
template< class _CharT, class _Traits> basic_istream< _CharT, _Traits>  &
# 364
basic_istream< _CharT, _Traits> ::get(__streambuf_type &__sb, char_type __delim) 
# 365
{ 
# 366
(_M_gcount) = (0); 
# 367
std::ios_base::iostate __err = std::ios_base::goodbit; 
# 368
sentry __cerb(*this, true); 
# 369
if (__cerb) 
# 370
{ 
# 371
try 
# 372
{ 
# 373
const int_type __idelim = traits_type::to_int_type(__delim); 
# 374
const int_type __eof = traits_type::eof(); 
# 375
__streambuf_type *__this_sb = (this->rdbuf()); 
# 376
int_type __c = (__this_sb->sgetc()); 
# 377
char_type __c2 = traits_type::to_char_type(__c); 
# 379
while ((!traits_type::eq_int_type(__c, __eof)) && (!traits_type::eq_int_type(__c, __idelim)) && (!traits_type::eq_int_type((__sb.sputc(__c2)), __eof))) 
# 382
{ 
# 383
++(_M_gcount); 
# 384
__c = (__this_sb->snextc()); 
# 385
__c2 = traits_type::to_char_type(__c); 
# 386
}  
# 387
if (traits_type::eq_int_type(__c, __eof)) { 
# 388
(__err |= std::ios_base::eofbit); }  
# 389
} 
# 390
catch (__cxxabiv1::__forced_unwind &) 
# 391
{ 
# 392
(this->_M_setstate(ios_base::badbit)); 
# 393
throw; 
# 394
} 
# 395
catch (...) 
# 396
{ (this->_M_setstate(ios_base::badbit)); }  
# 397
}  
# 398
if (!(_M_gcount)) { 
# 399
(__err |= std::ios_base::failbit); }  
# 400
if (__err) { 
# 401
(this->setstate(__err)); }  
# 402
return *this; 
# 403
} 
# 405
template< class _CharT, class _Traits> basic_istream< _CharT, _Traits>  &
# 408
basic_istream< _CharT, _Traits> ::getline(char_type *__s, std::streamsize __n, char_type __delim) 
# 409
{ 
# 410
(_M_gcount) = (0); 
# 411
std::ios_base::iostate __err = std::ios_base::goodbit; 
# 412
sentry __cerb(*this, true); 
# 413
if (__cerb) 
# 414
{ 
# 415
try 
# 416
{ 
# 417
const int_type __idelim = traits_type::to_int_type(__delim); 
# 418
const int_type __eof = traits_type::eof(); 
# 419
__streambuf_type *__sb = (this->rdbuf()); 
# 420
int_type __c = (__sb->sgetc()); 
# 422
while ((((_M_gcount) + (1)) < __n) && (!traits_type::eq_int_type(__c, __eof)) && (!traits_type::eq_int_type(__c, __idelim))) 
# 425
{ 
# 426
(*(__s++)) = traits_type::to_char_type(__c); 
# 427
__c = (__sb->snextc()); 
# 428
++(_M_gcount); 
# 429
}  
# 430
if (traits_type::eq_int_type(__c, __eof)) { 
# 431
(__err |= std::ios_base::eofbit); } else 
# 433
{ 
# 434
if (traits_type::eq_int_type(__c, __idelim)) 
# 435
{ 
# 436
(__sb->sbumpc()); 
# 437
++(_M_gcount); 
# 438
} else { 
# 440
(__err |= std::ios_base::failbit); }  
# 441
}  
# 442
} 
# 443
catch (__cxxabiv1::__forced_unwind &) 
# 444
{ 
# 445
(this->_M_setstate(ios_base::badbit)); 
# 446
throw; 
# 447
} 
# 448
catch (...) 
# 449
{ (this->_M_setstate(ios_base::badbit)); }  
# 450
}  
# 453
if (__n > (0)) { 
# 454
(*__s) = char_type(); }  
# 455
if (!(_M_gcount)) { 
# 456
(__err |= std::ios_base::failbit); }  
# 457
if (__err) { 
# 458
(this->setstate(__err)); }  
# 459
return *this; 
# 460
} 
# 465
template< class _CharT, class _Traits> typename basic_istream< _CharT, _Traits> ::__istream_type &
# 468
basic_istream< _CharT, _Traits> ::ignore() 
# 469
{ 
# 470
(_M_gcount) = (0); 
# 471
sentry __cerb(*this, true); 
# 472
if (__cerb) 
# 473
{ 
# 474
std::ios_base::iostate __err = std::ios_base::goodbit; 
# 475
try 
# 476
{ 
# 477
const int_type __eof = traits_type::eof(); 
# 478
__streambuf_type *__sb = (this->rdbuf()); 
# 480
if (traits_type::eq_int_type((__sb->sbumpc()), __eof)) { 
# 481
(__err |= std::ios_base::eofbit); } else { 
# 483
(_M_gcount) = (1); }  
# 484
} 
# 485
catch (__cxxabiv1::__forced_unwind &) 
# 486
{ 
# 487
(this->_M_setstate(ios_base::badbit)); 
# 488
throw; 
# 489
} 
# 490
catch (...) 
# 491
{ (this->_M_setstate(ios_base::badbit)); }  
# 492
if (__err) { 
# 493
(this->setstate(__err)); }  
# 494
}  
# 495
return *this; 
# 496
} 
# 498
template< class _CharT, class _Traits> basic_istream< _CharT, _Traits>  &
# 501
basic_istream< _CharT, _Traits> ::ignore(std::streamsize __n) 
# 502
{ 
# 503
(_M_gcount) = (0); 
# 504
sentry __cerb(*this, true); 
# 505
if (__cerb && (__n > (0))) 
# 506
{ 
# 507
std::ios_base::iostate __err = std::ios_base::goodbit; 
# 508
try 
# 509
{ 
# 510
const int_type __eof = traits_type::eof(); 
# 511
__streambuf_type *__sb = (this->rdbuf()); 
# 512
int_type __c = (__sb->sgetc()); 
# 521 "/usr/include/c++/8/bits/istream.tcc" 3
bool __large_ignore = false; 
# 522
while (true) 
# 523
{ 
# 524
while (((_M_gcount) < __n) && (!traits_type::eq_int_type(__c, __eof))) 
# 526
{ 
# 527
++(_M_gcount); 
# 528
__c = (__sb->snextc()); 
# 529
}  
# 530
if ((__n == __gnu_cxx::__numeric_traits_integer< long> ::__max) && (!traits_type::eq_int_type(__c, __eof))) 
# 532
{ 
# 533
(_M_gcount) = __gnu_cxx::__numeric_traits_integer< long> ::__min; 
# 535
__large_ignore = true; 
# 536
} else { 
# 538
break; }  
# 539
}  
# 541
if (__large_ignore) { 
# 542
(_M_gcount) = __gnu_cxx::__numeric_traits_integer< long> ::__max; }  
# 544
if (traits_type::eq_int_type(__c, __eof)) { 
# 545
(__err |= std::ios_base::eofbit); }  
# 546
} 
# 547
catch (__cxxabiv1::__forced_unwind &) 
# 548
{ 
# 549
(this->_M_setstate(ios_base::badbit)); 
# 550
throw; 
# 551
} 
# 552
catch (...) 
# 553
{ (this->_M_setstate(ios_base::badbit)); }  
# 554
if (__err) { 
# 555
(this->setstate(__err)); }  
# 556
}  
# 557
return *this; 
# 558
} 
# 560
template< class _CharT, class _Traits> basic_istream< _CharT, _Traits>  &
# 563
basic_istream< _CharT, _Traits> ::ignore(std::streamsize __n, int_type __delim) 
# 564
{ 
# 565
(_M_gcount) = (0); 
# 566
sentry __cerb(*this, true); 
# 567
if (__cerb && (__n > (0))) 
# 568
{ 
# 569
std::ios_base::iostate __err = std::ios_base::goodbit; 
# 570
try 
# 571
{ 
# 572
const int_type __eof = traits_type::eof(); 
# 573
__streambuf_type *__sb = (this->rdbuf()); 
# 574
int_type __c = (__sb->sgetc()); 
# 577
bool __large_ignore = false; 
# 578
while (true) 
# 579
{ 
# 580
while (((_M_gcount) < __n) && (!traits_type::eq_int_type(__c, __eof)) && (!traits_type::eq_int_type(__c, __delim))) 
# 583
{ 
# 584
++(_M_gcount); 
# 585
__c = (__sb->snextc()); 
# 586
}  
# 587
if ((__n == __gnu_cxx::__numeric_traits_integer< long> ::__max) && (!traits_type::eq_int_type(__c, __eof)) && (!traits_type::eq_int_type(__c, __delim))) 
# 590
{ 
# 591
(_M_gcount) = __gnu_cxx::__numeric_traits_integer< long> ::__min; 
# 593
__large_ignore = true; 
# 594
} else { 
# 596
break; }  
# 597
}  
# 599
if (__large_ignore) { 
# 600
(_M_gcount) = __gnu_cxx::__numeric_traits_integer< long> ::__max; }  
# 602
if (traits_type::eq_int_type(__c, __eof)) { 
# 603
(__err |= std::ios_base::eofbit); } else { 
# 604
if (traits_type::eq_int_type(__c, __delim)) 
# 605
{ 
# 606
if ((_M_gcount) < __gnu_cxx::__numeric_traits_integer< long> ::__max) { 
# 608
++(_M_gcount); }  
# 609
(__sb->sbumpc()); 
# 610
}  }  
# 611
} 
# 612
catch (__cxxabiv1::__forced_unwind &) 
# 613
{ 
# 614
(this->_M_setstate(ios_base::badbit)); 
# 615
throw; 
# 616
} 
# 617
catch (...) 
# 618
{ (this->_M_setstate(ios_base::badbit)); }  
# 619
if (__err) { 
# 620
(this->setstate(__err)); }  
# 621
}  
# 622
return *this; 
# 623
} 
# 625
template< class _CharT, class _Traits> typename basic_istream< _CharT, _Traits> ::int_type 
# 628
basic_istream< _CharT, _Traits> ::peek() 
# 629
{ 
# 630
int_type __c = traits_type::eof(); 
# 631
(_M_gcount) = (0); 
# 632
sentry __cerb(*this, true); 
# 633
if (__cerb) 
# 634
{ 
# 635
std::ios_base::iostate __err = std::ios_base::goodbit; 
# 636
try 
# 637
{ 
# 638
__c = ((this->rdbuf())->sgetc()); 
# 639
if (traits_type::eq_int_type(__c, traits_type::eof())) { 
# 640
(__err |= std::ios_base::eofbit); }  
# 641
} 
# 642
catch (__cxxabiv1::__forced_unwind &) 
# 643
{ 
# 644
(this->_M_setstate(ios_base::badbit)); 
# 645
throw; 
# 646
} 
# 647
catch (...) 
# 648
{ (this->_M_setstate(ios_base::badbit)); }  
# 649
if (__err) { 
# 650
(this->setstate(__err)); }  
# 651
}  
# 652
return __c; 
# 653
} 
# 655
template< class _CharT, class _Traits> basic_istream< _CharT, _Traits>  &
# 658
basic_istream< _CharT, _Traits> ::read(char_type *__s, std::streamsize __n) 
# 659
{ 
# 660
(_M_gcount) = (0); 
# 661
sentry __cerb(*this, true); 
# 662
if (__cerb) 
# 663
{ 
# 664
std::ios_base::iostate __err = std::ios_base::goodbit; 
# 665
try 
# 666
{ 
# 667
(_M_gcount) = ((this->rdbuf())->sgetn(__s, __n)); 
# 668
if ((_M_gcount) != __n) { 
# 669
(__err |= ((std::ios_base::eofbit | std::ios_base::failbit))); }  
# 670
} 
# 671
catch (__cxxabiv1::__forced_unwind &) 
# 672
{ 
# 673
(this->_M_setstate(ios_base::badbit)); 
# 674
throw; 
# 675
} 
# 676
catch (...) 
# 677
{ (this->_M_setstate(ios_base::badbit)); }  
# 678
if (__err) { 
# 679
(this->setstate(__err)); }  
# 680
}  
# 681
return *this; 
# 682
} 
# 684
template< class _CharT, class _Traits> streamsize 
# 687
basic_istream< _CharT, _Traits> ::readsome(char_type *__s, std::streamsize __n) 
# 688
{ 
# 689
(_M_gcount) = (0); 
# 690
sentry __cerb(*this, true); 
# 691
if (__cerb) 
# 692
{ 
# 693
std::ios_base::iostate __err = std::ios_base::goodbit; 
# 694
try 
# 695
{ 
# 697
const std::streamsize __num = ((this->rdbuf())->in_avail()); 
# 698
if (__num > (0)) { 
# 699
(_M_gcount) = ((this->rdbuf())->sgetn(__s, std::min(__num, __n))); } else { 
# 700
if (__num == (-1)) { 
# 701
(__err |= std::ios_base::eofbit); }  }  
# 702
} 
# 703
catch (__cxxabiv1::__forced_unwind &) 
# 704
{ 
# 705
(this->_M_setstate(ios_base::badbit)); 
# 706
throw; 
# 707
} 
# 708
catch (...) 
# 709
{ (this->_M_setstate(ios_base::badbit)); }  
# 710
if (__err) { 
# 711
(this->setstate(__err)); }  
# 712
}  
# 713
return _M_gcount; 
# 714
} 
# 716
template< class _CharT, class _Traits> basic_istream< _CharT, _Traits>  &
# 719
basic_istream< _CharT, _Traits> ::putback(char_type __c) 
# 720
{ 
# 723
(_M_gcount) = (0); 
# 725
(this->clear((this->rdstate()) & ((~std::ios_base::eofbit)))); 
# 726
sentry __cerb(*this, true); 
# 727
if (__cerb) 
# 728
{ 
# 729
std::ios_base::iostate __err = std::ios_base::goodbit; 
# 730
try 
# 731
{ 
# 732
const int_type __eof = traits_type::eof(); 
# 733
__streambuf_type *__sb = (this->rdbuf()); 
# 734
if ((!__sb) || traits_type::eq_int_type((__sb->sputbackc(__c)), __eof)) { 
# 736
(__err |= std::ios_base::badbit); }  
# 737
} 
# 738
catch (__cxxabiv1::__forced_unwind &) 
# 739
{ 
# 740
(this->_M_setstate(ios_base::badbit)); 
# 741
throw; 
# 742
} 
# 743
catch (...) 
# 744
{ (this->_M_setstate(ios_base::badbit)); }  
# 745
if (__err) { 
# 746
(this->setstate(__err)); }  
# 747
}  
# 748
return *this; 
# 749
} 
# 751
template< class _CharT, class _Traits> typename basic_istream< _CharT, _Traits> ::__istream_type &
# 754
basic_istream< _CharT, _Traits> ::unget() 
# 755
{ 
# 758
(_M_gcount) = (0); 
# 760
(this->clear((this->rdstate()) & ((~std::ios_base::eofbit)))); 
# 761
sentry __cerb(*this, true); 
# 762
if (__cerb) 
# 763
{ 
# 764
std::ios_base::iostate __err = std::ios_base::goodbit; 
# 765
try 
# 766
{ 
# 767
const int_type __eof = traits_type::eof(); 
# 768
__streambuf_type *__sb = (this->rdbuf()); 
# 769
if ((!__sb) || traits_type::eq_int_type((__sb->sungetc()), __eof)) { 
# 771
(__err |= std::ios_base::badbit); }  
# 772
} 
# 773
catch (__cxxabiv1::__forced_unwind &) 
# 774
{ 
# 775
(this->_M_setstate(ios_base::badbit)); 
# 776
throw; 
# 777
} 
# 778
catch (...) 
# 779
{ (this->_M_setstate(ios_base::badbit)); }  
# 780
if (__err) { 
# 781
(this->setstate(__err)); }  
# 782
}  
# 783
return *this; 
# 784
} 
# 786
template< class _CharT, class _Traits> int 
# 789
basic_istream< _CharT, _Traits> ::sync() 
# 790
{ 
# 793
int __ret = (-1); 
# 794
sentry __cerb(*this, true); 
# 795
if (__cerb) 
# 796
{ 
# 797
std::ios_base::iostate __err = std::ios_base::goodbit; 
# 798
try 
# 799
{ 
# 800
__streambuf_type *__sb = (this->rdbuf()); 
# 801
if (__sb) 
# 802
{ 
# 803
if ((__sb->pubsync()) == (-1)) { 
# 804
(__err |= std::ios_base::badbit); } else { 
# 806
__ret = 0; }  
# 807
}  
# 808
} 
# 809
catch (__cxxabiv1::__forced_unwind &) 
# 810
{ 
# 811
(this->_M_setstate(ios_base::badbit)); 
# 812
throw; 
# 813
} 
# 814
catch (...) 
# 815
{ (this->_M_setstate(ios_base::badbit)); }  
# 816
if (__err) { 
# 817
(this->setstate(__err)); }  
# 818
}  
# 819
return __ret; 
# 820
} 
# 822
template< class _CharT, class _Traits> typename basic_istream< _CharT, _Traits> ::pos_type 
# 825
basic_istream< _CharT, _Traits> ::tellg() 
# 826
{ 
# 829
pos_type __ret = ((pos_type)(-1)); 
# 830
sentry __cerb(*this, true); 
# 831
if (__cerb) 
# 832
{ 
# 833
try 
# 834
{ 
# 835
if (!(this->fail())) { 
# 836
__ret = ((this->rdbuf())->pubseekoff(0, ios_base::cur, ios_base::in)); }  
# 838
} 
# 839
catch (__cxxabiv1::__forced_unwind &) 
# 840
{ 
# 841
(this->_M_setstate(ios_base::badbit)); 
# 842
throw; 
# 843
} 
# 844
catch (...) 
# 845
{ (this->_M_setstate(ios_base::badbit)); }  
# 846
}  
# 847
return __ret; 
# 848
} 
# 850
template< class _CharT, class _Traits> basic_istream< _CharT, _Traits>  &
# 853
basic_istream< _CharT, _Traits> ::seekg(pos_type __pos) 
# 854
{ 
# 858
(this->clear((this->rdstate()) & ((~std::ios_base::eofbit)))); 
# 859
sentry __cerb(*this, true); 
# 860
if (__cerb) 
# 861
{ 
# 862
std::ios_base::iostate __err = std::ios_base::goodbit; 
# 863
try 
# 864
{ 
# 865
if (!(this->fail())) 
# 866
{ 
# 868
const pos_type __p = ((this->rdbuf())->pubseekpos(__pos, ios_base::in)); 
# 872
if (__p == ((pos_type)((off_type)(-1)))) { 
# 873
(__err |= std::ios_base::failbit); }  
# 874
}  
# 875
} 
# 876
catch (__cxxabiv1::__forced_unwind &) 
# 877
{ 
# 878
(this->_M_setstate(ios_base::badbit)); 
# 879
throw; 
# 880
} 
# 881
catch (...) 
# 882
{ (this->_M_setstate(ios_base::badbit)); }  
# 883
if (__err) { 
# 884
(this->setstate(__err)); }  
# 885
}  
# 886
return *this; 
# 887
} 
# 889
template< class _CharT, class _Traits> basic_istream< _CharT, _Traits>  &
# 892
basic_istream< _CharT, _Traits> ::seekg(off_type __off, std::ios_base::seekdir __dir) 
# 893
{ 
# 897
(this->clear((this->rdstate()) & ((~std::ios_base::eofbit)))); 
# 898
sentry __cerb(*this, true); 
# 899
if (__cerb) 
# 900
{ 
# 901
std::ios_base::iostate __err = std::ios_base::goodbit; 
# 902
try 
# 903
{ 
# 904
if (!(this->fail())) 
# 905
{ 
# 907
const pos_type __p = ((this->rdbuf())->pubseekoff(__off, __dir, ios_base::in)); 
# 911
if (__p == ((pos_type)((off_type)(-1)))) { 
# 912
(__err |= std::ios_base::failbit); }  
# 913
}  
# 914
} 
# 915
catch (__cxxabiv1::__forced_unwind &) 
# 916
{ 
# 917
(this->_M_setstate(ios_base::badbit)); 
# 918
throw; 
# 919
} 
# 920
catch (...) 
# 921
{ (this->_M_setstate(ios_base::badbit)); }  
# 922
if (__err) { 
# 923
(this->setstate(__err)); }  
# 924
}  
# 925
return *this; 
# 926
} 
# 929
template< class _CharT, class _Traits> basic_istream< _CharT, _Traits>  &
# 931
operator>>(basic_istream< _CharT, _Traits>  &__in, _CharT &__c) 
# 932
{ 
# 933
typedef basic_istream< _CharT, _Traits>  __istream_type; 
# 934
typedef typename basic_istream< _CharT, _Traits> ::int_type __int_type; 
# 936
typename basic_istream< _CharT, _Traits> ::sentry __cerb(__in, false); 
# 937
if (__cerb) 
# 938
{ 
# 939
ios_base::iostate __err = ios_base::goodbit; 
# 940
try 
# 941
{ 
# 942
const __int_type __cb = ((__in.rdbuf())->sbumpc()); 
# 943
if (!_Traits::eq_int_type(__cb, _Traits::eof())) { 
# 944
__c = _Traits::to_char_type(__cb); } else { 
# 946
(__err |= ((ios_base::eofbit | ios_base::failbit))); }  
# 947
} 
# 948
catch (__cxxabiv1::__forced_unwind &) 
# 949
{ 
# 950
(__in._M_setstate(ios_base::badbit)); 
# 951
throw; 
# 952
} 
# 953
catch (...) 
# 954
{ (__in._M_setstate(ios_base::badbit)); }  
# 955
if (__err) { 
# 956
(__in.setstate(__err)); }  
# 957
}  
# 958
return __in; 
# 959
} 
# 961
template< class _CharT, class _Traits> basic_istream< _CharT, _Traits>  &
# 963
operator>>(basic_istream< _CharT, _Traits>  &__in, _CharT *__s) 
# 964
{ 
# 965
typedef basic_istream< _CharT, _Traits>  __istream_type; 
# 966
typedef basic_streambuf< _CharT, _Traits>  __streambuf_type; 
# 967
typedef typename _Traits::int_type int_type; 
# 968
typedef _CharT char_type; 
# 969
typedef ctype< _CharT>  __ctype_type; 
# 971
streamsize __extracted = (0); 
# 972
ios_base::iostate __err = ios_base::goodbit; 
# 973
typename basic_istream< _CharT, _Traits> ::sentry __cerb(__in, false); 
# 974
if (__cerb) 
# 975
{ 
# 976
try 
# 977
{ 
# 979
streamsize __num = (__in.width()); 
# 980
if (__num <= (0)) { 
# 981
__num = __gnu_cxx::__numeric_traits_integer< long> ::__max; }  
# 983
const __ctype_type &__ct = use_facet< ctype< _CharT> > ((__in.getloc())); 
# 985
const int_type __eof = _Traits::eof(); 
# 986
__streambuf_type *__sb = (__in.rdbuf()); 
# 987
int_type __c = (__sb->sgetc()); 
# 989
while ((__extracted < (__num - (1))) && (!_Traits::eq_int_type(__c, __eof)) && (!(__ct.is(ctype_base::space, _Traits::to_char_type(__c))))) 
# 993
{ 
# 994
(*(__s++)) = _Traits::to_char_type(__c); 
# 995
++__extracted; 
# 996
__c = (__sb->snextc()); 
# 997
}  
# 998
if (_Traits::eq_int_type(__c, __eof)) { 
# 999
(__err |= ios_base::eofbit); }  
# 1003
(*__s) = char_type(); 
# 1004
(__in.width(0)); 
# 1005
} 
# 1006
catch (__cxxabiv1::__forced_unwind &) 
# 1007
{ 
# 1008
(__in._M_setstate(ios_base::badbit)); 
# 1009
throw; 
# 1010
} 
# 1011
catch (...) 
# 1012
{ (__in._M_setstate(ios_base::badbit)); }  
# 1013
}  
# 1014
if (!__extracted) { 
# 1015
(__err |= ios_base::failbit); }  
# 1016
if (__err) { 
# 1017
(__in.setstate(__err)); }  
# 1018
return __in; 
# 1019
} 
# 1022
template< class _CharT, class _Traits> basic_istream< _CharT, _Traits>  &
# 1024
ws(basic_istream< _CharT, _Traits>  &__in) 
# 1025
{ 
# 1026
typedef basic_istream< _CharT, _Traits>  __istream_type; 
# 1027
typedef basic_streambuf< _CharT, _Traits>  __streambuf_type; 
# 1028
typedef typename basic_istream< _CharT, _Traits> ::int_type __int_type; 
# 1029
typedef ctype< _CharT>  __ctype_type; 
# 1031
const __ctype_type &__ct = use_facet< ctype< _CharT> > ((__in.getloc())); 
# 1032
const __int_type __eof = _Traits::eof(); 
# 1033
__streambuf_type *__sb = (__in.rdbuf()); 
# 1034
__int_type __c = (__sb->sgetc()); 
# 1036
while ((!_Traits::eq_int_type(__c, __eof)) && (__ct.is(ctype_base::space, _Traits::to_char_type(__c)))) { 
# 1038
__c = (__sb->snextc()); }  
# 1040
if (_Traits::eq_int_type(__c, __eof)) { 
# 1041
(__in.setstate(ios_base::eofbit)); }  
# 1042
return __in; 
# 1043
} 
# 1048
extern template class basic_istream< char, char_traits< char> > ;
# 1049
extern template basic_istream< char, char_traits< char> >  &ws(basic_istream< char, char_traits< char> >  & __is);
# 1050
extern template basic_istream< char, char_traits< char> >  &operator>>(basic_istream< char, char_traits< char> >  & __in, char & __c);
# 1051
extern template basic_istream< char, char_traits< char> >  &operator>>(basic_istream< char, char_traits< char> >  &, char *);
# 1052
extern template basic_istream< char, char_traits< char> >  &operator>>(basic_istream< char, char_traits< char> >  & __in, unsigned char & __c);
# 1053
extern template basic_istream< char, char_traits< char> >  &operator>>(basic_istream< char, char_traits< char> >  & __in, signed char & __c);
# 1054
extern template basic_istream< char, char_traits< char> >  &operator>>(basic_istream< char, char_traits< char> >  & __in, unsigned char * __s);
# 1055
extern template basic_istream< char, char_traits< char> >  &operator>>(basic_istream< char, char_traits< char> >  & __in, signed char * __s);
# 1057
extern template basic_istream< char, char_traits< char> > ::__istream_type &basic_istream< char, char_traits< char> > ::_M_extract(unsigned short & __v);
# 1058
extern template basic_istream< char, char_traits< char> > ::__istream_type &basic_istream< char, char_traits< char> > ::_M_extract(unsigned & __v);
# 1059
extern template basic_istream< char, char_traits< char> > ::__istream_type &basic_istream< char, char_traits< char> > ::_M_extract(long & __v);
# 1060
extern template basic_istream< char, char_traits< char> > ::__istream_type &basic_istream< char, char_traits< char> > ::_M_extract(unsigned long & __v);
# 1061
extern template basic_istream< char, char_traits< char> > ::__istream_type &basic_istream< char, char_traits< char> > ::_M_extract(bool & __v);
# 1063
extern template basic_istream< char, char_traits< char> > ::__istream_type &basic_istream< char, char_traits< char> > ::_M_extract(long long & __v);
# 1064
extern template basic_istream< char, char_traits< char> > ::__istream_type &basic_istream< char, char_traits< char> > ::_M_extract(unsigned long long & __v);
# 1066
extern template basic_istream< char, char_traits< char> > ::__istream_type &basic_istream< char, char_traits< char> > ::_M_extract(float & __v);
# 1067
extern template basic_istream< char, char_traits< char> > ::__istream_type &basic_istream< char, char_traits< char> > ::_M_extract(double & __v);
# 1068
extern template basic_istream< char, char_traits< char> > ::__istream_type &basic_istream< char, char_traits< char> > ::_M_extract(long double & __v);
# 1069
extern template basic_istream< char, char_traits< char> > ::__istream_type &basic_istream< char, char_traits< char> > ::_M_extract(void *& __v);
# 1071
extern template class basic_iostream< char, char_traits< char> > ;
# 1074
extern template class basic_istream< wchar_t, char_traits< wchar_t> > ;
# 1075
extern template basic_istream< wchar_t, char_traits< wchar_t> >  &ws(basic_istream< wchar_t, char_traits< wchar_t> >  & __is);
# 1076
extern template basic_istream< wchar_t, char_traits< wchar_t> >  &operator>>(basic_istream< wchar_t, char_traits< wchar_t> >  & __in, wchar_t & __c);
# 1077
extern template basic_istream< wchar_t, char_traits< wchar_t> >  &operator>>(basic_istream< wchar_t, char_traits< wchar_t> >  &, wchar_t *);
# 1079
extern template basic_istream< wchar_t, char_traits< wchar_t> > ::__istream_type &basic_istream< wchar_t, char_traits< wchar_t> > ::_M_extract(unsigned short & __v);
# 1080
extern template basic_istream< wchar_t, char_traits< wchar_t> > ::__istream_type &basic_istream< wchar_t, char_traits< wchar_t> > ::_M_extract(unsigned & __v);
# 1081
extern template basic_istream< wchar_t, char_traits< wchar_t> > ::__istream_type &basic_istream< wchar_t, char_traits< wchar_t> > ::_M_extract(long & __v);
# 1082
extern template basic_istream< wchar_t, char_traits< wchar_t> > ::__istream_type &basic_istream< wchar_t, char_traits< wchar_t> > ::_M_extract(unsigned long & __v);
# 1083
extern template basic_istream< wchar_t, char_traits< wchar_t> > ::__istream_type &basic_istream< wchar_t, char_traits< wchar_t> > ::_M_extract(bool & __v);
# 1085
extern template basic_istream< wchar_t, char_traits< wchar_t> > ::__istream_type &basic_istream< wchar_t, char_traits< wchar_t> > ::_M_extract(long long & __v);
# 1086
extern template basic_istream< wchar_t, char_traits< wchar_t> > ::__istream_type &basic_istream< wchar_t, char_traits< wchar_t> > ::_M_extract(unsigned long long & __v);
# 1088
extern template basic_istream< wchar_t, char_traits< wchar_t> > ::__istream_type &basic_istream< wchar_t, char_traits< wchar_t> > ::_M_extract(float & __v);
# 1089
extern template basic_istream< wchar_t, char_traits< wchar_t> > ::__istream_type &basic_istream< wchar_t, char_traits< wchar_t> > ::_M_extract(double & __v);
# 1090
extern template basic_istream< wchar_t, char_traits< wchar_t> > ::__istream_type &basic_istream< wchar_t, char_traits< wchar_t> > ::_M_extract(long double & __v);
# 1091
extern template basic_istream< wchar_t, char_traits< wchar_t> > ::__istream_type &basic_istream< wchar_t, char_traits< wchar_t> > ::_M_extract(void *& __v);
# 1093
extern template class basic_iostream< wchar_t, char_traits< wchar_t> > ;
# 1098
}
# 42 "/usr/include/c++/8/iostream" 3
namespace std __attribute((__visibility__("default"))) { 
# 60 "/usr/include/c++/8/iostream" 3
extern istream cin; 
# 61
extern ostream cout; 
# 62
extern ostream cerr; 
# 63
extern ostream clog; 
# 66
extern wistream wcin; 
# 67
extern wostream wcout; 
# 68
extern wostream wcerr; 
# 69
extern wostream wclog; 
# 74
static ios_base::Init __ioinit; 
# 77
}
# 63 "/usr/include/c++/8/bits/stl_construct.h" 3
namespace std __attribute((__visibility__("default"))) { 
# 72
template< class _T1, class ..._Args> inline void 
# 74
_Construct(_T1 *__p, _Args &&...__args) 
# 75
{ ::new (static_cast< void *>(__p)) (_T1)(std::forward< _Args> (__args)...); } 
# 87 "/usr/include/c++/8/bits/stl_construct.h" 3
template< class _T1> inline void 
# 89
_Construct_novalue(_T1 *__p) 
# 90
{ ::new (static_cast< void *>(__p)) (_T1); } 
# 95
template< class _Tp> inline void 
# 97
_Destroy(_Tp *__pointer) 
# 98
{ (__pointer->~_Tp()); } 
# 100
template< bool > 
# 101
struct _Destroy_aux { 
# 103
template< class _ForwardIterator> static void 
# 105
__destroy(_ForwardIterator __first, _ForwardIterator __last) 
# 106
{ 
# 107
for (; __first != __last; ++__first) { 
# 108
std::_Destroy(std::__addressof(*__first)); }  
# 109
} 
# 110
}; 
# 113
template<> struct _Destroy_aux< true>  { 
# 115
template< class _ForwardIterator> static void 
# 117
__destroy(_ForwardIterator, _ForwardIterator) { } 
# 118
}; 
# 125
template< class _ForwardIterator> inline void 
# 127
_Destroy(_ForwardIterator __first, _ForwardIterator __last) 
# 128
{ 
# 130
typedef typename iterator_traits< _ForwardIterator> ::value_type _Value_type; 
# 133
static_assert((is_destructible< typename iterator_traits< _ForwardIterator> ::value_type> ::value), "value type is destructible");
# 136
std::_Destroy_aux< __has_trivial_destructor(typename iterator_traits< _ForwardIterator> ::value_type)> ::__destroy(__first, __last); 
# 138
} 
# 140
template< bool > 
# 141
struct _Destroy_n_aux { 
# 143
template< class _ForwardIterator, class _Size> static _ForwardIterator 
# 145
__destroy_n(_ForwardIterator __first, _Size __count) 
# 146
{ 
# 147
for (; __count > 0; ((void)(++__first)), (--__count)) { 
# 148
std::_Destroy(std::__addressof(*__first)); }  
# 149
return __first; 
# 150
} 
# 151
}; 
# 154
template<> struct _Destroy_n_aux< true>  { 
# 156
template< class _ForwardIterator, class _Size> static _ForwardIterator 
# 158
__destroy_n(_ForwardIterator __first, _Size __count) 
# 159
{ 
# 160
std::advance(__first, __count); 
# 161
return __first; 
# 162
} 
# 163
}; 
# 170
template< class _ForwardIterator, class _Size> inline _ForwardIterator 
# 172
_Destroy_n(_ForwardIterator __first, _Size __count) 
# 173
{ 
# 175
typedef typename iterator_traits< _ForwardIterator> ::value_type _Value_type; 
# 178
static_assert((is_destructible< typename iterator_traits< _ForwardIterator> ::value_type> ::value), "value type is destructible");
# 181
return std::_Destroy_n_aux< __has_trivial_destructor(typename iterator_traits< _ForwardIterator> ::value_type)> ::__destroy_n(__first, __count); 
# 183
} 
# 191
template< class _ForwardIterator, class _Allocator> void 
# 193
_Destroy(_ForwardIterator __first, _ForwardIterator __last, _Allocator &
# 194
__alloc) 
# 195
{ 
# 196
typedef __gnu_cxx::__alloc_traits< _Allocator>  __traits; 
# 197
for (; __first != __last; ++__first) { 
# 198
__traits::destroy(__alloc, std::__addressof(*__first)); }  
# 199
} 
# 201
template< class _ForwardIterator, class _Tp> inline void 
# 203
_Destroy(_ForwardIterator __first, _ForwardIterator __last, allocator< _Tp>  &) 
# 205
{ 
# 206
_Destroy(__first, __last); 
# 207
} 
# 233 "/usr/include/c++/8/bits/stl_construct.h" 3
}
# 67 "/usr/include/c++/8/bits/stl_uninitialized.h" 3
namespace std __attribute((__visibility__("default"))) { 
# 71
template< bool _TrivialValueTypes> 
# 72
struct __uninitialized_copy { 
# 74
template< class _InputIterator, class _ForwardIterator> static _ForwardIterator 
# 76
__uninit_copy(_InputIterator __first, _InputIterator __last, _ForwardIterator 
# 77
__result) 
# 78
{ 
# 79
_ForwardIterator __cur = __result; 
# 80
try 
# 81
{ 
# 82
for (; __first != __last; (++__first), ((void)(++__cur))) { 
# 83
std::_Construct(std::__addressof(*__cur), *__first); }  
# 84
return __cur; 
# 85
} 
# 86
catch (...) 
# 87
{ 
# 88
std::_Destroy(__result, __cur); 
# 89
throw; 
# 90
}  
# 91
} 
# 92
}; 
# 95
template<> struct __uninitialized_copy< true>  { 
# 97
template< class _InputIterator, class _ForwardIterator> static _ForwardIterator 
# 99
__uninit_copy(_InputIterator __first, _InputIterator __last, _ForwardIterator 
# 100
__result) 
# 101
{ return std::copy(__first, __last, __result); } 
# 102
}; 
# 113 "/usr/include/c++/8/bits/stl_uninitialized.h" 3
template< class _InputIterator, class _ForwardIterator> inline _ForwardIterator 
# 115
uninitialized_copy(_InputIterator __first, _InputIterator __last, _ForwardIterator 
# 116
__result) 
# 117
{ 
# 119
typedef typename iterator_traits< _InputIterator> ::value_type _ValueType1; 
# 121
typedef typename iterator_traits< _ForwardIterator> ::value_type _ValueType2; 
# 126
typedef typename iterator_traits< _InputIterator> ::reference _RefType1; 
# 127
typedef typename iterator_traits< _ForwardIterator> ::reference _RefType2; 
# 128
const bool __assignable = (is_assignable< typename iterator_traits< _ForwardIterator> ::reference, typename iterator_traits< _InputIterator> ::reference> ::value); 
# 131
return std::__uninitialized_copy< __is_trivial(typename iterator_traits< _InputIterator> ::value_type) && __is_trivial(typename iterator_traits< _ForwardIterator> ::value_type) && __assignable> ::__uninit_copy(__first, __last, __result); 
# 135
} 
# 138
template< bool _TrivialValueType> 
# 139
struct __uninitialized_fill { 
# 141
template< class _ForwardIterator, class _Tp> static void 
# 143
__uninit_fill(_ForwardIterator __first, _ForwardIterator __last, const _Tp &
# 144
__x) 
# 145
{ 
# 146
_ForwardIterator __cur = __first; 
# 147
try 
# 148
{ 
# 149
for (; __cur != __last; ++__cur) { 
# 150
std::_Construct(std::__addressof(*__cur), __x); }  
# 151
} 
# 152
catch (...) 
# 153
{ 
# 154
std::_Destroy(__first, __cur); 
# 155
throw; 
# 156
}  
# 157
} 
# 158
}; 
# 161
template<> struct __uninitialized_fill< true>  { 
# 163
template< class _ForwardIterator, class _Tp> static void 
# 165
__uninit_fill(_ForwardIterator __first, _ForwardIterator __last, const _Tp &
# 166
__x) 
# 167
{ std::fill(__first, __last, __x); } 
# 168
}; 
# 179 "/usr/include/c++/8/bits/stl_uninitialized.h" 3
template< class _ForwardIterator, class _Tp> inline void 
# 181
uninitialized_fill(_ForwardIterator __first, _ForwardIterator __last, const _Tp &
# 182
__x) 
# 183
{ 
# 185
typedef typename iterator_traits< _ForwardIterator> ::value_type _ValueType; 
# 190
const bool __assignable = (is_copy_assignable< typename iterator_traits< _ForwardIterator> ::value_type> ::value); 
# 193
std::__uninitialized_fill< __is_trivial(typename iterator_traits< _ForwardIterator> ::value_type) && __assignable> ::__uninit_fill(__first, __last, __x); 
# 195
} 
# 198
template< bool _TrivialValueType> 
# 199
struct __uninitialized_fill_n { 
# 201
template< class _ForwardIterator, class _Size, class _Tp> static _ForwardIterator 
# 203
__uninit_fill_n(_ForwardIterator __first, _Size __n, const _Tp &
# 204
__x) 
# 205
{ 
# 206
_ForwardIterator __cur = __first; 
# 207
try 
# 208
{ 
# 209
for (; __n > 0; (--__n), ((void)(++__cur))) { 
# 210
std::_Construct(std::__addressof(*__cur), __x); }  
# 211
return __cur; 
# 212
} 
# 213
catch (...) 
# 214
{ 
# 215
std::_Destroy(__first, __cur); 
# 216
throw; 
# 217
}  
# 218
} 
# 219
}; 
# 222
template<> struct __uninitialized_fill_n< true>  { 
# 224
template< class _ForwardIterator, class _Size, class _Tp> static _ForwardIterator 
# 226
__uninit_fill_n(_ForwardIterator __first, _Size __n, const _Tp &
# 227
__x) 
# 228
{ return std::fill_n(__first, __n, __x); } 
# 229
}; 
# 242 "/usr/include/c++/8/bits/stl_uninitialized.h" 3
template< class _ForwardIterator, class _Size, class _Tp> inline _ForwardIterator 
# 244
uninitialized_fill_n(_ForwardIterator __first, _Size __n, const _Tp &__x) 
# 245
{ 
# 247
typedef typename iterator_traits< _ForwardIterator> ::value_type _ValueType; 
# 252
const bool __assignable = (is_copy_assignable< typename iterator_traits< _ForwardIterator> ::value_type> ::value); 
# 254
return __uninitialized_fill_n< __is_trivial(typename iterator_traits< _ForwardIterator> ::value_type) && __assignable> ::__uninit_fill_n(__first, __n, __x); 
# 256
} 
# 264
template< class _InputIterator, class _ForwardIterator, class 
# 265
_Allocator> _ForwardIterator 
# 267
__uninitialized_copy_a(_InputIterator __first, _InputIterator __last, _ForwardIterator 
# 268
__result, _Allocator &__alloc) 
# 269
{ 
# 270
_ForwardIterator __cur = __result; 
# 271
try 
# 272
{ 
# 273
typedef __gnu_cxx::__alloc_traits< _Allocator>  __traits; 
# 274
for (; __first != __last; (++__first), ((void)(++__cur))) { 
# 275
__traits::construct(__alloc, std::__addressof(*__cur), *__first); }  
# 276
return __cur; 
# 277
} 
# 278
catch (...) 
# 279
{ 
# 280
std::_Destroy(__result, __cur, __alloc); 
# 281
throw; 
# 282
}  
# 283
} 
# 285
template< class _InputIterator, class _ForwardIterator, class _Tp> inline _ForwardIterator 
# 287
__uninitialized_copy_a(_InputIterator __first, _InputIterator __last, _ForwardIterator 
# 288
__result, allocator< _Tp>  &) 
# 289
{ return std::uninitialized_copy(__first, __last, __result); } 
# 291
template< class _InputIterator, class _ForwardIterator, class 
# 292
_Allocator> inline _ForwardIterator 
# 294
__uninitialized_move_a(_InputIterator __first, _InputIterator __last, _ForwardIterator 
# 295
__result, _Allocator &__alloc) 
# 296
{ 
# 297
return std::__uninitialized_copy_a(std::make_move_iterator(__first), std::make_move_iterator(__last), __result, __alloc); 
# 300
} 
# 302
template< class _InputIterator, class _ForwardIterator, class 
# 303
_Allocator> inline _ForwardIterator 
# 305
__uninitialized_move_if_noexcept_a(_InputIterator __first, _InputIterator 
# 306
__last, _ForwardIterator 
# 307
__result, _Allocator &
# 308
__alloc) 
# 309
{ 
# 310
return std::__uninitialized_copy_a(std::__make_move_if_noexcept_iterator(__first), std::__make_move_if_noexcept_iterator(__last), __result, __alloc); 
# 313
} 
# 315
template< class _ForwardIterator, class _Tp, class _Allocator> void 
# 317
__uninitialized_fill_a(_ForwardIterator __first, _ForwardIterator __last, const _Tp &
# 318
__x, _Allocator &__alloc) 
# 319
{ 
# 320
_ForwardIterator __cur = __first; 
# 321
try 
# 322
{ 
# 323
typedef __gnu_cxx::__alloc_traits< _Allocator>  __traits; 
# 324
for (; __cur != __last; ++__cur) { 
# 325
__traits::construct(__alloc, std::__addressof(*__cur), __x); }  
# 326
} 
# 327
catch (...) 
# 328
{ 
# 329
std::_Destroy(__first, __cur, __alloc); 
# 330
throw; 
# 331
}  
# 332
} 
# 334
template< class _ForwardIterator, class _Tp, class _Tp2> inline void 
# 336
__uninitialized_fill_a(_ForwardIterator __first, _ForwardIterator __last, const _Tp &
# 337
__x, allocator< _Tp2>  &) 
# 338
{ std::uninitialized_fill(__first, __last, __x); } 
# 340
template< class _ForwardIterator, class _Size, class _Tp, class 
# 341
_Allocator> _ForwardIterator 
# 343
__uninitialized_fill_n_a(_ForwardIterator __first, _Size __n, const _Tp &
# 344
__x, _Allocator &__alloc) 
# 345
{ 
# 346
_ForwardIterator __cur = __first; 
# 347
try 
# 348
{ 
# 349
typedef __gnu_cxx::__alloc_traits< _Allocator>  __traits; 
# 350
for (; __n > 0; (--__n), ((void)(++__cur))) { 
# 351
__traits::construct(__alloc, std::__addressof(*__cur), __x); }  
# 352
return __cur; 
# 353
} 
# 354
catch (...) 
# 355
{ 
# 356
std::_Destroy(__first, __cur, __alloc); 
# 357
throw; 
# 358
}  
# 359
} 
# 361
template< class _ForwardIterator, class _Size, class _Tp, class 
# 362
_Tp2> inline _ForwardIterator 
# 364
__uninitialized_fill_n_a(_ForwardIterator __first, _Size __n, const _Tp &
# 365
__x, allocator< _Tp2>  &) 
# 366
{ return std::uninitialized_fill_n(__first, __n, __x); } 
# 378 "/usr/include/c++/8/bits/stl_uninitialized.h" 3
template< class _InputIterator1, class _InputIterator2, class 
# 379
_ForwardIterator, class _Allocator> inline _ForwardIterator 
# 381
__uninitialized_copy_move(_InputIterator1 __first1, _InputIterator1 
# 382
__last1, _InputIterator2 
# 383
__first2, _InputIterator2 
# 384
__last2, _ForwardIterator 
# 385
__result, _Allocator &
# 386
__alloc) 
# 387
{ 
# 388
_ForwardIterator __mid = std::__uninitialized_copy_a(__first1, __last1, __result, __alloc); 
# 391
try 
# 392
{ 
# 393
return std::__uninitialized_move_a(__first2, __last2, __mid, __alloc); 
# 394
} 
# 395
catch (...) 
# 396
{ 
# 397
std::_Destroy(__result, __mid, __alloc); 
# 398
throw; 
# 399
}  
# 400
} 
# 406
template< class _InputIterator1, class _InputIterator2, class 
# 407
_ForwardIterator, class _Allocator> inline _ForwardIterator 
# 409
__uninitialized_move_copy(_InputIterator1 __first1, _InputIterator1 
# 410
__last1, _InputIterator2 
# 411
__first2, _InputIterator2 
# 412
__last2, _ForwardIterator 
# 413
__result, _Allocator &
# 414
__alloc) 
# 415
{ 
# 416
_ForwardIterator __mid = std::__uninitialized_move_a(__first1, __last1, __result, __alloc); 
# 419
try 
# 420
{ 
# 421
return std::__uninitialized_copy_a(__first2, __last2, __mid, __alloc); 
# 422
} 
# 423
catch (...) 
# 424
{ 
# 425
std::_Destroy(__result, __mid, __alloc); 
# 426
throw; 
# 427
}  
# 428
} 
# 433
template< class _ForwardIterator, class _Tp, class _InputIterator, class 
# 434
_Allocator> inline _ForwardIterator 
# 436
__uninitialized_fill_move(_ForwardIterator __result, _ForwardIterator __mid, const _Tp &
# 437
__x, _InputIterator __first, _InputIterator 
# 438
__last, _Allocator &__alloc) 
# 439
{ 
# 440
std::__uninitialized_fill_a(__result, __mid, __x, __alloc); 
# 441
try 
# 442
{ 
# 443
return std::__uninitialized_move_a(__first, __last, __mid, __alloc); 
# 444
} 
# 445
catch (...) 
# 446
{ 
# 447
std::_Destroy(__result, __mid, __alloc); 
# 448
throw; 
# 449
}  
# 450
} 
# 455
template< class _InputIterator, class _ForwardIterator, class _Tp, class 
# 456
_Allocator> inline void 
# 458
__uninitialized_move_fill(_InputIterator __first1, _InputIterator __last1, _ForwardIterator 
# 459
__first2, _ForwardIterator 
# 460
__last2, const _Tp &__x, _Allocator &
# 461
__alloc) 
# 462
{ 
# 463
_ForwardIterator __mid2 = std::__uninitialized_move_a(__first1, __last1, __first2, __alloc); 
# 466
try 
# 467
{ 
# 468
std::__uninitialized_fill_a(__mid2, __last2, __x, __alloc); 
# 469
} 
# 470
catch (...) 
# 471
{ 
# 472
std::_Destroy(__first2, __mid2, __alloc); 
# 473
throw; 
# 474
}  
# 475
} 
# 481
template< bool _TrivialValueType> 
# 482
struct __uninitialized_default_1 { 
# 484
template< class _ForwardIterator> static void 
# 486
__uninit_default(_ForwardIterator __first, _ForwardIterator __last) 
# 487
{ 
# 488
_ForwardIterator __cur = __first; 
# 489
try 
# 490
{ 
# 491
for (; __cur != __last; ++__cur) { 
# 492
std::_Construct(std::__addressof(*__cur)); }  
# 493
} 
# 494
catch (...) 
# 495
{ 
# 496
std::_Destroy(__first, __cur); 
# 497
throw; 
# 498
}  
# 499
} 
# 500
}; 
# 503
template<> struct __uninitialized_default_1< true>  { 
# 505
template< class _ForwardIterator> static void 
# 507
__uninit_default(_ForwardIterator __first, _ForwardIterator __last) 
# 508
{ 
# 510
typedef typename iterator_traits< _ForwardIterator> ::value_type _ValueType; 
# 512
std::fill(__first, __last, _ValueType()); 
# 513
} 
# 514
}; 
# 516
template< bool _TrivialValueType> 
# 517
struct __uninitialized_default_n_1 { 
# 519
template< class _ForwardIterator, class _Size> static _ForwardIterator 
# 521
__uninit_default_n(_ForwardIterator __first, _Size __n) 
# 522
{ 
# 523
_ForwardIterator __cur = __first; 
# 524
try 
# 525
{ 
# 526
for (; __n > 0; (--__n), ((void)(++__cur))) { 
# 527
std::_Construct(std::__addressof(*__cur)); }  
# 528
return __cur; 
# 529
} 
# 530
catch (...) 
# 531
{ 
# 532
std::_Destroy(__first, __cur); 
# 533
throw; 
# 534
}  
# 535
} 
# 536
}; 
# 539
template<> struct __uninitialized_default_n_1< true>  { 
# 541
template< class _ForwardIterator, class _Size> static _ForwardIterator 
# 543
__uninit_default_n(_ForwardIterator __first, _Size __n) 
# 544
{ 
# 546
typedef typename iterator_traits< _ForwardIterator> ::value_type _ValueType; 
# 548
return std::fill_n(__first, __n, _ValueType()); 
# 549
} 
# 550
}; 
# 555
template< class _ForwardIterator> inline void 
# 557
__uninitialized_default(_ForwardIterator __first, _ForwardIterator 
# 558
__last) 
# 559
{ 
# 561
typedef typename iterator_traits< _ForwardIterator> ::value_type _ValueType; 
# 563
const bool __assignable = (is_copy_assignable< typename iterator_traits< _ForwardIterator> ::value_type> ::value); 
# 565
std::__uninitialized_default_1< __is_trivial(typename iterator_traits< _ForwardIterator> ::value_type) && __assignable> ::__uninit_default(__first, __last); 
# 568
} 
# 572
template< class _ForwardIterator, class _Size> inline _ForwardIterator 
# 574
__uninitialized_default_n(_ForwardIterator __first, _Size __n) 
# 575
{ 
# 577
typedef typename iterator_traits< _ForwardIterator> ::value_type _ValueType; 
# 579
const bool __assignable = (is_copy_assignable< typename iterator_traits< _ForwardIterator> ::value_type> ::value); 
# 581
return __uninitialized_default_n_1< __is_trivial(typename iterator_traits< _ForwardIterator> ::value_type) && __assignable> ::__uninit_default_n(__first, __n); 
# 584
} 
# 590
template< class _ForwardIterator, class _Allocator> void 
# 592
__uninitialized_default_a(_ForwardIterator __first, _ForwardIterator 
# 593
__last, _Allocator &
# 594
__alloc) 
# 595
{ 
# 596
_ForwardIterator __cur = __first; 
# 597
try 
# 598
{ 
# 599
typedef __gnu_cxx::__alloc_traits< _Allocator>  __traits; 
# 600
for (; __cur != __last; ++__cur) { 
# 601
__traits::construct(__alloc, std::__addressof(*__cur)); }  
# 602
} 
# 603
catch (...) 
# 604
{ 
# 605
std::_Destroy(__first, __cur, __alloc); 
# 606
throw; 
# 607
}  
# 608
} 
# 610
template< class _ForwardIterator, class _Tp> inline void 
# 612
__uninitialized_default_a(_ForwardIterator __first, _ForwardIterator 
# 613
__last, allocator< _Tp>  &) 
# 615
{ std::__uninitialized_default(__first, __last); } 
# 621
template< class _ForwardIterator, class _Size, class _Allocator> _ForwardIterator 
# 623
__uninitialized_default_n_a(_ForwardIterator __first, _Size __n, _Allocator &
# 624
__alloc) 
# 625
{ 
# 626
_ForwardIterator __cur = __first; 
# 627
try 
# 628
{ 
# 629
typedef __gnu_cxx::__alloc_traits< _Allocator>  __traits; 
# 630
for (; __n > 0; (--__n), ((void)(++__cur))) { 
# 631
__traits::construct(__alloc, std::__addressof(*__cur)); }  
# 632
return __cur; 
# 633
} 
# 634
catch (...) 
# 635
{ 
# 636
std::_Destroy(__first, __cur, __alloc); 
# 637
throw; 
# 638
}  
# 639
} 
# 641
template< class _ForwardIterator, class _Size, class _Tp> inline _ForwardIterator 
# 643
__uninitialized_default_n_a(_ForwardIterator __first, _Size __n, allocator< _Tp>  &) 
# 645
{ return std::__uninitialized_default_n(__first, __n); } 
# 647
template< bool _TrivialValueType> 
# 648
struct __uninitialized_default_novalue_1 { 
# 650
template< class _ForwardIterator> static void 
# 652
__uninit_default_novalue(_ForwardIterator __first, _ForwardIterator 
# 653
__last) 
# 654
{ 
# 655
_ForwardIterator __cur = __first; 
# 656
try 
# 657
{ 
# 658
for (; __cur != __last; ++__cur) { 
# 659
std::_Construct_novalue(std::__addressof(*__cur)); }  
# 660
} 
# 661
catch (...) 
# 662
{ 
# 663
std::_Destroy(__first, __cur); 
# 664
throw; 
# 665
}  
# 666
} 
# 667
}; 
# 670
template<> struct __uninitialized_default_novalue_1< true>  { 
# 672
template< class _ForwardIterator> static void 
# 674
__uninit_default_novalue(_ForwardIterator __first, _ForwardIterator 
# 675
__last) 
# 676
{ 
# 677
} 
# 678
}; 
# 680
template< bool _TrivialValueType> 
# 681
struct __uninitialized_default_novalue_n_1 { 
# 683
template< class _ForwardIterator, class _Size> static _ForwardIterator 
# 685
__uninit_default_novalue_n(_ForwardIterator __first, _Size __n) 
# 686
{ 
# 687
_ForwardIterator __cur = __first; 
# 688
try 
# 689
{ 
# 690
for (; __n > 0; (--__n), ((void)(++__cur))) { 
# 691
std::_Construct_novalue(std::__addressof(*__cur)); }  
# 692
return __cur; 
# 693
} 
# 694
catch (...) 
# 695
{ 
# 696
std::_Destroy(__first, __cur); 
# 697
throw; 
# 698
}  
# 699
} 
# 700
}; 
# 703
template<> struct __uninitialized_default_novalue_n_1< true>  { 
# 705
template< class _ForwardIterator, class _Size> static _ForwardIterator 
# 707
__uninit_default_novalue_n(_ForwardIterator __first, _Size __n) 
# 708
{ return std::next(__first, __n); } 
# 709
}; 
# 714
template< class _ForwardIterator> inline void 
# 716
__uninitialized_default_novalue(_ForwardIterator __first, _ForwardIterator 
# 717
__last) 
# 718
{ 
# 720
typedef typename iterator_traits< _ForwardIterator> ::value_type _ValueType; 
# 722
std::__uninitialized_default_novalue_1< is_trivially_default_constructible< typename iterator_traits< _ForwardIterator> ::value_type> ::value> ::__uninit_default_novalue(__first, __last); 
# 725
} 
# 729
template< class _ForwardIterator, class _Size> inline _ForwardIterator 
# 731
__uninitialized_default_novalue_n(_ForwardIterator __first, _Size __n) 
# 732
{ 
# 734
typedef typename iterator_traits< _ForwardIterator> ::value_type _ValueType; 
# 736
return __uninitialized_default_novalue_n_1< is_trivially_default_constructible< typename iterator_traits< _ForwardIterator> ::value_type> ::value> ::__uninit_default_novalue_n(__first, __n); 
# 739
} 
# 741
template< class _InputIterator, class _Size, class 
# 742
_ForwardIterator> _ForwardIterator 
# 744
__uninitialized_copy_n(_InputIterator __first, _Size __n, _ForwardIterator 
# 745
__result, input_iterator_tag) 
# 746
{ 
# 747
_ForwardIterator __cur = __result; 
# 748
try 
# 749
{ 
# 750
for (; __n > 0; ((--__n), ((void)(++__first))), (++__cur)) { 
# 751
std::_Construct(std::__addressof(*__cur), *__first); }  
# 752
return __cur; 
# 753
} 
# 754
catch (...) 
# 755
{ 
# 756
std::_Destroy(__result, __cur); 
# 757
throw; 
# 758
}  
# 759
} 
# 761
template< class _RandomAccessIterator, class _Size, class 
# 762
_ForwardIterator> inline _ForwardIterator 
# 764
__uninitialized_copy_n(_RandomAccessIterator __first, _Size __n, _ForwardIterator 
# 765
__result, random_access_iterator_tag) 
# 767
{ return std::uninitialized_copy(__first, __first + __n, __result); } 
# 769
template< class _InputIterator, class _Size, class 
# 770
_ForwardIterator> pair< _InputIterator, _ForwardIterator>  
# 772
__uninitialized_copy_n_pair(_InputIterator __first, _Size __n, _ForwardIterator 
# 773
__result, input_iterator_tag) 
# 774
{ 
# 775
_ForwardIterator __cur = __result; 
# 776
try 
# 777
{ 
# 778
for (; __n > 0; ((--__n), ((void)(++__first))), (++__cur)) { 
# 779
std::_Construct(std::__addressof(*__cur), *__first); }  
# 780
return {__first, __cur}; 
# 781
} 
# 782
catch (...) 
# 783
{ 
# 784
std::_Destroy(__result, __cur); 
# 785
throw; 
# 786
}  
# 787
} 
# 789
template< class _RandomAccessIterator, class _Size, class 
# 790
_ForwardIterator> inline pair< _RandomAccessIterator, _ForwardIterator>  
# 792
__uninitialized_copy_n_pair(_RandomAccessIterator __first, _Size __n, _ForwardIterator 
# 793
__result, random_access_iterator_tag) 
# 795
{ 
# 796
auto __second_res = uninitialized_copy(__first, __first + __n, __result); 
# 797
auto __first_res = std::next(__first, __n); 
# 798
return {__first_res, __second_res}; 
# 799
} 
# 810 "/usr/include/c++/8/bits/stl_uninitialized.h" 3
template< class _InputIterator, class _Size, class _ForwardIterator> inline _ForwardIterator 
# 812
uninitialized_copy_n(_InputIterator __first, _Size __n, _ForwardIterator 
# 813
__result) 
# 814
{ return std::__uninitialized_copy_n(__first, __n, __result, std::__iterator_category(__first)); 
# 815
} 
# 817
template< class _InputIterator, class _Size, class _ForwardIterator> inline pair< _InputIterator, _ForwardIterator>  
# 819
__uninitialized_copy_n_pair(_InputIterator __first, _Size __n, _ForwardIterator 
# 820
__result) 
# 821
{ 
# 822
return std::__uninitialized_copy_n_pair(__first, __n, __result, std::__iterator_category(__first)); 
# 825
} 
# 885 "/usr/include/c++/8/bits/stl_uninitialized.h" 3
}
# 74 "/usr/include/c++/8/bits/stl_vector.h" 3
namespace std __attribute((__visibility__("default"))) { 
# 80
template< class _Tp, class _Alloc> 
# 81
struct _Vector_base { 
# 84
typedef typename __gnu_cxx::__alloc_traits< _Alloc> ::template rebind< _Tp> ::other _Tp_alloc_type; 
# 86
typedef typename __gnu_cxx::__alloc_traits< typename __gnu_cxx::__alloc_traits< _Alloc> ::template rebind< _Tp> ::other> ::pointer pointer; 
# 88
struct _Vector_impl : public _Tp_alloc_type { 
# 91
typename std::_Vector_base< _Tp, _Alloc> ::pointer _M_start; 
# 92
typename std::_Vector_base< _Tp, _Alloc> ::pointer _M_finish; 
# 93
typename std::_Vector_base< _Tp, _Alloc> ::pointer _M_end_of_storage; 
# 95
_Vector_impl() : std::_Vector_base< _Tp, _Alloc> ::_Tp_alloc_type(), _M_start(), _M_finish(), _M_end_of_storage() 
# 97
{ } 
# 99
_Vector_impl(const typename std::_Vector_base< _Tp, _Alloc> ::_Tp_alloc_type &__a) noexcept : std::_Vector_base< _Tp, _Alloc> ::_Tp_alloc_type(__a), _M_start(), _M_finish(), _M_end_of_storage() 
# 101
{ } 
# 104
_Vector_impl(typename std::_Vector_base< _Tp, _Alloc> ::_Tp_alloc_type &&__a) noexcept : std::_Vector_base< _Tp, _Alloc> ::_Tp_alloc_type(std::move(__a)), _M_start(), _M_finish(), _M_end_of_storage() 
# 107
{ } 
# 110
void _M_swap_data(_Vector_impl &__x) noexcept 
# 111
{ 
# 112
std::swap(_M_start, __x._M_start); 
# 113
std::swap(_M_finish, __x._M_finish); 
# 114
std::swap(_M_end_of_storage, __x._M_end_of_storage); 
# 115
} 
# 231 "/usr/include/c++/8/bits/stl_vector.h" 3
}; 
# 234
typedef _Alloc allocator_type; 
# 237
_Tp_alloc_type &_M_get_Tp_allocator() noexcept 
# 238
{ return *(static_cast< _Tp_alloc_type *>(&(this->_M_impl))); } 
# 241
const _Tp_alloc_type &_M_get_Tp_allocator() const noexcept 
# 242
{ return *(static_cast< const _Tp_alloc_type *>(&(this->_M_impl))); } 
# 245
allocator_type get_allocator() const noexcept 
# 246
{ return (allocator_type)_M_get_Tp_allocator(); } 
# 248
_Vector_base() : _M_impl() 
# 249
{ } 
# 251
_Vector_base(const allocator_type &__a) noexcept : _M_impl(__a) 
# 252
{ } 
# 254
_Vector_base(size_t __n) : _M_impl() 
# 256
{ _M_create_storage(__n); } 
# 258
_Vector_base(size_t __n, const allocator_type &__a) : _M_impl(__a) 
# 260
{ _M_create_storage(__n); } 
# 263
_Vector_base(_Tp_alloc_type &&__a) noexcept : _M_impl(std::move(__a)) 
# 264
{ } 
# 266
_Vector_base(_Vector_base &&__x) noexcept : _M_impl(std::move(__x._M_get_Tp_allocator())) 
# 268
{ ((this->_M_impl)._M_swap_data(__x._M_impl)); } 
# 270
_Vector_base(_Vector_base &&__x, const allocator_type &__a) : _M_impl(__a) 
# 272
{ 
# 273
if (__x.get_allocator() == __a) { 
# 274
((this->_M_impl)._M_swap_data(__x._M_impl)); } else 
# 276
{ 
# 277
size_t __n = ((__x._M_impl)._M_finish) - ((__x._M_impl)._M_start); 
# 278
_M_create_storage(__n); 
# 279
}  
# 280
} 
# 283
~_Vector_base() noexcept 
# 284
{ 
# 285
_M_deallocate(((_M_impl)._M_start), ((_M_impl)._M_end_of_storage) - ((_M_impl)._M_start)); 
# 287
} 
# 290
_Vector_impl _M_impl; 
# 293
pointer _M_allocate(size_t __n) 
# 294
{ 
# 295
typedef __gnu_cxx::__alloc_traits< typename __gnu_cxx::__alloc_traits< _Alloc> ::template rebind< _Tp> ::other>  _Tr; 
# 296
return (__n != (0)) ? _Tr::allocate(_M_impl, __n) : (pointer()); 
# 297
} 
# 300
void _M_deallocate(pointer __p, size_t __n) 
# 301
{ 
# 302
typedef __gnu_cxx::__alloc_traits< typename __gnu_cxx::__alloc_traits< _Alloc> ::template rebind< _Tp> ::other>  _Tr; 
# 303
if (__p) { 
# 304
_Tr::deallocate(_M_impl, __p, __n); }  
# 305
} 
# 309
private: void _M_create_storage(size_t __n) 
# 310
{ 
# 311
((this->_M_impl)._M_start) = _M_allocate(__n); 
# 312
((this->_M_impl)._M_finish) = ((this->_M_impl)._M_start); 
# 313
((this->_M_impl)._M_end_of_storage) = (((this->_M_impl)._M_start) + __n); 
# 314
} 
# 315
}; 
# 338 "/usr/include/c++/8/bits/stl_vector.h" 3
template< class _Tp, class _Alloc = allocator< _Tp> > 
# 339
class vector : protected _Vector_base< _Tp, _Alloc>  { 
# 351 "/usr/include/c++/8/bits/stl_vector.h" 3
static_assert((is_same< typename remove_cv< _Tp> ::type, _Tp> ::value), "std::vector must have a non-const, non-volatile value_type");
# 359
typedef std::_Vector_base< _Tp, _Alloc>  _Base; 
# 360
typedef typename std::_Vector_base< _Tp, _Alloc> ::_Tp_alloc_type _Tp_alloc_type; 
# 361
typedef __gnu_cxx::__alloc_traits< typename std::_Vector_base< _Tp, _Alloc> ::_Tp_alloc_type>  _Alloc_traits; 
# 364
public: typedef _Tp value_type; 
# 365
typedef typename std::_Vector_base< _Tp, _Alloc> ::pointer pointer; 
# 366
typedef typename __gnu_cxx::__alloc_traits< typename std::_Vector_base< _Tp, _Alloc> ::_Tp_alloc_type> ::const_pointer const_pointer; 
# 367
typedef typename __gnu_cxx::__alloc_traits< typename std::_Vector_base< _Tp, _Alloc> ::_Tp_alloc_type> ::reference reference; 
# 368
typedef typename __gnu_cxx::__alloc_traits< typename std::_Vector_base< _Tp, _Alloc> ::_Tp_alloc_type> ::const_reference const_reference; 
# 369
typedef __gnu_cxx::__normal_iterator< typename std::_Vector_base< _Tp, _Alloc> ::pointer, vector>  iterator; 
# 371
typedef __gnu_cxx::__normal_iterator< typename __gnu_cxx::__alloc_traits< typename std::_Vector_base< _Tp, _Alloc> ::_Tp_alloc_type> ::const_pointer, vector>  const_iterator; 
# 372
typedef std::reverse_iterator< __gnu_cxx::__normal_iterator< typename __gnu_cxx::__alloc_traits< typename std::_Vector_base< _Tp, _Alloc> ::_Tp_alloc_type> ::const_pointer, vector> >  const_reverse_iterator; 
# 373
typedef std::reverse_iterator< __gnu_cxx::__normal_iterator< typename std::_Vector_base< _Tp, _Alloc> ::pointer, vector> >  reverse_iterator; 
# 374
typedef std::size_t size_type; 
# 375
typedef std::ptrdiff_t difference_type; 
# 376
typedef _Alloc allocator_type; 
# 379
protected: using std::_Vector_base< _Tp, _Alloc> ::_M_allocate;
# 380
using std::_Vector_base< _Tp, _Alloc> ::_M_deallocate;
# 381
using std::_Vector_base< _Tp, _Alloc> ::_M_impl;
# 382
using std::_Vector_base< _Tp, _Alloc> ::_M_get_Tp_allocator;
# 391
public: vector() noexcept(is_nothrow_default_constructible< _Alloc> ::value) : _Base() 
# 395
{ } 
# 402
explicit vector(const allocator_type &__a) noexcept : _Base(__a) 
# 403
{ } 
# 415 "/usr/include/c++/8/bits/stl_vector.h" 3
explicit vector(size_type __n, const allocator_type &__a = allocator_type()) : _Base(__n, __a) 
# 417
{ _M_default_initialize(__n); } 
# 427 "/usr/include/c++/8/bits/stl_vector.h" 3
vector(size_type __n, const value_type &__value, const allocator_type &
# 428
__a = allocator_type()) : _Base(__n, __a) 
# 430
{ _M_fill_initialize(__n, __value); } 
# 458 "/usr/include/c++/8/bits/stl_vector.h" 3
vector(const vector &__x) : _Base(__x.size(), _Alloc_traits::_S_select_on_copy((__x._M_get_Tp_allocator()))) 
# 461
{ 
# 462
((this->_M_impl)._M_finish) = std::__uninitialized_copy_a(__x.begin(), __x.end(), ((this->_M_impl)._M_start), _M_get_Tp_allocator()); 
# 466
} 
# 476 "/usr/include/c++/8/bits/stl_vector.h" 3
vector(vector &&__x) noexcept : _Base(std::move(__x)) 
# 477
{ } 
# 480
vector(const vector &__x, const allocator_type &__a) : _Base(__x.size(), __a) 
# 482
{ 
# 483
((this->_M_impl)._M_finish) = std::__uninitialized_copy_a(__x.begin(), __x.end(), ((this->_M_impl)._M_start), _M_get_Tp_allocator()); 
# 487
} 
# 490
vector(vector &&__rv, const allocator_type &__m) noexcept(_Alloc_traits::_S_always_equal()) : _Base(std::move(__rv), __m) 
# 493
{ 
# 494
if ((__rv.get_allocator()) != __m) 
# 495
{ 
# 496
((this->_M_impl)._M_finish) = std::__uninitialized_move_a(__rv.begin(), __rv.end(), ((this->_M_impl)._M_start), _M_get_Tp_allocator()); 
# 500
__rv.clear(); 
# 501
}  
# 502
} 
# 515 "/usr/include/c++/8/bits/stl_vector.h" 3
vector(initializer_list< _Tp>  __l, const allocator_type &
# 516
__a = allocator_type()) : _Base(__a) 
# 518
{ 
# 519
_M_range_initialize((__l.begin()), (__l.end()), std::random_access_iterator_tag()); 
# 521
} 
# 541 "/usr/include/c++/8/bits/stl_vector.h" 3
template< class _InputIterator, class 
# 542
 = std::_RequireInputIter< _InputIterator> > 
# 543
vector(_InputIterator __first, _InputIterator __last, const allocator_type &
# 544
__a = allocator_type()) : _Base(__a) 
# 546
{ _M_initialize_dispatch(__first, __last, std::__false_type()); } 
# 565 "/usr/include/c++/8/bits/stl_vector.h" 3
~vector() noexcept 
# 566
{ 
# 567
std::_Destroy(((this->_M_impl)._M_start), ((this->_M_impl)._M_finish), _M_get_Tp_allocator()); 
# 569
; 
# 570
} 
# 582 "/usr/include/c++/8/bits/stl_vector.h" 3
vector &operator=(const vector & __x); 
# 596 "/usr/include/c++/8/bits/stl_vector.h" 3
vector &operator=(vector &&__x) noexcept(_Alloc_traits::_S_nothrow_move()) 
# 597
{ 
# 598
constexpr bool __move_storage = (_Alloc_traits::_S_propagate_on_move_assign() || _Alloc_traits::_S_always_equal()); 
# 601
_M_move_assign(std::move(__x), std::__bool_constant< __move_storage> ()); 
# 602
return *this; 
# 603
} 
# 617 "/usr/include/c++/8/bits/stl_vector.h" 3
vector &operator=(initializer_list< _Tp>  __l) 
# 618
{ 
# 619
(this->_M_assign_aux((__l.begin()), (__l.end()), std::random_access_iterator_tag())); 
# 621
return *this; 
# 622
} 
# 636 "/usr/include/c++/8/bits/stl_vector.h" 3
void assign(size_type __n, const value_type &__val) 
# 637
{ _M_fill_assign(__n, __val); } 
# 652 "/usr/include/c++/8/bits/stl_vector.h" 3
template< class _InputIterator, class 
# 653
 = std::_RequireInputIter< _InputIterator> > void 
# 655
assign(_InputIterator __first, _InputIterator __last) 
# 656
{ _M_assign_dispatch(__first, __last, std::__false_type()); } 
# 681 "/usr/include/c++/8/bits/stl_vector.h" 3
void assign(initializer_list< _Tp>  __l) 
# 682
{ 
# 683
(this->_M_assign_aux((__l.begin()), (__l.end()), std::random_access_iterator_tag())); 
# 685
} 
# 689
using std::_Vector_base< _Tp, _Alloc> ::get_allocator;
# 698
iterator begin() noexcept 
# 699
{ return ((__gnu_cxx::__normal_iterator< typename std::_Vector_base< _Tp, _Alloc> ::pointer, vector> )(((this->_M_impl)._M_start))); } 
# 707
const_iterator begin() const noexcept 
# 708
{ return ((__gnu_cxx::__normal_iterator< typename __gnu_cxx::__alloc_traits< typename std::_Vector_base< _Tp, _Alloc> ::_Tp_alloc_type> ::const_pointer, vector> )(((this->_M_impl)._M_start))); } 
# 716
iterator end() noexcept 
# 717
{ return ((__gnu_cxx::__normal_iterator< typename std::_Vector_base< _Tp, _Alloc> ::pointer, vector> )(((this->_M_impl)._M_finish))); } 
# 725
const_iterator end() const noexcept 
# 726
{ return ((__gnu_cxx::__normal_iterator< typename __gnu_cxx::__alloc_traits< typename std::_Vector_base< _Tp, _Alloc> ::_Tp_alloc_type> ::const_pointer, vector> )(((this->_M_impl)._M_finish))); } 
# 734
reverse_iterator rbegin() noexcept 
# 735
{ return ((std::reverse_iterator< __gnu_cxx::__normal_iterator< typename std::_Vector_base< _Tp, _Alloc> ::pointer, vector> > )(end())); } 
# 743
const_reverse_iterator rbegin() const noexcept 
# 744
{ return ((std::reverse_iterator< __gnu_cxx::__normal_iterator< typename __gnu_cxx::__alloc_traits< typename std::_Vector_base< _Tp, _Alloc> ::_Tp_alloc_type> ::const_pointer, vector> > )(end())); } 
# 752
reverse_iterator rend() noexcept 
# 753
{ return ((std::reverse_iterator< __gnu_cxx::__normal_iterator< typename std::_Vector_base< _Tp, _Alloc> ::pointer, vector> > )(begin())); } 
# 761
const_reverse_iterator rend() const noexcept 
# 762
{ return ((std::reverse_iterator< __gnu_cxx::__normal_iterator< typename __gnu_cxx::__alloc_traits< typename std::_Vector_base< _Tp, _Alloc> ::_Tp_alloc_type> ::const_pointer, vector> > )(begin())); } 
# 771
const_iterator cbegin() const noexcept 
# 772
{ return ((__gnu_cxx::__normal_iterator< typename __gnu_cxx::__alloc_traits< typename std::_Vector_base< _Tp, _Alloc> ::_Tp_alloc_type> ::const_pointer, vector> )(((this->_M_impl)._M_start))); } 
# 780
const_iterator cend() const noexcept 
# 781
{ return ((__gnu_cxx::__normal_iterator< typename __gnu_cxx::__alloc_traits< typename std::_Vector_base< _Tp, _Alloc> ::_Tp_alloc_type> ::const_pointer, vector> )(((this->_M_impl)._M_finish))); } 
# 789
const_reverse_iterator crbegin() const noexcept 
# 790
{ return ((std::reverse_iterator< __gnu_cxx::__normal_iterator< typename __gnu_cxx::__alloc_traits< typename std::_Vector_base< _Tp, _Alloc> ::_Tp_alloc_type> ::const_pointer, vector> > )(end())); } 
# 798
const_reverse_iterator crend() const noexcept 
# 799
{ return ((std::reverse_iterator< __gnu_cxx::__normal_iterator< typename __gnu_cxx::__alloc_traits< typename std::_Vector_base< _Tp, _Alloc> ::_Tp_alloc_type> ::const_pointer, vector> > )(begin())); } 
# 805
size_type size() const noexcept 
# 806
{ return (size_type)(((this->_M_impl)._M_finish) - ((this->_M_impl)._M_start)); } 
# 810
size_type max_size() const noexcept 
# 811
{ return _Alloc_traits::max_size(_M_get_Tp_allocator()); } 
# 824 "/usr/include/c++/8/bits/stl_vector.h" 3
void resize(size_type __new_size) 
# 825
{ 
# 826
if (__new_size > size()) { 
# 827
_M_default_append(__new_size - size()); } else { 
# 828
if (__new_size < size()) { 
# 829
_M_erase_at_end(((this->_M_impl)._M_start) + __new_size); }  }  
# 830
} 
# 844 "/usr/include/c++/8/bits/stl_vector.h" 3
void resize(size_type __new_size, const value_type &__x) 
# 845
{ 
# 846
if (__new_size > size()) { 
# 847
_M_fill_insert(end(), __new_size - size(), __x); } else { 
# 848
if (__new_size < size()) { 
# 849
_M_erase_at_end(((this->_M_impl)._M_start) + __new_size); }  }  
# 850
} 
# 876 "/usr/include/c++/8/bits/stl_vector.h" 3
void shrink_to_fit() 
# 877
{ _M_shrink_to_fit(); } 
# 885
size_type capacity() const noexcept 
# 886
{ return (size_type)(((this->_M_impl)._M_end_of_storage) - ((this->_M_impl)._M_start)); 
# 887
} 
# 894
bool empty() const noexcept 
# 895
{ return begin() == end(); } 
# 915 "/usr/include/c++/8/bits/stl_vector.h" 3
void reserve(size_type __n); 
# 930 "/usr/include/c++/8/bits/stl_vector.h" 3
reference operator[](size_type __n) noexcept 
# 931
{ 
# 932
; 
# 933
return *(((this->_M_impl)._M_start) + __n); 
# 934
} 
# 948 "/usr/include/c++/8/bits/stl_vector.h" 3
const_reference operator[](size_type __n) const noexcept 
# 949
{ 
# 950
; 
# 951
return *(((this->_M_impl)._M_start) + __n); 
# 952
} 
# 957
protected: void _M_range_check(size_type __n) const 
# 958
{ 
# 959
if (__n >= size()) { 
# 960
__throw_out_of_range_fmt("vector::_M_range_check: __n (which is %zu) >= this->size() (which is %zu)", __n, size()); }  
# 964
} 
# 979 "/usr/include/c++/8/bits/stl_vector.h" 3
public: reference at(size_type __n) 
# 980
{ 
# 981
_M_range_check(__n); 
# 982
return (*this)[__n]; 
# 983
} 
# 997 "/usr/include/c++/8/bits/stl_vector.h" 3
const_reference at(size_type __n) const 
# 998
{ 
# 999
_M_range_check(__n); 
# 1000
return (*this)[__n]; 
# 1001
} 
# 1008
reference front() noexcept 
# 1009
{ 
# 1010
; 
# 1011
return *begin(); 
# 1012
} 
# 1019
const_reference front() const noexcept 
# 1020
{ 
# 1021
; 
# 1022
return *begin(); 
# 1023
} 
# 1030
reference back() noexcept 
# 1031
{ 
# 1032
; 
# 1033
return *(end() - 1); 
# 1034
} 
# 1041
const_reference back() const noexcept 
# 1042
{ 
# 1043
; 
# 1044
return *(end() - 1); 
# 1045
} 
# 1055 "/usr/include/c++/8/bits/stl_vector.h" 3
_Tp *data() noexcept 
# 1056
{ return _M_data_ptr(((this->_M_impl)._M_start)); } 
# 1059
const _Tp *data() const noexcept 
# 1060
{ return _M_data_ptr(((this->_M_impl)._M_start)); } 
# 1074 "/usr/include/c++/8/bits/stl_vector.h" 3
void push_back(const value_type &__x) 
# 1075
{ 
# 1076
if (((this->_M_impl)._M_finish) != ((this->_M_impl)._M_end_of_storage)) 
# 1077
{ 
# 1078
; 
# 1079
_Alloc_traits::construct((this->_M_impl), ((this->_M_impl)._M_finish), __x); 
# 1081
++((this->_M_impl)._M_finish); 
# 1082
; 
# 1083
} else { 
# 1085
_M_realloc_insert(end(), __x); }  
# 1086
} 
# 1090
void push_back(value_type &&__x) 
# 1091
{ emplace_back(std::move(__x)); } 
# 1093
template< class ..._Args> void emplace_back(_Args && ...__args); 
# 1112 "/usr/include/c++/8/bits/stl_vector.h" 3
void pop_back() noexcept 
# 1113
{ 
# 1114
; 
# 1115
--((this->_M_impl)._M_finish); 
# 1116
_Alloc_traits::destroy((this->_M_impl), ((this->_M_impl)._M_finish)); 
# 1117
; 
# 1118
} 
# 1133 "/usr/include/c++/8/bits/stl_vector.h" 3
template< class ..._Args> iterator 
# 1135
emplace(const_iterator __position, _Args &&...__args) 
# 1136
{ return _M_emplace_aux(__position, std::forward< _Args> (__args)...); } 
# 1150 "/usr/include/c++/8/bits/stl_vector.h" 3
iterator insert(const_iterator __position, const value_type & __x); 
# 1180 "/usr/include/c++/8/bits/stl_vector.h" 3
iterator insert(const_iterator __position, value_type &&__x) 
# 1181
{ return _M_insert_rval(__position, std::move(__x)); } 
# 1197 "/usr/include/c++/8/bits/stl_vector.h" 3
iterator insert(const_iterator __position, initializer_list< _Tp>  __l) 
# 1198
{ 
# 1199
auto __offset = __position - cbegin(); 
# 1200
_M_range_insert(begin() + __offset, (__l.begin()), (__l.end()), std::random_access_iterator_tag()); 
# 1202
return begin() + __offset; 
# 1203
} 
# 1222 "/usr/include/c++/8/bits/stl_vector.h" 3
iterator insert(const_iterator __position, size_type __n, const value_type &__x) 
# 1223
{ 
# 1224
difference_type __offset = __position - cbegin(); 
# 1225
_M_fill_insert(begin() + __offset, __n, __x); 
# 1226
return begin() + __offset; 
# 1227
} 
# 1263 "/usr/include/c++/8/bits/stl_vector.h" 3
template< class _InputIterator, class 
# 1264
 = std::_RequireInputIter< _InputIterator> > iterator 
# 1266
insert(const_iterator __position, _InputIterator __first, _InputIterator 
# 1267
__last) 
# 1268
{ 
# 1269
difference_type __offset = __position - cbegin(); 
# 1270
_M_insert_dispatch(begin() + __offset, __first, __last, std::__false_type()); 
# 1272
return begin() + __offset; 
# 1273
} 
# 1317 "/usr/include/c++/8/bits/stl_vector.h" 3
iterator erase(const_iterator __position) 
# 1318
{ return _M_erase(begin() + (__position - cbegin())); } 
# 1344 "/usr/include/c++/8/bits/stl_vector.h" 3
iterator erase(const_iterator __first, const_iterator __last) 
# 1345
{ 
# 1346
const auto __beg = begin(); 
# 1347
const auto __cbeg = cbegin(); 
# 1348
return _M_erase(__beg + (__first - __cbeg), __beg + (__last - __cbeg)); 
# 1349
} 
# 1367 "/usr/include/c++/8/bits/stl_vector.h" 3
void swap(vector &__x) noexcept 
# 1368
{ 
# 1371
; 
# 1373
((this->_M_impl)._M_swap_data((__x._M_impl))); 
# 1374
_Alloc_traits::_S_on_swap(_M_get_Tp_allocator(), (__x._M_get_Tp_allocator())); 
# 1376
} 
# 1385
void clear() noexcept 
# 1386
{ _M_erase_at_end(((this->_M_impl)._M_start)); } 
# 1395
protected: 
# 1393
template< class _ForwardIterator> pointer 
# 1395
_M_allocate_and_copy(size_type __n, _ForwardIterator 
# 1396
__first, _ForwardIterator __last) 
# 1397
{ 
# 1398
pointer __result = (this->_M_allocate(__n)); 
# 1399
try 
# 1400
{ 
# 1401
std::__uninitialized_copy_a(__first, __last, __result, _M_get_Tp_allocator()); 
# 1403
return __result; 
# 1404
} 
# 1405
catch (...) 
# 1406
{ 
# 1407
_M_deallocate(__result, __n); 
# 1408
throw; 
# 1409
}  
# 1410
} 
# 1419 "/usr/include/c++/8/bits/stl_vector.h" 3
template< class _Integer> void 
# 1421
_M_initialize_dispatch(_Integer __n, _Integer __value, std::__true_type) 
# 1422
{ 
# 1423
((this->_M_impl)._M_start) = _M_allocate(static_cast< size_type>(__n)); 
# 1424
((this->_M_impl)._M_end_of_storage) = (((this->_M_impl)._M_start) + (static_cast< size_type>(__n))); 
# 1426
_M_fill_initialize(static_cast< size_type>(__n), __value); 
# 1427
} 
# 1430
template< class _InputIterator> void 
# 1432
_M_initialize_dispatch(_InputIterator __first, _InputIterator __last, std::__false_type) 
# 1434
{ 
# 1436
typedef typename iterator_traits< _InputIterator> ::iterator_category _IterCategory; 
# 1437
_M_range_initialize(__first, __last, _IterCategory()); 
# 1438
} 
# 1441
template< class _InputIterator> void 
# 1443
_M_range_initialize(_InputIterator __first, _InputIterator __last, std::input_iterator_tag) 
# 1445
{ 
# 1446
try { 
# 1447
for (; __first != __last; ++__first) { 
# 1449
emplace_back(*__first); }  
# 1453
} catch (...) { 
# 1454
clear(); 
# 1455
throw; 
# 1456
}  
# 1457
} 
# 1460
template< class _ForwardIterator> void 
# 1462
_M_range_initialize(_ForwardIterator __first, _ForwardIterator __last, std::forward_iterator_tag) 
# 1464
{ 
# 1465
const size_type __n = std::distance(__first, __last); 
# 1466
((this->_M_impl)._M_start) = (this->_M_allocate(__n)); 
# 1467
((this->_M_impl)._M_end_of_storage) = (((this->_M_impl)._M_start) + __n); 
# 1468
((this->_M_impl)._M_finish) = std::__uninitialized_copy_a(__first, __last, ((this->_M_impl)._M_start), _M_get_Tp_allocator()); 
# 1472
} 
# 1477
void _M_fill_initialize(size_type __n, const value_type &__value) 
# 1478
{ 
# 1479
((this->_M_impl)._M_finish) = std::__uninitialized_fill_n_a(((this->_M_impl)._M_start), __n, __value, _M_get_Tp_allocator()); 
# 1482
} 
# 1487
void _M_default_initialize(size_type __n) 
# 1488
{ 
# 1489
((this->_M_impl)._M_finish) = std::__uninitialized_default_n_a(((this->_M_impl)._M_start), __n, _M_get_Tp_allocator()); 
# 1492
} 
# 1502 "/usr/include/c++/8/bits/stl_vector.h" 3
template< class _Integer> void 
# 1504
_M_assign_dispatch(_Integer __n, _Integer __val, std::__true_type) 
# 1505
{ _M_fill_assign(__n, __val); } 
# 1508
template< class _InputIterator> void 
# 1510
_M_assign_dispatch(_InputIterator __first, _InputIterator __last, std::__false_type) 
# 1512
{ _M_assign_aux(__first, __last, std::__iterator_category(__first)); } 
# 1515
template< class _InputIterator> void _M_assign_aux(_InputIterator __first, _InputIterator __last, std::input_iterator_tag); 
# 1521
template< class _ForwardIterator> void _M_assign_aux(_ForwardIterator __first, _ForwardIterator __last, std::forward_iterator_tag); 
# 1529
void _M_fill_assign(size_type __n, const value_type & __val); 
# 1537
template< class _Integer> void 
# 1539
_M_insert_dispatch(iterator __pos, _Integer __n, _Integer __val, std::__true_type) 
# 1541
{ _M_fill_insert(__pos, __n, __val); } 
# 1544
template< class _InputIterator> void 
# 1546
_M_insert_dispatch(iterator __pos, _InputIterator __first, _InputIterator 
# 1547
__last, std::__false_type) 
# 1548
{ 
# 1549
_M_range_insert(__pos, __first, __last, std::__iterator_category(__first)); 
# 1551
} 
# 1554
template< class _InputIterator> void _M_range_insert(iterator __pos, _InputIterator __first, _InputIterator __last, std::input_iterator_tag); 
# 1560
template< class _ForwardIterator> void _M_range_insert(iterator __pos, _ForwardIterator __first, _ForwardIterator __last, std::forward_iterator_tag); 
# 1568
void _M_fill_insert(iterator __pos, size_type __n, const value_type & __x); 
# 1573
void _M_default_append(size_type __n); 
# 1576
bool _M_shrink_to_fit(); 
# 1589 "/usr/include/c++/8/bits/stl_vector.h" 3
struct _Temporary_value { 
# 1591
template< class ..._Args> explicit 
# 1593
_Temporary_value(vector *__vec, _Args &&...__args) : _M_this(__vec) 
# 1594
{ 
# 1595
_Alloc_traits::construct(((_M_this)->_M_impl), _M_ptr(), std::forward< _Args> (__args)...); 
# 1597
} 
# 1599
~_Temporary_value() 
# 1600
{ _Alloc_traits::destroy(((_M_this)->_M_impl), _M_ptr()); } 
# 1603
value_type &_M_val() { return *_M_ptr(); } 
# 1607
private: _Tp *_M_ptr() { return reinterpret_cast< _Tp *>(&(__buf)); } 
# 1609
vector *_M_this; 
# 1610
typename aligned_storage< sizeof(_Tp), __alignof__(_Tp)> ::type __buf; 
# 1611
}; 
# 1615
template< class _Arg> void _M_insert_aux(iterator __position, _Arg && __arg); 
# 1619
template< class ..._Args> void _M_realloc_insert(iterator __position, _Args && ...__args); 
# 1625
iterator _M_insert_rval(const_iterator __position, value_type && __v); 
# 1628
template< class ..._Args> iterator _M_emplace_aux(const_iterator __position, _Args && ...__args); 
# 1634
iterator _M_emplace_aux(const_iterator __position, value_type &&__v) 
# 1635
{ return _M_insert_rval(__position, std::move(__v)); } 
# 1640
size_type _M_check_len(size_type __n, const char *__s) const 
# 1641
{ 
# 1642
if ((max_size() - size()) < __n) { 
# 1643
__throw_length_error(__s); }  
# 1645
const size_type __len = size() + std::max(size(), __n); 
# 1646
return ((__len < size()) || (__len > max_size())) ? max_size() : __len; 
# 1647
} 
# 1654
void _M_erase_at_end(pointer __pos) noexcept 
# 1655
{ 
# 1656
if (size_type __n = ((this->_M_impl)._M_finish) - __pos) 
# 1657
{ 
# 1658
std::_Destroy(__pos, ((this->_M_impl)._M_finish), _M_get_Tp_allocator()); 
# 1660
((this->_M_impl)._M_finish) = __pos; 
# 1661
; 
# 1662
}  
# 1663
} 
# 1666
iterator _M_erase(iterator __position); 
# 1669
iterator _M_erase(iterator __first, iterator __last); 
# 1677
private: void _M_move_assign(vector &&__x, std::true_type) noexcept 
# 1678
{ 
# 1679
vector __tmp(get_allocator()); 
# 1680
((this->_M_impl)._M_swap_data((__tmp._M_impl))); 
# 1681
((this->_M_impl)._M_swap_data((__x._M_impl))); 
# 1682
std::__alloc_on_move(_M_get_Tp_allocator(), (__x._M_get_Tp_allocator())); 
# 1683
} 
# 1688
void _M_move_assign(vector &&__x, std::false_type) 
# 1689
{ 
# 1690
if ((__x._M_get_Tp_allocator()) == (this->_M_get_Tp_allocator())) { 
# 1691
_M_move_assign(std::move(__x), std::true_type()); } else 
# 1693
{ 
# 1696
(this->assign(std::__make_move_if_noexcept_iterator(__x.begin()), std::__make_move_if_noexcept_iterator(__x.end()))); 
# 1698
__x.clear(); 
# 1699
}  
# 1700
} 
# 1703
template< class _Up> _Up *
# 1705
_M_data_ptr(_Up *__ptr) const noexcept 
# 1706
{ return __ptr; } 
# 1709
template< class _Ptr> typename pointer_traits< _Ptr> ::element_type *
# 1711
_M_data_ptr(_Ptr __ptr) const 
# 1712
{ return (empty()) ? nullptr : std::__to_address(__ptr); } 
# 1729 "/usr/include/c++/8/bits/stl_vector.h" 3
}; 
# 1751 "/usr/include/c++/8/bits/stl_vector.h" 3
template< class _Tp, class _Alloc> inline bool 
# 1753
operator==(const vector< _Tp, _Alloc>  &__x, const vector< _Tp, _Alloc>  &__y) 
# 1754
{ return ((__x.size()) == (__y.size())) && std::equal((__x.begin()), (__x.end()), (__y.begin())); 
# 1755
} 
# 1768 "/usr/include/c++/8/bits/stl_vector.h" 3
template< class _Tp, class _Alloc> inline bool 
# 1770
operator<(const vector< _Tp, _Alloc>  &__x, const vector< _Tp, _Alloc>  &__y) 
# 1771
{ return std::lexicographical_compare((__x.begin()), (__x.end()), (__y.begin()), (__y.end())); 
# 1772
} 
# 1775
template< class _Tp, class _Alloc> inline bool 
# 1777
operator!=(const vector< _Tp, _Alloc>  &__x, const vector< _Tp, _Alloc>  &__y) 
# 1778
{ return !(__x == __y); } 
# 1781
template< class _Tp, class _Alloc> inline bool 
# 1783
operator>(const vector< _Tp, _Alloc>  &__x, const vector< _Tp, _Alloc>  &__y) 
# 1784
{ return __y < __x; } 
# 1787
template< class _Tp, class _Alloc> inline bool 
# 1789
operator<=(const vector< _Tp, _Alloc>  &__x, const vector< _Tp, _Alloc>  &__y) 
# 1790
{ return !(__y < __x); } 
# 1793
template< class _Tp, class _Alloc> inline bool 
# 1795
operator>=(const vector< _Tp, _Alloc>  &__x, const vector< _Tp, _Alloc>  &__y) 
# 1796
{ return !(__x < __y); } 
# 1799
template< class _Tp, class _Alloc> inline void 
# 1801
swap(vector< _Tp, _Alloc>  &__x, vector< _Tp, _Alloc>  &__y) noexcept(noexcept((__x.swap(__y)))) 
# 1803
{ (__x.swap(__y)); } 
# 1807
}
# 64 "/usr/include/c++/8/bits/stl_bvector.h" 3
namespace std __attribute((__visibility__("default"))) { 
# 69
typedef unsigned long _Bit_type; 
# 70
enum { _S_word_bit = 64}; 
# 72
struct _Bit_reference { 
# 74
_Bit_type *_M_p; 
# 75
_Bit_type _M_mask; 
# 77
_Bit_reference(_Bit_type *__x, _Bit_type __y) : _M_p(__x), _M_mask(__y) 
# 78
{ } 
# 80
_Bit_reference() noexcept : _M_p((0)), _M_mask((0)) { } 
# 82
operator bool() const noexcept 
# 83
{ return !(!((*(_M_p)) & (_M_mask))); } 
# 86
_Bit_reference &operator=(bool __x) noexcept 
# 87
{ 
# 88
if (__x) { 
# 89
(*(_M_p)) |= (_M_mask); } else { 
# 91
(*(_M_p)) &= (~(_M_mask)); }  
# 92
return *this; 
# 93
} 
# 96
_Bit_reference &operator=(const _Bit_reference &__x) noexcept 
# 97
{ return ((*this) = ((bool)__x)); } 
# 100
bool operator==(const _Bit_reference &__x) const 
# 101
{ return ((bool)(*this)) == ((bool)__x); } 
# 104
bool operator<(const _Bit_reference &__x) const 
# 105
{ return (!((bool)(*this))) && ((bool)__x); } 
# 108
void flip() noexcept 
# 109
{ (*(_M_p)) ^= (_M_mask); } 
# 110
}; 
# 114
inline void swap(_Bit_reference __x, _Bit_reference __y) noexcept 
# 115
{ 
# 116
bool __tmp = __x; 
# 117
(__x = __y); 
# 118
(__y = __tmp); 
# 119
} 
# 122
inline void swap(_Bit_reference __x, bool &__y) noexcept 
# 123
{ 
# 124
bool __tmp = __x; 
# 125
(__x = __y); 
# 126
__y = __tmp; 
# 127
} 
# 130
inline void swap(bool &__x, _Bit_reference __y) noexcept 
# 131
{ 
# 132
bool __tmp = __x; 
# 133
__x = __y; 
# 134
(__y = __tmp); 
# 135
} 
# 138
struct _Bit_iterator_base : public iterator< random_access_iterator_tag, bool>  { 
# 141
_Bit_type *_M_p; 
# 142
unsigned _M_offset; 
# 144
_Bit_iterator_base(_Bit_type *__x, unsigned __y) : _M_p(__x), _M_offset(__y) 
# 145
{ } 
# 148
void _M_bump_up() 
# 149
{ 
# 150
if (((_M_offset)++) == (((int)_S_word_bit) - 1)) 
# 151
{ 
# 152
(_M_offset) = (0); 
# 153
++(_M_p); 
# 154
}  
# 155
} 
# 158
void _M_bump_down() 
# 159
{ 
# 160
if (((_M_offset)--) == (0)) 
# 161
{ 
# 162
(_M_offset) = (((int)_S_word_bit) - 1); 
# 163
--(_M_p); 
# 164
}  
# 165
} 
# 168
void _M_incr(ptrdiff_t __i) 
# 169
{ 
# 170
difference_type __n = __i + (_M_offset); 
# 171
(_M_p) += (__n / ((int)_S_word_bit)); 
# 172
__n = (__n % ((int)_S_word_bit)); 
# 173
if (__n < (0)) 
# 174
{ 
# 175
__n += ((int)_S_word_bit); 
# 176
--(_M_p); 
# 177
}  
# 178
(_M_offset) = (static_cast< unsigned>(__n)); 
# 179
} 
# 182
bool operator==(const _Bit_iterator_base &__i) const 
# 183
{ return ((_M_p) == (__i._M_p)) && ((_M_offset) == (__i._M_offset)); } 
# 186
bool operator<(const _Bit_iterator_base &__i) const 
# 187
{ 
# 188
return ((_M_p) < (__i._M_p)) || (((_M_p) == (__i._M_p)) && ((_M_offset) < (__i._M_offset))); 
# 190
} 
# 193
bool operator!=(const _Bit_iterator_base &__i) const 
# 194
{ return !((*this) == __i); } 
# 197
bool operator>(const _Bit_iterator_base &__i) const 
# 198
{ return (__i < (*this)); } 
# 201
bool operator<=(const _Bit_iterator_base &__i) const 
# 202
{ return !(__i < (*this)); } 
# 205
bool operator>=(const _Bit_iterator_base &__i) const 
# 206
{ return !((*this) < __i); } 
# 207
}; 
# 210
inline ptrdiff_t operator-(const _Bit_iterator_base &__x, const _Bit_iterator_base &__y) 
# 211
{ 
# 212
return ((((int)_S_word_bit) * ((__x._M_p) - (__y._M_p))) + (__x._M_offset)) - (__y._M_offset); 
# 214
} 
# 216
struct _Bit_iterator : public _Bit_iterator_base { 
# 218
typedef _Bit_reference reference; 
# 219
typedef _Bit_reference *pointer; 
# 220
typedef _Bit_iterator iterator; 
# 222
_Bit_iterator() : _Bit_iterator_base(0, 0) { } 
# 224
_Bit_iterator(_Bit_type *__x, unsigned __y) : _Bit_iterator_base(__x, __y) 
# 225
{ } 
# 228
iterator _M_const_cast() const 
# 229
{ return *this; } 
# 232
reference operator*() const 
# 233
{ return reference(_M_p, 1UL << (_M_offset)); } 
# 236
iterator &operator++() 
# 237
{ 
# 238
this->_M_bump_up(); 
# 239
return *this; 
# 240
} 
# 243
iterator operator++(int) 
# 244
{ 
# 245
iterator __tmp = *this; 
# 246
this->_M_bump_up(); 
# 247
return __tmp; 
# 248
} 
# 251
iterator &operator--() 
# 252
{ 
# 253
this->_M_bump_down(); 
# 254
return *this; 
# 255
} 
# 258
iterator operator--(int) 
# 259
{ 
# 260
iterator __tmp = *this; 
# 261
this->_M_bump_down(); 
# 262
return __tmp; 
# 263
} 
# 266
iterator &operator+=(difference_type __i) 
# 267
{ 
# 268
this->_M_incr(__i); 
# 269
return *this; 
# 270
} 
# 273
iterator &operator-=(difference_type __i) 
# 274
{ 
# 275
((*this) += (-__i)); 
# 276
return *this; 
# 277
} 
# 280
iterator operator+(difference_type __i) const 
# 281
{ 
# 282
iterator __tmp = *this; 
# 283
return (__tmp += __i); 
# 284
} 
# 287
iterator operator-(difference_type __i) const 
# 288
{ 
# 289
iterator __tmp = *this; 
# 290
return (__tmp -= __i); 
# 291
} 
# 294
reference operator[](difference_type __i) const 
# 295
{ return (*(((*this) + __i))); } 
# 296
}; 
# 299
inline _Bit_iterator operator+(ptrdiff_t __n, const _Bit_iterator &__x) 
# 300
{ return (__x + __n); } 
# 302
struct _Bit_const_iterator : public _Bit_iterator_base { 
# 304
typedef bool reference; 
# 305
typedef bool const_reference; 
# 306
typedef const bool *pointer; 
# 307
typedef _Bit_const_iterator const_iterator; 
# 309
_Bit_const_iterator() : _Bit_iterator_base(0, 0) { } 
# 311
_Bit_const_iterator(_Bit_type *__x, unsigned __y) : _Bit_iterator_base(__x, __y) 
# 312
{ } 
# 314
_Bit_const_iterator(const _Bit_iterator &__x) : _Bit_iterator_base(__x._M_p, __x._M_offset) 
# 315
{ } 
# 318
_Bit_iterator _M_const_cast() const 
# 319
{ return _Bit_iterator(_M_p, _M_offset); } 
# 322
const_reference operator*() const 
# 323
{ return _Bit_reference(_M_p, 1UL << (_M_offset)); } 
# 326
const_iterator &operator++() 
# 327
{ 
# 328
this->_M_bump_up(); 
# 329
return *this; 
# 330
} 
# 333
const_iterator operator++(int) 
# 334
{ 
# 335
const_iterator __tmp = *this; 
# 336
this->_M_bump_up(); 
# 337
return __tmp; 
# 338
} 
# 341
const_iterator &operator--() 
# 342
{ 
# 343
this->_M_bump_down(); 
# 344
return *this; 
# 345
} 
# 348
const_iterator operator--(int) 
# 349
{ 
# 350
const_iterator __tmp = *this; 
# 351
this->_M_bump_down(); 
# 352
return __tmp; 
# 353
} 
# 356
const_iterator &operator+=(difference_type __i) 
# 357
{ 
# 358
this->_M_incr(__i); 
# 359
return *this; 
# 360
} 
# 363
const_iterator &operator-=(difference_type __i) 
# 364
{ 
# 365
((*this) += (-__i)); 
# 366
return *this; 
# 367
} 
# 370
const_iterator operator+(difference_type __i) const 
# 371
{ 
# 372
const_iterator __tmp = *this; 
# 373
return (__tmp += __i); 
# 374
} 
# 377
const_iterator operator-(difference_type __i) const 
# 378
{ 
# 379
const_iterator __tmp = *this; 
# 380
return (__tmp -= __i); 
# 381
} 
# 384
const_reference operator[](difference_type __i) const 
# 385
{ return (*(((*this) + __i))); } 
# 386
}; 
# 389
inline _Bit_const_iterator operator+(ptrdiff_t __n, const _Bit_const_iterator &__x) 
# 390
{ return (__x + __n); } 
# 393
inline void __fill_bvector(_Bit_type *__v, unsigned 
# 394
__first, unsigned __last, bool __x) 
# 395
{ 
# 396
const _Bit_type __fmask = (~0UL) << __first; 
# 397
const _Bit_type __lmask = (~0UL) >> ((_S_word_bit) - __last); 
# 398
const _Bit_type __mask = __fmask & __lmask; 
# 400
if (__x) { 
# 401
(*__v) |= __mask; } else { 
# 403
(*__v) &= (~__mask); }  
# 404
} 
# 407
inline void fill(_Bit_iterator __first, _Bit_iterator __last, const bool &__x) 
# 408
{ 
# 409
if ((__first._M_p) != (__last._M_p)) 
# 410
{ 
# 411
_Bit_type *__first_p = __first._M_p; 
# 412
if ((__first._M_offset) != (0)) { 
# 413
__fill_bvector(__first_p++, __first._M_offset, _S_word_bit, __x); }  
# 415
__builtin_memset(__first_p, __x ? ~0 : 0, ((__last._M_p) - __first_p) * sizeof(_Bit_type)); 
# 418
if ((__last._M_offset) != (0)) { 
# 419
__fill_bvector(__last._M_p, 0, __last._M_offset, __x); }  
# 420
} else { 
# 421
if ((__first._M_offset) != (__last._M_offset)) { 
# 422
__fill_bvector(__first._M_p, __first._M_offset, __last._M_offset, __x); }  }  
# 423
} 
# 425
template< class _Alloc> 
# 426
struct _Bvector_base { 
# 429
typedef typename __gnu_cxx::__alloc_traits< _Alloc> ::template rebind< unsigned long> ::other _Bit_alloc_type; 
# 431
typedef __gnu_cxx::__alloc_traits< typename __gnu_cxx::__alloc_traits< _Alloc> ::template rebind< unsigned long> ::other>  _Bit_alloc_traits; 
# 432
typedef typename __gnu_cxx::__alloc_traits< typename __gnu_cxx::__alloc_traits< _Alloc> ::template rebind< unsigned long> ::other> ::pointer _Bit_pointer; 
# 434
struct _Bvector_impl_data { 
# 436
_Bit_iterator _M_start; 
# 437
_Bit_iterator _M_finish; 
# 438
_Bit_pointer _M_end_of_storage; 
# 440
_Bvector_impl_data() noexcept : _M_start(), _M_finish(), _M_end_of_storage() 
# 442
{ } 
# 445
_Bvector_impl_data(_Bvector_impl_data &&__x) noexcept : _M_start(__x._M_start), _M_finish(__x._M_finish), _M_end_of_storage(__x._M_end_of_storage) 
# 448
{ __x._M_reset(); } 
# 451
void _M_move_data(_Bvector_impl_data &&__x) noexcept 
# 452
{ 
# 453
(this->_M_start) = (__x._M_start); 
# 454
(this->_M_finish) = (__x._M_finish); 
# 455
(this->_M_end_of_storage) = (__x._M_end_of_storage); 
# 456
__x._M_reset(); 
# 457
} 
# 461
void _M_reset() noexcept 
# 462
{ 
# 463
(_M_start) = ((_M_finish) = _Bit_iterator()); 
# 464
(_M_end_of_storage) = _Bit_pointer(); 
# 465
} 
# 466
}; 
# 468
struct _Bvector_impl : public _Bit_alloc_type, public _Bvector_impl_data { 
# 472
_Bvector_impl() noexcept(is_nothrow_default_constructible< typename __gnu_cxx::__alloc_traits< _Alloc> ::template rebind< unsigned long> ::other> ::value) : std::_Bvector_base< _Alloc> ::_Bit_alloc_type() 
# 475
{ } 
# 477
_Bvector_impl(const typename std::_Bvector_base< _Alloc> ::_Bit_alloc_type &__a) noexcept : std::_Bvector_base< _Alloc> ::_Bit_alloc_type(__a) 
# 479
{ } 
# 482
_Bvector_impl(_Bvector_impl &&) = default;
# 486
std::_Bit_type *_M_end_addr() const noexcept 
# 487
{ 
# 488
if (this->_M_end_of_storage) { 
# 489
return std::__addressof((this->_M_end_of_storage)[-1]) + 1; }  
# 490
return 0; 
# 491
} 
# 492
}; 
# 495
typedef _Alloc allocator_type; 
# 498
_Bit_alloc_type &_M_get_Bit_allocator() noexcept 
# 499
{ return this->_M_impl; } 
# 502
const _Bit_alloc_type &_M_get_Bit_allocator() const noexcept 
# 503
{ return this->_M_impl; } 
# 506
allocator_type get_allocator() const noexcept 
# 507
{ return (allocator_type)_M_get_Bit_allocator(); } 
# 510
_Bvector_base() = default;
# 515
_Bvector_base(const allocator_type &__a) : _M_impl(__a) 
# 516
{ } 
# 519
_Bvector_base(_Bvector_base &&) = default;
# 522
~_Bvector_base() 
# 523
{ _M_deallocate(); } 
# 526
protected: _Bvector_impl _M_impl; 
# 529
_Bit_pointer _M_allocate(size_t __n) 
# 530
{ return _Bit_alloc_traits::allocate(_M_impl, (_S_nword)(__n)); } 
# 533
void _M_deallocate() 
# 534
{ 
# 535
if (((_M_impl)._M_start)._M_p) 
# 536
{ 
# 537
const size_t __n = ((_M_impl)._M_end_addr()) - (((_M_impl)._M_start)._M_p); 
# 538
_Bit_alloc_traits::deallocate(_M_impl, ((_M_impl)._M_end_of_storage) - __n, __n); 
# 541
((_M_impl)._M_reset()); 
# 542
}  
# 543
} 
# 547
void _M_move_data(_Bvector_base &&__x) noexcept 
# 548
{ ((_M_impl)._M_move_data(std::move(__x._M_impl))); } 
# 552
static size_t _S_nword(size_t __n) 
# 553
{ return ((__n + ((int)_S_word_bit)) - (1)) / ((int)_S_word_bit); } 
# 554
}; 
# 558
}
# 563
namespace std __attribute((__visibility__("default"))) { 
# 587 "/usr/include/c++/8/bits/stl_bvector.h" 3
template< class _Alloc> 
# 588
class vector< bool, _Alloc>  : protected _Bvector_base< _Alloc>  { 
# 590
typedef std::_Bvector_base< _Alloc>  _Base; 
# 591
typedef typename std::_Bvector_base< _Alloc> ::_Bit_pointer _Bit_pointer; 
# 592
typedef typename std::_Bvector_base< _Alloc> ::_Bit_alloc_traits _Bit_alloc_traits; 
# 595
friend struct hash< std::vector< bool, _Alloc> > ; 
# 599
public: typedef bool value_type; 
# 600
typedef std::size_t size_type; 
# 601
typedef std::ptrdiff_t difference_type; 
# 602
typedef std::_Bit_reference reference; 
# 603
typedef bool const_reference; 
# 604
typedef std::_Bit_reference *pointer; 
# 605
typedef const bool *const_pointer; 
# 606
typedef std::_Bit_iterator iterator; 
# 607
typedef std::_Bit_const_iterator const_iterator; 
# 608
typedef std::reverse_iterator< std::_Bit_const_iterator>  const_reverse_iterator; 
# 609
typedef std::reverse_iterator< std::_Bit_iterator>  reverse_iterator; 
# 610
typedef _Alloc allocator_type; 
# 613
allocator_type get_allocator() const 
# 614
{ return _Base::get_allocator(); } 
# 617
protected: using std::_Bvector_base< _Alloc> ::_M_allocate;
# 618
using std::_Bvector_base< _Alloc> ::_M_deallocate;
# 619
using std::_Bvector_base< _Alloc> ::_S_nword;
# 620
using std::_Bvector_base< _Alloc> ::_M_get_Bit_allocator;
# 624
public: vector() = default;
# 630
explicit vector(const allocator_type &__a) : _Base(__a) 
# 631
{ } 
# 635
explicit vector(size_type __n, const allocator_type &__a = allocator_type()) : vector(__n, false, __a) 
# 637
{ } 
# 639
vector(size_type __n, const bool &__value, const allocator_type &
# 640
__a = allocator_type()) : _Base(__a) 
# 647
{ 
# 648
_M_initialize(__n); 
# 649
_M_initialize_value(__value); 
# 650
} 
# 652
vector(const std::vector< bool, _Alloc>  &__x) : _Base(_Bit_alloc_traits::_S_select_on_copy((__x._M_get_Bit_allocator()))) 
# 654
{ 
# 655
_M_initialize(__x.size()); 
# 656
_M_copy_aligned(__x.begin(), __x.end(), ((this->_M_impl)._M_start)); 
# 657
} 
# 660
vector(std::vector< bool, _Alloc>  &&) = default;
# 662
vector(std::vector< bool, _Alloc>  &&__x, const allocator_type &__a) noexcept(_Bit_alloc_traits::_S_always_equal()) : _Base(__a) 
# 665
{ 
# 666
if (__x.get_allocator() == __a) { 
# 667
(this->_M_move_data(std::move(__x))); } else 
# 669
{ 
# 670
_M_initialize(__x.size()); 
# 671
_M_copy_aligned(__x.begin(), __x.end(), begin()); 
# 672
__x.clear(); 
# 673
}  
# 674
} 
# 676
vector(const std::vector< bool, _Alloc>  &__x, const allocator_type &__a) : _Base(__a) 
# 678
{ 
# 679
_M_initialize(__x.size()); 
# 680
_M_copy_aligned(__x.begin(), __x.end(), ((this->_M_impl)._M_start)); 
# 681
} 
# 683
vector(std::initializer_list< bool>  __l, const allocator_type &
# 684
__a = allocator_type()) : _Base(__a) 
# 686
{ 
# 687
_M_initialize_range(__l.begin(), __l.end(), std::random_access_iterator_tag()); 
# 689
} 
# 693
template< class _InputIterator, class 
# 694
 = std::_RequireInputIter< _InputIterator> > 
# 695
vector(_InputIterator __first, _InputIterator __last, const allocator_type &
# 696
__a = allocator_type()) : _Base(__a) 
# 698
{ _M_initialize_dispatch(__first, __last, std::__false_type()); } 
# 710 "/usr/include/c++/8/bits/stl_bvector.h" 3
~vector() noexcept { } 
# 713
std::vector< bool, _Alloc>  &operator=(const std::vector< bool, _Alloc>  &__x) 
# 714
{ 
# 715
if ((&__x) == this) { 
# 716
return *this; }  
# 718
if (_Bit_alloc_traits::_S_propagate_on_copy_assign()) 
# 719
{ 
# 720
if ((this->_M_get_Bit_allocator()) != (__x._M_get_Bit_allocator())) 
# 721
{ 
# 722
(this->_M_deallocate()); 
# 723
std::__alloc_on_copy(_M_get_Bit_allocator(), (__x._M_get_Bit_allocator())); 
# 725
_M_initialize(__x.size()); 
# 726
} else { 
# 728
std::__alloc_on_copy(_M_get_Bit_allocator(), (__x._M_get_Bit_allocator())); }  
# 730
}  
# 732
if (__x.size() > capacity()) 
# 733
{ 
# 734
(this->_M_deallocate()); 
# 735
_M_initialize(__x.size()); 
# 736
}  
# 737
((this->_M_impl)._M_finish) = _M_copy_aligned(__x.begin(), __x.end(), begin()); 
# 739
return *this; 
# 740
} 
# 744
std::vector< bool, _Alloc>  &operator=(std::vector< bool, _Alloc>  &&__x) noexcept(_Bit_alloc_traits::_S_nothrow_move()) 
# 745
{ 
# 746
if (_Bit_alloc_traits::_S_propagate_on_move_assign() || ((this->_M_get_Bit_allocator()) == (__x._M_get_Bit_allocator()))) 
# 748
{ 
# 749
(this->_M_deallocate()); 
# 750
(this->_M_move_data(std::move(__x))); 
# 751
std::__alloc_on_move(_M_get_Bit_allocator(), (__x._M_get_Bit_allocator())); 
# 753
} else 
# 755
{ 
# 756
if (__x.size() > capacity()) 
# 757
{ 
# 758
(this->_M_deallocate()); 
# 759
_M_initialize(__x.size()); 
# 760
}  
# 761
((this->_M_impl)._M_finish) = _M_copy_aligned(__x.begin(), __x.end(), begin()); 
# 763
__x.clear(); 
# 764
}  
# 765
return *this; 
# 766
} 
# 769
std::vector< bool, _Alloc>  &operator=(std::initializer_list< bool>  __l) 
# 770
{ 
# 771
(this->assign(__l.begin(), __l.end())); 
# 772
return *this; 
# 773
} 
# 781
void assign(size_type __n, const bool &__x) 
# 782
{ _M_fill_assign(__n, __x); } 
# 785
template< class _InputIterator, class 
# 786
 = std::_RequireInputIter< _InputIterator> > void 
# 788
assign(_InputIterator __first, _InputIterator __last) 
# 789
{ _M_assign_aux(__first, __last, std::__iterator_category(__first)); } 
# 802 "/usr/include/c++/8/bits/stl_bvector.h" 3
void assign(std::initializer_list< bool>  __l) 
# 803
{ _M_assign_aux(__l.begin(), __l.end(), std::random_access_iterator_tag()); } 
# 807
iterator begin() noexcept 
# 808
{ return (this->_M_impl)._M_start; } 
# 811
const_iterator begin() const noexcept 
# 812
{ return (this->_M_impl)._M_start; } 
# 815
iterator end() noexcept 
# 816
{ return (this->_M_impl)._M_finish; } 
# 819
const_iterator end() const noexcept 
# 820
{ return (this->_M_impl)._M_finish; } 
# 823
reverse_iterator rbegin() noexcept 
# 824
{ return ((std::reverse_iterator< std::_Bit_iterator> )(end())); } 
# 827
const_reverse_iterator rbegin() const noexcept 
# 828
{ return ((std::reverse_iterator< std::_Bit_const_iterator> )(end())); } 
# 831
reverse_iterator rend() noexcept 
# 832
{ return ((std::reverse_iterator< std::_Bit_iterator> )(begin())); } 
# 835
const_reverse_iterator rend() const noexcept 
# 836
{ return ((std::reverse_iterator< std::_Bit_const_iterator> )(begin())); } 
# 840
const_iterator cbegin() const noexcept 
# 841
{ return (this->_M_impl)._M_start; } 
# 844
const_iterator cend() const noexcept 
# 845
{ return (this->_M_impl)._M_finish; } 
# 848
const_reverse_iterator crbegin() const noexcept 
# 849
{ return ((std::reverse_iterator< std::_Bit_const_iterator> )(end())); } 
# 852
const_reverse_iterator crend() const noexcept 
# 853
{ return ((std::reverse_iterator< std::_Bit_const_iterator> )(begin())); } 
# 857
size_type size() const noexcept 
# 858
{ return (size_type)(((end()) - (begin()))); } 
# 861
size_type max_size() const noexcept 
# 862
{ 
# 863
const size_type __isize = ((__gnu_cxx::__numeric_traits_integer< long> ::__max - ((int)_S_word_bit)) + (1)); 
# 866
const size_type __asize = _Bit_alloc_traits::max_size(_M_get_Bit_allocator()); 
# 868
return (__asize <= (__isize / ((int)_S_word_bit))) ? __asize * ((int)_S_word_bit) : __isize; 
# 870
} 
# 873
size_type capacity() const noexcept 
# 874
{ return (size_type)((const_iterator(((this->_M_impl)._M_end_addr()), 0) - (begin()))); 
# 875
} 
# 878
bool empty() const noexcept 
# 879
{ return ((begin()) == (end())); } 
# 882
reference operator[](size_type __n) 
# 883
{ 
# 884
return (*iterator((((this->_M_impl)._M_start)._M_p) + (__n / ((int)_S_word_bit)), __n % ((int)_S_word_bit))); 
# 886
} 
# 889
const_reference operator[](size_type __n) const 
# 890
{ 
# 891
return (*const_iterator((((this->_M_impl)._M_start)._M_p) + (__n / ((int)_S_word_bit)), __n % ((int)_S_word_bit))); 
# 893
} 
# 897
protected: void _M_range_check(size_type __n) const 
# 898
{ 
# 899
if (__n >= size()) { 
# 900
__throw_out_of_range_fmt("vector<bool>::_M_range_check: __n (which is %zu) >= this->size() (which is %zu)", __n, size()); }  
# 904
} 
# 908
public: reference at(size_type __n) 
# 909
{ _M_range_check(__n); return (*this)[__n]; } 
# 912
const_reference at(size_type __n) const 
# 913
{ _M_range_check(__n); return (*this)[__n]; } 
# 916
void reserve(size_type __n) 
# 917
{ 
# 918
if (__n > max_size()) { 
# 919
__throw_length_error("vector::reserve"); }  
# 920
if (capacity() < __n) { 
# 921
_M_reallocate(__n); }  
# 922
} 
# 925
reference front() 
# 926
{ return (*(begin())); } 
# 929
const_reference front() const 
# 930
{ return (*(begin())); } 
# 933
reference back() 
# 934
{ return (*(((end()) - (1)))); } 
# 937
const_reference back() const 
# 938
{ return (*(((end()) - (1)))); } 
# 946
void data() noexcept { } 
# 949
void push_back(bool __x) 
# 950
{ 
# 951
if ((((this->_M_impl)._M_finish)._M_p) != ((this->_M_impl)._M_end_addr())) { 
# 952
(*(((this->_M_impl)._M_finish)++)) = __x; } else { 
# 954
_M_insert_aux(end(), __x); }  
# 955
} 
# 958
void swap(std::vector< bool, _Alloc>  &__x) noexcept 
# 959
{ 
# 960
std::swap(((this->_M_impl)._M_start), ((__x._M_impl)._M_start)); 
# 961
std::swap(((this->_M_impl)._M_finish), ((__x._M_impl)._M_finish)); 
# 962
std::swap(((this->_M_impl)._M_end_of_storage), ((__x._M_impl)._M_end_of_storage)); 
# 964
_Bit_alloc_traits::_S_on_swap(_M_get_Bit_allocator(), (__x._M_get_Bit_allocator())); 
# 966
} 
# 970
static void swap(reference __x, reference __y) noexcept 
# 971
{ 
# 972
bool __tmp = __x; 
# 973
(__x = __y); 
# 974
(__y = __tmp); 
# 975
} 
# 979
iterator insert(const_iterator __position, const bool &__x = ((bool)0)) 
# 983
{ 
# 984
const difference_type __n = (__position - (begin())); 
# 985
if (((((this->_M_impl)._M_finish)._M_p) != ((this->_M_impl)._M_end_addr())) && (__position == (end()))) { 
# 987
(*(((this->_M_impl)._M_finish)++)) = __x; } else { 
# 989
_M_insert_aux(__position._M_const_cast(), __x); }  
# 990
return ((begin()) + __n); 
# 991
} 
# 994
template< class _InputIterator, class 
# 995
 = std::_RequireInputIter< _InputIterator> > iterator 
# 997
insert(const_iterator __position, _InputIterator 
# 998
__first, _InputIterator __last) 
# 999
{ 
# 1000
difference_type __offset = __position - cbegin(); 
# 1001
_M_insert_dispatch(__position._M_const_cast(), __first, __last, std::__false_type()); 
# 1003
return ((begin()) + __offset); 
# 1004
} 
# 1018 "/usr/include/c++/8/bits/stl_bvector.h" 3
iterator insert(const_iterator __position, size_type __n, const bool &__x) 
# 1019
{ 
# 1020
difference_type __offset = __position - cbegin(); 
# 1021
_M_fill_insert(__position._M_const_cast(), __n, __x); 
# 1022
return ((begin()) + __offset); 
# 1023
} 
# 1032
iterator insert(const_iterator __p, std::initializer_list< bool>  __l) 
# 1033
{ return (this->insert(__p, __l.begin(), __l.end())); } 
# 1037
void pop_back() 
# 1038
{ --((this->_M_impl)._M_finish); } 
# 1042
iterator erase(const_iterator __position) 
# 1046
{ return _M_erase(__position._M_const_cast()); } 
# 1050
iterator erase(const_iterator __first, const_iterator __last) 
# 1054
{ return _M_erase(__first._M_const_cast(), __last._M_const_cast()); } 
# 1057
void resize(size_type __new_size, bool __x = ((bool)0)) 
# 1058
{ 
# 1059
if (__new_size < size()) { 
# 1060
_M_erase_at_end(((begin()) + ((difference_type)__new_size))); } else { 
# 1062
insert(end(), __new_size - size(), __x); }  
# 1063
} 
# 1067
void shrink_to_fit() 
# 1068
{ _M_shrink_to_fit(); } 
# 1072
void flip() noexcept 
# 1073
{ 
# 1074
std::_Bit_type *const __end = ((this->_M_impl)._M_end_addr()); 
# 1075
for (std::_Bit_type *__p = ((((this->_M_impl)._M_start)._M_p)); __p != __end; ++__p) { 
# 1076
(*__p) = (~(*__p)); }  
# 1077
} 
# 1080
void clear() noexcept 
# 1081
{ _M_erase_at_end(begin()); } 
# 1084
template< class ..._Args> void 
# 1090
emplace_back(_Args &&...__args) 
# 1091
{ 
# 1092
push_back(bool(__args...)); 
# 1096
} 
# 1098
template< class ..._Args> iterator 
# 1100
emplace(const_iterator __pos, _Args &&...__args) 
# 1101
{ return insert(__pos, bool(__args...)); } 
# 1107
protected: iterator _M_copy_aligned(const_iterator __first, const_iterator __last, iterator 
# 1108
__result) 
# 1109
{ 
# 1110
std::_Bit_type *__q = std::copy(__first._M_p, __last._M_p, __result._M_p); 
# 1111
return std::copy(const_iterator(__last._M_p, 0), __last, iterator(__q, 0)); 
# 1113
} 
# 1116
void _M_initialize(size_type __n) 
# 1117
{ 
# 1118
if (__n) 
# 1119
{ 
# 1120
_Bit_pointer __q = (this->_M_allocate(__n)); 
# 1121
((this->_M_impl)._M_end_of_storage) = (__q + _S_nword(__n)); 
# 1122
((this->_M_impl)._M_start) = iterator(std::__addressof(*__q), 0); 
# 1123
} else 
# 1125
{ 
# 1126
((this->_M_impl)._M_end_of_storage) = _Bit_pointer(); 
# 1127
((this->_M_impl)._M_start) = iterator(0, 0); 
# 1128
}  
# 1129
((this->_M_impl)._M_finish) = (((this->_M_impl)._M_start) + ((difference_type)__n)); 
# 1131
} 
# 1134
void _M_initialize_value(bool __x) 
# 1135
{ 
# 1136
if (std::_Bit_type *__p = ((((this->_M_impl)._M_start)._M_p))) { 
# 1137
__builtin_memset(__p, __x ? ~0 : 0, (((this->_M_impl)._M_end_addr()) - __p) * sizeof(std::_Bit_type)); }  
# 1140
} 
# 1143
void _M_reallocate(size_type __n); 
# 1147
bool _M_shrink_to_fit(); 
# 1154
template< class _Integer> void 
# 1156
_M_initialize_dispatch(_Integer __n, _Integer __x, std::__true_type) 
# 1157
{ 
# 1158
_M_initialize(static_cast< size_type>(__n)); 
# 1159
_M_initialize_value(__x); 
# 1160
} 
# 1162
template< class _InputIterator> void 
# 1164
_M_initialize_dispatch(_InputIterator __first, _InputIterator __last, std::__false_type) 
# 1166
{ _M_initialize_range(__first, __last, std::__iterator_category(__first)); 
# 1167
} 
# 1169
template< class _InputIterator> void 
# 1171
_M_initialize_range(_InputIterator __first, _InputIterator __last, std::input_iterator_tag) 
# 1173
{ 
# 1174
for (; __first != __last; ++__first) { 
# 1175
push_back(*__first); }  
# 1176
} 
# 1178
template< class _ForwardIterator> void 
# 1180
_M_initialize_range(_ForwardIterator __first, _ForwardIterator __last, std::forward_iterator_tag) 
# 1182
{ 
# 1183
const size_type __n = std::distance(__first, __last); 
# 1184
_M_initialize(__n); 
# 1185
std::copy(__first, __last, ((this->_M_impl)._M_start)); 
# 1186
} 
# 1204 "/usr/include/c++/8/bits/stl_bvector.h" 3
void _M_fill_assign(std::size_t __n, bool __x) 
# 1205
{ 
# 1206
if (__n > size()) 
# 1207
{ 
# 1208
_M_initialize_value(__x); 
# 1209
insert(end(), __n - size(), __x); 
# 1210
} else 
# 1212
{ 
# 1213
_M_erase_at_end(((begin()) + __n)); 
# 1214
_M_initialize_value(__x); 
# 1215
}  
# 1216
} 
# 1218
template< class _InputIterator> void 
# 1220
_M_assign_aux(_InputIterator __first, _InputIterator __last, std::input_iterator_tag) 
# 1222
{ 
# 1223
iterator __cur = begin(); 
# 1224
for (; (__first != __last) && (__cur != (end())); (++__cur), (++__first)) { 
# 1225
(*__cur) = (*__first); }  
# 1226
if (__first == __last) { 
# 1227
_M_erase_at_end(__cur); } else { 
# 1229
insert(end(), __first, __last); }  
# 1230
} 
# 1232
template< class _ForwardIterator> void 
# 1234
_M_assign_aux(_ForwardIterator __first, _ForwardIterator __last, std::forward_iterator_tag) 
# 1236
{ 
# 1237
const size_type __len = std::distance(__first, __last); 
# 1238
if (__len < size()) { 
# 1239
_M_erase_at_end(std::copy(__first, __last, begin())); } else 
# 1241
{ 
# 1242
_ForwardIterator __mid = __first; 
# 1243
std::advance(__mid, size()); 
# 1244
std::copy(__first, __mid, begin()); 
# 1245
insert(end(), __mid, __last); 
# 1246
}  
# 1247
} 
# 1253
template< class _Integer> void 
# 1255
_M_insert_dispatch(iterator __pos, _Integer __n, _Integer __x, std::__true_type) 
# 1257
{ _M_fill_insert(__pos, __n, __x); } 
# 1259
template< class _InputIterator> void 
# 1261
_M_insert_dispatch(iterator __pos, _InputIterator 
# 1262
__first, _InputIterator __last, std::__false_type) 
# 1264
{ _M_insert_range(__pos, __first, __last, std::__iterator_category(__first)); 
# 1265
} 
# 1268
void _M_fill_insert(iterator __position, size_type __n, bool __x); 
# 1270
template< class _InputIterator> void 
# 1272
_M_insert_range(iterator __pos, _InputIterator __first, _InputIterator 
# 1273
__last, std::input_iterator_tag) 
# 1274
{ 
# 1275
for (; __first != __last; ++__first) 
# 1276
{ 
# 1277
__pos = insert(__pos, *__first); 
# 1278
(++__pos); 
# 1279
}  
# 1280
} 
# 1282
template< class _ForwardIterator> void _M_insert_range(iterator __position, _ForwardIterator __first, _ForwardIterator __last, std::forward_iterator_tag); 
# 1288
void _M_insert_aux(iterator __position, bool __x); 
# 1291
size_type _M_check_len(size_type __n, const char *__s) const 
# 1292
{ 
# 1293
if ((max_size() - size()) < __n) { 
# 1294
__throw_length_error(__s); }  
# 1296
const size_type __len = size() + std::max(size(), __n); 
# 1297
return ((__len < size()) || (__len > max_size())) ? max_size() : __len; 
# 1298
} 
# 1301
void _M_erase_at_end(iterator __pos) 
# 1302
{ ((this->_M_impl)._M_finish) = __pos; } 
# 1305
iterator _M_erase(iterator __pos); 
# 1308
iterator _M_erase(iterator __first, iterator __last); 
# 1309
}; 
# 1313
}
# 1317
namespace std __attribute((__visibility__("default"))) { 
# 1323
template< class _Alloc> 
# 1324
struct hash< vector< bool, _Alloc> >  : public __hash_base< unsigned long, vector< bool, _Alloc> >  { 
# 1328
std::size_t operator()(const vector< bool, _Alloc>  &) const noexcept; 
# 1329
}; 
# 1332
}
# 59 "/usr/include/c++/8/bits/vector.tcc" 3
namespace std __attribute((__visibility__("default"))) { 
# 64
template< class _Tp, class _Alloc> void 
# 67
vector< _Tp, _Alloc> ::reserve(size_type __n) 
# 68
{ 
# 69
if (__n > max_size()) { 
# 70
__throw_length_error("vector::reserve"); }  
# 71
if (capacity() < __n) 
# 72
{ 
# 73
const size_type __old_size = size(); 
# 74
pointer __tmp = _M_allocate_and_copy(__n, std::__make_move_if_noexcept_iterator(((this->_M_impl)._M_start)), std::__make_move_if_noexcept_iterator(((this->_M_impl)._M_finish))); 
# 77
; 
# 78
std::_Destroy(((this->_M_impl)._M_start), ((this->_M_impl)._M_finish), _M_get_Tp_allocator()); 
# 80
_M_deallocate(((this->_M_impl)._M_start), ((this->_M_impl)._M_end_of_storage) - ((this->_M_impl)._M_start)); 
# 83
((this->_M_impl)._M_start) = __tmp; 
# 84
((this->_M_impl)._M_finish) = (__tmp + __old_size); 
# 85
((this->_M_impl)._M_end_of_storage) = (((this->_M_impl)._M_start) + __n); 
# 86
}  
# 87
} 
# 90
template< class _Tp, class _Alloc> 
# 91
template< class ..._Args> void 
# 98
vector< _Tp, _Alloc> ::emplace_back(_Args &&...__args) 
# 99
{ 
# 100
if (((this->_M_impl)._M_finish) != ((this->_M_impl)._M_end_of_storage)) 
# 101
{ 
# 102
; 
# 103
_Alloc_traits::construct((this->_M_impl), ((this->_M_impl)._M_finish), std::forward< _Args> (__args)...); 
# 105
++((this->_M_impl)._M_finish); 
# 106
; 
# 107
} else { 
# 109
_M_realloc_insert(end(), std::forward< _Args> (__args)...); }  
# 113
} 
# 116
template< class _Tp, class _Alloc> typename vector< _Tp, _Alloc> ::iterator 
# 120
vector< _Tp, _Alloc> ::insert(const_iterator __position, const value_type &__x) 
# 124
{ 
# 125
const size_type __n = __position - begin(); 
# 126
if (((this->_M_impl)._M_finish) != ((this->_M_impl)._M_end_of_storage)) { 
# 127
if (__position == end()) 
# 128
{ 
# 129
; 
# 130
_Alloc_traits::construct((this->_M_impl), ((this->_M_impl)._M_finish), __x); 
# 132
++((this->_M_impl)._M_finish); 
# 133
; 
# 134
} else 
# 136
{ 
# 138
const auto __pos = begin() + (__position - cbegin()); 
# 141
_Temporary_value __x_copy(this, __x); 
# 142
_M_insert_aux(__pos, std::move((__x_copy._M_val()))); 
# 146
}  } else { 
# 149
_M_realloc_insert(begin() + (__position - cbegin()), __x); }  
# 154
return ((__gnu_cxx::__normal_iterator< typename std::_Vector_base< _Tp, _Alloc> ::pointer, vector> )(((this->_M_impl)._M_start) + __n)); 
# 155
} 
# 157
template< class _Tp, class _Alloc> typename vector< _Tp, _Alloc> ::iterator 
# 160
vector< _Tp, _Alloc> ::_M_erase(iterator __position) 
# 161
{ 
# 162
if ((__position + 1) != end()) { 
# 163
std::move(__position + 1, end(), __position); }  
# 164
--((this->_M_impl)._M_finish); 
# 165
_Alloc_traits::destroy((this->_M_impl), ((this->_M_impl)._M_finish)); 
# 166
; 
# 167
return __position; 
# 168
} 
# 170
template< class _Tp, class _Alloc> typename vector< _Tp, _Alloc> ::iterator 
# 173
vector< _Tp, _Alloc> ::_M_erase(iterator __first, iterator __last) 
# 174
{ 
# 175
if (__first != __last) 
# 176
{ 
# 177
if (__last != end()) { 
# 178
std::move(__last, end(), __first); }  
# 179
_M_erase_at_end((__first.base()) + (end() - __last)); 
# 180
}  
# 181
return __first; 
# 182
} 
# 184
template< class _Tp, class _Alloc> vector< _Tp, _Alloc>  &
# 187
vector< _Tp, _Alloc> ::operator=(const vector &__x) 
# 188
{ 
# 189
if ((&__x) != this) 
# 190
{ 
# 191
; 
# 193
if (_Alloc_traits::_S_propagate_on_copy_assign()) 
# 194
{ 
# 195
if ((!_Alloc_traits::_S_always_equal()) && (_M_get_Tp_allocator() != (__x._M_get_Tp_allocator()))) 
# 197
{ 
# 199
clear(); 
# 200
_M_deallocate(((this->_M_impl)._M_start), ((this->_M_impl)._M_end_of_storage) - ((this->_M_impl)._M_start)); 
# 203
((this->_M_impl)._M_start) = nullptr; 
# 204
((this->_M_impl)._M_finish) = nullptr; 
# 205
((this->_M_impl)._M_end_of_storage) = nullptr; 
# 206
}  
# 207
std::__alloc_on_copy(_M_get_Tp_allocator(), (__x._M_get_Tp_allocator())); 
# 209
}  
# 211
const size_type __xlen = __x.size(); 
# 212
if (__xlen > capacity()) 
# 213
{ 
# 214
pointer __tmp = _M_allocate_and_copy(__xlen, __x.begin(), __x.end()); 
# 216
std::_Destroy(((this->_M_impl)._M_start), ((this->_M_impl)._M_finish), _M_get_Tp_allocator()); 
# 218
_M_deallocate(((this->_M_impl)._M_start), ((this->_M_impl)._M_end_of_storage) - ((this->_M_impl)._M_start)); 
# 221
((this->_M_impl)._M_start) = __tmp; 
# 222
((this->_M_impl)._M_end_of_storage) = (((this->_M_impl)._M_start) + __xlen); 
# 223
} else { 
# 224
if (size() >= __xlen) 
# 225
{ 
# 226
std::_Destroy(std::copy(__x.begin(), __x.end(), begin()), end(), _M_get_Tp_allocator()); 
# 228
} else 
# 230
{ 
# 231
std::copy(((__x._M_impl)._M_start), ((__x._M_impl)._M_start) + size(), ((this->_M_impl)._M_start)); 
# 233
std::__uninitialized_copy_a(((__x._M_impl)._M_start) + size(), ((__x._M_impl)._M_finish), ((this->_M_impl)._M_finish), _M_get_Tp_allocator()); 
# 237
}  }  
# 238
((this->_M_impl)._M_finish) = (((this->_M_impl)._M_start) + __xlen); 
# 239
}  
# 240
return *this; 
# 241
} 
# 243
template< class _Tp, class _Alloc> void 
# 246
vector< _Tp, _Alloc> ::_M_fill_assign(std::size_t __n, const value_type &__val) 
# 247
{ 
# 248
if (__n > capacity()) 
# 249
{ 
# 250
vector __tmp(__n, __val, _M_get_Tp_allocator()); 
# 251
((__tmp._M_impl)._M_swap_data((this->_M_impl))); 
# 252
} else { 
# 253
if (__n > size()) 
# 254
{ 
# 255
std::fill(begin(), end(), __val); 
# 256
const size_type __add = __n - size(); 
# 257
; 
# 258
((this->_M_impl)._M_finish) = std::__uninitialized_fill_n_a(((this->_M_impl)._M_finish), __add, __val, _M_get_Tp_allocator()); 
# 261
; 
# 262
} else { 
# 264
_M_erase_at_end(std::fill_n(((this->_M_impl)._M_start), __n, __val)); }  }  
# 265
} 
# 267
template< class _Tp, class _Alloc> 
# 268
template< class _InputIterator> void 
# 271
vector< _Tp, _Alloc> ::_M_assign_aux(_InputIterator __first, _InputIterator __last, std::input_iterator_tag) 
# 273
{ 
# 274
pointer __cur(((this->_M_impl)._M_start)); 
# 275
for (; (__first != __last) && (__cur != ((this->_M_impl)._M_finish)); (++__cur), (++__first)) { 
# 277
(*__cur) = (*__first); }  
# 278
if (__first == __last) { 
# 279
_M_erase_at_end(__cur); } else { 
# 281
_M_range_insert(end(), __first, __last, std::__iterator_category(__first)); }  
# 283
} 
# 285
template< class _Tp, class _Alloc> 
# 286
template< class _ForwardIterator> void 
# 289
vector< _Tp, _Alloc> ::_M_assign_aux(_ForwardIterator __first, _ForwardIterator __last, std::forward_iterator_tag) 
# 291
{ 
# 292
const size_type __len = std::distance(__first, __last); 
# 294
if (__len > capacity()) 
# 295
{ 
# 296
pointer __tmp(_M_allocate_and_copy(__len, __first, __last)); 
# 297
; 
# 298
std::_Destroy(((this->_M_impl)._M_start), ((this->_M_impl)._M_finish), _M_get_Tp_allocator()); 
# 300
_M_deallocate(((this->_M_impl)._M_start), ((this->_M_impl)._M_end_of_storage) - ((this->_M_impl)._M_start)); 
# 303
((this->_M_impl)._M_start) = __tmp; 
# 304
((this->_M_impl)._M_finish) = (((this->_M_impl)._M_start) + __len); 
# 305
((this->_M_impl)._M_end_of_storage) = ((this->_M_impl)._M_finish); 
# 306
} else { 
# 307
if (size() >= __len) { 
# 308
_M_erase_at_end(std::copy(__first, __last, ((this->_M_impl)._M_start))); } else 
# 310
{ 
# 311
_ForwardIterator __mid = __first; 
# 312
std::advance(__mid, size()); 
# 313
std::copy(__first, __mid, ((this->_M_impl)._M_start)); 
# 314
__attribute((__unused__)) const size_type __n = __len - size(); 
# 315
; 
# 316
((this->_M_impl)._M_finish) = std::__uninitialized_copy_a(__mid, __last, ((this->_M_impl)._M_finish), _M_get_Tp_allocator()); 
# 320
; 
# 321
}  }  
# 322
} 
# 325
template< class _Tp, class _Alloc> auto 
# 328
vector< _Tp, _Alloc> ::_M_insert_rval(const_iterator __position, value_type &&__v)->iterator 
# 329
{ 
# 330
const auto __n = __position - cbegin(); 
# 331
if (((this->_M_impl)._M_finish) != ((this->_M_impl)._M_end_of_storage)) { 
# 332
if (__position == cend()) 
# 333
{ 
# 334
; 
# 335
_Alloc_traits::construct((this->_M_impl), ((this->_M_impl)._M_finish), std::move(__v)); 
# 337
++((this->_M_impl)._M_finish); 
# 338
; 
# 339
} else { 
# 341
_M_insert_aux(begin() + __n, std::move(__v)); }  } else { 
# 343
_M_realloc_insert(begin() + __n, std::move(__v)); }  
# 345
return ((__gnu_cxx::__normal_iterator< typename std::_Vector_base< _Tp, _Alloc> ::pointer, vector> )(((this->_M_impl)._M_start) + __n)); 
# 346
} 
# 348
template< class _Tp, class _Alloc> 
# 349
template< class ..._Args> auto 
# 352
vector< _Tp, _Alloc> ::_M_emplace_aux(const_iterator __position, _Args &&...__args)->iterator 
# 354
{ 
# 355
const auto __n = __position - cbegin(); 
# 356
if (((this->_M_impl)._M_finish) != ((this->_M_impl)._M_end_of_storage)) { 
# 357
if (__position == cend()) 
# 358
{ 
# 359
; 
# 360
_Alloc_traits::construct((this->_M_impl), ((this->_M_impl)._M_finish), std::forward< _Args> (__args)...); 
# 362
++((this->_M_impl)._M_finish); 
# 363
; 
# 364
} else 
# 366
{ 
# 370
_Temporary_value __tmp(this, std::forward< _Args> (__args)...); 
# 371
_M_insert_aux(begin() + __n, std::move((__tmp._M_val()))); 
# 372
}  } else { 
# 374
_M_realloc_insert(begin() + __n, std::forward< _Args> (__args)...); }  
# 376
return ((__gnu_cxx::__normal_iterator< typename std::_Vector_base< _Tp, _Alloc> ::pointer, vector> )(((this->_M_impl)._M_start) + __n)); 
# 377
} 
# 379
template< class _Tp, class _Alloc> 
# 380
template< class _Arg> void 
# 383
vector< _Tp, _Alloc> ::_M_insert_aux(iterator __position, _Arg &&__arg) 
# 390
{ 
# 391
; 
# 392
_Alloc_traits::construct((this->_M_impl), ((this->_M_impl)._M_finish), std::move(*(((this->_M_impl)._M_finish) - 1))); 
# 394
++((this->_M_impl)._M_finish); 
# 395
; 
# 399
std::move_backward((__position.base()), ((this->_M_impl)._M_finish) - 2, ((this->_M_impl)._M_finish) - 1); 
# 405
(*__position) = std::forward< _Arg> (__arg); 
# 407
} 
# 410
template< class _Tp, class _Alloc> 
# 411
template< class ..._Args> void 
# 414
vector< _Tp, _Alloc> ::_M_realloc_insert(iterator __position, _Args &&...__args) 
# 421
{ 
# 422
const size_type __len = _M_check_len((size_type)1, "vector::_M_realloc_insert"); 
# 424
pointer __old_start = (((this->_M_impl)._M_start)); 
# 425
pointer __old_finish = (((this->_M_impl)._M_finish)); 
# 426
const size_type __elems_before = __position - begin(); 
# 427
pointer __new_start((this->_M_allocate(__len))); 
# 428
pointer __new_finish(__new_start); 
# 429
try 
# 430
{ 
# 436
_Alloc_traits::construct((this->_M_impl), __new_start + __elems_before, std::forward< _Args> (__args)...); 
# 443
__new_finish = pointer(); 
# 445
__new_finish = std::__uninitialized_move_if_noexcept_a(__old_start, (__position.base()), __new_start, _M_get_Tp_allocator()); 
# 450
++__new_finish; 
# 452
__new_finish = std::__uninitialized_move_if_noexcept_a((__position.base()), __old_finish, __new_finish, _M_get_Tp_allocator()); 
# 456
} 
# 457
catch (...) 
# 458
{ 
# 459
if (!__new_finish) { 
# 460
_Alloc_traits::destroy((this->_M_impl), __new_start + __elems_before); } else { 
# 463
std::_Destroy(__new_start, __new_finish, _M_get_Tp_allocator()); }  
# 464
_M_deallocate(__new_start, __len); 
# 465
throw; 
# 466
}  
# 467
; 
# 468
std::_Destroy(__old_start, __old_finish, _M_get_Tp_allocator()); 
# 469
_M_deallocate(__old_start, ((this->_M_impl)._M_end_of_storage) - __old_start); 
# 471
((this->_M_impl)._M_start) = __new_start; 
# 472
((this->_M_impl)._M_finish) = __new_finish; 
# 473
((this->_M_impl)._M_end_of_storage) = (__new_start + __len); 
# 474
} 
# 476
template< class _Tp, class _Alloc> void 
# 479
vector< _Tp, _Alloc> ::_M_fill_insert(iterator __position, size_type __n, const value_type &__x) 
# 480
{ 
# 481
if (__n != (0)) 
# 482
{ 
# 483
if (((size_type)(((this->_M_impl)._M_end_of_storage) - ((this->_M_impl)._M_finish))) >= __n) 
# 485
{ 
# 489
_Temporary_value __tmp(this, __x); 
# 490
value_type &__x_copy = (__tmp._M_val()); 
# 492
const size_type __elems_after = end() - __position; 
# 493
pointer __old_finish(((this->_M_impl)._M_finish)); 
# 494
if (__elems_after > __n) 
# 495
{ 
# 496
; 
# 497
std::__uninitialized_move_a(((this->_M_impl)._M_finish) - __n, ((this->_M_impl)._M_finish), ((this->_M_impl)._M_finish), _M_get_Tp_allocator()); 
# 501
((this->_M_impl)._M_finish) += __n; 
# 502
; 
# 503
std::move_backward((__position.base()), __old_finish - __n, __old_finish); 
# 505
std::fill((__position.base()), (__position.base()) + __n, __x_copy); 
# 507
} else 
# 509
{ 
# 510
; 
# 511
((this->_M_impl)._M_finish) = std::__uninitialized_fill_n_a(((this->_M_impl)._M_finish), __n - __elems_after, __x_copy, _M_get_Tp_allocator()); 
# 516
; 
# 517
std::__uninitialized_move_a((__position.base()), __old_finish, ((this->_M_impl)._M_finish), _M_get_Tp_allocator()); 
# 520
((this->_M_impl)._M_finish) += __elems_after; 
# 521
; 
# 522
std::fill((__position.base()), __old_finish, __x_copy); 
# 523
}  
# 524
} else 
# 526
{ 
# 527
const size_type __len = _M_check_len(__n, "vector::_M_fill_insert"); 
# 529
const size_type __elems_before = __position - begin(); 
# 530
pointer __new_start((this->_M_allocate(__len))); 
# 531
pointer __new_finish(__new_start); 
# 532
try 
# 533
{ 
# 535
std::__uninitialized_fill_n_a(__new_start + __elems_before, __n, __x, _M_get_Tp_allocator()); 
# 538
__new_finish = pointer(); 
# 540
__new_finish = std::__uninitialized_move_if_noexcept_a(((this->_M_impl)._M_start), (__position.base()), __new_start, _M_get_Tp_allocator()); 
# 545
__new_finish += __n; 
# 547
__new_finish = std::__uninitialized_move_if_noexcept_a((__position.base()), ((this->_M_impl)._M_finish), __new_finish, _M_get_Tp_allocator()); 
# 551
} 
# 552
catch (...) 
# 553
{ 
# 554
if (!__new_finish) { 
# 555
std::_Destroy(__new_start + __elems_before, (__new_start + __elems_before) + __n, _M_get_Tp_allocator()); } else { 
# 559
std::_Destroy(__new_start, __new_finish, _M_get_Tp_allocator()); }  
# 561
_M_deallocate(__new_start, __len); 
# 562
throw; 
# 563
}  
# 564
; 
# 565
std::_Destroy(((this->_M_impl)._M_start), ((this->_M_impl)._M_finish), _M_get_Tp_allocator()); 
# 567
_M_deallocate(((this->_M_impl)._M_start), ((this->_M_impl)._M_end_of_storage) - ((this->_M_impl)._M_start)); 
# 570
((this->_M_impl)._M_start) = __new_start; 
# 571
((this->_M_impl)._M_finish) = __new_finish; 
# 572
((this->_M_impl)._M_end_of_storage) = (__new_start + __len); 
# 573
}  
# 574
}  
# 575
} 
# 578
template< class _Tp, class _Alloc> void 
# 581
vector< _Tp, _Alloc> ::_M_default_append(size_type __n) 
# 582
{ 
# 583
if (__n != (0)) 
# 584
{ 
# 585
const size_type __size = size(); 
# 586
size_type __navail = (size_type)(((this->_M_impl)._M_end_of_storage) - ((this->_M_impl)._M_finish)); 
# 589
if ((__size > max_size()) || (__navail > (max_size() - __size))) { 
# 590
__builtin_unreachable(); }  
# 592
if (__navail >= __n) 
# 593
{ 
# 594
; 
# 595
((this->_M_impl)._M_finish) = std::__uninitialized_default_n_a(((this->_M_impl)._M_finish), __n, _M_get_Tp_allocator()); 
# 598
; 
# 599
} else 
# 601
{ 
# 602
const size_type __len = _M_check_len(__n, "vector::_M_default_append"); 
# 604
pointer __new_start((this->_M_allocate(__len))); 
# 605
pointer __destroy_from = (pointer()); 
# 606
try 
# 607
{ 
# 608
std::__uninitialized_default_n_a(__new_start + __size, __n, _M_get_Tp_allocator()); 
# 610
__destroy_from = (__new_start + __size); 
# 611
std::__uninitialized_move_if_noexcept_a(((this->_M_impl)._M_start), ((this->_M_impl)._M_finish), __new_start, _M_get_Tp_allocator()); 
# 614
} 
# 615
catch (...) 
# 616
{ 
# 617
if (__destroy_from) { 
# 618
std::_Destroy(__destroy_from, __destroy_from + __n, _M_get_Tp_allocator()); }  
# 620
_M_deallocate(__new_start, __len); 
# 621
throw; 
# 622
}  
# 623
; 
# 624
std::_Destroy(((this->_M_impl)._M_start), ((this->_M_impl)._M_finish), _M_get_Tp_allocator()); 
# 626
_M_deallocate(((this->_M_impl)._M_start), ((this->_M_impl)._M_end_of_storage) - ((this->_M_impl)._M_start)); 
# 629
((this->_M_impl)._M_start) = __new_start; 
# 630
((this->_M_impl)._M_finish) = ((__new_start + __size) + __n); 
# 631
((this->_M_impl)._M_end_of_storage) = (__new_start + __len); 
# 632
}  
# 633
}  
# 634
} 
# 636
template< class _Tp, class _Alloc> bool 
# 639
vector< _Tp, _Alloc> ::_M_shrink_to_fit() 
# 640
{ 
# 641
if (capacity() == size()) { 
# 642
return false; }  
# 643
; 
# 644
return std::__shrink_to_fit_aux< vector> ::_S_do_it(*this); 
# 645
} 
# 648
template< class _Tp, class _Alloc> 
# 649
template< class _InputIterator> void 
# 652
vector< _Tp, _Alloc> ::_M_range_insert(iterator __pos, _InputIterator __first, _InputIterator 
# 653
__last, std::input_iterator_tag) 
# 654
{ 
# 655
if (__pos == end()) 
# 656
{ 
# 657
for (; __first != __last; ++__first) { 
# 658
insert(end(), *__first); }  
# 659
} else { 
# 660
if (__first != __last) 
# 661
{ 
# 662
vector __tmp(__first, __last, _M_get_Tp_allocator()); 
# 663
insert(__pos, std::make_move_iterator(__tmp.begin()), std::make_move_iterator(__tmp.end())); 
# 666
}  }  
# 667
} 
# 669
template< class _Tp, class _Alloc> 
# 670
template< class _ForwardIterator> void 
# 673
vector< _Tp, _Alloc> ::_M_range_insert(iterator __position, _ForwardIterator __first, _ForwardIterator 
# 674
__last, std::forward_iterator_tag) 
# 675
{ 
# 676
if (__first != __last) 
# 677
{ 
# 678
const size_type __n = std::distance(__first, __last); 
# 679
if (((size_type)(((this->_M_impl)._M_end_of_storage) - ((this->_M_impl)._M_finish))) >= __n) 
# 681
{ 
# 682
const size_type __elems_after = end() - __position; 
# 683
pointer __old_finish(((this->_M_impl)._M_finish)); 
# 684
if (__elems_after > __n) 
# 685
{ 
# 686
; 
# 687
std::__uninitialized_move_a(((this->_M_impl)._M_finish) - __n, ((this->_M_impl)._M_finish), ((this->_M_impl)._M_finish), _M_get_Tp_allocator()); 
# 691
((this->_M_impl)._M_finish) += __n; 
# 692
; 
# 693
std::move_backward((__position.base()), __old_finish - __n, __old_finish); 
# 695
std::copy(__first, __last, __position); 
# 696
} else 
# 698
{ 
# 699
_ForwardIterator __mid = __first; 
# 700
std::advance(__mid, __elems_after); 
# 701
; 
# 702
std::__uninitialized_copy_a(__mid, __last, ((this->_M_impl)._M_finish), _M_get_Tp_allocator()); 
# 705
((this->_M_impl)._M_finish) += (__n - __elems_after); 
# 706
; 
# 707
std::__uninitialized_move_a((__position.base()), __old_finish, ((this->_M_impl)._M_finish), _M_get_Tp_allocator()); 
# 711
((this->_M_impl)._M_finish) += __elems_after; 
# 712
; 
# 713
std::copy(__first, __mid, __position); 
# 714
}  
# 715
} else 
# 717
{ 
# 718
const size_type __len = _M_check_len(__n, "vector::_M_range_insert"); 
# 720
pointer __new_start((this->_M_allocate(__len))); 
# 721
pointer __new_finish(__new_start); 
# 722
try 
# 723
{ 
# 724
__new_finish = std::__uninitialized_move_if_noexcept_a(((this->_M_impl)._M_start), (__position.base()), __new_start, _M_get_Tp_allocator()); 
# 728
__new_finish = std::__uninitialized_copy_a(__first, __last, __new_finish, _M_get_Tp_allocator()); 
# 732
__new_finish = std::__uninitialized_move_if_noexcept_a((__position.base()), ((this->_M_impl)._M_finish), __new_finish, _M_get_Tp_allocator()); 
# 736
} 
# 737
catch (...) 
# 738
{ 
# 739
std::_Destroy(__new_start, __new_finish, _M_get_Tp_allocator()); 
# 741
_M_deallocate(__new_start, __len); 
# 742
throw; 
# 743
}  
# 744
; 
# 745
std::_Destroy(((this->_M_impl)._M_start), ((this->_M_impl)._M_finish), _M_get_Tp_allocator()); 
# 747
_M_deallocate(((this->_M_impl)._M_start), ((this->_M_impl)._M_end_of_storage) - ((this->_M_impl)._M_start)); 
# 750
((this->_M_impl)._M_start) = __new_start; 
# 751
((this->_M_impl)._M_finish) = __new_finish; 
# 752
((this->_M_impl)._M_end_of_storage) = (__new_start + __len); 
# 753
}  
# 754
}  
# 755
} 
# 759
template< class _Alloc> void 
# 762
vector< bool, _Alloc> ::_M_reallocate(size_type __n) 
# 763
{ 
# 764
_Bit_pointer __q = (this->_M_allocate(__n)); 
# 765
iterator __start(std::__addressof(*__q), 0); 
# 766
iterator __finish(_M_copy_aligned(begin(), end(), __start)); 
# 767
(this->_M_deallocate()); 
# 768
((this->_M_impl)._M_start) = __start; 
# 769
((this->_M_impl)._M_finish) = __finish; 
# 770
((this->_M_impl)._M_end_of_storage) = (__q + _S_nword(__n)); 
# 771
} 
# 773
template< class _Alloc> void 
# 776
vector< bool, _Alloc> ::_M_fill_insert(iterator __position, size_type __n, bool __x) 
# 777
{ 
# 778
if (__n == (0)) { 
# 779
return; }  
# 780
if ((capacity() - size()) >= __n) 
# 781
{ 
# 782
std::copy_backward(__position, end(), ((this->_M_impl)._M_finish) + ((difference_type)__n)); 
# 784
std::fill(__position, (__position + ((difference_type)__n)), __x); 
# 785
((this->_M_impl)._M_finish) += ((difference_type)__n); 
# 786
} else 
# 788
{ 
# 789
const size_type __len = _M_check_len(__n, "vector<bool>::_M_fill_insert"); 
# 791
_Bit_pointer __q = (this->_M_allocate(__len)); 
# 792
iterator __start(std::__addressof(*__q), 0); 
# 793
iterator __i = _M_copy_aligned(begin(), __position, __start); 
# 794
std::fill(__i, (__i + ((difference_type)__n)), __x); 
# 795
iterator __finish = std::copy(__position, end(), (__i + ((difference_type)__n))); 
# 797
(this->_M_deallocate()); 
# 798
((this->_M_impl)._M_end_of_storage) = (__q + _S_nword(__len)); 
# 799
((this->_M_impl)._M_start) = __start; 
# 800
((this->_M_impl)._M_finish) = __finish; 
# 801
}  
# 802
} 
# 804
template< class _Alloc> 
# 805
template< class _ForwardIterator> void 
# 808
vector< bool, _Alloc> ::_M_insert_range(iterator __position, _ForwardIterator __first, _ForwardIterator 
# 809
__last, std::forward_iterator_tag) 
# 810
{ 
# 811
if (__first != __last) 
# 812
{ 
# 813
size_type __n = std::distance(__first, __last); 
# 814
if ((capacity() - size()) >= __n) 
# 815
{ 
# 816
std::copy_backward(__position, end(), ((this->_M_impl)._M_finish) + ((difference_type)__n)); 
# 819
std::copy(__first, __last, __position); 
# 820
((this->_M_impl)._M_finish) += ((difference_type)__n); 
# 821
} else 
# 823
{ 
# 824
const size_type __len = _M_check_len(__n, "vector<bool>::_M_insert_range"); 
# 826
_Bit_pointer __q = (this->_M_allocate(__len)); 
# 827
iterator __start(std::__addressof(*__q), 0); 
# 828
iterator __i = _M_copy_aligned(begin(), __position, __start); 
# 829
__i = std::copy(__first, __last, __i); 
# 830
iterator __finish = std::copy(__position, end(), __i); 
# 831
(this->_M_deallocate()); 
# 832
((this->_M_impl)._M_end_of_storage) = (__q + _S_nword(__len)); 
# 833
((this->_M_impl)._M_start) = __start; 
# 834
((this->_M_impl)._M_finish) = __finish; 
# 835
}  
# 836
}  
# 837
} 
# 839
template< class _Alloc> void 
# 842
vector< bool, _Alloc> ::_M_insert_aux(iterator __position, bool __x) 
# 843
{ 
# 844
if ((((this->_M_impl)._M_finish)._M_p) != ((this->_M_impl)._M_end_addr())) 
# 845
{ 
# 846
std::copy_backward(__position, ((this->_M_impl)._M_finish), ((this->_M_impl)._M_finish) + 1); 
# 848
(((*__position)) = __x); 
# 849
++((this->_M_impl)._M_finish); 
# 850
} else 
# 852
{ 
# 853
const size_type __len = _M_check_len((size_type)1, "vector<bool>::_M_insert_aux"); 
# 855
_Bit_pointer __q = (this->_M_allocate(__len)); 
# 856
iterator __start(std::__addressof(*__q), 0); 
# 857
iterator __i = _M_copy_aligned(begin(), __position, __start); 
# 858
(((*(__i++))) = __x); 
# 859
iterator __finish = std::copy(__position, end(), __i); 
# 860
(this->_M_deallocate()); 
# 861
((this->_M_impl)._M_end_of_storage) = (__q + _S_nword(__len)); 
# 862
((this->_M_impl)._M_start) = __start; 
# 863
((this->_M_impl)._M_finish) = __finish; 
# 864
}  
# 865
} 
# 867
template< class _Alloc> typename vector< bool, _Alloc> ::iterator 
# 870
vector< bool, _Alloc> ::_M_erase(iterator __position) 
# 871
{ 
# 872
if ((((__position + (1))) != (end()))) { 
# 873
std::copy((__position + (1)), end(), __position); }  
# 874
--((this->_M_impl)._M_finish); 
# 875
return __position; 
# 876
} 
# 878
template< class _Alloc> typename vector< bool, _Alloc> ::iterator 
# 881
vector< bool, _Alloc> ::_M_erase(iterator __first, iterator __last) 
# 882
{ 
# 883
if ((__first != __last)) { 
# 884
_M_erase_at_end(std::copy(__last, end(), __first)); }  
# 885
return __first; 
# 886
} 
# 889
template< class _Alloc> bool 
# 892
vector< bool, _Alloc> ::_M_shrink_to_fit() 
# 893
{ 
# 894
if ((capacity() - size()) < ((int)_S_word_bit)) { 
# 895
return false; }  
# 896
try 
# 897
{ 
# 898
_M_reallocate(size()); 
# 899
return true; 
# 900
} 
# 901
catch (...) 
# 902
{ return false; }  
# 903
} 
# 908
}
# 912
namespace std __attribute((__visibility__("default"))) { 
# 916
template< class _Alloc> size_t 
# 919
hash< vector< bool, _Alloc> > ::operator()(const vector< bool, _Alloc>  &__b) const noexcept 
# 920
{ 
# 921
std::size_t __hash = (0); 
# 922
using std::_S_word_bit;
# 923
using std::_Bit_type;
# 925
const std::size_t __words = (__b.size()) / _S_word_bit; 
# 926
if (__words) 
# 927
{ 
# 928
const std::size_t __clength = (__words * sizeof(std::_Bit_type)); 
# 929
__hash = std::_Hash_impl::hash((((__b._M_impl)._M_start)._M_p), __clength); 
# 930
}  
# 932
const std::size_t __extrabits = (__b.size()) % _S_word_bit; 
# 933
if (__extrabits) 
# 934
{ 
# 935
std::_Bit_type __hiword = (*(((__b._M_impl)._M_finish)._M_p)); 
# 936
__hiword &= (~((~(static_cast< std::_Bit_type>(0))) << __extrabits)); 
# 938
const std::size_t __clength = (((__extrabits + (8)) - (1)) / (8)); 
# 940
if (__words) { 
# 941
__hash = std::_Hash_impl::hash(&__hiword, __clength, __hash); } else { 
# 943
__hash = std::_Hash_impl::hash(&__hiword, __clength); }  
# 944
}  
# 946
return __hash; 
# 947
} 
# 950
}
# 27 "/usr/include/unistd.h" 3
extern "C" {
# 274 "/usr/include/unistd.h" 3
typedef __socklen_t socklen_t; 
# 287 "/usr/include/unistd.h" 3
extern int access(const char * __name, int __type) throw() __attribute((__nonnull__(1))); 
# 292
extern int euidaccess(const char * __name, int __type) throw()
# 293
 __attribute((__nonnull__(1))); 
# 296
extern int eaccess(const char * __name, int __type) throw()
# 297
 __attribute((__nonnull__(1))); 
# 304
extern int faccessat(int __fd, const char * __file, int __type, int __flag) throw()
# 305
 __attribute((__nonnull__(2))); 
# 334 "/usr/include/unistd.h" 3
extern __off_t lseek(int __fd, __off_t __offset, int __whence) throw(); 
# 345 "/usr/include/unistd.h" 3
extern __off64_t lseek64(int __fd, __off64_t __offset, int __whence) throw(); 
# 353
extern int close(int __fd); 
# 360
extern ssize_t read(int __fd, void * __buf, size_t __nbytes); 
# 366
extern ssize_t write(int __fd, const void * __buf, size_t __n); 
# 376 "/usr/include/unistd.h" 3
extern ssize_t pread(int __fd, void * __buf, size_t __nbytes, __off_t __offset); 
# 384
extern ssize_t pwrite(int __fd, const void * __buf, size_t __n, __off_t __offset); 
# 404 "/usr/include/unistd.h" 3
extern ssize_t pread64(int __fd, void * __buf, size_t __nbytes, __off64_t __offset); 
# 408
extern ssize_t pwrite64(int __fd, const void * __buf, size_t __n, __off64_t __offset); 
# 417
extern int pipe(int  __pipedes[2]) throw(); 
# 422
extern int pipe2(int  __pipedes[2], int __flags) throw(); 
# 432 "/usr/include/unistd.h" 3
extern unsigned alarm(unsigned __seconds) throw(); 
# 444 "/usr/include/unistd.h" 3
extern unsigned sleep(unsigned __seconds); 
# 452
extern __useconds_t ualarm(__useconds_t __value, __useconds_t __interval) throw(); 
# 460
extern int usleep(__useconds_t __useconds); 
# 469 "/usr/include/unistd.h" 3
extern int pause(); 
# 473
extern int chown(const char * __file, __uid_t __owner, __gid_t __group) throw()
# 474
 __attribute((__nonnull__(1))); 
# 478
extern int fchown(int __fd, __uid_t __owner, __gid_t __group) throw(); 
# 483
extern int lchown(const char * __file, __uid_t __owner, __gid_t __group) throw()
# 484
 __attribute((__nonnull__(1))); 
# 491
extern int fchownat(int __fd, const char * __file, __uid_t __owner, __gid_t __group, int __flag) throw()
# 493
 __attribute((__nonnull__(2))); 
# 497
extern int chdir(const char * __path) throw() __attribute((__nonnull__(1))); 
# 501
extern int fchdir(int __fd) throw(); 
# 511 "/usr/include/unistd.h" 3
extern char *getcwd(char * __buf, size_t __size) throw(); 
# 517
extern char *get_current_dir_name() throw(); 
# 525
extern char *getwd(char * __buf) throw()
# 526
 __attribute((__nonnull__(1))) __attribute((__deprecated__)); 
# 531
extern int dup(int __fd) throw(); 
# 534
extern int dup2(int __fd, int __fd2) throw(); 
# 539
extern int dup3(int __fd, int __fd2, int __flags) throw(); 
# 543
extern char **__environ; 
# 545
extern char **environ; 
# 551
extern int execve(const char * __path, char *const  __argv[], char *const  __envp[]) throw()
# 552
 __attribute((__nonnull__(1, 2))); 
# 557
extern int fexecve(int __fd, char *const  __argv[], char *const  __envp[]) throw()
# 558
 __attribute((__nonnull__(2))); 
# 563
extern int execv(const char * __path, char *const  __argv[]) throw()
# 564
 __attribute((__nonnull__(1, 2))); 
# 568
extern int execle(const char * __path, const char * __arg, ...) throw()
# 569
 __attribute((__nonnull__(1, 2))); 
# 573
extern int execl(const char * __path, const char * __arg, ...) throw()
# 574
 __attribute((__nonnull__(1, 2))); 
# 578
extern int execvp(const char * __file, char *const  __argv[]) throw()
# 579
 __attribute((__nonnull__(1, 2))); 
# 584
extern int execlp(const char * __file, const char * __arg, ...) throw()
# 585
 __attribute((__nonnull__(1, 2))); 
# 590
extern int execvpe(const char * __file, char *const  __argv[], char *const  __envp[]) throw()
# 592
 __attribute((__nonnull__(1, 2))); 
# 598
extern int nice(int __inc) throw(); 
# 603
extern void _exit(int __status) __attribute((__noreturn__)); 
# 25 "/usr/include/x86_64-linux-gnu/bits/confname.h" 3
enum { 
# 26
_PC_LINK_MAX, 
# 28
_PC_MAX_CANON, 
# 30
_PC_MAX_INPUT, 
# 32
_PC_NAME_MAX, 
# 34
_PC_PATH_MAX, 
# 36
_PC_PIPE_BUF, 
# 38
_PC_CHOWN_RESTRICTED, 
# 40
_PC_NO_TRUNC, 
# 42
_PC_VDISABLE, 
# 44
_PC_SYNC_IO, 
# 46
_PC_ASYNC_IO, 
# 48
_PC_PRIO_IO, 
# 50
_PC_SOCK_MAXBUF, 
# 52
_PC_FILESIZEBITS, 
# 54
_PC_REC_INCR_XFER_SIZE, 
# 56
_PC_REC_MAX_XFER_SIZE, 
# 58
_PC_REC_MIN_XFER_SIZE, 
# 60
_PC_REC_XFER_ALIGN, 
# 62
_PC_ALLOC_SIZE_MIN, 
# 64
_PC_SYMLINK_MAX, 
# 66
_PC_2_SYMLINKS
# 68
}; 
# 72
enum { 
# 73
_SC_ARG_MAX, 
# 75
_SC_CHILD_MAX, 
# 77
_SC_CLK_TCK, 
# 79
_SC_NGROUPS_MAX, 
# 81
_SC_OPEN_MAX, 
# 83
_SC_STREAM_MAX, 
# 85
_SC_TZNAME_MAX, 
# 87
_SC_JOB_CONTROL, 
# 89
_SC_SAVED_IDS, 
# 91
_SC_REALTIME_SIGNALS, 
# 93
_SC_PRIORITY_SCHEDULING, 
# 95
_SC_TIMERS, 
# 97
_SC_ASYNCHRONOUS_IO, 
# 99
_SC_PRIORITIZED_IO, 
# 101
_SC_SYNCHRONIZED_IO, 
# 103
_SC_FSYNC, 
# 105
_SC_MAPPED_FILES, 
# 107
_SC_MEMLOCK, 
# 109
_SC_MEMLOCK_RANGE, 
# 111
_SC_MEMORY_PROTECTION, 
# 113
_SC_MESSAGE_PASSING, 
# 115
_SC_SEMAPHORES, 
# 117
_SC_SHARED_MEMORY_OBJECTS, 
# 119
_SC_AIO_LISTIO_MAX, 
# 121
_SC_AIO_MAX, 
# 123
_SC_AIO_PRIO_DELTA_MAX, 
# 125
_SC_DELAYTIMER_MAX, 
# 127
_SC_MQ_OPEN_MAX, 
# 129
_SC_MQ_PRIO_MAX, 
# 131
_SC_VERSION, 
# 133
_SC_PAGESIZE, 
# 136
_SC_RTSIG_MAX, 
# 138
_SC_SEM_NSEMS_MAX, 
# 140
_SC_SEM_VALUE_MAX, 
# 142
_SC_SIGQUEUE_MAX, 
# 144
_SC_TIMER_MAX, 
# 149
_SC_BC_BASE_MAX, 
# 151
_SC_BC_DIM_MAX, 
# 153
_SC_BC_SCALE_MAX, 
# 155
_SC_BC_STRING_MAX, 
# 157
_SC_COLL_WEIGHTS_MAX, 
# 159
_SC_EQUIV_CLASS_MAX, 
# 161
_SC_EXPR_NEST_MAX, 
# 163
_SC_LINE_MAX, 
# 165
_SC_RE_DUP_MAX, 
# 167
_SC_CHARCLASS_NAME_MAX, 
# 170
_SC_2_VERSION, 
# 172
_SC_2_C_BIND, 
# 174
_SC_2_C_DEV, 
# 176
_SC_2_FORT_DEV, 
# 178
_SC_2_FORT_RUN, 
# 180
_SC_2_SW_DEV, 
# 182
_SC_2_LOCALEDEF, 
# 185
_SC_PII, 
# 187
_SC_PII_XTI, 
# 189
_SC_PII_SOCKET, 
# 191
_SC_PII_INTERNET, 
# 193
_SC_PII_OSI, 
# 195
_SC_POLL, 
# 197
_SC_SELECT, 
# 199
_SC_UIO_MAXIOV, 
# 201
_SC_IOV_MAX = 60, 
# 203
_SC_PII_INTERNET_STREAM, 
# 205
_SC_PII_INTERNET_DGRAM, 
# 207
_SC_PII_OSI_COTS, 
# 209
_SC_PII_OSI_CLTS, 
# 211
_SC_PII_OSI_M, 
# 213
_SC_T_IOV_MAX, 
# 217
_SC_THREADS, 
# 219
_SC_THREAD_SAFE_FUNCTIONS, 
# 221
_SC_GETGR_R_SIZE_MAX, 
# 223
_SC_GETPW_R_SIZE_MAX, 
# 225
_SC_LOGIN_NAME_MAX, 
# 227
_SC_TTY_NAME_MAX, 
# 229
_SC_THREAD_DESTRUCTOR_ITERATIONS, 
# 231
_SC_THREAD_KEYS_MAX, 
# 233
_SC_THREAD_STACK_MIN, 
# 235
_SC_THREAD_THREADS_MAX, 
# 237
_SC_THREAD_ATTR_STACKADDR, 
# 239
_SC_THREAD_ATTR_STACKSIZE, 
# 241
_SC_THREAD_PRIORITY_SCHEDULING, 
# 243
_SC_THREAD_PRIO_INHERIT, 
# 245
_SC_THREAD_PRIO_PROTECT, 
# 247
_SC_THREAD_PROCESS_SHARED, 
# 250
_SC_NPROCESSORS_CONF, 
# 252
_SC_NPROCESSORS_ONLN, 
# 254
_SC_PHYS_PAGES, 
# 256
_SC_AVPHYS_PAGES, 
# 258
_SC_ATEXIT_MAX, 
# 260
_SC_PASS_MAX, 
# 263
_SC_XOPEN_VERSION, 
# 265
_SC_XOPEN_XCU_VERSION, 
# 267
_SC_XOPEN_UNIX, 
# 269
_SC_XOPEN_CRYPT, 
# 271
_SC_XOPEN_ENH_I18N, 
# 273
_SC_XOPEN_SHM, 
# 276
_SC_2_CHAR_TERM, 
# 278
_SC_2_C_VERSION, 
# 280
_SC_2_UPE, 
# 283
_SC_XOPEN_XPG2, 
# 285
_SC_XOPEN_XPG3, 
# 287
_SC_XOPEN_XPG4, 
# 290
_SC_CHAR_BIT, 
# 292
_SC_CHAR_MAX, 
# 294
_SC_CHAR_MIN, 
# 296
_SC_INT_MAX, 
# 298
_SC_INT_MIN, 
# 300
_SC_LONG_BIT, 
# 302
_SC_WORD_BIT, 
# 304
_SC_MB_LEN_MAX, 
# 306
_SC_NZERO, 
# 308
_SC_SSIZE_MAX, 
# 310
_SC_SCHAR_MAX, 
# 312
_SC_SCHAR_MIN, 
# 314
_SC_SHRT_MAX, 
# 316
_SC_SHRT_MIN, 
# 318
_SC_UCHAR_MAX, 
# 320
_SC_UINT_MAX, 
# 322
_SC_ULONG_MAX, 
# 324
_SC_USHRT_MAX, 
# 327
_SC_NL_ARGMAX, 
# 329
_SC_NL_LANGMAX, 
# 331
_SC_NL_MSGMAX, 
# 333
_SC_NL_NMAX, 
# 335
_SC_NL_SETMAX, 
# 337
_SC_NL_TEXTMAX, 
# 340
_SC_XBS5_ILP32_OFF32, 
# 342
_SC_XBS5_ILP32_OFFBIG, 
# 344
_SC_XBS5_LP64_OFF64, 
# 346
_SC_XBS5_LPBIG_OFFBIG, 
# 349
_SC_XOPEN_LEGACY, 
# 351
_SC_XOPEN_REALTIME, 
# 353
_SC_XOPEN_REALTIME_THREADS, 
# 356
_SC_ADVISORY_INFO, 
# 358
_SC_BARRIERS, 
# 360
_SC_BASE, 
# 362
_SC_C_LANG_SUPPORT, 
# 364
_SC_C_LANG_SUPPORT_R, 
# 366
_SC_CLOCK_SELECTION, 
# 368
_SC_CPUTIME, 
# 370
_SC_THREAD_CPUTIME, 
# 372
_SC_DEVICE_IO, 
# 374
_SC_DEVICE_SPECIFIC, 
# 376
_SC_DEVICE_SPECIFIC_R, 
# 378
_SC_FD_MGMT, 
# 380
_SC_FIFO, 
# 382
_SC_PIPE, 
# 384
_SC_FILE_ATTRIBUTES, 
# 386
_SC_FILE_LOCKING, 
# 388
_SC_FILE_SYSTEM, 
# 390
_SC_MONOTONIC_CLOCK, 
# 392
_SC_MULTI_PROCESS, 
# 394
_SC_SINGLE_PROCESS, 
# 396
_SC_NETWORKING, 
# 398
_SC_READER_WRITER_LOCKS, 
# 400
_SC_SPIN_LOCKS, 
# 402
_SC_REGEXP, 
# 404
_SC_REGEX_VERSION, 
# 406
_SC_SHELL, 
# 408
_SC_SIGNALS, 
# 410
_SC_SPAWN, 
# 412
_SC_SPORADIC_SERVER, 
# 414
_SC_THREAD_SPORADIC_SERVER, 
# 416
_SC_SYSTEM_DATABASE, 
# 418
_SC_SYSTEM_DATABASE_R, 
# 420
_SC_TIMEOUTS, 
# 422
_SC_TYPED_MEMORY_OBJECTS, 
# 424
_SC_USER_GROUPS, 
# 426
_SC_USER_GROUPS_R, 
# 428
_SC_2_PBS, 
# 430
_SC_2_PBS_ACCOUNTING, 
# 432
_SC_2_PBS_LOCATE, 
# 434
_SC_2_PBS_MESSAGE, 
# 436
_SC_2_PBS_TRACK, 
# 438
_SC_SYMLOOP_MAX, 
# 440
_SC_STREAMS, 
# 442
_SC_2_PBS_CHECKPOINT, 
# 445
_SC_V6_ILP32_OFF32, 
# 447
_SC_V6_ILP32_OFFBIG, 
# 449
_SC_V6_LP64_OFF64, 
# 451
_SC_V6_LPBIG_OFFBIG, 
# 454
_SC_HOST_NAME_MAX, 
# 456
_SC_TRACE, 
# 458
_SC_TRACE_EVENT_FILTER, 
# 460
_SC_TRACE_INHERIT, 
# 462
_SC_TRACE_LOG, 
# 465
_SC_LEVEL1_ICACHE_SIZE, 
# 467
_SC_LEVEL1_ICACHE_ASSOC, 
# 469
_SC_LEVEL1_ICACHE_LINESIZE, 
# 471
_SC_LEVEL1_DCACHE_SIZE, 
# 473
_SC_LEVEL1_DCACHE_ASSOC, 
# 475
_SC_LEVEL1_DCACHE_LINESIZE, 
# 477
_SC_LEVEL2_CACHE_SIZE, 
# 479
_SC_LEVEL2_CACHE_ASSOC, 
# 481
_SC_LEVEL2_CACHE_LINESIZE, 
# 483
_SC_LEVEL3_CACHE_SIZE, 
# 485
_SC_LEVEL3_CACHE_ASSOC, 
# 487
_SC_LEVEL3_CACHE_LINESIZE, 
# 489
_SC_LEVEL4_CACHE_SIZE, 
# 491
_SC_LEVEL4_CACHE_ASSOC, 
# 493
_SC_LEVEL4_CACHE_LINESIZE, 
# 497
_SC_IPV6 = 235, 
# 499
_SC_RAW_SOCKETS, 
# 502
_SC_V7_ILP32_OFF32, 
# 504
_SC_V7_ILP32_OFFBIG, 
# 506
_SC_V7_LP64_OFF64, 
# 508
_SC_V7_LPBIG_OFFBIG, 
# 511
_SC_SS_REPL_MAX, 
# 514
_SC_TRACE_EVENT_NAME_MAX, 
# 516
_SC_TRACE_NAME_MAX, 
# 518
_SC_TRACE_SYS_MAX, 
# 520
_SC_TRACE_USER_EVENT_MAX, 
# 523
_SC_XOPEN_STREAMS, 
# 526
_SC_THREAD_ROBUST_PRIO_INHERIT, 
# 528
_SC_THREAD_ROBUST_PRIO_PROTECT
# 530
}; 
# 534
enum { 
# 535
_CS_PATH, 
# 538
_CS_V6_WIDTH_RESTRICTED_ENVS, 
# 542
_CS_GNU_LIBC_VERSION, 
# 544
_CS_GNU_LIBPTHREAD_VERSION, 
# 547
_CS_V5_WIDTH_RESTRICTED_ENVS, 
# 551
_CS_V7_WIDTH_RESTRICTED_ENVS, 
# 555
_CS_LFS_CFLAGS = 1000, 
# 557
_CS_LFS_LDFLAGS, 
# 559
_CS_LFS_LIBS, 
# 561
_CS_LFS_LINTFLAGS, 
# 563
_CS_LFS64_CFLAGS, 
# 565
_CS_LFS64_LDFLAGS, 
# 567
_CS_LFS64_LIBS, 
# 569
_CS_LFS64_LINTFLAGS, 
# 572
_CS_XBS5_ILP32_OFF32_CFLAGS = 1100, 
# 574
_CS_XBS5_ILP32_OFF32_LDFLAGS, 
# 576
_CS_XBS5_ILP32_OFF32_LIBS, 
# 578
_CS_XBS5_ILP32_OFF32_LINTFLAGS, 
# 580
_CS_XBS5_ILP32_OFFBIG_CFLAGS, 
# 582
_CS_XBS5_ILP32_OFFBIG_LDFLAGS, 
# 584
_CS_XBS5_ILP32_OFFBIG_LIBS, 
# 586
_CS_XBS5_ILP32_OFFBIG_LINTFLAGS, 
# 588
_CS_XBS5_LP64_OFF64_CFLAGS, 
# 590
_CS_XBS5_LP64_OFF64_LDFLAGS, 
# 592
_CS_XBS5_LP64_OFF64_LIBS, 
# 594
_CS_XBS5_LP64_OFF64_LINTFLAGS, 
# 596
_CS_XBS5_LPBIG_OFFBIG_CFLAGS, 
# 598
_CS_XBS5_LPBIG_OFFBIG_LDFLAGS, 
# 600
_CS_XBS5_LPBIG_OFFBIG_LIBS, 
# 602
_CS_XBS5_LPBIG_OFFBIG_LINTFLAGS, 
# 605
_CS_POSIX_V6_ILP32_OFF32_CFLAGS, 
# 607
_CS_POSIX_V6_ILP32_OFF32_LDFLAGS, 
# 609
_CS_POSIX_V6_ILP32_OFF32_LIBS, 
# 611
_CS_POSIX_V6_ILP32_OFF32_LINTFLAGS, 
# 613
_CS_POSIX_V6_ILP32_OFFBIG_CFLAGS, 
# 615
_CS_POSIX_V6_ILP32_OFFBIG_LDFLAGS, 
# 617
_CS_POSIX_V6_ILP32_OFFBIG_LIBS, 
# 619
_CS_POSIX_V6_ILP32_OFFBIG_LINTFLAGS, 
# 621
_CS_POSIX_V6_LP64_OFF64_CFLAGS, 
# 623
_CS_POSIX_V6_LP64_OFF64_LDFLAGS, 
# 625
_CS_POSIX_V6_LP64_OFF64_LIBS, 
# 627
_CS_POSIX_V6_LP64_OFF64_LINTFLAGS, 
# 629
_CS_POSIX_V6_LPBIG_OFFBIG_CFLAGS, 
# 631
_CS_POSIX_V6_LPBIG_OFFBIG_LDFLAGS, 
# 633
_CS_POSIX_V6_LPBIG_OFFBIG_LIBS, 
# 635
_CS_POSIX_V6_LPBIG_OFFBIG_LINTFLAGS, 
# 638
_CS_POSIX_V7_ILP32_OFF32_CFLAGS, 
# 640
_CS_POSIX_V7_ILP32_OFF32_LDFLAGS, 
# 642
_CS_POSIX_V7_ILP32_OFF32_LIBS, 
# 644
_CS_POSIX_V7_ILP32_OFF32_LINTFLAGS, 
# 646
_CS_POSIX_V7_ILP32_OFFBIG_CFLAGS, 
# 648
_CS_POSIX_V7_ILP32_OFFBIG_LDFLAGS, 
# 650
_CS_POSIX_V7_ILP32_OFFBIG_LIBS, 
# 652
_CS_POSIX_V7_ILP32_OFFBIG_LINTFLAGS, 
# 654
_CS_POSIX_V7_LP64_OFF64_CFLAGS, 
# 656
_CS_POSIX_V7_LP64_OFF64_LDFLAGS, 
# 658
_CS_POSIX_V7_LP64_OFF64_LIBS, 
# 660
_CS_POSIX_V7_LP64_OFF64_LINTFLAGS, 
# 662
_CS_POSIX_V7_LPBIG_OFFBIG_CFLAGS, 
# 664
_CS_POSIX_V7_LPBIG_OFFBIG_LDFLAGS, 
# 666
_CS_POSIX_V7_LPBIG_OFFBIG_LIBS, 
# 668
_CS_POSIX_V7_LPBIG_OFFBIG_LINTFLAGS, 
# 671
_CS_V6_ENV, 
# 673
_CS_V7_ENV
# 675
}; 
# 612 "/usr/include/unistd.h" 3
extern long pathconf(const char * __path, int __name) throw()
# 613
 __attribute((__nonnull__(1))); 
# 616
extern long fpathconf(int __fd, int __name) throw(); 
# 619
extern long sysconf(int __name) throw(); 
# 623
extern size_t confstr(int __name, char * __buf, size_t __len) throw(); 
# 628
extern __pid_t getpid() throw(); 
# 631
extern __pid_t getppid() throw(); 
# 634
extern __pid_t getpgrp() throw(); 
# 637
extern __pid_t __getpgid(__pid_t __pid) throw(); 
# 639
extern __pid_t getpgid(__pid_t __pid) throw(); 
# 646
extern int setpgid(__pid_t __pid, __pid_t __pgid) throw(); 
# 660 "/usr/include/unistd.h" 3
extern int setpgrp() throw(); 
# 667
extern __pid_t setsid() throw(); 
# 671
extern __pid_t getsid(__pid_t __pid) throw(); 
# 675
extern __uid_t getuid() throw(); 
# 678
extern __uid_t geteuid() throw(); 
# 681
extern __gid_t getgid() throw(); 
# 684
extern __gid_t getegid() throw(); 
# 689
extern int getgroups(int __size, __gid_t  __list[]) throw(); 
# 693
extern int group_member(__gid_t __gid) throw(); 
# 700
extern int setuid(__uid_t __uid) throw(); 
# 705
extern int setreuid(__uid_t __ruid, __uid_t __euid) throw(); 
# 710
extern int seteuid(__uid_t __uid) throw(); 
# 717
extern int setgid(__gid_t __gid) throw(); 
# 722
extern int setregid(__gid_t __rgid, __gid_t __egid) throw(); 
# 727
extern int setegid(__gid_t __gid) throw(); 
# 733
extern int getresuid(__uid_t * __ruid, __uid_t * __euid, __uid_t * __suid) throw(); 
# 738
extern int getresgid(__gid_t * __rgid, __gid_t * __egid, __gid_t * __sgid) throw(); 
# 743
extern int setresuid(__uid_t __ruid, __uid_t __euid, __uid_t __suid) throw(); 
# 748
extern int setresgid(__gid_t __rgid, __gid_t __egid, __gid_t __sgid) throw(); 
# 756
extern __pid_t fork() throw(); 
# 764
extern __pid_t vfork() throw(); 
# 770
extern char *ttyname(int __fd) throw(); 
# 774
extern int ttyname_r(int __fd, char * __buf, size_t __buflen) throw()
# 775
 __attribute((__nonnull__(2))); 
# 779
extern int isatty(int __fd) throw(); 
# 784
extern int ttyslot() throw(); 
# 789
extern int link(const char * __from, const char * __to) throw()
# 790
 __attribute((__nonnull__(1, 2))); 
# 795
extern int linkat(int __fromfd, const char * __from, int __tofd, const char * __to, int __flags) throw()
# 797
 __attribute((__nonnull__(2, 4))); 
# 802
extern int symlink(const char * __from, const char * __to) throw()
# 803
 __attribute((__nonnull__(1, 2))); 
# 808
extern ssize_t readlink(const char *__restrict__ __path, char *__restrict__ __buf, size_t __len) throw()
# 810
 __attribute((__nonnull__(1, 2))); 
# 815
extern int symlinkat(const char * __from, int __tofd, const char * __to) throw()
# 816
 __attribute((__nonnull__(1, 3))); 
# 819
extern ssize_t readlinkat(int __fd, const char *__restrict__ __path, char *__restrict__ __buf, size_t __len) throw()
# 821
 __attribute((__nonnull__(2, 3))); 
# 825
extern int unlink(const char * __name) throw() __attribute((__nonnull__(1))); 
# 829
extern int unlinkat(int __fd, const char * __name, int __flag) throw()
# 830
 __attribute((__nonnull__(2))); 
# 834
extern int rmdir(const char * __path) throw() __attribute((__nonnull__(1))); 
# 838
extern __pid_t tcgetpgrp(int __fd) throw(); 
# 841
extern int tcsetpgrp(int __fd, __pid_t __pgrp_id) throw(); 
# 848
extern char *getlogin(); 
# 856
extern int getlogin_r(char * __name, size_t __name_len) __attribute((__nonnull__(1))); 
# 861
extern int setlogin(const char * __name) throw() __attribute((__nonnull__(1))); 
# 28 "/usr/include/x86_64-linux-gnu/bits/getopt_core.h" 3
extern "C" {
# 36
extern char *optarg; 
# 50 "/usr/include/x86_64-linux-gnu/bits/getopt_core.h" 3
extern int optind; 
# 55
extern int opterr; 
# 59
extern int optopt; 
# 91 "/usr/include/x86_64-linux-gnu/bits/getopt_core.h" 3
extern int getopt(int ___argc, char *const * ___argv, const char * __shortopts) throw()
# 92
 __attribute((__nonnull__(2, 3))); 
# 94
}
# 29 "/usr/include/x86_64-linux-gnu/bits/getopt_posix.h" 3
extern "C" {
# 49 "/usr/include/x86_64-linux-gnu/bits/getopt_posix.h" 3
}
# 877 "/usr/include/unistd.h" 3
extern int gethostname(char * __name, size_t __len) throw() __attribute((__nonnull__(1))); 
# 884
extern int sethostname(const char * __name, size_t __len) throw()
# 885
 __attribute((__nonnull__(1))); 
# 889
extern int sethostid(long __id) throw(); 
# 895
extern int getdomainname(char * __name, size_t __len) throw()
# 896
 __attribute((__nonnull__(1))); 
# 897
extern int setdomainname(const char * __name, size_t __len) throw()
# 898
 __attribute((__nonnull__(1))); 
# 904
extern int vhangup() throw(); 
# 907
extern int revoke(const char * __file) throw() __attribute((__nonnull__(1))); 
# 915
extern int profil(unsigned short * __sample_buffer, size_t __size, size_t __offset, unsigned __scale) throw()
# 917
 __attribute((__nonnull__(1))); 
# 923
extern int acct(const char * __name) throw(); 
# 927
extern char *getusershell() throw(); 
# 928
extern void endusershell() throw(); 
# 929
extern void setusershell() throw(); 
# 935
extern int daemon(int __nochdir, int __noclose) throw(); 
# 942
extern int chroot(const char * __path) throw() __attribute((__nonnull__(1))); 
# 946
extern char *getpass(const char * __prompt) __attribute((__nonnull__(1))); 
# 954
extern int fsync(int __fd); 
# 960
extern int syncfs(int __fd) throw(); 
# 967
extern long gethostid(); 
# 970
extern void sync() throw(); 
# 976
extern int getpagesize() throw() __attribute((const)); 
# 981
extern int getdtablesize() throw(); 
# 991 "/usr/include/unistd.h" 3
extern int truncate(const char * __file, __off_t __length) throw()
# 992
 __attribute((__nonnull__(1))); 
# 1003 "/usr/include/unistd.h" 3
extern int truncate64(const char * __file, __off64_t __length) throw()
# 1004
 __attribute((__nonnull__(1))); 
# 1014 "/usr/include/unistd.h" 3
extern int ftruncate(int __fd, __off_t __length) throw(); 
# 1024 "/usr/include/unistd.h" 3
extern int ftruncate64(int __fd, __off64_t __length) throw(); 
# 1035 "/usr/include/unistd.h" 3
extern int brk(void * __addr) throw(); 
# 1041
extern void *sbrk(intptr_t __delta) throw(); 
# 1056 "/usr/include/unistd.h" 3
extern long syscall(long __sysno, ...) throw(); 
# 1079 "/usr/include/unistd.h" 3
extern int lockf(int __fd, int __cmd, __off_t __len); 
# 1089 "/usr/include/unistd.h" 3
extern int lockf64(int __fd, int __cmd, __off64_t __len); 
# 1107 "/usr/include/unistd.h" 3
ssize_t copy_file_range(int __infd, __off64_t * __pinoff, int __outfd, __off64_t * __poutoff, size_t __length, unsigned __flags); 
# 1115
extern int fdatasync(int __fildes); 
# 1124 "/usr/include/unistd.h" 3
extern char *crypt(const char * __key, const char * __salt) throw()
# 1125
 __attribute((__nonnull__(1, 2))); 
# 1133
extern void swab(const void *__restrict__ __from, void *__restrict__ __to, ssize_t __n) throw()
# 1134
 __attribute((__nonnull__(1, 2))); 
# 1161 "/usr/include/unistd.h" 3
int getentropy(void * __buffer, size_t __length); 
# 34 "/usr/include/x86_64-linux-gnu/bits/unistd_ext.h" 3
extern __pid_t gettid() throw(); 
# 1172 "/usr/include/unistd.h" 3
}
# 28 "/usr/include/fcntl.h" 3
extern "C" {
# 35 "/usr/include/x86_64-linux-gnu/bits/fcntl.h" 3
struct flock { 
# 37
short l_type; 
# 38
short l_whence; 
# 40
__off_t l_start; 
# 41
__off_t l_len; 
# 46
__pid_t l_pid; 
# 47
}; 
# 50
struct flock64 { 
# 52
short l_type; 
# 53
short l_whence; 
# 54
__off64_t l_start; 
# 55
__off64_t l_len; 
# 56
__pid_t l_pid; 
# 57
}; 
# 26 "/usr/include/x86_64-linux-gnu/bits/types/struct_iovec.h" 3
struct iovec { 
# 28
void *iov_base; 
# 29
size_t iov_len; 
# 30
}; 
# 265 "/usr/include/x86_64-linux-gnu/bits/fcntl-linux.h" 3
enum __pid_type { 
# 267
F_OWNER_TID, 
# 268
F_OWNER_PID, 
# 269
F_OWNER_PGRP, 
# 270
F_OWNER_GID = 2
# 271
}; 
# 274
struct f_owner_ex { 
# 276
__pid_type type; 
# 277
__pid_t pid; 
# 278
}; 
# 357 "/usr/include/x86_64-linux-gnu/bits/fcntl-linux.h" 3
struct file_handle { 
# 359
unsigned handle_bytes; 
# 360
int handle_type; 
# 362
unsigned char f_handle[0]; 
# 363
}; 
# 392 "/usr/include/x86_64-linux-gnu/bits/fcntl-linux.h" 3
extern "C" {
# 397
extern __ssize_t readahead(int __fd, __off64_t __offset, size_t __count) throw(); 
# 405
extern int sync_file_range(int __fd, __off64_t __offset, __off64_t __count, unsigned __flags); 
# 413
extern __ssize_t vmsplice(int __fdout, const iovec * __iov, size_t __count, unsigned __flags); 
# 420
extern __ssize_t splice(int __fdin, __off64_t * __offin, int __fdout, __off64_t * __offout, size_t __len, unsigned __flags); 
# 428
extern __ssize_t tee(int __fdin, int __fdout, size_t __len, unsigned __flags); 
# 436
extern int fallocate(int __fd, int __mode, __off_t __offset, __off_t __len); 
# 447 "/usr/include/x86_64-linux-gnu/bits/fcntl-linux.h" 3
extern int fallocate64(int __fd, int __mode, __off64_t __offset, __off64_t __len); 
# 453
extern int name_to_handle_at(int __dfd, const char * __name, file_handle * __handle, int * __mnt_id, int __flags) throw(); 
# 461
extern int open_by_handle_at(int __mountdirfd, file_handle * __handle, int __flags); 
# 466
}
# 46 "/usr/include/x86_64-linux-gnu/bits/stat.h" 3
struct stat { 
# 48
__dev_t st_dev; 
# 53
__ino_t st_ino; 
# 61
__nlink_t st_nlink; 
# 62
__mode_t st_mode; 
# 64
__uid_t st_uid; 
# 65
__gid_t st_gid; 
# 67
int __pad0; 
# 69
__dev_t st_rdev; 
# 74
__off_t st_size; 
# 78
__blksize_t st_blksize; 
# 80
__blkcnt_t st_blocks; 
# 91 "/usr/include/x86_64-linux-gnu/bits/stat.h" 3
timespec st_atim; 
# 92
timespec st_mtim; 
# 93
timespec st_ctim; 
# 106 "/usr/include/x86_64-linux-gnu/bits/stat.h" 3
__syscall_slong_t __glibc_reserved[3]; 
# 115 "/usr/include/x86_64-linux-gnu/bits/stat.h" 3
}; 
# 119
struct stat64 { 
# 121
__dev_t st_dev; 
# 123
__ino64_t st_ino; 
# 124
__nlink_t st_nlink; 
# 125
__mode_t st_mode; 
# 132
__uid_t st_uid; 
# 133
__gid_t st_gid; 
# 135
int __pad0; 
# 136
__dev_t st_rdev; 
# 137
__off_t st_size; 
# 143
__blksize_t st_blksize; 
# 144
__blkcnt64_t st_blocks; 
# 152
timespec st_atim; 
# 153
timespec st_mtim; 
# 154
timespec st_ctim; 
# 164 "/usr/include/x86_64-linux-gnu/bits/stat.h" 3
__syscall_slong_t __glibc_reserved[3]; 
# 168
}; 
# 148 "/usr/include/fcntl.h" 3
extern int fcntl(int __fd, int __cmd, ...); 
# 157 "/usr/include/fcntl.h" 3
extern int fcntl64(int __fd, int __cmd, ...); 
# 168 "/usr/include/fcntl.h" 3
extern int open(const char * __file, int __oflag, ...) __attribute((__nonnull__(1))); 
# 178 "/usr/include/fcntl.h" 3
extern int open64(const char * __file, int __oflag, ...) __attribute((__nonnull__(1))); 
# 192 "/usr/include/fcntl.h" 3
extern int openat(int __fd, const char * __file, int __oflag, ...)
# 193
 __attribute((__nonnull__(2))); 
# 203 "/usr/include/fcntl.h" 3
extern int openat64(int __fd, const char * __file, int __oflag, ...)
# 204
 __attribute((__nonnull__(2))); 
# 214 "/usr/include/fcntl.h" 3
extern int creat(const char * __file, mode_t __mode) __attribute((__nonnull__(1))); 
# 224 "/usr/include/fcntl.h" 3
extern int creat64(const char * __file, mode_t __mode) __attribute((__nonnull__(1))); 
# 260 "/usr/include/fcntl.h" 3
extern int posix_fadvise(int __fd, off_t __offset, off_t __len, int __advise) throw(); 
# 272 "/usr/include/fcntl.h" 3
extern int posix_fadvise64(int __fd, off64_t __offset, off64_t __len, int __advise) throw(); 
# 282 "/usr/include/fcntl.h" 3
extern int posix_fallocate(int __fd, off_t __offset, off_t __len); 
# 293 "/usr/include/fcntl.h" 3
extern int posix_fallocate64(int __fd, off64_t __offset, off64_t __len); 
# 304 "/usr/include/fcntl.h" 3
}
# 34 "/usr/include/x86_64-linux-gnu/sys/time.h" 3
extern "C" {
# 52 "/usr/include/x86_64-linux-gnu/sys/time.h" 3
struct timezone { 
# 54
int tz_minuteswest; 
# 55
int tz_dsttime; 
# 56
}; 
# 66 "/usr/include/x86_64-linux-gnu/sys/time.h" 3
extern int gettimeofday(timeval *__restrict__ __tv, void *__restrict__ __tz) throw()
# 67
 __attribute((__nonnull__(1))); 
# 75
extern int settimeofday(const timeval * __tv, const struct timezone * __tz) throw(); 
# 83
extern int adjtime(const timeval * __delta, timeval * __olddelta) throw(); 
# 89
enum __itimer_which { 
# 92
ITIMER_REAL, 
# 95
ITIMER_VIRTUAL, 
# 99
ITIMER_PROF
# 101
}; 
# 105
struct itimerval { 
# 108
timeval it_interval; 
# 110
timeval it_value; 
# 111
}; 
# 118
typedef int __itimer_which_t; 
# 123
extern int getitimer(__itimer_which_t __which, itimerval * __value) throw(); 
# 129
extern int setitimer(__itimer_which_t __which, const itimerval *__restrict__ __new, itimerval *__restrict__ __old) throw(); 
# 136
extern int utimes(const char * __file, const timeval  __tvp[2]) throw()
# 137
 __attribute((__nonnull__(1))); 
# 141
extern int lutimes(const char * __file, const timeval  __tvp[2]) throw()
# 142
 __attribute((__nonnull__(1))); 
# 145
extern int futimes(int __fd, const timeval  __tvp[2]) throw(); 
# 152
extern int futimesat(int __fd, const char * __file, const timeval  __tvp[2]) throw(); 
# 187 "/usr/include/x86_64-linux-gnu/sys/time.h" 3
}
# 41 "/usr/include/c++/8/bits/codecvt.h" 3
namespace std __attribute((__visibility__("default"))) { 
# 46
class codecvt_base { 
# 49
public: enum result { 
# 51
ok, 
# 52
partial, 
# 53
error, 
# 54
noconv
# 55
}; 
# 56
}; 
# 67 "/usr/include/c++/8/bits/codecvt.h" 3
template< class _InternT, class _ExternT, class _StateT> 
# 68
class __codecvt_abstract_base : public locale::facet, public codecvt_base { 
# 73
public: typedef codecvt_base::result result; 
# 74
typedef _InternT intern_type; 
# 75
typedef _ExternT extern_type; 
# 76
typedef _StateT state_type; 
# 116 "/usr/include/c++/8/bits/codecvt.h" 3
result out(state_type &__state, const intern_type *__from, const intern_type *
# 117
__from_end, const intern_type *&__from_next, extern_type *
# 118
__to, extern_type *__to_end, extern_type *&
# 119
__to_next) const 
# 120
{ 
# 121
return do_out(__state, __from, __from_end, __from_next, __to, __to_end, __to_next); 
# 123
} 
# 155 "/usr/include/c++/8/bits/codecvt.h" 3
result unshift(state_type &__state, extern_type *__to, extern_type *__to_end, extern_type *&
# 156
__to_next) const 
# 157
{ return do_unshift(__state, __to, __to_end, __to_next); } 
# 196 "/usr/include/c++/8/bits/codecvt.h" 3
result in(state_type &__state, const extern_type *__from, const extern_type *
# 197
__from_end, const extern_type *&__from_next, intern_type *
# 198
__to, intern_type *__to_end, intern_type *&
# 199
__to_next) const 
# 200
{ 
# 201
return do_in(__state, __from, __from_end, __from_next, __to, __to_end, __to_next); 
# 203
} 
# 206
int encoding() const throw() 
# 207
{ return do_encoding(); } 
# 210
bool always_noconv() const throw() 
# 211
{ return do_always_noconv(); } 
# 214
int length(state_type &__state, const extern_type *__from, const extern_type *
# 215
__end, size_t __max) const 
# 216
{ return do_length(__state, __from, __end, __max); } 
# 219
int max_length() const throw() 
# 220
{ return do_max_length(); } 
# 224
protected: explicit __codecvt_abstract_base(size_t __refs = 0) : locale::facet(__refs) { } 
# 227
virtual ~__codecvt_abstract_base() { } 
# 237 "/usr/include/c++/8/bits/codecvt.h" 3
virtual result do_out(state_type & __state, const intern_type * __from, const intern_type * __from_end, const intern_type *& __from_next, extern_type * __to, extern_type * __to_end, extern_type *& __to_next) const = 0; 
# 243
virtual result do_unshift(state_type & __state, extern_type * __to, extern_type * __to_end, extern_type *& __to_next) const = 0; 
# 247
virtual result do_in(state_type & __state, const extern_type * __from, const extern_type * __from_end, const extern_type *& __from_next, intern_type * __to, intern_type * __to_end, intern_type *& __to_next) const = 0; 
# 253
virtual int do_encoding() const throw() = 0; 
# 256
virtual bool do_always_noconv() const throw() = 0; 
# 259
virtual int do_length(state_type &, const extern_type * __from, const extern_type * __end, size_t __max) const = 0; 
# 263
virtual int do_max_length() const throw() = 0; 
# 264
}; 
# 273 "/usr/include/c++/8/bits/codecvt.h" 3
template< class _InternT, class _ExternT, class _StateT> 
# 274
class codecvt : public __codecvt_abstract_base< _InternT, _ExternT, _StateT>  { 
# 279
public: typedef std::codecvt_base::result result; 
# 280
typedef _InternT intern_type; 
# 281
typedef _ExternT extern_type; 
# 282
typedef _StateT state_type; 
# 285
protected: std::__c_locale _M_c_locale_codecvt; 
# 288
public: static std::locale::id id; 
# 291
explicit codecvt(std::size_t __refs = 0) : std::__codecvt_abstract_base< _InternT, _ExternT, _StateT> (__refs), _M_c_locale_codecvt((0)) 
# 294
{ } 
# 297
explicit codecvt(std::__c_locale __cloc, std::size_t __refs = 0); 
# 301
protected: virtual ~codecvt() { } 
# 304
virtual result do_out(state_type & __state, const intern_type * __from, const intern_type * __from_end, const intern_type *& __from_next, extern_type * __to, extern_type * __to_end, extern_type *& __to_next) const; 
# 310
virtual result do_unshift(state_type & __state, extern_type * __to, extern_type * __to_end, extern_type *& __to_next) const; 
# 314
virtual result do_in(state_type & __state, const extern_type * __from, const extern_type * __from_end, const extern_type *& __from_next, intern_type * __to, intern_type * __to_end, intern_type *& __to_next) const; 
# 320
virtual int do_encoding() const throw(); 
# 323
virtual bool do_always_noconv() const throw(); 
# 326
virtual int do_length(state_type &, const extern_type * __from, const extern_type * __end, std::size_t __max) const; 
# 330
virtual int do_max_length() const throw(); 
# 331
}; 
# 333
template< class _InternT, class _ExternT, class _StateT> locale::id 
# 334
codecvt< _InternT, _ExternT, _StateT> ::id; 
# 338
template<> class codecvt< char, char, __mbstate_t>  : public __codecvt_abstract_base< char, char, __mbstate_t>  { 
# 341
friend class __cxx11::messages< char> ; 
# 345
public: typedef char intern_type; 
# 346
typedef char extern_type; 
# 347
typedef mbstate_t state_type; 
# 350
protected: __c_locale _M_c_locale_codecvt; 
# 353
public: static locale::id id; 
# 356
explicit codecvt(size_t __refs = 0); 
# 359
explicit codecvt(__c_locale __cloc, size_t __refs = 0); 
# 363
protected: virtual ~codecvt(); 
# 366
virtual result do_out(state_type & __state, const intern_type * __from, const intern_type * __from_end, const intern_type *& __from_next, extern_type * __to, extern_type * __to_end, extern_type *& __to_next) const; 
# 372
virtual result do_unshift(state_type & __state, extern_type * __to, extern_type * __to_end, extern_type *& __to_next) const; 
# 376
virtual result do_in(state_type & __state, const extern_type * __from, const extern_type * __from_end, const extern_type *& __from_next, intern_type * __to, intern_type * __to_end, intern_type *& __to_next) const; 
# 382
virtual int do_encoding() const throw(); 
# 385
virtual bool do_always_noconv() const throw(); 
# 388
virtual int do_length(state_type &, const extern_type * __from, const extern_type * __end, size_t __max) const; 
# 392
virtual int do_max_length() const throw(); 
# 393
}; 
# 401
template<> class codecvt< wchar_t, char, __mbstate_t>  : public __codecvt_abstract_base< wchar_t, char, __mbstate_t>  { 
# 404
friend class __cxx11::messages< wchar_t> ; 
# 408
public: typedef wchar_t intern_type; 
# 409
typedef char extern_type; 
# 410
typedef mbstate_t state_type; 
# 413
protected: __c_locale _M_c_locale_codecvt; 
# 416
public: static locale::id id; 
# 419
explicit codecvt(size_t __refs = 0); 
# 422
explicit codecvt(__c_locale __cloc, size_t __refs = 0); 
# 426
protected: virtual ~codecvt(); 
# 429
virtual result do_out(state_type & __state, const intern_type * __from, const intern_type * __from_end, const intern_type *& __from_next, extern_type * __to, extern_type * __to_end, extern_type *& __to_next) const; 
# 435
virtual result do_unshift(state_type & __state, extern_type * __to, extern_type * __to_end, extern_type *& __to_next) const; 
# 440
virtual result do_in(state_type & __state, const extern_type * __from, const extern_type * __from_end, const extern_type *& __from_next, intern_type * __to, intern_type * __to_end, intern_type *& __to_next) const; 
# 447
virtual int do_encoding() const throw(); 
# 450
virtual bool do_always_noconv() const throw(); 
# 453
virtual int do_length(state_type &, const extern_type * __from, const extern_type * __end, size_t __max) const; 
# 457
virtual int do_max_length() const throw(); 
# 458
}; 
# 468 "/usr/include/c++/8/bits/codecvt.h" 3
template<> class codecvt< char16_t, char, __mbstate_t>  : public __codecvt_abstract_base< char16_t, char, __mbstate_t>  { 
# 473
public: typedef char16_t intern_type; 
# 474
typedef char extern_type; 
# 475
typedef mbstate_t state_type; 
# 478
static locale::id id; 
# 481
explicit codecvt(size_t __refs = 0) : std::__codecvt_abstract_base< char16_t, char, __mbstate_t> (__refs) 
# 482
{ } 
# 486
protected: virtual ~codecvt(); 
# 489
virtual result do_out(state_type & __state, const intern_type * __from, const intern_type * __from_end, const intern_type *& __from_next, extern_type * __to, extern_type * __to_end, extern_type *& __to_next) const; 
# 495
virtual result do_unshift(state_type & __state, extern_type * __to, extern_type * __to_end, extern_type *& __to_next) const; 
# 500
virtual result do_in(state_type & __state, const extern_type * __from, const extern_type * __from_end, const extern_type *& __from_next, intern_type * __to, intern_type * __to_end, intern_type *& __to_next) const; 
# 507
virtual int do_encoding() const throw(); 
# 510
virtual bool do_always_noconv() const throw(); 
# 513
virtual int do_length(state_type &, const extern_type * __from, const extern_type * __end, size_t __max) const; 
# 517
virtual int do_max_length() const throw(); 
# 518
}; 
# 525
template<> class codecvt< char32_t, char, __mbstate_t>  : public __codecvt_abstract_base< char32_t, char, __mbstate_t>  { 
# 530
public: typedef char32_t intern_type; 
# 531
typedef char extern_type; 
# 532
typedef mbstate_t state_type; 
# 535
static locale::id id; 
# 538
explicit codecvt(size_t __refs = 0) : std::__codecvt_abstract_base< char32_t, char, __mbstate_t> (__refs) 
# 539
{ } 
# 543
protected: virtual ~codecvt(); 
# 546
virtual result do_out(state_type & __state, const intern_type * __from, const intern_type * __from_end, const intern_type *& __from_next, extern_type * __to, extern_type * __to_end, extern_type *& __to_next) const; 
# 552
virtual result do_unshift(state_type & __state, extern_type * __to, extern_type * __to_end, extern_type *& __to_next) const; 
# 557
virtual result do_in(state_type & __state, const extern_type * __from, const extern_type * __from_end, const extern_type *& __from_next, intern_type * __to, intern_type * __to_end, intern_type *& __to_next) const; 
# 564
virtual int do_encoding() const throw(); 
# 567
virtual bool do_always_noconv() const throw(); 
# 570
virtual int do_length(state_type &, const extern_type * __from, const extern_type * __end, size_t __max) const; 
# 574
virtual int do_max_length() const throw(); 
# 575
}; 
# 581
template< class _InternT, class _ExternT, class _StateT> 
# 582
class codecvt_byname : public codecvt< _InternT, _ExternT, _StateT>  { 
# 586
public: explicit codecvt_byname(const char *__s, std::size_t __refs = 0) : std::codecvt< _InternT, _ExternT, _StateT> (__refs) 
# 588
{ 
# 589
if ((__builtin_strcmp(__s, "C") != 0) && (__builtin_strcmp(__s, "POSIX") != 0)) 
# 591
{ 
# 592
(this->_S_destroy_c_locale((this->_M_c_locale_codecvt))); 
# 593
(this->_S_create_c_locale((this->_M_c_locale_codecvt), __s)); 
# 594
}  
# 595
} 
# 599
explicit codecvt_byname(const __cxx11::string &__s, std::size_t __refs = 0) : codecvt_byname(__s.c_str(), __refs) 
# 600
{ } 
# 605
protected: virtual ~codecvt_byname() { } 
# 606
}; 
# 610
template<> class codecvt_byname< char16_t, char, __mbstate_t>  : public codecvt< char16_t, char, __mbstate_t>  { 
# 615
public: explicit codecvt_byname(const char *, size_t __refs = 0) : std::codecvt< char16_t, char, __mbstate_t> (__refs) 
# 616
{ } 
# 619
explicit codecvt_byname(const __cxx11::string &__s, size_t __refs = 0) : codecvt_byname(__s.c_str(), __refs) 
# 620
{ } 
# 624
protected: virtual ~codecvt_byname() { } 
# 625
}; 
# 628
template<> class codecvt_byname< char32_t, char, __mbstate_t>  : public codecvt< char32_t, char, __mbstate_t>  { 
# 633
public: explicit codecvt_byname(const char *, size_t __refs = 0) : std::codecvt< char32_t, char, __mbstate_t> (__refs) 
# 634
{ } 
# 637
explicit codecvt_byname(const __cxx11::string &__s, size_t __refs = 0) : codecvt_byname(__s.c_str(), __refs) 
# 638
{ } 
# 642
protected: virtual ~codecvt_byname() { } 
# 643
}; 
# 649
extern template class codecvt_byname< char, char, __mbstate_t> ;
# 651
extern template const codecvt< char, char, __mbstate_t>  &use_facet< codecvt< char, char, __mbstate_t> > (const locale &);
# 655
extern template bool has_facet< codecvt< char, char, __mbstate_t> > (const locale &) throw();
# 660
extern template class codecvt_byname< wchar_t, char, __mbstate_t> ;
# 662
extern template const codecvt< wchar_t, char, __mbstate_t>  &use_facet< codecvt< wchar_t, char, __mbstate_t> > (const locale &);
# 666
extern template bool has_facet< codecvt< wchar_t, char, __mbstate_t> > (const locale &) throw();
# 679
}
# 38 "/usr/include/x86_64-linux-gnu/c++/8/bits/c++io.h" 3
namespace std __attribute((__visibility__("default"))) { 
# 42
typedef __gthread_mutex_t __c_lock; 
# 45
typedef FILE __c_file; 
# 48
}
# 44 "/usr/include/x86_64-linux-gnu/c++/8/bits/basic_file.h" 3
namespace std __attribute((__visibility__("default"))) { 
# 49
template< class _CharT> class __basic_file; 
# 54
template<> class __basic_file< char>  { 
# 57
__c_file *_M_cfile; 
# 60
bool _M_cfile_created; 
# 63
public: __basic_file(__c_lock * __lock = 0) throw(); 
# 66
__basic_file(std::__basic_file< char>  &&__rv, __c_lock * = 0) noexcept : _M_cfile(__rv._M_cfile), _M_cfile_created(__rv._M_cfile_created) 
# 68
{ 
# 69
(__rv._M_cfile) = (nullptr); 
# 70
(__rv._M_cfile_created) = false; 
# 71
} 
# 73
std::__basic_file< char>  &operator=(const std::__basic_file< char>  &) = delete;
# 74
std::__basic_file< char>  &operator=(std::__basic_file< char>  &&) = delete;
# 77
void swap(std::__basic_file< char>  &__f) noexcept 
# 78
{ 
# 79
std::swap(_M_cfile, __f._M_cfile); 
# 80
std::swap(_M_cfile_created, __f._M_cfile_created); 
# 81
} 
# 85
std::__basic_file< char>  *open(const char * __name, ios_base::openmode __mode, int __prot = 436); 
# 88
std::__basic_file< char>  *sys_open(__c_file * __file, ios_base::openmode); 
# 91
std::__basic_file< char>  *sys_open(int __fd, ios_base::openmode __mode) throw(); 
# 94
std::__basic_file< char>  *close(); 
# 96
__attribute((__pure__)) bool 
# 97
is_open() const throw(); 
# 99
__attribute((__pure__)) int 
# 100
fd() throw(); 
# 102
__attribute((__pure__)) __c_file *
# 103
file() throw(); 
# 105
~__basic_file(); 
# 108
streamsize xsputn(const char * __s, streamsize __n); 
# 111
streamsize xsputn_2(const char * __s1, streamsize __n1, const char * __s2, streamsize __n2); 
# 115
streamsize xsgetn(char * __s, streamsize __n); 
# 118
streamoff seekoff(streamoff __off, ios_base::seekdir __way) throw(); 
# 121
int sync(); 
# 124
streamsize showmanyc(); 
# 125
}; 
# 128
}
# 47 "/usr/include/c++/8/fstream" 3
namespace std __attribute((__visibility__("default"))) { 
# 79 "/usr/include/c++/8/fstream" 3
template< class _CharT, class _Traits> 
# 80
class basic_filebuf : public basic_streambuf< _CharT, _Traits>  { 
# 83
template< class _Tp> using __chk_state = __and_< is_copy_assignable< _Tp> , is_copy_constructible< _Tp> , is_default_constructible< _Tp> > ; 
# 88
static_assert((__chk_state< typename _Traits::state_type> ::value), "state_type must be CopyAssignable, CopyConstructible and DefaultConstructible");
# 92
static_assert((is_same< typename _Traits::pos_type, fpos< typename _Traits::state_type> > ::value), "pos_type must be fpos<state_type>");
# 98
public: typedef _CharT char_type; 
# 99
typedef _Traits traits_type; 
# 100
typedef typename _Traits::int_type int_type; 
# 101
typedef typename _Traits::pos_type pos_type; 
# 102
typedef typename _Traits::off_type off_type; 
# 104
typedef std::basic_streambuf< _CharT, _Traits>  __streambuf_type; 
# 105
typedef basic_filebuf __filebuf_type; 
# 106
typedef std::__basic_file< char>  __file_type; 
# 107
typedef typename _Traits::state_type __state_type; 
# 108
typedef codecvt< _CharT, char, typename _Traits::state_type>  __codecvt_type; 
# 110
friend class ios_base; 
# 115
protected: std::__c_lock _M_lock; 
# 118
__file_type _M_file; 
# 121
std::ios_base::openmode _M_mode; 
# 124
__state_type _M_state_beg; 
# 129
__state_type _M_state_cur; 
# 133
__state_type _M_state_last; 
# 136
char_type *_M_buf; 
# 143
std::size_t _M_buf_size; 
# 146
bool _M_buf_allocated; 
# 155 "/usr/include/c++/8/fstream" 3
bool _M_reading; 
# 156
bool _M_writing; 
# 164
char_type _M_pback; 
# 165
char_type *_M_pback_cur_save; 
# 166
char_type *_M_pback_end_save; 
# 167
bool _M_pback_init; 
# 171
const __codecvt_type *_M_codecvt; 
# 178
char *_M_ext_buf; 
# 183
std::streamsize _M_ext_buf_size; 
# 190
const char *_M_ext_next; 
# 191
char *_M_ext_end; 
# 199
void _M_create_pback() 
# 200
{ 
# 201
if (!(_M_pback_init)) 
# 202
{ 
# 203
(_M_pback_cur_save) = (this->gptr()); 
# 204
(_M_pback_end_save) = (this->egptr()); 
# 205
(this->setg(&(_M_pback), &(_M_pback), (&(_M_pback)) + 1)); 
# 206
(_M_pback_init) = true; 
# 207
}  
# 208
} 
# 216
void _M_destroy_pback() throw() 
# 217
{ 
# 218
if (_M_pback_init) 
# 219
{ 
# 221
(_M_pback_cur_save) += ((this->gptr()) != (this->eback())); 
# 222
(this->setg(_M_buf, _M_pback_cur_save, _M_pback_end_save)); 
# 223
(_M_pback_init) = false; 
# 224
}  
# 225
} 
# 235
public: basic_filebuf(); 
# 238
basic_filebuf(const basic_filebuf &) = delete;
# 239
basic_filebuf(basic_filebuf &&); 
# 246
virtual ~basic_filebuf() 
# 247
{ close(); } 
# 250
basic_filebuf &operator=(const basic_filebuf &) = delete;
# 251
basic_filebuf &operator=(basic_filebuf &&); 
# 252
void swap(basic_filebuf &); 
# 260
bool is_open() const throw() 
# 261
{ return (_M_file).is_open(); } 
# 305 "/usr/include/c++/8/fstream" 3
__filebuf_type *open(const char * __s, std::ios_base::openmode __mode); 
# 315 "/usr/include/c++/8/fstream" 3
__filebuf_type *open(const __cxx11::string &__s, std::ios_base::openmode __mode) 
# 316
{ return open(__s.c_str(), __mode); } 
# 345 "/usr/include/c++/8/fstream" 3
__filebuf_type *close(); 
# 349
protected: void _M_allocate_internal_buffer(); 
# 352
void _M_destroy_internal_buffer() throw(); 
# 356
virtual std::streamsize showmanyc(); 
# 364
virtual int_type underflow(); 
# 367
virtual int_type pbackfail(int_type __c = _Traits::eof()); 
# 377 "/usr/include/c++/8/fstream" 3
virtual int_type overflow(int_type __c = _Traits::eof()); 
# 382
bool _M_convert_to_external(char_type *, std::streamsize); 
# 397 "/usr/include/c++/8/fstream" 3
virtual __streambuf_type *setbuf(char_type * __s, std::streamsize __n); 
# 400
virtual pos_type seekoff(off_type __off, std::ios_base::seekdir __way, std::ios_base::openmode __mode = (std::ios_base::in | std::ios_base::out)); 
# 404
virtual pos_type seekpos(pos_type __pos, std::ios_base::openmode __mode = (std::ios_base::in | std::ios_base::out)); 
# 409
pos_type _M_seek(off_type __off, std::ios_base::seekdir __way, __state_type __state); 
# 412
int _M_get_ext_pos(__state_type & __state); 
# 415
virtual int sync(); 
# 418
virtual void imbue(const std::locale & __loc); 
# 421
virtual std::streamsize xsgetn(char_type * __s, std::streamsize __n); 
# 424
virtual std::streamsize xsputn(const char_type * __s, std::streamsize __n); 
# 428
bool _M_terminate_output(); 
# 443 "/usr/include/c++/8/fstream" 3
void _M_set_buffer(std::streamsize __off) 
# 444
{ 
# 445
const bool __testin = ((_M_mode) & std::ios_base::in); 
# 446
const bool __testout = (((_M_mode) & std::ios_base::out)) || (((_M_mode) & std::ios_base::app)); 
# 449
if (__testin && (__off > (0))) { 
# 450
(this->setg(_M_buf, _M_buf, (_M_buf) + __off)); } else { 
# 452
(this->setg(_M_buf, _M_buf, _M_buf)); }  
# 454
if (__testout && (__off == (0)) && ((_M_buf_size) > (1))) { 
# 455
(this->setp(_M_buf, ((_M_buf) + (_M_buf_size)) - 1)); } else { 
# 457
(this->setp(0, 0)); }  
# 458
} 
# 459
}; 
# 475 "/usr/include/c++/8/fstream" 3
template< class _CharT, class _Traits> 
# 476
class basic_ifstream : public basic_istream< _CharT, _Traits>  { 
# 480
public: typedef _CharT char_type; 
# 481
typedef _Traits traits_type; 
# 482
typedef typename _Traits::int_type int_type; 
# 483
typedef typename _Traits::pos_type pos_type; 
# 484
typedef typename _Traits::off_type off_type; 
# 487
typedef basic_filebuf< _CharT, _Traits>  __filebuf_type; 
# 488
typedef std::basic_istream< _CharT, _Traits>  __istream_type; 
# 491
private: __filebuf_type _M_filebuf; 
# 502 "/usr/include/c++/8/fstream" 3
public: basic_ifstream() : __istream_type(), _M_filebuf() 
# 503
{ (this->init(&(_M_filebuf))); } 
# 513 "/usr/include/c++/8/fstream" 3
explicit basic_ifstream(const char *__s, std::ios_base::openmode __mode = ios_base::in) : __istream_type(), _M_filebuf() 
# 515
{ 
# 516
(this->init(&(_M_filebuf))); 
# 517
(this->open(__s, __mode)); 
# 518
} 
# 529 "/usr/include/c++/8/fstream" 3
explicit basic_ifstream(const __cxx11::string &__s, std::ios_base::openmode 
# 530
__mode = ios_base::in) : __istream_type(), _M_filebuf() 
# 532
{ 
# 533
(this->init(&(_M_filebuf))); 
# 534
(this->open(__s, __mode)); 
# 535
} 
# 552 "/usr/include/c++/8/fstream" 3
basic_ifstream(const basic_ifstream &) = delete;
# 554
basic_ifstream(basic_ifstream &&__rhs) : __istream_type(std::move(__rhs)), _M_filebuf(std::move(__rhs._M_filebuf)) 
# 557
{ __istream_type::set_rdbuf(&(_M_filebuf)); } 
# 566 "/usr/include/c++/8/fstream" 3
~basic_ifstream() 
# 567
{ } 
# 573
basic_ifstream &operator=(const basic_ifstream &) = delete;
# 576
basic_ifstream &operator=(basic_ifstream &&__rhs) 
# 577
{ 
# 578
std::basic_istream< _CharT, _Traits> ::operator=(std::move(__rhs)); 
# 579
(_M_filebuf) = std::move(__rhs._M_filebuf); 
# 580
return *this; 
# 581
} 
# 584
void swap(basic_ifstream &__rhs) 
# 585
{ 
# 586
__istream_type::swap(__rhs); 
# 587
((_M_filebuf).swap(__rhs._M_filebuf)); 
# 588
} 
# 599 "/usr/include/c++/8/fstream" 3
__filebuf_type *rdbuf() const 
# 600
{ return const_cast< __filebuf_type *>(&(_M_filebuf)); } 
# 607
bool is_open() 
# 608
{ return ((_M_filebuf).is_open()); } 
# 613
bool is_open() const 
# 614
{ return ((_M_filebuf).is_open()); } 
# 625 "/usr/include/c++/8/fstream" 3
void open(const char *__s, std::ios_base::openmode __mode = ios_base::in) 
# 626
{ 
# 627
if (!((_M_filebuf).open(__s, (__mode | std::ios_base::in)))) { 
# 628
(this->setstate(ios_base::failbit)); } else { 
# 632
(this->clear()); }  
# 633
} 
# 645 "/usr/include/c++/8/fstream" 3
void open(const __cxx11::string &__s, std::ios_base::openmode __mode = ios_base::in) 
# 646
{ 
# 647
if (!((_M_filebuf).open(__s, (__mode | std::ios_base::in)))) { 
# 648
(this->setstate(ios_base::failbit)); } else { 
# 652
(this->clear()); }  
# 653
} 
# 678 "/usr/include/c++/8/fstream" 3
void close() 
# 679
{ 
# 680
if (!((_M_filebuf).close())) { 
# 681
(this->setstate(ios_base::failbit)); }  
# 682
} 
# 683
}; 
# 700 "/usr/include/c++/8/fstream" 3
template< class _CharT, class _Traits> 
# 701
class basic_ofstream : public basic_ostream< _CharT, _Traits>  { 
# 705
public: typedef _CharT char_type; 
# 706
typedef _Traits traits_type; 
# 707
typedef typename _Traits::int_type int_type; 
# 708
typedef typename _Traits::pos_type pos_type; 
# 709
typedef typename _Traits::off_type off_type; 
# 712
typedef basic_filebuf< _CharT, _Traits>  __filebuf_type; 
# 713
typedef std::basic_ostream< _CharT, _Traits>  __ostream_type; 
# 716
private: __filebuf_type _M_filebuf; 
# 727 "/usr/include/c++/8/fstream" 3
public: basic_ofstream() : __ostream_type(), _M_filebuf() 
# 728
{ (this->init(&(_M_filebuf))); } 
# 738 "/usr/include/c++/8/fstream" 3
explicit basic_ofstream(const char *__s, std::ios_base::openmode 
# 739
__mode = ios_base::out) : __ostream_type(), _M_filebuf() 
# 741
{ 
# 742
(this->init(&(_M_filebuf))); 
# 743
(this->open(__s, __mode)); 
# 744
} 
# 755 "/usr/include/c++/8/fstream" 3
explicit basic_ofstream(const __cxx11::string &__s, std::ios_base::openmode 
# 756
__mode = ios_base::out) : __ostream_type(), _M_filebuf() 
# 758
{ 
# 759
(this->init(&(_M_filebuf))); 
# 760
(this->open(__s, __mode)); 
# 761
} 
# 778 "/usr/include/c++/8/fstream" 3
basic_ofstream(const basic_ofstream &) = delete;
# 780
basic_ofstream(basic_ofstream &&__rhs) : __ostream_type(std::move(__rhs)), _M_filebuf(std::move(__rhs._M_filebuf)) 
# 783
{ __ostream_type::set_rdbuf(&(_M_filebuf)); } 
# 792 "/usr/include/c++/8/fstream" 3
~basic_ofstream() 
# 793
{ } 
# 799
basic_ofstream &operator=(const basic_ofstream &) = delete;
# 802
basic_ofstream &operator=(basic_ofstream &&__rhs) 
# 803
{ 
# 804
std::basic_ostream< _CharT, _Traits> ::operator=(std::move(__rhs)); 
# 805
(_M_filebuf) = std::move(__rhs._M_filebuf); 
# 806
return *this; 
# 807
} 
# 810
void swap(basic_ofstream &__rhs) 
# 811
{ 
# 812
__ostream_type::swap(__rhs); 
# 813
((_M_filebuf).swap(__rhs._M_filebuf)); 
# 814
} 
# 825 "/usr/include/c++/8/fstream" 3
__filebuf_type *rdbuf() const 
# 826
{ return const_cast< __filebuf_type *>(&(_M_filebuf)); } 
# 833
bool is_open() 
# 834
{ return ((_M_filebuf).is_open()); } 
# 839
bool is_open() const 
# 840
{ return ((_M_filebuf).is_open()); } 
# 851 "/usr/include/c++/8/fstream" 3
void open(const char *__s, std::ios_base::openmode __mode = ios_base::out) 
# 852
{ 
# 853
if (!((_M_filebuf).open(__s, (__mode | std::ios_base::out)))) { 
# 854
(this->setstate(ios_base::failbit)); } else { 
# 858
(this->clear()); }  
# 859
} 
# 871 "/usr/include/c++/8/fstream" 3
void open(const __cxx11::string &__s, std::ios_base::openmode __mode = ios_base::out) 
# 872
{ 
# 873
if (!((_M_filebuf).open(__s, (__mode | std::ios_base::out)))) { 
# 874
(this->setstate(ios_base::failbit)); } else { 
# 878
(this->clear()); }  
# 879
} 
# 904 "/usr/include/c++/8/fstream" 3
void close() 
# 905
{ 
# 906
if (!((_M_filebuf).close())) { 
# 907
(this->setstate(ios_base::failbit)); }  
# 908
} 
# 909
}; 
# 926 "/usr/include/c++/8/fstream" 3
template< class _CharT, class _Traits> 
# 927
class basic_fstream : public basic_iostream< _CharT, _Traits>  { 
# 931
public: typedef _CharT char_type; 
# 932
typedef _Traits traits_type; 
# 933
typedef typename _Traits::int_type int_type; 
# 934
typedef typename _Traits::pos_type pos_type; 
# 935
typedef typename _Traits::off_type off_type; 
# 938
typedef basic_filebuf< _CharT, _Traits>  __filebuf_type; 
# 939
typedef std::basic_ios< _CharT, _Traits>  __ios_type; 
# 940
typedef std::basic_iostream< _CharT, _Traits>  __iostream_type; 
# 943
private: __filebuf_type _M_filebuf; 
# 954 "/usr/include/c++/8/fstream" 3
public: basic_fstream() : __iostream_type(), _M_filebuf() 
# 956
{ (this->init(&(_M_filebuf))); } 
# 964
explicit basic_fstream(const char *__s, std::ios_base::openmode 
# 965
__mode = (std::ios_base::in | std::ios_base::out)) : __iostream_type(0), _M_filebuf() 
# 967
{ 
# 968
(this->init(&(_M_filebuf))); 
# 969
(this->open(__s, __mode)); 
# 970
} 
# 979
explicit basic_fstream(const __cxx11::string &__s, std::ios_base::openmode 
# 980
__mode = (std::ios_base::in | std::ios_base::out)) : __iostream_type(0), _M_filebuf() 
# 982
{ 
# 983
(this->init(&(_M_filebuf))); 
# 984
(this->open(__s, __mode)); 
# 985
} 
# 1000 "/usr/include/c++/8/fstream" 3
basic_fstream(const basic_fstream &) = delete;
# 1002
basic_fstream(basic_fstream &&__rhs) : __iostream_type(std::move(__rhs)), _M_filebuf(std::move(__rhs._M_filebuf)) 
# 1005
{ __iostream_type::set_rdbuf(&(_M_filebuf)); } 
# 1014 "/usr/include/c++/8/fstream" 3
~basic_fstream() 
# 1015
{ } 
# 1021
basic_fstream &operator=(const basic_fstream &) = delete;
# 1024
basic_fstream &operator=(basic_fstream &&__rhs) 
# 1025
{ 
# 1026
std::basic_iostream< _CharT, _Traits> ::operator=(std::move(__rhs)); 
# 1027
(_M_filebuf) = std::move(__rhs._M_filebuf); 
# 1028
return *this; 
# 1029
} 
# 1032
void swap(basic_fstream &__rhs) 
# 1033
{ 
# 1034
__iostream_type::swap(__rhs); 
# 1035
((_M_filebuf).swap(__rhs._M_filebuf)); 
# 1036
} 
# 1047 "/usr/include/c++/8/fstream" 3
__filebuf_type *rdbuf() const 
# 1048
{ return const_cast< __filebuf_type *>(&(_M_filebuf)); } 
# 1055
bool is_open() 
# 1056
{ return ((_M_filebuf).is_open()); } 
# 1061
bool is_open() const 
# 1062
{ return ((_M_filebuf).is_open()); } 
# 1073 "/usr/include/c++/8/fstream" 3
void open(const char *__s, std::ios_base::openmode 
# 1074
__mode = (std::ios_base::in | std::ios_base::out)) 
# 1075
{ 
# 1076
if (!((_M_filebuf).open(__s, __mode))) { 
# 1077
(this->setstate(ios_base::failbit)); } else { 
# 1081
(this->clear()); }  
# 1082
} 
# 1094 "/usr/include/c++/8/fstream" 3
void open(const __cxx11::string &__s, std::ios_base::openmode 
# 1095
__mode = (std::ios_base::in | std::ios_base::out)) 
# 1096
{ 
# 1097
if (!((_M_filebuf).open(__s, __mode))) { 
# 1098
(this->setstate(ios_base::failbit)); } else { 
# 1102
(this->clear()); }  
# 1103
} 
# 1129 "/usr/include/c++/8/fstream" 3
void close() 
# 1130
{ 
# 1131
if (!((_M_filebuf).close())) { 
# 1132
(this->setstate(ios_base::failbit)); }  
# 1133
} 
# 1134
}; 
# 1138
template< class _CharT, class _Traits> inline void 
# 1140
swap(basic_filebuf< _CharT, _Traits>  &__x, basic_filebuf< _CharT, _Traits>  &
# 1141
__y) 
# 1142
{ (__x.swap(__y)); } 
# 1145
template< class _CharT, class _Traits> inline void 
# 1147
swap(basic_ifstream< _CharT, _Traits>  &__x, basic_ifstream< _CharT, _Traits>  &
# 1148
__y) 
# 1149
{ (__x.swap(__y)); } 
# 1152
template< class _CharT, class _Traits> inline void 
# 1154
swap(basic_ofstream< _CharT, _Traits>  &__x, basic_ofstream< _CharT, _Traits>  &
# 1155
__y) 
# 1156
{ (__x.swap(__y)); } 
# 1159
template< class _CharT, class _Traits> inline void 
# 1161
swap(basic_fstream< _CharT, _Traits>  &__x, basic_fstream< _CharT, _Traits>  &
# 1162
__y) 
# 1163
{ (__x.swap(__y)); } 
# 1167
}
# 42 "/usr/include/c++/8/bits/fstream.tcc" 3
namespace std __attribute((__visibility__("default"))) { 
# 46
template< class _CharT, class _Traits> void 
# 49
basic_filebuf< _CharT, _Traits> ::_M_allocate_internal_buffer() 
# 50
{ 
# 53
if ((!(_M_buf_allocated)) && (!(_M_buf))) 
# 54
{ 
# 55
(_M_buf) = (new char_type [_M_buf_size]); 
# 56
(_M_buf_allocated) = true; 
# 57
}  
# 58
} 
# 60
template< class _CharT, class _Traits> void 
# 63
basic_filebuf< _CharT, _Traits> ::_M_destroy_internal_buffer() throw() 
# 64
{ 
# 65
if (_M_buf_allocated) 
# 66
{ 
# 67
delete [] (_M_buf); 
# 68
(_M_buf) = 0; 
# 69
(_M_buf_allocated) = false; 
# 70
}  
# 71
delete [] (_M_ext_buf); 
# 72
(_M_ext_buf) = (0); 
# 73
(_M_ext_buf_size) = (0); 
# 74
(_M_ext_next) = (0); 
# 75
(_M_ext_end) = (0); 
# 76
} 
# 78
template< class _CharT, class _Traits> 
# 80
basic_filebuf< _CharT, _Traits> ::basic_filebuf() : __streambuf_type(), _M_lock(), _M_file(&(_M_lock)), _M_mode(((std::ios_base::openmode)0)), _M_state_beg(), _M_state_cur(), _M_state_last(), _M_buf((0)), _M_buf_size((8192)), _M_buf_allocated(false), _M_reading(false), _M_writing(false), _M_pback(), _M_pback_cur_save((0)), _M_pback_end_save((0)), _M_pback_init(false), _M_codecvt((0)), _M_ext_buf((0)), _M_ext_buf_size((0)), _M_ext_next((0)), _M_ext_end((0)) 
# 87
{ 
# 88
if (has_facet< __codecvt_type> ((this->_M_buf_locale))) { 
# 89
(_M_codecvt) = (&use_facet< __codecvt_type> ((this->_M_buf_locale))); }  
# 90
} 
# 93
template< class _CharT, class _Traits> 
# 95
basic_filebuf< _CharT, _Traits> ::basic_filebuf(basic_filebuf &&__rhs) : __streambuf_type(__rhs), _M_lock(), _M_file(std::move(__rhs._M_file), &(_M_lock)), _M_mode(std::__exchange(__rhs._M_mode, (std::ios_base::openmode)0)), _M_state_beg(std::move(__rhs._M_state_beg)), _M_state_cur(std::move(__rhs._M_state_cur)), _M_state_last(std::move(__rhs._M_state_last)), _M_buf(std::__exchange(__rhs._M_buf, nullptr)), _M_buf_size(std::__exchange(__rhs._M_buf_size, 1)), _M_buf_allocated(std::__exchange(__rhs._M_buf_allocated, false)), _M_reading(std::__exchange(__rhs._M_reading, false)), _M_writing(std::__exchange(__rhs._M_writing, false)), _M_pback(__rhs._M_pback), _M_pback_cur_save(std::__exchange(__rhs._M_pback_cur_save, nullptr)), _M_pback_end_save(std::__exchange(__rhs._M_pback_end_save, nullptr)), _M_pback_init(std::__exchange(__rhs._M_pback_init, false)), _M_codecvt(__rhs._M_codecvt), _M_ext_buf(std::__exchange(__rhs._M_ext_buf, nullptr)), _M_ext_buf_size(std::__exchange(__rhs._M_ext_buf_size, 0)), _M_ext_next(std::__exchange(__rhs._M_ext_next, nullptr)), _M_ext_end(std::__exchange(__rhs._M_ext_end, nullptr)) 
# 116
{ 
# 117
__rhs._M_set_buffer(-1); 
# 118
(__rhs._M_state_last) = ((__rhs._M_state_cur) = (__rhs._M_state_beg)); 
# 119
} 
# 121
template< class _CharT, class _Traits> basic_filebuf< _CharT, _Traits>  &
# 124
basic_filebuf< _CharT, _Traits> ::operator=(basic_filebuf &&__rhs) 
# 125
{ 
# 126
close(); 
# 127
std::basic_streambuf< _CharT, _Traits> ::operator=(__rhs); 
# 128
(_M_file).swap(__rhs._M_file); 
# 129
(_M_mode) = std::__exchange(__rhs._M_mode, (std::ios_base::openmode)0); 
# 130
(_M_state_beg) = std::move(__rhs._M_state_beg); 
# 131
(_M_state_cur) = std::move(__rhs._M_state_cur); 
# 132
(_M_state_last) = std::move(__rhs._M_state_last); 
# 133
(_M_buf) = std::__exchange(__rhs._M_buf, nullptr); 
# 134
(_M_buf_size) = std::__exchange(__rhs._M_buf_size, 1); 
# 135
(_M_buf_allocated) = std::__exchange(__rhs._M_buf_allocated, false); 
# 136
(_M_ext_buf) = std::__exchange(__rhs._M_ext_buf, nullptr); 
# 137
(_M_ext_buf_size) = std::__exchange(__rhs._M_ext_buf_size, 0); 
# 138
(_M_ext_next) = std::__exchange(__rhs._M_ext_next, nullptr); 
# 139
(_M_ext_end) = std::__exchange(__rhs._M_ext_end, nullptr); 
# 140
(_M_reading) = std::__exchange(__rhs._M_reading, false); 
# 141
(_M_writing) = std::__exchange(__rhs._M_writing, false); 
# 142
(_M_pback_cur_save) = std::__exchange(__rhs._M_pback_cur_save, nullptr); 
# 143
(_M_pback_end_save) = std::__exchange(__rhs._M_pback_end_save, nullptr); 
# 144
(_M_pback_init) = std::__exchange(__rhs._M_pback_init, false); 
# 145
__rhs._M_set_buffer(-1); 
# 146
(__rhs._M_state_last) = ((__rhs._M_state_cur) = (__rhs._M_state_beg)); 
# 147
return *this; 
# 148
} 
# 150
template< class _CharT, class _Traits> void 
# 153
basic_filebuf< _CharT, _Traits> ::swap(basic_filebuf &__rhs) 
# 154
{ 
# 155
__streambuf_type::swap(__rhs); 
# 156
(_M_file).swap(__rhs._M_file); 
# 157
std::swap(_M_mode, __rhs._M_mode); 
# 158
std::swap(_M_state_beg, __rhs._M_state_beg); 
# 159
std::swap(_M_state_cur, __rhs._M_state_cur); 
# 160
std::swap(_M_state_last, __rhs._M_state_last); 
# 161
std::swap(_M_buf, __rhs._M_buf); 
# 162
std::swap(_M_buf_size, __rhs._M_buf_size); 
# 163
std::swap(_M_buf_allocated, __rhs._M_buf_allocated); 
# 164
std::swap(_M_ext_buf, __rhs._M_ext_buf); 
# 165
std::swap(_M_ext_buf_size, __rhs._M_ext_buf_size); 
# 166
std::swap(_M_ext_next, __rhs._M_ext_next); 
# 167
std::swap(_M_ext_end, __rhs._M_ext_end); 
# 168
std::swap(_M_reading, __rhs._M_reading); 
# 169
std::swap(_M_writing, __rhs._M_writing); 
# 170
std::swap(_M_pback_cur_save, __rhs._M_pback_cur_save); 
# 171
std::swap(_M_pback_end_save, __rhs._M_pback_end_save); 
# 172
std::swap(_M_pback_init, __rhs._M_pback_init); 
# 173
} 
# 176
template< class _CharT, class _Traits> typename basic_filebuf< _CharT, _Traits> ::__filebuf_type *
# 179
basic_filebuf< _CharT, _Traits> ::open(const char *__s, std::ios_base::openmode __mode) 
# 180
{ 
# 181
__filebuf_type *__ret = (0); 
# 182
if (!is_open()) 
# 183
{ 
# 184
(_M_file).open(__s, __mode); 
# 185
if (is_open()) 
# 186
{ 
# 187
_M_allocate_internal_buffer(); 
# 188
(_M_mode) = __mode; 
# 191
(_M_reading) = false; 
# 192
(_M_writing) = false; 
# 193
_M_set_buffer(-1); 
# 196
(_M_state_last) = ((_M_state_cur) = (_M_state_beg)); 
# 199
if (((__mode & std::ios_base::ate)) && (seekoff(0, std::ios_base::end, __mode) == ((pos_type)((off_type)(-1))))) { 
# 202
close(); } else { 
# 204
__ret = this; }  
# 205
}  
# 206
}  
# 207
return __ret; 
# 208
} 
# 210
template< class _CharT, class _Traits> typename basic_filebuf< _CharT, _Traits> ::__filebuf_type *
# 213
basic_filebuf< _CharT, _Traits> ::close() 
# 214
{ 
# 215
if (!is_open()) { 
# 216
return 0; }  
# 218
bool __testfail = false; 
# 219
{ 
# 221
struct __close_sentry { 
# 223
basic_filebuf *__fb; 
# 224
__close_sentry(basic_filebuf *__fbi) : __fb(__fbi) { } 
# 225
~__close_sentry() 
# 226
{ 
# 227
((__fb)->_M_mode) = ((std::ios_base::openmode)0); 
# 228
((__fb)->_M_pback_init) = false; 
# 229
(__fb)->_M_destroy_internal_buffer(); 
# 230
((__fb)->_M_reading) = false; 
# 231
((__fb)->_M_writing) = false; 
# 232
(__fb)->_M_set_buffer(-1); 
# 233
((__fb)->_M_state_last) = (((__fb)->_M_state_cur) = ((__fb)->_M_state_beg)); 
# 234
} 
# 235
} __cs(this); 
# 237
try 
# 238
{ 
# 239
if (!_M_terminate_output()) { 
# 240
__testfail = true; }  
# 241
} 
# 242
catch (__cxxabiv1::__forced_unwind &) 
# 243
{ 
# 244
(_M_file).close(); 
# 245
throw; 
# 246
} 
# 247
catch (...) 
# 248
{ __testfail = true; }  
# 249
} 
# 251
if (!((_M_file).close())) { 
# 252
__testfail = true; }  
# 254
if (__testfail) { 
# 255
return 0; } else { 
# 257
return this; }  
# 258
} 
# 260
template< class _CharT, class _Traits> streamsize 
# 263
basic_filebuf< _CharT, _Traits> ::showmanyc() 
# 264
{ 
# 265
std::streamsize __ret = (-1); 
# 266
const bool __testin = ((_M_mode) & std::ios_base::in); 
# 267
if (__testin && is_open()) 
# 268
{ 
# 271
__ret = ((this->egptr()) - (this->gptr())); 
# 279
if ((__check_facet(_M_codecvt).encoding()) >= 0) { 
# 281
__ret += ((_M_file).showmanyc() / ((_M_codecvt)->max_length())); }  
# 282
}  
# 283
return __ret; 
# 284
} 
# 286
template< class _CharT, class _Traits> typename basic_filebuf< _CharT, _Traits> ::int_type 
# 289
basic_filebuf< _CharT, _Traits> ::underflow() 
# 290
{ 
# 291
int_type __ret = traits_type::eof(); 
# 292
const bool __testin = ((_M_mode) & std::ios_base::in); 
# 293
if (__testin) 
# 294
{ 
# 295
if (_M_writing) 
# 296
{ 
# 297
if (overflow() == traits_type::eof()) { 
# 298
return __ret; }  
# 299
_M_set_buffer(-1); 
# 300
(_M_writing) = false; 
# 301
}  
# 305
_M_destroy_pback(); 
# 307
if ((this->gptr()) < (this->egptr())) { 
# 308
return traits_type::to_int_type(*(this->gptr())); }  
# 311
const std::size_t __buflen = ((_M_buf_size) > (1)) ? (_M_buf_size) - (1) : (1); 
# 314
bool __got_eof = false; 
# 316
std::streamsize __ilen = (0); 
# 317
std::codecvt_base::result __r = codecvt_base::ok; 
# 318
if ((__check_facet(_M_codecvt).always_noconv())) 
# 319
{ 
# 320
__ilen = (_M_file).xsgetn(reinterpret_cast< char *>((this->eback())), __buflen); 
# 322
if (__ilen == (0)) { 
# 323
__got_eof = true; }  
# 324
} else 
# 326
{ 
# 329
const int __enc = ((_M_codecvt)->encoding()); 
# 330
std::streamsize __blen; 
# 331
std::streamsize __rlen; 
# 332
if (__enc > 0) { 
# 333
__blen = (__rlen = (__buflen * __enc)); } else 
# 335
{ 
# 336
__blen = ((__buflen + ((_M_codecvt)->max_length())) - 1); 
# 337
__rlen = __buflen; 
# 338
}  
# 339
const std::streamsize __remainder = (_M_ext_end) - (_M_ext_next); 
# 340
__rlen = ((__rlen > __remainder) ? __rlen - __remainder : (0)); 
# 344
if ((_M_reading) && ((this->egptr()) == (this->eback())) && __remainder) { 
# 345
__rlen = (0); }  
# 349
if ((_M_ext_buf_size) < __blen) 
# 350
{ 
# 351
char *__buf = new char [__blen]; 
# 352
if (__remainder) { 
# 353
__builtin_memcpy(__buf, _M_ext_next, __remainder); }  
# 355
delete [] (_M_ext_buf); 
# 356
(_M_ext_buf) = __buf; 
# 357
(_M_ext_buf_size) = __blen; 
# 358
} else { 
# 359
if (__remainder) { 
# 360
__builtin_memmove(_M_ext_buf, _M_ext_next, __remainder); }  }  
# 362
(_M_ext_next) = (_M_ext_buf); 
# 363
(_M_ext_end) = ((_M_ext_buf) + __remainder); 
# 364
(_M_state_last) = (_M_state_cur); 
# 366
do 
# 367
{ 
# 368
if (__rlen > (0)) 
# 369
{ 
# 373
if ((((_M_ext_end) - (_M_ext_buf)) + __rlen) > (_M_ext_buf_size)) 
# 374
{ 
# 375
__throw_ios_failure("basic_filebuf::underflow codecvt::max_length() is not valid"); 
# 378
}  
# 379
std::streamsize __elen = (_M_file).xsgetn(_M_ext_end, __rlen); 
# 380
if (__elen == (0)) { 
# 381
__got_eof = true; } else { 
# 382
if (__elen == (-1)) { 
# 383
break; }  }  
# 384
(_M_ext_end) += __elen; 
# 385
}  
# 387
char_type *__iend = (this->eback()); 
# 388
if ((_M_ext_next) < (_M_ext_end)) { 
# 389
__r = ((_M_codecvt)->in(_M_state_cur, _M_ext_next, _M_ext_end, _M_ext_next, (this->eback()), (this->eback()) + __buflen, __iend)); }  
# 393
if (__r == (codecvt_base::noconv)) 
# 394
{ 
# 395
std::size_t __avail = (_M_ext_end) - (_M_ext_buf); 
# 396
__ilen = (std::min(__avail, __buflen)); 
# 397
traits_type::copy((this->eback()), reinterpret_cast< char_type *>(_M_ext_buf), __ilen); 
# 400
(_M_ext_next) = ((_M_ext_buf) + __ilen); 
# 401
} else { 
# 403
__ilen = (__iend - (this->eback())); }  
# 408
if (__r == (codecvt_base::error)) { 
# 409
break; }  
# 411
__rlen = (1); 
# 412
} 
# 413
while ((__ilen == (0)) && (!__got_eof)); 
# 414
}  
# 416
if (__ilen > (0)) 
# 417
{ 
# 418
_M_set_buffer(__ilen); 
# 419
(_M_reading) = true; 
# 420
__ret = traits_type::to_int_type(*(this->gptr())); 
# 421
} else { 
# 422
if (__got_eof) 
# 423
{ 
# 427
_M_set_buffer(-1); 
# 428
(_M_reading) = false; 
# 431
if (__r == (codecvt_base::partial)) { 
# 432
__throw_ios_failure("basic_filebuf::underflow incomplete character in file"); }  
# 434
} else { 
# 435
if (__r == (codecvt_base::error)) { 
# 436
__throw_ios_failure("basic_filebuf::underflow invalid byte sequence in file"); } else { 
# 439
__throw_ios_failure("basic_filebuf::underflow error reading the file"); }  }  }  
# 441
}  
# 442
return __ret; 
# 443
} 
# 445
template< class _CharT, class _Traits> typename basic_filebuf< _CharT, _Traits> ::int_type 
# 448
basic_filebuf< _CharT, _Traits> ::pbackfail(int_type __i) 
# 449
{ 
# 450
int_type __ret = traits_type::eof(); 
# 451
const bool __testin = ((_M_mode) & std::ios_base::in); 
# 452
if (__testin) 
# 453
{ 
# 454
if (_M_writing) 
# 455
{ 
# 456
if (overflow() == traits_type::eof()) { 
# 457
return __ret; }  
# 458
_M_set_buffer(-1); 
# 459
(_M_writing) = false; 
# 460
}  
# 463
const bool __testpb = _M_pback_init; 
# 464
const bool __testeof = traits_type::eq_int_type(__i, __ret); 
# 465
int_type __tmp; 
# 466
if ((this->eback()) < (this->gptr())) 
# 467
{ 
# 468
(this->gbump(-1)); 
# 469
__tmp = traits_type::to_int_type(*(this->gptr())); 
# 470
} else { 
# 471
if (seekoff(-1, std::ios_base::cur) != ((pos_type)((off_type)(-1)))) 
# 472
{ 
# 473
__tmp = underflow(); 
# 474
if (traits_type::eq_int_type(__tmp, __ret)) { 
# 475
return __ret; }  
# 476
} else 
# 478
{ 
# 484
return __ret; 
# 485
}  }  
# 489
if ((!__testeof) && traits_type::eq_int_type(__i, __tmp)) { 
# 490
__ret = __i; } else { 
# 491
if (__testeof) { 
# 492
__ret = traits_type::not_eof(__i); } else { 
# 493
if (!__testpb) 
# 494
{ 
# 495
_M_create_pback(); 
# 496
(_M_reading) = true; 
# 497
(*(this->gptr())) = traits_type::to_char_type(__i); 
# 498
__ret = __i; 
# 499
}  }  }  
# 500
}  
# 501
return __ret; 
# 502
} 
# 504
template< class _CharT, class _Traits> typename basic_filebuf< _CharT, _Traits> ::int_type 
# 507
basic_filebuf< _CharT, _Traits> ::overflow(int_type __c) 
# 508
{ 
# 509
int_type __ret = traits_type::eof(); 
# 510
const bool __testeof = traits_type::eq_int_type(__c, __ret); 
# 511
const bool __testout = (((_M_mode) & std::ios_base::out)) || (((_M_mode) & std::ios_base::app)); 
# 513
if (__testout) 
# 514
{ 
# 515
if (_M_reading) 
# 516
{ 
# 517
_M_destroy_pback(); 
# 518
const int __gptr_off = _M_get_ext_pos(_M_state_last); 
# 519
if (_M_seek(__gptr_off, ios_base::cur, _M_state_last) == ((pos_type)((off_type)(-1)))) { 
# 521
return __ret; }  
# 522
}  
# 523
if ((this->pbase()) < (this->pptr())) 
# 524
{ 
# 526
if (!__testeof) 
# 527
{ 
# 528
(*(this->pptr())) = traits_type::to_char_type(__c); 
# 529
(this->pbump(1)); 
# 530
}  
# 534
if (_M_convert_to_external((this->pbase()), (this->pptr()) - (this->pbase()))) 
# 536
{ 
# 537
_M_set_buffer(0); 
# 538
__ret = traits_type::not_eof(__c); 
# 539
}  
# 540
} else { 
# 541
if ((_M_buf_size) > (1)) 
# 542
{ 
# 546
_M_set_buffer(0); 
# 547
(_M_writing) = true; 
# 548
if (!__testeof) 
# 549
{ 
# 550
(*(this->pptr())) = traits_type::to_char_type(__c); 
# 551
(this->pbump(1)); 
# 552
}  
# 553
__ret = traits_type::not_eof(__c); 
# 554
} else 
# 556
{ 
# 558
char_type __conv = traits_type::to_char_type(__c); 
# 559
if (__testeof || _M_convert_to_external(&__conv, 1)) 
# 560
{ 
# 561
(_M_writing) = true; 
# 562
__ret = traits_type::not_eof(__c); 
# 563
}  
# 564
}  }  
# 565
}  
# 566
return __ret; 
# 567
} 
# 569
template< class _CharT, class _Traits> bool 
# 572
basic_filebuf< _CharT, _Traits> ::_M_convert_to_external(_CharT *__ibuf, std::streamsize __ilen) 
# 573
{ 
# 575
std::streamsize __elen; 
# 576
std::streamsize __plen; 
# 577
if ((__check_facet(_M_codecvt).always_noconv())) 
# 578
{ 
# 579
__elen = (_M_file).xsputn(reinterpret_cast< char *>(__ibuf), __ilen); 
# 580
__plen = __ilen; 
# 581
} else 
# 583
{ 
# 586
std::streamsize __blen = __ilen * ((_M_codecvt)->max_length()); 
# 587
char *__buf = static_cast< char *>(__builtin_alloca(__blen)); 
# 589
char *__bend; 
# 590
const char_type *__iend; 
# 591
std::codecvt_base::result __r; 
# 592
__r = ((_M_codecvt)->out(_M_state_cur, __ibuf, __ibuf + __ilen, __iend, __buf, __buf + __blen, __bend)); 
# 595
if ((__r == (codecvt_base::ok)) || (__r == (codecvt_base::partial))) { 
# 596
__blen = (__bend - __buf); } else { 
# 597
if (__r == (codecvt_base::noconv)) 
# 598
{ 
# 600
__buf = (reinterpret_cast< char *>(__ibuf)); 
# 601
__blen = __ilen; 
# 602
} else { 
# 604
__throw_ios_failure("basic_filebuf::_M_convert_to_external conversion error"); }  }  
# 607
__elen = (_M_file).xsputn(__buf, __blen); 
# 608
__plen = __blen; 
# 611
if ((__r == (codecvt_base::partial)) && (__elen == __plen)) 
# 612
{ 
# 613
const char_type *__iresume = __iend; 
# 614
std::streamsize __rlen = (this->pptr()) - __iend; 
# 615
__r = ((_M_codecvt)->out(_M_state_cur, __iresume, __iresume + __rlen, __iend, __buf, __buf + __blen, __bend)); 
# 618
if (__r != (codecvt_base::error)) 
# 619
{ 
# 620
__rlen = (__bend - __buf); 
# 621
__elen = (_M_file).xsputn(__buf, __rlen); 
# 622
__plen = __rlen; 
# 623
} else { 
# 625
__throw_ios_failure("basic_filebuf::_M_convert_to_external conversion error"); }  
# 627
}  
# 628
}  
# 629
return __elen == __plen; 
# 630
} 
# 632
template< class _CharT, class _Traits> streamsize 
# 635
basic_filebuf< _CharT, _Traits> ::xsgetn(_CharT *__s, std::streamsize __n) 
# 636
{ 
# 638
std::streamsize __ret = (0); 
# 639
if (_M_pback_init) 
# 640
{ 
# 641
if ((__n > (0)) && ((this->gptr()) == (this->eback()))) 
# 642
{ 
# 643
(*(__s++)) = (*(this->gptr())); 
# 644
(this->gbump(1)); 
# 645
__ret = (1); 
# 646
--__n; 
# 647
}  
# 648
_M_destroy_pback(); 
# 649
} else { 
# 650
if (_M_writing) 
# 651
{ 
# 652
if (overflow() == traits_type::eof()) { 
# 653
return __ret; }  
# 654
_M_set_buffer(-1); 
# 655
(_M_writing) = false; 
# 656
}  }  
# 661
const bool __testin = ((_M_mode) & std::ios_base::in); 
# 662
const std::streamsize __buflen = ((_M_buf_size) > (1)) ? (_M_buf_size) - (1) : (1); 
# 664
if ((__n > __buflen) && (__check_facet(_M_codecvt).always_noconv()) && __testin) 
# 666
{ 
# 668
const std::streamsize __avail = (this->egptr()) - (this->gptr()); 
# 669
if (__avail != (0)) 
# 670
{ 
# 671
traits_type::copy(__s, (this->gptr()), __avail); 
# 672
__s += __avail; 
# 673
(this->setg((this->eback()), (this->gptr()) + __avail, (this->egptr()))); 
# 674
__ret += __avail; 
# 675
__n -= __avail; 
# 676
}  
# 680
std::streamsize __len; 
# 681
for (; ;) 
# 682
{ 
# 683
__len = (_M_file).xsgetn(reinterpret_cast< char *>(__s), __n); 
# 684
if (__len == (-1)) { 
# 685
__throw_ios_failure("basic_filebuf::xsgetn error reading the file"); }  
# 687
if (__len == (0)) { 
# 688
break; }  
# 690
__n -= __len; 
# 691
__ret += __len; 
# 692
if (__n == (0)) { 
# 693
break; }  
# 695
__s += __len; 
# 696
}  
# 698
if (__n == (0)) 
# 699
{ 
# 701
(_M_reading) = true; 
# 702
} else { 
# 703
if (__len == (0)) 
# 704
{ 
# 708
_M_set_buffer(-1); 
# 709
(_M_reading) = false; 
# 710
}  }  
# 711
} else { 
# 713
__ret += __streambuf_type::xsgetn(__s, __n); }  
# 715
return __ret; 
# 716
} 
# 718
template< class _CharT, class _Traits> streamsize 
# 721
basic_filebuf< _CharT, _Traits> ::xsputn(const _CharT *__s, std::streamsize __n) 
# 722
{ 
# 723
std::streamsize __ret = (0); 
# 727
const bool __testout = (((_M_mode) & std::ios_base::out)) || (((_M_mode) & std::ios_base::app)); 
# 729
if ((__check_facet(_M_codecvt).always_noconv()) && __testout && (!(_M_reading))) 
# 731
{ 
# 733
const std::streamsize __chunk = (1UL << 10); 
# 734
std::streamsize __bufavail = (this->epptr()) - (this->pptr()); 
# 737
if ((!(_M_writing)) && ((_M_buf_size) > (1))) { 
# 738
__bufavail = ((_M_buf_size) - (1)); }  
# 740
const std::streamsize __limit = std::min(__chunk, __bufavail); 
# 741
if (__n >= __limit) 
# 742
{ 
# 743
const std::streamsize __buffill = (this->pptr()) - (this->pbase()); 
# 744
const char *__buf = reinterpret_cast< const char *>((this->pbase())); 
# 745
__ret = (_M_file).xsputn_2(__buf, __buffill, reinterpret_cast< const char *>(__s), __n); 
# 748
if (__ret == (__buffill + __n)) 
# 749
{ 
# 750
_M_set_buffer(0); 
# 751
(_M_writing) = true; 
# 752
}  
# 753
if (__ret > __buffill) { 
# 754
__ret -= __buffill; } else { 
# 756
__ret = (0); }  
# 757
} else { 
# 759
__ret = __streambuf_type::xsputn(__s, __n); }  
# 760
} else { 
# 762
__ret = __streambuf_type::xsputn(__s, __n); }  
# 763
return __ret; 
# 764
} 
# 766
template< class _CharT, class _Traits> typename basic_filebuf< _CharT, _Traits> ::__streambuf_type *
# 769
basic_filebuf< _CharT, _Traits> ::setbuf(char_type *__s, std::streamsize __n) 
# 770
{ 
# 771
if (!is_open()) 
# 772
{ 
# 773
if ((__s == 0) && (__n == (0))) { 
# 774
(_M_buf_size) = (1); } else { 
# 775
if (__s && (__n > (0))) 
# 776
{ 
# 785 "/usr/include/c++/8/bits/fstream.tcc" 3
(_M_buf) = __s; 
# 786
(_M_buf_size) = __n; 
# 787
}  }  
# 788
}  
# 789
return this; 
# 790
} 
# 795
template< class _CharT, class _Traits> typename basic_filebuf< _CharT, _Traits> ::pos_type 
# 798
basic_filebuf< _CharT, _Traits> ::seekoff(off_type __off, std::ios_base::seekdir __way, std::ios_base::openmode) 
# 799
{ 
# 800
int __width = 0; 
# 801
if (_M_codecvt) { 
# 802
__width = ((_M_codecvt)->encoding()); }  
# 803
if (__width < 0) { 
# 804
__width = 0; }  
# 806
pos_type __ret = ((pos_type)((off_type)(-1))); 
# 807
const bool __testfail = (__off != 0) && (__width <= 0); 
# 808
if (is_open() && (!__testfail)) 
# 809
{ 
# 814
bool __no_movement = (__way == std::ios_base::cur) && (__off == 0) && ((!(_M_writing)) || ((_M_codecvt)->always_noconv())); 
# 818
if (!__no_movement) { 
# 819
_M_destroy_pback(); }  
# 826
__state_type __state = _M_state_beg; 
# 827
off_type __computed_off = __off * __width; 
# 828
if ((_M_reading) && (__way == std::ios_base::cur)) 
# 829
{ 
# 830
__state = (_M_state_last); 
# 831
__computed_off += _M_get_ext_pos(__state); 
# 832
}  
# 833
if (!__no_movement) { 
# 834
__ret = _M_seek(__computed_off, __way, __state); } else 
# 836
{ 
# 837
if (_M_writing) { 
# 838
__computed_off = ((this->pptr()) - (this->pbase())); }  
# 840
off_type __file_off = (_M_file).seekoff(0, std::ios_base::cur); 
# 841
if (__file_off != ((off_type)(-1))) 
# 842
{ 
# 843
__ret = (__file_off + __computed_off); 
# 844
(__ret.state(__state)); 
# 845
}  
# 846
}  
# 847
}  
# 848
return __ret; 
# 849
} 
# 855
template< class _CharT, class _Traits> typename basic_filebuf< _CharT, _Traits> ::pos_type 
# 858
basic_filebuf< _CharT, _Traits> ::seekpos(pos_type __pos, std::ios_base::openmode) 
# 859
{ 
# 860
pos_type __ret = ((pos_type)((off_type)(-1))); 
# 861
if (is_open()) 
# 862
{ 
# 864
_M_destroy_pback(); 
# 865
__ret = _M_seek((off_type)__pos, ios_base::beg, (__pos.state())); 
# 866
}  
# 867
return __ret; 
# 868
} 
# 870
template< class _CharT, class _Traits> typename basic_filebuf< _CharT, _Traits> ::pos_type 
# 873
basic_filebuf< _CharT, _Traits> ::_M_seek(off_type __off, std::ios_base::seekdir __way, __state_type __state) 
# 874
{ 
# 875
pos_type __ret = ((pos_type)((off_type)(-1))); 
# 876
if (_M_terminate_output()) 
# 877
{ 
# 878
off_type __file_off = (_M_file).seekoff(__off, __way); 
# 879
if (__file_off != ((off_type)(-1))) 
# 880
{ 
# 881
(_M_reading) = false; 
# 882
(_M_writing) = false; 
# 883
(_M_ext_next) = ((_M_ext_end) = (_M_ext_buf)); 
# 884
_M_set_buffer(-1); 
# 885
(_M_state_cur) = __state; 
# 886
__ret = __file_off; 
# 887
(__ret.state(_M_state_cur)); 
# 888
}  
# 889
}  
# 890
return __ret; 
# 891
} 
# 896
template< class _CharT, class _Traits> int 
# 898
basic_filebuf< _CharT, _Traits> ::_M_get_ext_pos(__state_type &__state) 
# 899
{ 
# 900
if (((_M_codecvt)->always_noconv())) { 
# 901
return (this->gptr()) - (this->egptr()); } else 
# 903
{ 
# 907
const int __gptr_off = ((_M_codecvt)->length(__state, _M_ext_buf, _M_ext_next, (this->gptr()) - (this->eback()))); 
# 910
return ((_M_ext_buf) + __gptr_off) - (_M_ext_end); 
# 911
}  
# 912
} 
# 914
template< class _CharT, class _Traits> bool 
# 917
basic_filebuf< _CharT, _Traits> ::_M_terminate_output() 
# 918
{ 
# 920
bool __testvalid = true; 
# 921
if ((this->pbase()) < (this->pptr())) 
# 922
{ 
# 923
const int_type __tmp = overflow(); 
# 924
if (traits_type::eq_int_type(__tmp, traits_type::eof())) { 
# 925
__testvalid = false; }  
# 926
}  
# 929
if ((_M_writing) && (!(__check_facet(_M_codecvt).always_noconv())) && __testvalid) 
# 931
{ 
# 935
const std::size_t __blen = (128); 
# 936
char __buf[__blen]; 
# 937
std::codecvt_base::result __r; 
# 938
std::streamsize __ilen = (0); 
# 940
do 
# 941
{ 
# 942
char *__next; 
# 943
__r = ((_M_codecvt)->unshift(_M_state_cur, __buf, __buf + __blen, __next)); 
# 945
if (__r == (codecvt_base::error)) { 
# 946
__testvalid = false; } else { 
# 947
if ((__r == (codecvt_base::ok)) || (__r == (codecvt_base::partial))) 
# 949
{ 
# 950
__ilen = (__next - __buf); 
# 951
if (__ilen > (0)) 
# 952
{ 
# 953
const std::streamsize __elen = (_M_file).xsputn(__buf, __ilen); 
# 954
if (__elen != __ilen) { 
# 955
__testvalid = false; }  
# 956
}  
# 957
}  }  
# 958
} 
# 959
while ((__r == (codecvt_base::partial)) && (__ilen > (0)) && __testvalid); 
# 961
if (__testvalid) 
# 962
{ 
# 967
const int_type __tmp = overflow(); 
# 968
if (traits_type::eq_int_type(__tmp, traits_type::eof())) { 
# 969
__testvalid = false; }  
# 970
}  
# 971
}  
# 972
return __testvalid; 
# 973
} 
# 975
template< class _CharT, class _Traits> int 
# 978
basic_filebuf< _CharT, _Traits> ::sync() 
# 979
{ 
# 982
int __ret = 0; 
# 983
if ((this->pbase()) < (this->pptr())) 
# 984
{ 
# 985
const int_type __tmp = overflow(); 
# 986
if (traits_type::eq_int_type(__tmp, traits_type::eof())) { 
# 987
__ret = (-1); }  
# 988
}  
# 989
return __ret; 
# 990
} 
# 992
template< class _CharT, class _Traits> void 
# 995
basic_filebuf< _CharT, _Traits> ::imbue(const std::locale &__loc) 
# 996
{ 
# 997
bool __testvalid = true; 
# 999
const __codecvt_type *_M_codecvt_tmp = (0); 
# 1000
if (__builtin_expect(has_facet< __codecvt_type> (__loc), true)) { 
# 1001
_M_codecvt_tmp = (&use_facet< __codecvt_type> (__loc)); }  
# 1003
if (is_open()) 
# 1004
{ 
# 1006
if (((_M_reading) || (_M_writing)) && ((__check_facet(_M_codecvt).encoding()) == (-1))) { 
# 1008
__testvalid = false; } else 
# 1010
{ 
# 1011
if (_M_reading) 
# 1012
{ 
# 1013
if ((__check_facet(_M_codecvt).always_noconv())) 
# 1014
{ 
# 1015
if (_M_codecvt_tmp && (!(__check_facet(_M_codecvt_tmp).always_noconv()))) { 
# 1017
__testvalid = (seekoff(0, std::ios_base::cur, _M_mode) != ((pos_type)((off_type)(-1)))); }  
# 1019
} else 
# 1021
{ 
# 1023
(_M_ext_next) = ((_M_ext_buf) + ((_M_codecvt)->length(_M_state_last, _M_ext_buf, _M_ext_next, (this->gptr()) - (this->eback())))); 
# 1027
const std::streamsize __remainder = (_M_ext_end) - (_M_ext_next); 
# 1028
if (__remainder) { 
# 1029
__builtin_memmove(_M_ext_buf, _M_ext_next, __remainder); }  
# 1031
(_M_ext_next) = (_M_ext_buf); 
# 1032
(_M_ext_end) = ((_M_ext_buf) + __remainder); 
# 1033
_M_set_buffer(-1); 
# 1034
(_M_state_last) = ((_M_state_cur) = (_M_state_beg)); 
# 1035
}  
# 1036
} else { 
# 1037
if ((_M_writing) && (__testvalid = _M_terminate_output())) { 
# 1038
_M_set_buffer(-1); }  }  
# 1039
}  
# 1040
}  
# 1042
if (__testvalid) { 
# 1043
(_M_codecvt) = _M_codecvt_tmp; } else { 
# 1045
(_M_codecvt) = 0; }  
# 1046
} 
# 1051
extern template class basic_filebuf< char, char_traits< char> > ;
# 1052
extern template class basic_ifstream< char, char_traits< char> > ;
# 1053
extern template class basic_ofstream< char, char_traits< char> > ;
# 1054
extern template class basic_fstream< char, char_traits< char> > ;
# 1057
extern template class basic_filebuf< wchar_t, char_traits< wchar_t> > ;
# 1058
extern template class basic_ifstream< wchar_t, char_traits< wchar_t> > ;
# 1059
extern template class basic_ofstream< wchar_t, char_traits< wchar_t> > ;
# 1060
extern template class basic_fstream< wchar_t, char_traits< wchar_t> > ;
# 1065
}
# 67 "/usr/include/c++/8/bits/stl_relops.h" 3
namespace std __attribute((__visibility__("default"))) { 
# 71
namespace rel_ops { 
# 85 "/usr/include/c++/8/bits/stl_relops.h" 3
template< class _Tp> inline bool 
# 87
operator!=(const _Tp &__x, const _Tp &__y) 
# 88
{ return !(__x == __y); } 
# 98 "/usr/include/c++/8/bits/stl_relops.h" 3
template< class _Tp> inline bool 
# 100
operator>(const _Tp &__x, const _Tp &__y) 
# 101
{ return __y < __x; } 
# 111 "/usr/include/c++/8/bits/stl_relops.h" 3
template< class _Tp> inline bool 
# 113
operator<=(const _Tp &__x, const _Tp &__y) 
# 114
{ return !(__y < __x); } 
# 124 "/usr/include/c++/8/bits/stl_relops.h" 3
template< class _Tp> inline bool 
# 126
operator>=(const _Tp &__x, const _Tp &__y) 
# 127
{ return !(__x < __y); } 
# 128
}
# 131
}
# 78 "/usr/include/c++/8/utility" 3
namespace std __attribute((__visibility__("default"))) { 
# 83
template< class _Tp> struct tuple_size; 
# 90
template< class _Tp, class 
# 91
_Up = typename remove_cv< _Tp> ::type, class 
# 92
 = typename enable_if< is_same< _Tp, _Up> ::value> ::type, size_t 
# 93
 = tuple_size< _Tp> ::value> using __enable_if_has_tuple_size = _Tp; 
# 96
template< class _Tp> 
# 97
struct tuple_size< const __enable_if_has_tuple_size< _Tp, typename remove_cv< _Tp> ::type, typename enable_if< is_same< _Tp, typename remove_cv< _Tp> ::type> ::value> ::type, tuple_size< _Tp> ::value> >  : public std::tuple_size< _Tp>  { 
# 98
}; 
# 100
template< class _Tp> 
# 101
struct tuple_size< volatile __enable_if_has_tuple_size< _Tp, typename remove_cv< _Tp> ::type, typename enable_if< is_same< _Tp, typename remove_cv< _Tp> ::type> ::value> ::type, tuple_size< _Tp> ::value> >  : public std::tuple_size< _Tp>  { 
# 102
}; 
# 104
template< class _Tp> 
# 105
struct tuple_size< const volatile __enable_if_has_tuple_size< _Tp, typename remove_cv< _Tp> ::type, typename enable_if< is_same< _Tp, typename remove_cv< _Tp> ::type> ::value> ::type, tuple_size< _Tp> ::value> >  : public std::tuple_size< _Tp>  { 
# 106
}; 
# 109
template< size_t __i, class _Tp> struct tuple_element; 
# 113
template< size_t __i, class _Tp> using __tuple_element_t = typename tuple_element< __i, _Tp> ::type; 
# 116
template< size_t __i, class _Tp> 
# 117
struct tuple_element< __i, const _Tp>  { 
# 119
typedef typename add_const< __tuple_element_t< __i, _Tp> > ::type type; 
# 120
}; 
# 122
template< size_t __i, class _Tp> 
# 123
struct tuple_element< __i, volatile _Tp>  { 
# 125
typedef typename add_volatile< __tuple_element_t< __i, _Tp> > ::type type; 
# 126
}; 
# 128
template< size_t __i, class _Tp> 
# 129
struct tuple_element< __i, const volatile _Tp>  { 
# 131
typedef typename add_cv< __tuple_element_t< __i, _Tp> > ::type type; 
# 132
}; 
# 137
template< size_t __i, class _Tp> using tuple_element_t = typename tuple_element< __i, _Tp> ::type; 
# 144
template< class _T1, class _T2> 
# 145
struct __is_tuple_like_impl< pair< _T1, _T2> >  : public true_type { 
# 146
}; 
# 149
template< class _Tp1, class _Tp2> 
# 150
struct tuple_size< pair< _Tp1, _Tp2> >  : public integral_constant< unsigned long, 2UL>  { 
# 151
}; 
# 154
template< class _Tp1, class _Tp2> 
# 155
struct tuple_element< 0, pair< _Tp1, _Tp2> >  { 
# 156
typedef _Tp1 type; }; 
# 159
template< class _Tp1, class _Tp2> 
# 160
struct tuple_element< 1, pair< _Tp1, _Tp2> >  { 
# 161
typedef _Tp2 type; }; 
# 163
template< size_t _Int> struct __pair_get; 
# 167
template<> struct __pair_get< 0UL>  { 
# 169
template< class _Tp1, class _Tp2> static constexpr _Tp1 &
# 171
__get(pair< _Tp1, _Tp2>  &__pair) noexcept 
# 172
{ return __pair.first; } 
# 174
template< class _Tp1, class _Tp2> static constexpr _Tp1 &&
# 176
__move_get(pair< _Tp1, _Tp2>  &&__pair) noexcept 
# 177
{ return std::forward< _Tp1> ((__pair.first)); } 
# 179
template< class _Tp1, class _Tp2> static constexpr const _Tp1 &
# 181
__const_get(const pair< _Tp1, _Tp2>  &__pair) noexcept 
# 182
{ return __pair.first; } 
# 184
template< class _Tp1, class _Tp2> static constexpr const _Tp1 &&
# 186
__const_move_get(const pair< _Tp1, _Tp2>  &&__pair) noexcept 
# 187
{ return std::forward< const _Tp1> ((__pair.first)); } 
# 188
}; 
# 191
template<> struct __pair_get< 1UL>  { 
# 193
template< class _Tp1, class _Tp2> static constexpr _Tp2 &
# 195
__get(pair< _Tp1, _Tp2>  &__pair) noexcept 
# 196
{ return __pair.second; } 
# 198
template< class _Tp1, class _Tp2> static constexpr _Tp2 &&
# 200
__move_get(pair< _Tp1, _Tp2>  &&__pair) noexcept 
# 201
{ return std::forward< _Tp2> ((__pair.second)); } 
# 203
template< class _Tp1, class _Tp2> static constexpr const _Tp2 &
# 205
__const_get(const pair< _Tp1, _Tp2>  &__pair) noexcept 
# 206
{ return __pair.second; } 
# 208
template< class _Tp1, class _Tp2> static constexpr const _Tp2 &&
# 210
__const_move_get(const pair< _Tp1, _Tp2>  &&__pair) noexcept 
# 211
{ return std::forward< const _Tp2> ((__pair.second)); } 
# 212
}; 
# 214
template< size_t _Int, class _Tp1, class _Tp2> constexpr typename tuple_element< _Int, pair< _Tp1, _Tp2> > ::type &
# 216
get(pair< _Tp1, _Tp2>  &__in) noexcept 
# 217
{ return __pair_get< _Int> ::__get(__in); } 
# 219
template< size_t _Int, class _Tp1, class _Tp2> constexpr typename tuple_element< _Int, pair< _Tp1, _Tp2> > ::type &&
# 221
get(pair< _Tp1, _Tp2>  &&__in) noexcept 
# 222
{ return __pair_get< _Int> ::__move_get(std::move(__in)); } 
# 224
template< size_t _Int, class _Tp1, class _Tp2> constexpr const typename tuple_element< _Int, pair< _Tp1, _Tp2> > ::type &
# 226
get(const pair< _Tp1, _Tp2>  &__in) noexcept 
# 227
{ return __pair_get< _Int> ::__const_get(__in); } 
# 229
template< size_t _Int, class _Tp1, class _Tp2> constexpr const typename tuple_element< _Int, pair< _Tp1, _Tp2> > ::type &&
# 231
get(const pair< _Tp1, _Tp2>  &&__in) noexcept 
# 232
{ return __pair_get< _Int> ::__const_move_get(std::move(__in)); } 
# 238
template< class _Tp, class _Up> constexpr _Tp &
# 240
get(pair< _Tp, _Up>  &__p) noexcept 
# 241
{ return __p.first; } 
# 243
template< class _Tp, class _Up> constexpr const _Tp &
# 245
get(const pair< _Tp, _Up>  &__p) noexcept 
# 246
{ return __p.first; } 
# 248
template< class _Tp, class _Up> constexpr _Tp &&
# 250
get(pair< _Tp, _Up>  &&__p) noexcept 
# 251
{ return std::move((__p.first)); } 
# 253
template< class _Tp, class _Up> constexpr const _Tp &&
# 255
get(const pair< _Tp, _Up>  &&__p) noexcept 
# 256
{ return std::move((__p.first)); } 
# 258
template< class _Tp, class _Up> constexpr _Tp &
# 260
get(pair< _Up, _Tp>  &__p) noexcept 
# 261
{ return __p.second; } 
# 263
template< class _Tp, class _Up> constexpr const _Tp &
# 265
get(const pair< _Up, _Tp>  &__p) noexcept 
# 266
{ return __p.second; } 
# 268
template< class _Tp, class _Up> constexpr _Tp &&
# 270
get(pair< _Up, _Tp>  &&__p) noexcept 
# 271
{ return std::move((__p.second)); } 
# 273
template< class _Tp, class _Up> constexpr const _Tp &&
# 275
get(const pair< _Up, _Tp>  &&__p) noexcept 
# 276
{ return std::move((__p.second)); } 
# 281
template< class _Tp, class _Up = _Tp> inline _Tp 
# 283
exchange(_Tp &__obj, _Up &&__new_val) 
# 284
{ return std::__exchange(__obj, std::forward< _Up> (__new_val)); } 
# 289
template< size_t ..._Indexes> struct _Index_tuple { }; 
# 298 "/usr/include/c++/8/utility" 3
template< size_t _Num> 
# 299
struct _Build_index_tuple { 
# 307
using __type = _Index_tuple< __integer_pack(_Num)...> ; 
# 309
}; 
# 316
template< class _Tp, _Tp ..._Idx> 
# 317
struct integer_sequence { 
# 319
typedef _Tp value_type; 
# 320
static constexpr size_t size() noexcept { return sizeof...(_Idx); } 
# 321
}; 
# 324
template< class _Tp, _Tp _Num> using make_integer_sequence = integer_sequence< _Tp, __integer_pack(_Num)...> ; 
# 335
template< size_t ..._Idx> using index_sequence = integer_sequence< unsigned long, _Idx...> ; 
# 339
template< size_t _Num> using make_index_sequence = make_integer_sequence< unsigned long, _Num> ; 
# 343
template< class ..._Types> using index_sequence_for = make_index_sequence< sizeof...(_Types)> ; 
# 394 "/usr/include/c++/8/utility" 3
}
# 42 "/usr/include/c++/8/bits/algorithmfwd.h" 3
namespace std __attribute((__visibility__("default"))) { 
# 195 "/usr/include/c++/8/bits/algorithmfwd.h" 3
template< class _IIter, class _Predicate> inline bool all_of(_IIter, _IIter, _Predicate); 
# 199
template< class _IIter, class _Predicate> inline bool any_of(_IIter, _IIter, _Predicate); 
# 204
template< class _FIter, class _Tp> bool binary_search(_FIter, _FIter, const _Tp &); 
# 208
template< class _FIter, class _Tp, class _Compare> bool binary_search(_FIter, _FIter, const _Tp &, _Compare); 
# 224 "/usr/include/c++/8/bits/algorithmfwd.h" 3
template< class _IIter, class _OIter> inline _OIter copy(_IIter, _IIter, _OIter); 
# 228
template< class _BIter1, class _BIter2> inline _BIter2 copy_backward(_BIter1, _BIter1, _BIter2); 
# 233
template< class _IIter, class _OIter, class _Predicate> _OIter copy_if(_IIter, _IIter, _OIter, _Predicate); 
# 237
template< class _IIter, class _Size, class _OIter> inline _OIter copy_n(_IIter, _Size, _OIter); 
# 245
template< class _FIter, class _Tp> inline pair< _FIter, _FIter>  equal_range(_FIter, _FIter, const _Tp &); 
# 249
template< class _FIter, class _Tp, class _Compare> inline pair< _FIter, _FIter>  equal_range(_FIter, _FIter, const _Tp &, _Compare); 
# 253
template< class _FIter, class _Tp> inline void fill(_FIter, _FIter, const _Tp &); 
# 257
template< class _OIter, class _Size, class _Tp> inline _OIter fill_n(_OIter, _Size, const _Tp &); 
# 263
template< class _FIter1, class _FIter2> inline _FIter1 find_end(_FIter1, _FIter1, _FIter2, _FIter2); 
# 267
template< class _FIter1, class _FIter2, class _BinaryPredicate> inline _FIter1 find_end(_FIter1, _FIter1, _FIter2, _FIter2, _BinaryPredicate); 
# 275
template< class _IIter, class _Predicate> inline _IIter find_if_not(_IIter, _IIter, _Predicate); 
# 284
template< class _IIter1, class _IIter2> inline bool includes(_IIter1, _IIter1, _IIter2, _IIter2); 
# 288
template< class _IIter1, class _IIter2, class _Compare> inline bool includes(_IIter1, _IIter1, _IIter2, _IIter2, _Compare); 
# 292
template< class _BIter> inline void inplace_merge(_BIter, _BIter, _BIter); 
# 296
template< class _BIter, class _Compare> inline void inplace_merge(_BIter, _BIter, _BIter, _Compare); 
# 301
template< class _RAIter> inline bool is_heap(_RAIter, _RAIter); 
# 305
template< class _RAIter, class _Compare> inline bool is_heap(_RAIter, _RAIter, _Compare); 
# 309
template< class _RAIter> inline _RAIter is_heap_until(_RAIter, _RAIter); 
# 313
template< class _RAIter, class _Compare> inline _RAIter is_heap_until(_RAIter, _RAIter, _Compare); 
# 317
template< class _IIter, class _Predicate> inline bool is_partitioned(_IIter, _IIter, _Predicate); 
# 321
template< class _FIter1, class _FIter2> inline bool is_permutation(_FIter1, _FIter1, _FIter2); 
# 325
template< class _FIter1, class _FIter2, class 
# 326
_BinaryPredicate> inline bool 
# 325
is_permutation(_FIter1, _FIter1, _FIter2, _BinaryPredicate); 
# 330
template< class _FIter> inline bool is_sorted(_FIter, _FIter); 
# 334
template< class _FIter, class _Compare> inline bool is_sorted(_FIter, _FIter, _Compare); 
# 338
template< class _FIter> inline _FIter is_sorted_until(_FIter, _FIter); 
# 342
template< class _FIter, class _Compare> inline _FIter is_sorted_until(_FIter, _FIter, _Compare); 
# 347
template< class _FIter1, class _FIter2> inline void iter_swap(_FIter1, _FIter2); 
# 351
template< class _FIter, class _Tp> inline _FIter lower_bound(_FIter, _FIter, const _Tp &); 
# 355
template< class _FIter, class _Tp, class _Compare> inline _FIter lower_bound(_FIter, _FIter, const _Tp &, _Compare); 
# 359
template< class _RAIter> inline void make_heap(_RAIter, _RAIter); 
# 363
template< class _RAIter, class _Compare> inline void make_heap(_RAIter, _RAIter, _Compare); 
# 367
template< class _Tp> constexpr const _Tp &max(const _Tp &, const _Tp &); 
# 372
template< class _Tp, class _Compare> constexpr const _Tp &max(const _Tp &, const _Tp &, _Compare); 
# 380
template< class _Tp> constexpr const _Tp &min(const _Tp &, const _Tp &); 
# 385
template< class _Tp, class _Compare> constexpr const _Tp &min(const _Tp &, const _Tp &, _Compare); 
# 393
template< class _Tp> constexpr pair< const _Tp &, const _Tp &>  minmax(const _Tp &, const _Tp &); 
# 398
template< class _Tp, class _Compare> constexpr pair< const _Tp &, const _Tp &>  minmax(const _Tp &, const _Tp &, _Compare); 
# 403
template< class _FIter> constexpr pair< _FIter, _FIter>  minmax_element(_FIter, _FIter); 
# 408
template< class _FIter, class _Compare> constexpr pair< _FIter, _FIter>  minmax_element(_FIter, _FIter, _Compare); 
# 413
template< class _Tp> constexpr _Tp min(initializer_list< _Tp> ); 
# 418
template< class _Tp, class _Compare> constexpr _Tp min(initializer_list< _Tp> , _Compare); 
# 423
template< class _Tp> constexpr _Tp max(initializer_list< _Tp> ); 
# 428
template< class _Tp, class _Compare> constexpr _Tp max(initializer_list< _Tp> , _Compare); 
# 433
template< class _Tp> constexpr pair< _Tp, _Tp>  minmax(initializer_list< _Tp> ); 
# 438
template< class _Tp, class _Compare> constexpr pair< _Tp, _Tp>  minmax(initializer_list< _Tp> , _Compare); 
# 446
template< class _BIter> inline bool next_permutation(_BIter, _BIter); 
# 450
template< class _BIter, class _Compare> inline bool next_permutation(_BIter, _BIter, _Compare); 
# 455
template< class _IIter, class _Predicate> inline bool none_of(_IIter, _IIter, _Predicate); 
# 463
template< class _IIter, class _RAIter> inline _RAIter partial_sort_copy(_IIter, _IIter, _RAIter, _RAIter); 
# 467
template< class _IIter, class _RAIter, class _Compare> inline _RAIter partial_sort_copy(_IIter, _IIter, _RAIter, _RAIter, _Compare); 
# 474
template< class _IIter, class _OIter1, class 
# 475
_OIter2, class _Predicate> pair< _OIter1, _OIter2>  
# 474
partition_copy(_IIter, _IIter, _OIter1, _OIter2, _Predicate); 
# 479
template< class _FIter, class _Predicate> _FIter partition_point(_FIter, _FIter, _Predicate); 
# 484
template< class _RAIter> inline void pop_heap(_RAIter, _RAIter); 
# 488
template< class _RAIter, class _Compare> inline void pop_heap(_RAIter, _RAIter, _Compare); 
# 492
template< class _BIter> inline bool prev_permutation(_BIter, _BIter); 
# 496
template< class _BIter, class _Compare> inline bool prev_permutation(_BIter, _BIter, _Compare); 
# 500
template< class _RAIter> inline void push_heap(_RAIter, _RAIter); 
# 504
template< class _RAIter, class _Compare> inline void push_heap(_RAIter, _RAIter, _Compare); 
# 510
template< class _FIter, class _Tp> inline _FIter remove(_FIter, _FIter, const _Tp &); 
# 514
template< class _FIter, class _Predicate> inline _FIter remove_if(_FIter, _FIter, _Predicate); 
# 518
template< class _IIter, class _OIter, class _Tp> inline _OIter remove_copy(_IIter, _IIter, _OIter, const _Tp &); 
# 522
template< class _IIter, class _OIter, class _Predicate> inline _OIter remove_copy_if(_IIter, _IIter, _OIter, _Predicate); 
# 528
template< class _IIter, class _OIter, class _Tp> inline _OIter replace_copy(_IIter, _IIter, _OIter, const _Tp &, const _Tp &); 
# 532
template< class _Iter, class _OIter, class _Predicate, class _Tp> inline _OIter replace_copy_if(_Iter, _Iter, _OIter, _Predicate, const _Tp &); 
# 538
template< class _BIter> inline void reverse(_BIter, _BIter); 
# 542
template< class _BIter, class _OIter> _OIter reverse_copy(_BIter, _BIter, _OIter); 
# 546
inline namespace _V2 { 
# 548
template< class _FIter> inline _FIter rotate(_FIter, _FIter, _FIter); 
# 551
}
# 553
template< class _FIter, class _OIter> inline _OIter rotate_copy(_FIter, _FIter, _FIter, _OIter); 
# 565 "/usr/include/c++/8/bits/algorithmfwd.h" 3
template< class _RAIter, class _UGenerator> void shuffle(_RAIter, _RAIter, _UGenerator &&); 
# 570
template< class _RAIter> inline void sort_heap(_RAIter, _RAIter); 
# 574
template< class _RAIter, class _Compare> inline void sort_heap(_RAIter, _RAIter, _Compare); 
# 578
template< class _BIter, class _Predicate> inline _BIter stable_partition(_BIter, _BIter, _Predicate); 
# 594 "/usr/include/c++/8/bits/algorithmfwd.h" 3
template< class _FIter1, class _FIter2> _FIter2 swap_ranges(_FIter1, _FIter1, _FIter2); 
# 600
template< class _FIter> inline _FIter unique(_FIter, _FIter); 
# 604
template< class _FIter, class _BinaryPredicate> inline _FIter unique(_FIter, _FIter, _BinaryPredicate); 
# 610
template< class _FIter, class _Tp> inline _FIter upper_bound(_FIter, _FIter, const _Tp &); 
# 614
template< class _FIter, class _Tp, class _Compare> inline _FIter upper_bound(_FIter, _FIter, const _Tp &, _Compare); 
# 620
template< class _FIter> inline _FIter adjacent_find(_FIter, _FIter); 
# 624
template< class _FIter, class _BinaryPredicate> inline _FIter adjacent_find(_FIter, _FIter, _BinaryPredicate); 
# 628
template< class _IIter, class _Tp> inline typename iterator_traits< _IIter> ::difference_type count(_IIter, _IIter, const _Tp &); 
# 632
template< class _IIter, class _Predicate> inline typename iterator_traits< _IIter> ::difference_type count_if(_IIter, _IIter, _Predicate); 
# 636
template< class _IIter1, class _IIter2> inline bool equal(_IIter1, _IIter1, _IIter2); 
# 640
template< class _IIter1, class _IIter2, class _BinaryPredicate> inline bool equal(_IIter1, _IIter1, _IIter2, _BinaryPredicate); 
# 644
template< class _IIter, class _Tp> inline _IIter find(_IIter, _IIter, const _Tp &); 
# 648
template< class _FIter1, class _FIter2> _FIter1 find_first_of(_FIter1, _FIter1, _FIter2, _FIter2); 
# 652
template< class _FIter1, class _FIter2, class _BinaryPredicate> _FIter1 find_first_of(_FIter1, _FIter1, _FIter2, _FIter2, _BinaryPredicate); 
# 656
template< class _IIter, class _Predicate> inline _IIter find_if(_IIter, _IIter, _Predicate); 
# 660
template< class _IIter, class _Funct> _Funct for_each(_IIter, _IIter, _Funct); 
# 664
template< class _FIter, class _Generator> void generate(_FIter, _FIter, _Generator); 
# 668
template< class _OIter, class _Size, class _Generator> _OIter generate_n(_OIter, _Size, _Generator); 
# 672
template< class _IIter1, class _IIter2> inline bool lexicographical_compare(_IIter1, _IIter1, _IIter2, _IIter2); 
# 676
template< class _IIter1, class _IIter2, class _Compare> inline bool lexicographical_compare(_IIter1, _IIter1, _IIter2, _IIter2, _Compare); 
# 680
template< class _FIter> constexpr _FIter max_element(_FIter, _FIter); 
# 685
template< class _FIter, class _Compare> constexpr _FIter max_element(_FIter, _FIter, _Compare); 
# 690
template< class _IIter1, class _IIter2, class _OIter> inline _OIter merge(_IIter1, _IIter1, _IIter2, _IIter2, _OIter); 
# 694
template< class _IIter1, class _IIter2, class _OIter, class 
# 695
_Compare> inline _OIter 
# 694
merge(_IIter1, _IIter1, _IIter2, _IIter2, _OIter, _Compare); 
# 699
template< class _FIter> constexpr _FIter min_element(_FIter, _FIter); 
# 704
template< class _FIter, class _Compare> constexpr _FIter min_element(_FIter, _FIter, _Compare); 
# 709
template< class _IIter1, class _IIter2> inline pair< _IIter1, _IIter2>  mismatch(_IIter1, _IIter1, _IIter2); 
# 713
template< class _IIter1, class _IIter2, class _BinaryPredicate> inline pair< _IIter1, _IIter2>  mismatch(_IIter1, _IIter1, _IIter2, _BinaryPredicate); 
# 717
template< class _RAIter> inline void nth_element(_RAIter, _RAIter, _RAIter); 
# 721
template< class _RAIter, class _Compare> inline void nth_element(_RAIter, _RAIter, _RAIter, _Compare); 
# 725
template< class _RAIter> inline void partial_sort(_RAIter, _RAIter, _RAIter); 
# 729
template< class _RAIter, class _Compare> inline void partial_sort(_RAIter, _RAIter, _RAIter, _Compare); 
# 733
template< class _BIter, class _Predicate> inline _BIter partition(_BIter, _BIter, _Predicate); 
# 737
template< class _RAIter> inline void random_shuffle(_RAIter, _RAIter); 
# 741
template< class _RAIter, class _Generator> void random_shuffle(_RAIter, _RAIter, _Generator &&); 
# 750
template< class _FIter, class _Tp> void replace(_FIter, _FIter, const _Tp &, const _Tp &); 
# 754
template< class _FIter, class _Predicate, class _Tp> void replace_if(_FIter, _FIter, _Predicate, const _Tp &); 
# 758
template< class _FIter1, class _FIter2> inline _FIter1 search(_FIter1, _FIter1, _FIter2, _FIter2); 
# 762
template< class _FIter1, class _FIter2, class _BinaryPredicate> inline _FIter1 search(_FIter1, _FIter1, _FIter2, _FIter2, _BinaryPredicate); 
# 766
template< class _FIter, class _Size, class _Tp> inline _FIter search_n(_FIter, _FIter, _Size, const _Tp &); 
# 770
template< class _FIter, class _Size, class _Tp, class 
# 771
_BinaryPredicate> inline _FIter 
# 770
search_n(_FIter, _FIter, _Size, const _Tp &, _BinaryPredicate); 
# 775
template< class _IIter1, class _IIter2, class _OIter> inline _OIter set_difference(_IIter1, _IIter1, _IIter2, _IIter2, _OIter); 
# 779
template< class _IIter1, class _IIter2, class _OIter, class 
# 780
_Compare> inline _OIter 
# 779
set_difference(_IIter1, _IIter1, _IIter2, _IIter2, _OIter, _Compare); 
# 784
template< class _IIter1, class _IIter2, class _OIter> inline _OIter set_intersection(_IIter1, _IIter1, _IIter2, _IIter2, _OIter); 
# 788
template< class _IIter1, class _IIter2, class _OIter, class 
# 789
_Compare> inline _OIter 
# 788
set_intersection(_IIter1, _IIter1, _IIter2, _IIter2, _OIter, _Compare); 
# 793
template< class _IIter1, class _IIter2, class _OIter> inline _OIter set_symmetric_difference(_IIter1, _IIter1, _IIter2, _IIter2, _OIter); 
# 797
template< class _IIter1, class _IIter2, class _OIter, class 
# 798
_Compare> inline _OIter 
# 797
set_symmetric_difference(_IIter1, _IIter1, _IIter2, _IIter2, _OIter, _Compare); 
# 803
template< class _IIter1, class _IIter2, class _OIter> inline _OIter set_union(_IIter1, _IIter1, _IIter2, _IIter2, _OIter); 
# 807
template< class _IIter1, class _IIter2, class _OIter, class 
# 808
_Compare> inline _OIter 
# 807
set_union(_IIter1, _IIter1, _IIter2, _IIter2, _OIter, _Compare); 
# 812
template< class _RAIter> inline void sort(_RAIter, _RAIter); 
# 816
template< class _RAIter, class _Compare> inline void sort(_RAIter, _RAIter, _Compare); 
# 820
template< class _RAIter> inline void stable_sort(_RAIter, _RAIter); 
# 824
template< class _RAIter, class _Compare> inline void stable_sort(_RAIter, _RAIter, _Compare); 
# 828
template< class _IIter, class _OIter, class _UnaryOperation> _OIter transform(_IIter, _IIter, _OIter, _UnaryOperation); 
# 832
template< class _IIter1, class _IIter2, class _OIter, class 
# 833
_BinaryOperation> _OIter 
# 832
transform(_IIter1, _IIter1, _IIter2, _OIter, _BinaryOperation); 
# 837
template< class _IIter, class _OIter> inline _OIter unique_copy(_IIter, _IIter, _OIter); 
# 841
template< class _IIter, class _OIter, class _BinaryPredicate> inline _OIter unique_copy(_IIter, _IIter, _OIter, _BinaryPredicate); 
# 847
}
# 62 "/usr/include/c++/8/bits/stl_heap.h" 3
namespace std __attribute((__visibility__("default"))) { 
# 71
template< class _RandomAccessIterator, class _Distance, class 
# 72
_Compare> _Distance 
# 74
__is_heap_until(_RandomAccessIterator __first, _Distance __n, _Compare &
# 75
__comp) 
# 76
{ 
# 77
_Distance __parent = (0); 
# 78
for (_Distance __child = (1); __child < __n; ++__child) 
# 79
{ 
# 80
if (__comp(__first + __parent, __first + __child)) { 
# 81
return __child; }  
# 82
if ((__child & 1) == 0) { 
# 83
++__parent; }  
# 84
}  
# 85
return __n; 
# 86
} 
# 90
template< class _RandomAccessIterator, class _Distance> inline bool 
# 92
__is_heap(_RandomAccessIterator __first, _Distance __n) 
# 93
{ 
# 94
__gnu_cxx::__ops::_Iter_less_iter __comp; 
# 95
return std::__is_heap_until(__first, __n, __comp) == __n; 
# 96
} 
# 98
template< class _RandomAccessIterator, class _Compare, class 
# 99
_Distance> inline bool 
# 101
__is_heap(_RandomAccessIterator __first, _Compare __comp, _Distance __n) 
# 102
{ 
# 103
typedef __decltype(__comp) _Cmp; 
# 104
__gnu_cxx::__ops::_Iter_comp_iter< __decltype(__comp)>  __cmp(std::move(__comp)); 
# 105
return std::__is_heap_until(__first, __n, __cmp) == __n; 
# 106
} 
# 108
template< class _RandomAccessIterator> inline bool 
# 110
__is_heap(_RandomAccessIterator __first, _RandomAccessIterator __last) 
# 111
{ return std::__is_heap(__first, std::distance(__first, __last)); } 
# 113
template< class _RandomAccessIterator, class _Compare> inline bool 
# 115
__is_heap(_RandomAccessIterator __first, _RandomAccessIterator __last, _Compare 
# 116
__comp) 
# 117
{ 
# 118
return std::__is_heap(__first, std::move(__comp), std::distance(__first, __last)); 
# 120
} 
# 125
template< class _RandomAccessIterator, class _Distance, class _Tp, class 
# 126
_Compare> void 
# 128
__push_heap(_RandomAccessIterator __first, _Distance 
# 129
__holeIndex, _Distance __topIndex, _Tp __value, _Compare &
# 130
__comp) 
# 131
{ 
# 132
_Distance __parent = (__holeIndex - 1) / 2; 
# 133
while ((__holeIndex > __topIndex) && __comp(__first + __parent, __value)) 
# 134
{ 
# 135
(*(__first + __holeIndex)) = std::move(*(__first + __parent)); 
# 136
__holeIndex = __parent; 
# 137
__parent = ((__holeIndex - 1) / 2); 
# 138
}  
# 139
(*(__first + __holeIndex)) = std::move(__value); 
# 140
} 
# 152 "/usr/include/c++/8/bits/stl_heap.h" 3
template< class _RandomAccessIterator> inline void 
# 154
push_heap(_RandomAccessIterator __first, _RandomAccessIterator __last) 
# 155
{ 
# 157
typedef typename iterator_traits< _RandomAccessIterator> ::value_type _ValueType; 
# 159
typedef typename iterator_traits< _RandomAccessIterator> ::difference_type _DistanceType; 
# 165
; 
# 166
; 
# 167
; 
# 169
__gnu_cxx::__ops::_Iter_less_val __comp; 
# 170
_ValueType __value = std::move(*(__last - 1)); 
# 171
std::__push_heap(__first, (_DistanceType)((__last - __first) - 1), (_DistanceType)0, std::move(__value), __comp); 
# 173
} 
# 187 "/usr/include/c++/8/bits/stl_heap.h" 3
template< class _RandomAccessIterator, class _Compare> inline void 
# 189
push_heap(_RandomAccessIterator __first, _RandomAccessIterator __last, _Compare 
# 190
__comp) 
# 191
{ 
# 193
typedef typename iterator_traits< _RandomAccessIterator> ::value_type _ValueType; 
# 195
typedef typename iterator_traits< _RandomAccessIterator> ::difference_type _DistanceType; 
# 200
; 
# 201
; 
# 202
; 
# 205
__decltype((__gnu_cxx::__ops::__iter_comp_val(std::move(__comp)))) __cmp(std::move(__comp)); 
# 206
_ValueType __value = std::move(*(__last - 1)); 
# 207
std::__push_heap(__first, (_DistanceType)((__last - __first) - 1), (_DistanceType)0, std::move(__value), __cmp); 
# 209
} 
# 211
template< class _RandomAccessIterator, class _Distance, class 
# 212
_Tp, class _Compare> void 
# 214
__adjust_heap(_RandomAccessIterator __first, _Distance __holeIndex, _Distance 
# 215
__len, _Tp __value, _Compare __comp) 
# 216
{ 
# 217
const _Distance __topIndex = __holeIndex; 
# 218
_Distance __secondChild = __holeIndex; 
# 219
while (__secondChild < ((__len - 1) / 2)) 
# 220
{ 
# 221
__secondChild = (2 * (__secondChild + 1)); 
# 222
if (__comp(__first + __secondChild, __first + (__secondChild - 1))) { 
# 224
__secondChild--; }  
# 225
(*(__first + __holeIndex)) = std::move(*(__first + __secondChild)); 
# 226
__holeIndex = __secondChild; 
# 227
}  
# 228
if (((__len & 1) == 0) && (__secondChild == ((__len - 2) / 2))) 
# 229
{ 
# 230
__secondChild = (2 * (__secondChild + 1)); 
# 231
(*(__first + __holeIndex)) = std::move(*(__first + (__secondChild - 1))); 
# 233
__holeIndex = (__secondChild - 1); 
# 234
}  
# 236
__decltype((__gnu_cxx::__ops::__iter_comp_val(std::move(__comp)))) __cmp(std::move(__comp)); 
# 237
std::__push_heap(__first, __holeIndex, __topIndex, std::move(__value), __cmp); 
# 239
} 
# 241
template< class _RandomAccessIterator, class _Compare> inline void 
# 243
__pop_heap(_RandomAccessIterator __first, _RandomAccessIterator __last, _RandomAccessIterator 
# 244
__result, _Compare &__comp) 
# 245
{ 
# 247
typedef typename iterator_traits< _RandomAccessIterator> ::value_type _ValueType; 
# 249
typedef typename iterator_traits< _RandomAccessIterator> ::difference_type _DistanceType; 
# 251
_ValueType __value = std::move(*__result); 
# 252
(*__result) = std::move(*__first); 
# 253
std::__adjust_heap(__first, (_DistanceType)0, (_DistanceType)(__last - __first), std::move(__value), __comp); 
# 256
} 
# 269 "/usr/include/c++/8/bits/stl_heap.h" 3
template< class _RandomAccessIterator> inline void 
# 271
pop_heap(_RandomAccessIterator __first, _RandomAccessIterator __last) 
# 272
{ 
# 278
; 
# 279
; 
# 280
; 
# 281
; 
# 283
if ((__last - __first) > 1) 
# 284
{ 
# 285
--__last; 
# 286
__gnu_cxx::__ops::_Iter_less_iter __comp; 
# 287
std::__pop_heap(__first, __last, __last, __comp); 
# 288
}  
# 289
} 
# 302 "/usr/include/c++/8/bits/stl_heap.h" 3
template< class _RandomAccessIterator, class _Compare> inline void 
# 304
pop_heap(_RandomAccessIterator __first, _RandomAccessIterator 
# 305
__last, _Compare __comp) 
# 306
{ 
# 310
; 
# 311
; 
# 312
; 
# 313
; 
# 315
if ((__last - __first) > 1) 
# 316
{ 
# 317
typedef __decltype(__comp) _Cmp; 
# 318
__gnu_cxx::__ops::_Iter_comp_iter< __decltype(__comp)>  __cmp(std::move(__comp)); 
# 319
--__last; 
# 320
std::__pop_heap(__first, __last, __last, __cmp); 
# 321
}  
# 322
} 
# 324
template< class _RandomAccessIterator, class _Compare> void 
# 326
__make_heap(_RandomAccessIterator __first, _RandomAccessIterator __last, _Compare &
# 327
__comp) 
# 328
{ 
# 330
typedef typename iterator_traits< _RandomAccessIterator> ::value_type _ValueType; 
# 332
typedef typename iterator_traits< _RandomAccessIterator> ::difference_type _DistanceType; 
# 334
if ((__last - __first) < 2) { 
# 335
return; }  
# 337
const _DistanceType __len = __last - __first; 
# 338
_DistanceType __parent = (__len - 2) / 2; 
# 339
while (true) 
# 340
{ 
# 341
_ValueType __value = std::move(*(__first + __parent)); 
# 342
std::__adjust_heap(__first, __parent, __len, std::move(__value), __comp); 
# 344
if (__parent == 0) { 
# 345
return; }  
# 346
__parent--; 
# 347
}  
# 348
} 
# 358 "/usr/include/c++/8/bits/stl_heap.h" 3
template< class _RandomAccessIterator> inline void 
# 360
make_heap(_RandomAccessIterator __first, _RandomAccessIterator __last) 
# 361
{ 
# 367
; 
# 368
; 
# 370
__gnu_cxx::__ops::_Iter_less_iter __comp; 
# 371
std::__make_heap(__first, __last, __comp); 
# 372
} 
# 384 "/usr/include/c++/8/bits/stl_heap.h" 3
template< class _RandomAccessIterator, class _Compare> inline void 
# 386
make_heap(_RandomAccessIterator __first, _RandomAccessIterator __last, _Compare 
# 387
__comp) 
# 388
{ 
# 392
; 
# 393
; 
# 395
typedef __decltype(__comp) _Cmp; 
# 396
__gnu_cxx::__ops::_Iter_comp_iter< __decltype(__comp)>  __cmp(std::move(__comp)); 
# 397
std::__make_heap(__first, __last, __cmp); 
# 398
} 
# 400
template< class _RandomAccessIterator, class _Compare> void 
# 402
__sort_heap(_RandomAccessIterator __first, _RandomAccessIterator __last, _Compare &
# 403
__comp) 
# 404
{ 
# 405
while ((__last - __first) > 1) 
# 406
{ 
# 407
--__last; 
# 408
std::__pop_heap(__first, __last, __last, __comp); 
# 409
}  
# 410
} 
# 420 "/usr/include/c++/8/bits/stl_heap.h" 3
template< class _RandomAccessIterator> inline void 
# 422
sort_heap(_RandomAccessIterator __first, _RandomAccessIterator __last) 
# 423
{ 
# 429
; 
# 430
; 
# 431
; 
# 433
__gnu_cxx::__ops::_Iter_less_iter __comp; 
# 434
std::__sort_heap(__first, __last, __comp); 
# 435
} 
# 447 "/usr/include/c++/8/bits/stl_heap.h" 3
template< class _RandomAccessIterator, class _Compare> inline void 
# 449
sort_heap(_RandomAccessIterator __first, _RandomAccessIterator __last, _Compare 
# 450
__comp) 
# 451
{ 
# 455
; 
# 456
; 
# 457
; 
# 459
typedef __decltype(__comp) _Cmp; 
# 460
__gnu_cxx::__ops::_Iter_comp_iter< __decltype(__comp)>  __cmp(std::move(__comp)); 
# 461
std::__sort_heap(__first, __last, __cmp); 
# 462
} 
# 475 "/usr/include/c++/8/bits/stl_heap.h" 3
template< class _RandomAccessIterator> inline _RandomAccessIterator 
# 477
is_heap_until(_RandomAccessIterator __first, _RandomAccessIterator __last) 
# 478
{ 
# 484
; 
# 485
; 
# 487
__gnu_cxx::__ops::_Iter_less_iter __comp; 
# 488
return __first + std::__is_heap_until(__first, std::distance(__first, __last), __comp); 
# 490
} 
# 503 "/usr/include/c++/8/bits/stl_heap.h" 3
template< class _RandomAccessIterator, class _Compare> inline _RandomAccessIterator 
# 505
is_heap_until(_RandomAccessIterator __first, _RandomAccessIterator __last, _Compare 
# 506
__comp) 
# 507
{ 
# 511
; 
# 512
; 
# 514
typedef __decltype(__comp) _Cmp; 
# 515
__gnu_cxx::__ops::_Iter_comp_iter< __decltype(__comp)>  __cmp(std::move(__comp)); 
# 516
return __first + std::__is_heap_until(__first, std::distance(__first, __last), __cmp); 
# 518
} 
# 527 "/usr/include/c++/8/bits/stl_heap.h" 3
template< class _RandomAccessIterator> inline bool 
# 529
is_heap(_RandomAccessIterator __first, _RandomAccessIterator __last) 
# 530
{ return std::is_heap_until(__first, __last) == __last; } 
# 540 "/usr/include/c++/8/bits/stl_heap.h" 3
template< class _RandomAccessIterator, class _Compare> inline bool 
# 542
is_heap(_RandomAccessIterator __first, _RandomAccessIterator __last, _Compare 
# 543
__comp) 
# 544
{ 
# 548
; 
# 549
; 
# 551
const auto __dist = std::distance(__first, __last); 
# 552
typedef __decltype(__comp) _Cmp; 
# 553
__gnu_cxx::__ops::_Iter_comp_iter< __decltype(__comp)>  __cmp(std::move(__comp)); 
# 554
return std::__is_heap_until(__first, __dist, __cmp) == __dist; 
# 555
} 
# 559
}
# 62 "/usr/include/c++/8/bits/stl_tempbuf.h" 3
namespace std __attribute((__visibility__("default"))) { 
# 83 "/usr/include/c++/8/bits/stl_tempbuf.h" 3
template< class _Tp> pair< _Tp *, long>  
# 85
get_temporary_buffer(ptrdiff_t __len) noexcept 
# 86
{ 
# 87
const ptrdiff_t __max = (__gnu_cxx::__numeric_traits_integer< long> ::__max / sizeof(_Tp)); 
# 89
if (__len > __max) { 
# 90
__len = __max; }  
# 92
while (__len > (0)) 
# 93
{ 
# 94
_Tp *__tmp = static_cast< _Tp *>(::operator new(__len * sizeof(_Tp), std::nothrow)); 
# 96
if (__tmp != 0) { 
# 97
return pair< _Tp *, long> (__tmp, __len); }  
# 98
__len /= (2); 
# 99
}  
# 100
return pair< _Tp *, long> (static_cast< _Tp *>(0), 0); 
# 101
} 
# 110 "/usr/include/c++/8/bits/stl_tempbuf.h" 3
template< class _Tp> inline void 
# 112
return_temporary_buffer(_Tp *__p) 
# 113
{ ::operator delete(__p, std::nothrow); } 
# 121
template< class _ForwardIterator, class _Tp> 
# 122
class _Temporary_buffer { 
# 128
public: typedef _Tp value_type; 
# 129
typedef value_type *pointer; 
# 130
typedef pointer iterator; 
# 131
typedef ptrdiff_t size_type; 
# 134
protected: size_type _M_original_len; 
# 135
size_type _M_len; 
# 136
pointer _M_buffer; 
# 141
public: size_type size() const 
# 142
{ return _M_len; } 
# 146
size_type requested_size() const 
# 147
{ return _M_original_len; } 
# 151
iterator begin() 
# 152
{ return _M_buffer; } 
# 156
iterator end() 
# 157
{ return (_M_buffer) + (_M_len); } 
# 163
_Temporary_buffer(_ForwardIterator __first, _ForwardIterator __last); 
# 165
~_Temporary_buffer() 
# 166
{ 
# 167
std::_Destroy(_M_buffer, (_M_buffer) + (_M_len)); 
# 168
std::return_temporary_buffer(_M_buffer); 
# 169
} 
# 173
private: _Temporary_buffer(const _Temporary_buffer &); 
# 176
void operator=(const _Temporary_buffer &); 
# 177
}; 
# 180
template< bool > 
# 181
struct __uninitialized_construct_buf_dispatch { 
# 183
template< class _Pointer, class _ForwardIterator> static void 
# 185
__ucr(_Pointer __first, _Pointer __last, _ForwardIterator 
# 186
__seed) 
# 187
{ 
# 188
if (__first == __last) { 
# 189
return; }  
# 191
_Pointer __cur = __first; 
# 192
try 
# 193
{ 
# 194
std::_Construct(std::__addressof(*__first), std::move(*__seed)); 
# 196
_Pointer __prev = __cur; 
# 197
++__cur; 
# 198
for (; __cur != __last; (++__cur), (++__prev)) { 
# 199
std::_Construct(std::__addressof(*__cur), std::move(*__prev)); }  
# 201
(*__seed) = std::move(*__prev); 
# 202
} 
# 203
catch (...) 
# 204
{ 
# 205
std::_Destroy(__first, __cur); 
# 206
throw; 
# 207
}  
# 208
} 
# 209
}; 
# 212
template<> struct __uninitialized_construct_buf_dispatch< true>  { 
# 214
template< class _Pointer, class _ForwardIterator> static void 
# 216
__ucr(_Pointer, _Pointer, _ForwardIterator) { } 
# 217
}; 
# 229 "/usr/include/c++/8/bits/stl_tempbuf.h" 3
template< class _Pointer, class _ForwardIterator> inline void 
# 231
__uninitialized_construct_buf(_Pointer __first, _Pointer __last, _ForwardIterator 
# 232
__seed) 
# 233
{ 
# 235
typedef typename iterator_traits< _Pointer> ::value_type _ValueType; 
# 237
std::__uninitialized_construct_buf_dispatch< __has_trivial_constructor(typename iterator_traits< _Pointer> ::value_type)> ::__ucr(__first, __last, __seed); 
# 240
} 
# 242
template< class _ForwardIterator, class _Tp> 
# 244
_Temporary_buffer< _ForwardIterator, _Tp> ::_Temporary_buffer(_ForwardIterator __first, _ForwardIterator __last) : _M_original_len(std::distance(__first, __last)), _M_len((0)), _M_buffer((0)) 
# 247
{ 
# 248
try 
# 249
{ 
# 250
pair< _Tp *, long>  __p(std::get_temporary_buffer< value_type> (_M_original_len)); 
# 252
(_M_buffer) = (__p.first); 
# 253
(_M_len) = (__p.second); 
# 254
if (_M_buffer) { 
# 255
std::__uninitialized_construct_buf(_M_buffer, (_M_buffer) + (_M_len), __first); }  
# 257
} 
# 258
catch (...) 
# 259
{ 
# 260
std::return_temporary_buffer(_M_buffer); 
# 261
(_M_buffer) = 0; 
# 262
(_M_len) = (0); 
# 263
throw; 
# 264
}  
# 265
} 
# 268
}
# 158 "/usr/include/c++/8/limits" 3
namespace std __attribute((__visibility__("default"))) { 
# 167
enum float_round_style { 
# 169
round_indeterminate = (-1), 
# 170
round_toward_zero = 0, 
# 171
round_to_nearest, 
# 172
round_toward_infinity, 
# 173
round_toward_neg_infinity
# 174
}; 
# 182
enum float_denorm_style { 
# 185
denorm_indeterminate = (-1), 
# 187
denorm_absent = 0, 
# 189
denorm_present
# 190
}; 
# 202 "/usr/include/c++/8/limits" 3
struct __numeric_limits_base { 
# 206
static constexpr bool is_specialized = false; 
# 211
static constexpr int digits = 0; 
# 214
static constexpr int digits10 = 0; 
# 219
static constexpr int max_digits10 = 0; 
# 223
static constexpr bool is_signed = false; 
# 226
static constexpr bool is_integer = false; 
# 231
static constexpr bool is_exact = false; 
# 235
static constexpr int radix = 0; 
# 239
static constexpr int min_exponent = 0; 
# 243
static constexpr int min_exponent10 = 0; 
# 248
static constexpr int max_exponent = 0; 
# 252
static constexpr int max_exponent10 = 0; 
# 255
static constexpr bool has_infinity = false; 
# 259
static constexpr bool has_quiet_NaN = false; 
# 263
static constexpr bool has_signaling_NaN = false; 
# 266
static constexpr float_denorm_style has_denorm = denorm_absent; 
# 270
static constexpr bool has_denorm_loss = false; 
# 274
static constexpr bool is_iec559 = false; 
# 279
static constexpr bool is_bounded = false; 
# 288 "/usr/include/c++/8/limits" 3
static constexpr bool is_modulo = false; 
# 291
static constexpr bool traps = false; 
# 294
static constexpr bool tinyness_before = false; 
# 299
static constexpr float_round_style round_style = round_toward_zero; 
# 301
}; 
# 311 "/usr/include/c++/8/limits" 3
template< class _Tp> 
# 312
struct numeric_limits : public __numeric_limits_base { 
# 317
static constexpr _Tp min() noexcept { return _Tp(); } 
# 321
static constexpr _Tp max() noexcept { return _Tp(); } 
# 327
static constexpr _Tp lowest() noexcept { return _Tp(); } 
# 333
static constexpr _Tp epsilon() noexcept { return _Tp(); } 
# 337
static constexpr _Tp round_error() noexcept { return _Tp(); } 
# 341
static constexpr _Tp infinity() noexcept { return _Tp(); } 
# 346
static constexpr _Tp quiet_NaN() noexcept { return _Tp(); } 
# 351
static constexpr _Tp signaling_NaN() noexcept { return _Tp(); } 
# 357
static constexpr _Tp denorm_min() noexcept { return _Tp(); } 
# 358
}; 
# 363
template< class _Tp> 
# 364
struct numeric_limits< const _Tp>  : public std::numeric_limits< _Tp>  { 
# 365
}; 
# 367
template< class _Tp> 
# 368
struct numeric_limits< volatile _Tp>  : public std::numeric_limits< _Tp>  { 
# 369
}; 
# 371
template< class _Tp> 
# 372
struct numeric_limits< const volatile _Tp>  : public std::numeric_limits< _Tp>  { 
# 373
}; 
# 383 "/usr/include/c++/8/limits" 3
template<> struct numeric_limits< bool>  { 
# 385
static constexpr bool is_specialized = true; 
# 388
static constexpr bool min() noexcept { return false; } 
# 391
static constexpr bool max() noexcept { return true; } 
# 395
static constexpr bool lowest() noexcept { return min(); } 
# 397
static constexpr int digits = 1; 
# 398
static constexpr int digits10 = 0; 
# 400
static constexpr int max_digits10 = 0; 
# 402
static constexpr bool is_signed = false; 
# 403
static constexpr bool is_integer = true; 
# 404
static constexpr bool is_exact = true; 
# 405
static constexpr int radix = 2; 
# 408
static constexpr bool epsilon() noexcept { return false; } 
# 411
static constexpr bool round_error() noexcept { return false; } 
# 413
static constexpr int min_exponent = 0; 
# 414
static constexpr int min_exponent10 = 0; 
# 415
static constexpr int max_exponent = 0; 
# 416
static constexpr int max_exponent10 = 0; 
# 418
static constexpr bool has_infinity = false; 
# 419
static constexpr bool has_quiet_NaN = false; 
# 420
static constexpr bool has_signaling_NaN = false; 
# 421
static constexpr float_denorm_style has_denorm = denorm_absent; 
# 423
static constexpr bool has_denorm_loss = false; 
# 426
static constexpr bool infinity() noexcept { return false; } 
# 429
static constexpr bool quiet_NaN() noexcept { return false; } 
# 432
static constexpr bool signaling_NaN() noexcept { return false; } 
# 435
static constexpr bool denorm_min() noexcept { return false; } 
# 437
static constexpr bool is_iec559 = false; 
# 438
static constexpr bool is_bounded = true; 
# 439
static constexpr bool is_modulo = false; 
# 444
static constexpr bool traps = true; 
# 445
static constexpr bool tinyness_before = false; 
# 446
static constexpr float_round_style round_style = round_toward_zero; 
# 448
}; 
# 452
template<> struct numeric_limits< char>  { 
# 454
static constexpr bool is_specialized = true; 
# 457
static constexpr char min() noexcept { return (((char)(-1)) < 0) ? (-((((char)(-1)) < 0) ? (((((char)1) << (((sizeof(char) * (8)) - (((char)(-1)) < 0)) - (1))) - 1) << 1) + 1 : (~((char)0)))) - 1 : ((char)0); } 
# 460
static constexpr char max() noexcept { return (((char)(-1)) < 0) ? (((((char)1) << (((sizeof(char) * (8)) - (((char)(-1)) < 0)) - (1))) - 1) << 1) + 1 : (~((char)0)); } 
# 464
static constexpr char lowest() noexcept { return min(); } 
# 467
static constexpr int digits = ((sizeof(char) * (8)) - (((char)(-1)) < 0)); 
# 468
static constexpr int digits10 = ((((sizeof(char) * (8)) - (((char)(-1)) < 0)) * (643L)) / (2136)); 
# 470
static constexpr int max_digits10 = 0; 
# 472
static constexpr bool is_signed = (((char)(-1)) < 0); 
# 473
static constexpr bool is_integer = true; 
# 474
static constexpr bool is_exact = true; 
# 475
static constexpr int radix = 2; 
# 478
static constexpr char epsilon() noexcept { return 0; } 
# 481
static constexpr char round_error() noexcept { return 0; } 
# 483
static constexpr int min_exponent = 0; 
# 484
static constexpr int min_exponent10 = 0; 
# 485
static constexpr int max_exponent = 0; 
# 486
static constexpr int max_exponent10 = 0; 
# 488
static constexpr bool has_infinity = false; 
# 489
static constexpr bool has_quiet_NaN = false; 
# 490
static constexpr bool has_signaling_NaN = false; 
# 491
static constexpr float_denorm_style has_denorm = denorm_absent; 
# 493
static constexpr bool has_denorm_loss = false; 
# 496
static constexpr char infinity() noexcept { return ((char)0); } 
# 499
static constexpr char quiet_NaN() noexcept { return ((char)0); } 
# 502
static constexpr char signaling_NaN() noexcept { return ((char)0); } 
# 505
static constexpr char denorm_min() noexcept { return static_cast< char>(0); } 
# 507
static constexpr bool is_iec559 = false; 
# 508
static constexpr bool is_bounded = true; 
# 509
static constexpr bool is_modulo = (!is_signed); 
# 511
static constexpr bool traps = true; 
# 512
static constexpr bool tinyness_before = false; 
# 513
static constexpr float_round_style round_style = round_toward_zero; 
# 515
}; 
# 519
template<> struct numeric_limits< signed char>  { 
# 521
static constexpr bool is_specialized = true; 
# 524
static constexpr signed char min() noexcept { return (-127) - 1; } 
# 527
static constexpr signed char max() noexcept { return 127; } 
# 531
static constexpr signed char lowest() noexcept { return min(); } 
# 534
static constexpr int digits = ((sizeof(signed char) * (8)) - (((signed char)(-1)) < 0)); 
# 535
static constexpr int digits10 = ((((sizeof(signed char) * (8)) - (((signed char)(-1)) < 0)) * (643L)) / (2136)); 
# 538
static constexpr int max_digits10 = 0; 
# 540
static constexpr bool is_signed = true; 
# 541
static constexpr bool is_integer = true; 
# 542
static constexpr bool is_exact = true; 
# 543
static constexpr int radix = 2; 
# 546
static constexpr signed char epsilon() noexcept { return 0; } 
# 549
static constexpr signed char round_error() noexcept { return 0; } 
# 551
static constexpr int min_exponent = 0; 
# 552
static constexpr int min_exponent10 = 0; 
# 553
static constexpr int max_exponent = 0; 
# 554
static constexpr int max_exponent10 = 0; 
# 556
static constexpr bool has_infinity = false; 
# 557
static constexpr bool has_quiet_NaN = false; 
# 558
static constexpr bool has_signaling_NaN = false; 
# 559
static constexpr float_denorm_style has_denorm = denorm_absent; 
# 561
static constexpr bool has_denorm_loss = false; 
# 564
static constexpr signed char infinity() noexcept { return static_cast< signed char>(0); } 
# 567
static constexpr signed char quiet_NaN() noexcept { return static_cast< signed char>(0); } 
# 570
static constexpr signed char signaling_NaN() noexcept 
# 571
{ return static_cast< signed char>(0); } 
# 574
static constexpr signed char denorm_min() noexcept 
# 575
{ return static_cast< signed char>(0); } 
# 577
static constexpr bool is_iec559 = false; 
# 578
static constexpr bool is_bounded = true; 
# 579
static constexpr bool is_modulo = false; 
# 581
static constexpr bool traps = true; 
# 582
static constexpr bool tinyness_before = false; 
# 583
static constexpr float_round_style round_style = round_toward_zero; 
# 585
}; 
# 589
template<> struct numeric_limits< unsigned char>  { 
# 591
static constexpr bool is_specialized = true; 
# 594
static constexpr unsigned char min() noexcept { return 0; } 
# 597
static constexpr unsigned char max() noexcept { return ((127) * 2U) + (1); } 
# 601
static constexpr unsigned char lowest() noexcept { return min(); } 
# 604
static constexpr int digits = ((sizeof(unsigned char) * (8)) - (((unsigned char)(-1)) < 0)); 
# 606
static constexpr int digits10 = ((((sizeof(unsigned char) * (8)) - (((unsigned char)(-1)) < 0)) * (643L)) / (2136)); 
# 609
static constexpr int max_digits10 = 0; 
# 611
static constexpr bool is_signed = false; 
# 612
static constexpr bool is_integer = true; 
# 613
static constexpr bool is_exact = true; 
# 614
static constexpr int radix = 2; 
# 617
static constexpr unsigned char epsilon() noexcept { return 0; } 
# 620
static constexpr unsigned char round_error() noexcept { return 0; } 
# 622
static constexpr int min_exponent = 0; 
# 623
static constexpr int min_exponent10 = 0; 
# 624
static constexpr int max_exponent = 0; 
# 625
static constexpr int max_exponent10 = 0; 
# 627
static constexpr bool has_infinity = false; 
# 628
static constexpr bool has_quiet_NaN = false; 
# 629
static constexpr bool has_signaling_NaN = false; 
# 630
static constexpr float_denorm_style has_denorm = denorm_absent; 
# 632
static constexpr bool has_denorm_loss = false; 
# 635
static constexpr unsigned char infinity() noexcept 
# 636
{ return static_cast< unsigned char>(0); } 
# 639
static constexpr unsigned char quiet_NaN() noexcept 
# 640
{ return static_cast< unsigned char>(0); } 
# 643
static constexpr unsigned char signaling_NaN() noexcept 
# 644
{ return static_cast< unsigned char>(0); } 
# 647
static constexpr unsigned char denorm_min() noexcept 
# 648
{ return static_cast< unsigned char>(0); } 
# 650
static constexpr bool is_iec559 = false; 
# 651
static constexpr bool is_bounded = true; 
# 652
static constexpr bool is_modulo = true; 
# 654
static constexpr bool traps = true; 
# 655
static constexpr bool tinyness_before = false; 
# 656
static constexpr float_round_style round_style = round_toward_zero; 
# 658
}; 
# 662
template<> struct numeric_limits< wchar_t>  { 
# 664
static constexpr bool is_specialized = true; 
# 667
static constexpr wchar_t min() noexcept { return (((wchar_t)(-1)) < 0) ? (-((((wchar_t)(-1)) < 0) ? (((((wchar_t)1) << (((sizeof(wchar_t) * (8)) - (((wchar_t)(-1)) < 0)) - (1))) - 1) << 1) + 1 : (~((wchar_t)0)))) - 1 : ((wchar_t)0); } 
# 670
static constexpr wchar_t max() noexcept { return (((wchar_t)(-1)) < 0) ? (((((wchar_t)1) << (((sizeof(wchar_t) * (8)) - (((wchar_t)(-1)) < 0)) - (1))) - 1) << 1) + 1 : (~((wchar_t)0)); } 
# 674
static constexpr wchar_t lowest() noexcept { return min(); } 
# 677
static constexpr int digits = ((sizeof(wchar_t) * (8)) - (((wchar_t)(-1)) < 0)); 
# 678
static constexpr int digits10 = ((((sizeof(wchar_t) * (8)) - (((wchar_t)(-1)) < 0)) * (643L)) / (2136)); 
# 681
static constexpr int max_digits10 = 0; 
# 683
static constexpr bool is_signed = (((wchar_t)(-1)) < 0); 
# 684
static constexpr bool is_integer = true; 
# 685
static constexpr bool is_exact = true; 
# 686
static constexpr int radix = 2; 
# 689
static constexpr wchar_t epsilon() noexcept { return 0; } 
# 692
static constexpr wchar_t round_error() noexcept { return 0; } 
# 694
static constexpr int min_exponent = 0; 
# 695
static constexpr int min_exponent10 = 0; 
# 696
static constexpr int max_exponent = 0; 
# 697
static constexpr int max_exponent10 = 0; 
# 699
static constexpr bool has_infinity = false; 
# 700
static constexpr bool has_quiet_NaN = false; 
# 701
static constexpr bool has_signaling_NaN = false; 
# 702
static constexpr float_denorm_style has_denorm = denorm_absent; 
# 704
static constexpr bool has_denorm_loss = false; 
# 707
static constexpr wchar_t infinity() noexcept { return ((wchar_t)0); } 
# 710
static constexpr wchar_t quiet_NaN() noexcept { return ((wchar_t)0); } 
# 713
static constexpr wchar_t signaling_NaN() noexcept { return ((wchar_t)0); } 
# 716
static constexpr wchar_t denorm_min() noexcept { return ((wchar_t)0); } 
# 718
static constexpr bool is_iec559 = false; 
# 719
static constexpr bool is_bounded = true; 
# 720
static constexpr bool is_modulo = (!is_signed); 
# 722
static constexpr bool traps = true; 
# 723
static constexpr bool tinyness_before = false; 
# 724
static constexpr float_round_style round_style = round_toward_zero; 
# 726
}; 
# 731
template<> struct numeric_limits< char16_t>  { 
# 733
static constexpr bool is_specialized = true; 
# 736
static constexpr char16_t min() noexcept { return (((char16_t)(-1)) < 0) ? (-((((char16_t)(-1)) < 0) ? (((((char16_t)1) << (((sizeof(char16_t) * (8)) - (((char16_t)(-1)) < 0)) - (1))) - 1) << 1) + 1 : (~((char16_t)0)))) - 1 : ((char16_t)0); } 
# 739
static constexpr char16_t max() noexcept { return (((char16_t)(-1)) < 0) ? (((((char16_t)1) << (((sizeof(char16_t) * (8)) - (((char16_t)(-1)) < 0)) - (1))) - 1) << 1) + 1 : (~((char16_t)0)); } 
# 742
static constexpr char16_t lowest() noexcept { return min(); } 
# 744
static constexpr int digits = ((sizeof(char16_t) * (8)) - (((char16_t)(-1)) < 0)); 
# 745
static constexpr int digits10 = ((((sizeof(char16_t) * (8)) - (((char16_t)(-1)) < 0)) * (643L)) / (2136)); 
# 746
static constexpr int max_digits10 = 0; 
# 747
static constexpr bool is_signed = (((char16_t)(-1)) < 0); 
# 748
static constexpr bool is_integer = true; 
# 749
static constexpr bool is_exact = true; 
# 750
static constexpr int radix = 2; 
# 753
static constexpr char16_t epsilon() noexcept { return 0; } 
# 756
static constexpr char16_t round_error() noexcept { return 0; } 
# 758
static constexpr int min_exponent = 0; 
# 759
static constexpr int min_exponent10 = 0; 
# 760
static constexpr int max_exponent = 0; 
# 761
static constexpr int max_exponent10 = 0; 
# 763
static constexpr bool has_infinity = false; 
# 764
static constexpr bool has_quiet_NaN = false; 
# 765
static constexpr bool has_signaling_NaN = false; 
# 766
static constexpr float_denorm_style has_denorm = denorm_absent; 
# 767
static constexpr bool has_denorm_loss = false; 
# 770
static constexpr char16_t infinity() noexcept { return ((char16_t)0); } 
# 773
static constexpr char16_t quiet_NaN() noexcept { return ((char16_t)0); } 
# 776
static constexpr char16_t signaling_NaN() noexcept { return ((char16_t)0); } 
# 779
static constexpr char16_t denorm_min() noexcept { return ((char16_t)0); } 
# 781
static constexpr bool is_iec559 = false; 
# 782
static constexpr bool is_bounded = true; 
# 783
static constexpr bool is_modulo = (!is_signed); 
# 785
static constexpr bool traps = true; 
# 786
static constexpr bool tinyness_before = false; 
# 787
static constexpr float_round_style round_style = round_toward_zero; 
# 788
}; 
# 792
template<> struct numeric_limits< char32_t>  { 
# 794
static constexpr bool is_specialized = true; 
# 797
static constexpr char32_t min() noexcept { return (((char32_t)(-1)) < (0)) ? (-((((char32_t)(-1)) < (0)) ? (((((char32_t)1) << (((sizeof(char32_t) * (8)) - (((char32_t)(-1)) < (0))) - (1))) - (1)) << 1) + (1) : (~((char32_t)0)))) - (1) : ((char32_t)0); } 
# 800
static constexpr char32_t max() noexcept { return (((char32_t)(-1)) < (0)) ? (((((char32_t)1) << (((sizeof(char32_t) * (8)) - (((char32_t)(-1)) < (0))) - (1))) - (1)) << 1) + (1) : (~((char32_t)0)); } 
# 803
static constexpr char32_t lowest() noexcept { return min(); } 
# 805
static constexpr int digits = ((sizeof(char32_t) * (8)) - (((char32_t)(-1)) < (0))); 
# 806
static constexpr int digits10 = ((((sizeof(char32_t) * (8)) - (((char32_t)(-1)) < (0))) * (643L)) / (2136)); 
# 807
static constexpr int max_digits10 = 0; 
# 808
static constexpr bool is_signed = (((char32_t)(-1)) < (0)); 
# 809
static constexpr bool is_integer = true; 
# 810
static constexpr bool is_exact = true; 
# 811
static constexpr int radix = 2; 
# 814
static constexpr char32_t epsilon() noexcept { return 0; } 
# 817
static constexpr char32_t round_error() noexcept { return 0; } 
# 819
static constexpr int min_exponent = 0; 
# 820
static constexpr int min_exponent10 = 0; 
# 821
static constexpr int max_exponent = 0; 
# 822
static constexpr int max_exponent10 = 0; 
# 824
static constexpr bool has_infinity = false; 
# 825
static constexpr bool has_quiet_NaN = false; 
# 826
static constexpr bool has_signaling_NaN = false; 
# 827
static constexpr float_denorm_style has_denorm = denorm_absent; 
# 828
static constexpr bool has_denorm_loss = false; 
# 831
static constexpr char32_t infinity() noexcept { return ((char32_t)0); } 
# 834
static constexpr char32_t quiet_NaN() noexcept { return ((char32_t)0); } 
# 837
static constexpr char32_t signaling_NaN() noexcept { return ((char32_t)0); } 
# 840
static constexpr char32_t denorm_min() noexcept { return ((char32_t)0); } 
# 842
static constexpr bool is_iec559 = false; 
# 843
static constexpr bool is_bounded = true; 
# 844
static constexpr bool is_modulo = (!is_signed); 
# 846
static constexpr bool traps = true; 
# 847
static constexpr bool tinyness_before = false; 
# 848
static constexpr float_round_style round_style = round_toward_zero; 
# 849
}; 
# 854
template<> struct numeric_limits< short>  { 
# 856
static constexpr bool is_specialized = true; 
# 859
static constexpr short min() noexcept { return (-32767) - 1; } 
# 862
static constexpr short max() noexcept { return 32767; } 
# 866
static constexpr short lowest() noexcept { return min(); } 
# 869
static constexpr int digits = ((sizeof(short) * (8)) - (((short)(-1)) < 0)); 
# 870
static constexpr int digits10 = ((((sizeof(short) * (8)) - (((short)(-1)) < 0)) * (643L)) / (2136)); 
# 872
static constexpr int max_digits10 = 0; 
# 874
static constexpr bool is_signed = true; 
# 875
static constexpr bool is_integer = true; 
# 876
static constexpr bool is_exact = true; 
# 877
static constexpr int radix = 2; 
# 880
static constexpr short epsilon() noexcept { return 0; } 
# 883
static constexpr short round_error() noexcept { return 0; } 
# 885
static constexpr int min_exponent = 0; 
# 886
static constexpr int min_exponent10 = 0; 
# 887
static constexpr int max_exponent = 0; 
# 888
static constexpr int max_exponent10 = 0; 
# 890
static constexpr bool has_infinity = false; 
# 891
static constexpr bool has_quiet_NaN = false; 
# 892
static constexpr bool has_signaling_NaN = false; 
# 893
static constexpr float_denorm_style has_denorm = denorm_absent; 
# 895
static constexpr bool has_denorm_loss = false; 
# 898
static constexpr short infinity() noexcept { return ((short)0); } 
# 901
static constexpr short quiet_NaN() noexcept { return ((short)0); } 
# 904
static constexpr short signaling_NaN() noexcept { return ((short)0); } 
# 907
static constexpr short denorm_min() noexcept { return ((short)0); } 
# 909
static constexpr bool is_iec559 = false; 
# 910
static constexpr bool is_bounded = true; 
# 911
static constexpr bool is_modulo = false; 
# 913
static constexpr bool traps = true; 
# 914
static constexpr bool tinyness_before = false; 
# 915
static constexpr float_round_style round_style = round_toward_zero; 
# 917
}; 
# 921
template<> struct numeric_limits< unsigned short>  { 
# 923
static constexpr bool is_specialized = true; 
# 926
static constexpr unsigned short min() noexcept { return 0; } 
# 929
static constexpr unsigned short max() noexcept { return ((32767) * 2U) + (1); } 
# 933
static constexpr unsigned short lowest() noexcept { return min(); } 
# 936
static constexpr int digits = ((sizeof(unsigned short) * (8)) - (((unsigned short)(-1)) < 0)); 
# 938
static constexpr int digits10 = ((((sizeof(unsigned short) * (8)) - (((unsigned short)(-1)) < 0)) * (643L)) / (2136)); 
# 941
static constexpr int max_digits10 = 0; 
# 943
static constexpr bool is_signed = false; 
# 944
static constexpr bool is_integer = true; 
# 945
static constexpr bool is_exact = true; 
# 946
static constexpr int radix = 2; 
# 949
static constexpr unsigned short epsilon() noexcept { return 0; } 
# 952
static constexpr unsigned short round_error() noexcept { return 0; } 
# 954
static constexpr int min_exponent = 0; 
# 955
static constexpr int min_exponent10 = 0; 
# 956
static constexpr int max_exponent = 0; 
# 957
static constexpr int max_exponent10 = 0; 
# 959
static constexpr bool has_infinity = false; 
# 960
static constexpr bool has_quiet_NaN = false; 
# 961
static constexpr bool has_signaling_NaN = false; 
# 962
static constexpr float_denorm_style has_denorm = denorm_absent; 
# 964
static constexpr bool has_denorm_loss = false; 
# 967
static constexpr unsigned short infinity() noexcept 
# 968
{ return static_cast< unsigned short>(0); } 
# 971
static constexpr unsigned short quiet_NaN() noexcept 
# 972
{ return static_cast< unsigned short>(0); } 
# 975
static constexpr unsigned short signaling_NaN() noexcept 
# 976
{ return static_cast< unsigned short>(0); } 
# 979
static constexpr unsigned short denorm_min() noexcept 
# 980
{ return static_cast< unsigned short>(0); } 
# 982
static constexpr bool is_iec559 = false; 
# 983
static constexpr bool is_bounded = true; 
# 984
static constexpr bool is_modulo = true; 
# 986
static constexpr bool traps = true; 
# 987
static constexpr bool tinyness_before = false; 
# 988
static constexpr float_round_style round_style = round_toward_zero; 
# 990
}; 
# 994
template<> struct numeric_limits< int>  { 
# 996
static constexpr bool is_specialized = true; 
# 999
static constexpr int min() noexcept { return (-2147483647) - 1; } 
# 1002
static constexpr int max() noexcept { return 2147483647; } 
# 1006
static constexpr int lowest() noexcept { return min(); } 
# 1009
static constexpr int digits = ((sizeof(int) * (8)) - (((int)(-1)) < 0)); 
# 1010
static constexpr int digits10 = ((((sizeof(int) * (8)) - (((int)(-1)) < 0)) * (643L)) / (2136)); 
# 1012
static constexpr int max_digits10 = 0; 
# 1014
static constexpr bool is_signed = true; 
# 1015
static constexpr bool is_integer = true; 
# 1016
static constexpr bool is_exact = true; 
# 1017
static constexpr int radix = 2; 
# 1020
static constexpr int epsilon() noexcept { return 0; } 
# 1023
static constexpr int round_error() noexcept { return 0; } 
# 1025
static constexpr int min_exponent = 0; 
# 1026
static constexpr int min_exponent10 = 0; 
# 1027
static constexpr int max_exponent = 0; 
# 1028
static constexpr int max_exponent10 = 0; 
# 1030
static constexpr bool has_infinity = false; 
# 1031
static constexpr bool has_quiet_NaN = false; 
# 1032
static constexpr bool has_signaling_NaN = false; 
# 1033
static constexpr float_denorm_style has_denorm = denorm_absent; 
# 1035
static constexpr bool has_denorm_loss = false; 
# 1038
static constexpr int infinity() noexcept { return static_cast< int>(0); } 
# 1041
static constexpr int quiet_NaN() noexcept { return static_cast< int>(0); } 
# 1044
static constexpr int signaling_NaN() noexcept { return static_cast< int>(0); } 
# 1047
static constexpr int denorm_min() noexcept { return static_cast< int>(0); } 
# 1049
static constexpr bool is_iec559 = false; 
# 1050
static constexpr bool is_bounded = true; 
# 1051
static constexpr bool is_modulo = false; 
# 1053
static constexpr bool traps = true; 
# 1054
static constexpr bool tinyness_before = false; 
# 1055
static constexpr float_round_style round_style = round_toward_zero; 
# 1057
}; 
# 1061
template<> struct numeric_limits< unsigned>  { 
# 1063
static constexpr bool is_specialized = true; 
# 1066
static constexpr unsigned min() noexcept { return 0; } 
# 1069
static constexpr unsigned max() noexcept { return ((2147483647) * 2U) + (1); } 
# 1073
static constexpr unsigned lowest() noexcept { return min(); } 
# 1076
static constexpr int digits = ((sizeof(unsigned) * (8)) - (((unsigned)(-1)) < (0))); 
# 1078
static constexpr int digits10 = ((((sizeof(unsigned) * (8)) - (((unsigned)(-1)) < (0))) * (643L)) / (2136)); 
# 1081
static constexpr int max_digits10 = 0; 
# 1083
static constexpr bool is_signed = false; 
# 1084
static constexpr bool is_integer = true; 
# 1085
static constexpr bool is_exact = true; 
# 1086
static constexpr int radix = 2; 
# 1089
static constexpr unsigned epsilon() noexcept { return 0; } 
# 1092
static constexpr unsigned round_error() noexcept { return 0; } 
# 1094
static constexpr int min_exponent = 0; 
# 1095
static constexpr int min_exponent10 = 0; 
# 1096
static constexpr int max_exponent = 0; 
# 1097
static constexpr int max_exponent10 = 0; 
# 1099
static constexpr bool has_infinity = false; 
# 1100
static constexpr bool has_quiet_NaN = false; 
# 1101
static constexpr bool has_signaling_NaN = false; 
# 1102
static constexpr float_denorm_style has_denorm = denorm_absent; 
# 1104
static constexpr bool has_denorm_loss = false; 
# 1107
static constexpr unsigned infinity() noexcept { return static_cast< unsigned>(0); } 
# 1110
static constexpr unsigned quiet_NaN() noexcept 
# 1111
{ return static_cast< unsigned>(0); } 
# 1114
static constexpr unsigned signaling_NaN() noexcept 
# 1115
{ return static_cast< unsigned>(0); } 
# 1118
static constexpr unsigned denorm_min() noexcept 
# 1119
{ return static_cast< unsigned>(0); } 
# 1121
static constexpr bool is_iec559 = false; 
# 1122
static constexpr bool is_bounded = true; 
# 1123
static constexpr bool is_modulo = true; 
# 1125
static constexpr bool traps = true; 
# 1126
static constexpr bool tinyness_before = false; 
# 1127
static constexpr float_round_style round_style = round_toward_zero; 
# 1129
}; 
# 1133
template<> struct numeric_limits< long>  { 
# 1135
static constexpr bool is_specialized = true; 
# 1138
static constexpr long min() noexcept { return (-9223372036854775807L) - (1); } 
# 1141
static constexpr long max() noexcept { return 9223372036854775807L; } 
# 1145
static constexpr long lowest() noexcept { return min(); } 
# 1148
static constexpr int digits = ((sizeof(long) * (8)) - (((long)(-1)) < (0))); 
# 1149
static constexpr int digits10 = ((((sizeof(long) * (8)) - (((long)(-1)) < (0))) * (643L)) / (2136)); 
# 1151
static constexpr int max_digits10 = 0; 
# 1153
static constexpr bool is_signed = true; 
# 1154
static constexpr bool is_integer = true; 
# 1155
static constexpr bool is_exact = true; 
# 1156
static constexpr int radix = 2; 
# 1159
static constexpr long epsilon() noexcept { return 0; } 
# 1162
static constexpr long round_error() noexcept { return 0; } 
# 1164
static constexpr int min_exponent = 0; 
# 1165
static constexpr int min_exponent10 = 0; 
# 1166
static constexpr int max_exponent = 0; 
# 1167
static constexpr int max_exponent10 = 0; 
# 1169
static constexpr bool has_infinity = false; 
# 1170
static constexpr bool has_quiet_NaN = false; 
# 1171
static constexpr bool has_signaling_NaN = false; 
# 1172
static constexpr float_denorm_style has_denorm = denorm_absent; 
# 1174
static constexpr bool has_denorm_loss = false; 
# 1177
static constexpr long infinity() noexcept { return static_cast< long>(0); } 
# 1180
static constexpr long quiet_NaN() noexcept { return static_cast< long>(0); } 
# 1183
static constexpr long signaling_NaN() noexcept { return static_cast< long>(0); } 
# 1186
static constexpr long denorm_min() noexcept { return static_cast< long>(0); } 
# 1188
static constexpr bool is_iec559 = false; 
# 1189
static constexpr bool is_bounded = true; 
# 1190
static constexpr bool is_modulo = false; 
# 1192
static constexpr bool traps = true; 
# 1193
static constexpr bool tinyness_before = false; 
# 1194
static constexpr float_round_style round_style = round_toward_zero; 
# 1196
}; 
# 1200
template<> struct numeric_limits< unsigned long>  { 
# 1202
static constexpr bool is_specialized = true; 
# 1205
static constexpr unsigned long min() noexcept { return 0; } 
# 1208
static constexpr unsigned long max() noexcept { return ((9223372036854775807L) * 2UL) + (1); } 
# 1212
static constexpr unsigned long lowest() noexcept { return min(); } 
# 1215
static constexpr int digits = ((sizeof(unsigned long) * (8)) - (((unsigned long)(-1)) < (0))); 
# 1217
static constexpr int digits10 = ((((sizeof(unsigned long) * (8)) - (((unsigned long)(-1)) < (0))) * (643L)) / (2136)); 
# 1220
static constexpr int max_digits10 = 0; 
# 1222
static constexpr bool is_signed = false; 
# 1223
static constexpr bool is_integer = true; 
# 1224
static constexpr bool is_exact = true; 
# 1225
static constexpr int radix = 2; 
# 1228
static constexpr unsigned long epsilon() noexcept { return 0; } 
# 1231
static constexpr unsigned long round_error() noexcept { return 0; } 
# 1233
static constexpr int min_exponent = 0; 
# 1234
static constexpr int min_exponent10 = 0; 
# 1235
static constexpr int max_exponent = 0; 
# 1236
static constexpr int max_exponent10 = 0; 
# 1238
static constexpr bool has_infinity = false; 
# 1239
static constexpr bool has_quiet_NaN = false; 
# 1240
static constexpr bool has_signaling_NaN = false; 
# 1241
static constexpr float_denorm_style has_denorm = denorm_absent; 
# 1243
static constexpr bool has_denorm_loss = false; 
# 1246
static constexpr unsigned long infinity() noexcept 
# 1247
{ return static_cast< unsigned long>(0); } 
# 1250
static constexpr unsigned long quiet_NaN() noexcept 
# 1251
{ return static_cast< unsigned long>(0); } 
# 1254
static constexpr unsigned long signaling_NaN() noexcept 
# 1255
{ return static_cast< unsigned long>(0); } 
# 1258
static constexpr unsigned long denorm_min() noexcept 
# 1259
{ return static_cast< unsigned long>(0); } 
# 1261
static constexpr bool is_iec559 = false; 
# 1262
static constexpr bool is_bounded = true; 
# 1263
static constexpr bool is_modulo = true; 
# 1265
static constexpr bool traps = true; 
# 1266
static constexpr bool tinyness_before = false; 
# 1267
static constexpr float_round_style round_style = round_toward_zero; 
# 1269
}; 
# 1273
template<> struct numeric_limits< long long>  { 
# 1275
static constexpr bool is_specialized = true; 
# 1278
static constexpr long long min() noexcept { return (-9223372036854775807LL) - (1); } 
# 1281
static constexpr long long max() noexcept { return 9223372036854775807LL; } 
# 1285
static constexpr long long lowest() noexcept { return min(); } 
# 1288
static constexpr int digits = ((sizeof(long long) * (8)) - (((long long)(-1)) < (0))); 
# 1290
static constexpr int digits10 = ((((sizeof(long long) * (8)) - (((long long)(-1)) < (0))) * (643L)) / (2136)); 
# 1293
static constexpr int max_digits10 = 0; 
# 1295
static constexpr bool is_signed = true; 
# 1296
static constexpr bool is_integer = true; 
# 1297
static constexpr bool is_exact = true; 
# 1298
static constexpr int radix = 2; 
# 1301
static constexpr long long epsilon() noexcept { return 0; } 
# 1304
static constexpr long long round_error() noexcept { return 0; } 
# 1306
static constexpr int min_exponent = 0; 
# 1307
static constexpr int min_exponent10 = 0; 
# 1308
static constexpr int max_exponent = 0; 
# 1309
static constexpr int max_exponent10 = 0; 
# 1311
static constexpr bool has_infinity = false; 
# 1312
static constexpr bool has_quiet_NaN = false; 
# 1313
static constexpr bool has_signaling_NaN = false; 
# 1314
static constexpr float_denorm_style has_denorm = denorm_absent; 
# 1316
static constexpr bool has_denorm_loss = false; 
# 1319
static constexpr long long infinity() noexcept { return static_cast< long long>(0); } 
# 1322
static constexpr long long quiet_NaN() noexcept { return static_cast< long long>(0); } 
# 1325
static constexpr long long signaling_NaN() noexcept 
# 1326
{ return static_cast< long long>(0); } 
# 1329
static constexpr long long denorm_min() noexcept { return static_cast< long long>(0); } 
# 1331
static constexpr bool is_iec559 = false; 
# 1332
static constexpr bool is_bounded = true; 
# 1333
static constexpr bool is_modulo = false; 
# 1335
static constexpr bool traps = true; 
# 1336
static constexpr bool tinyness_before = false; 
# 1337
static constexpr float_round_style round_style = round_toward_zero; 
# 1339
}; 
# 1343
template<> struct numeric_limits< unsigned long long>  { 
# 1345
static constexpr bool is_specialized = true; 
# 1348
static constexpr unsigned long long min() noexcept { return 0; } 
# 1351
static constexpr unsigned long long max() noexcept { return ((9223372036854775807LL) * 2ULL) + (1); } 
# 1355
static constexpr unsigned long long lowest() noexcept { return min(); } 
# 1358
static constexpr int digits = ((sizeof(unsigned long long) * (8)) - (((unsigned long long)(-1)) < (0))); 
# 1360
static constexpr int digits10 = ((((sizeof(unsigned long long) * (8)) - (((unsigned long long)(-1)) < (0))) * (643L)) / (2136)); 
# 1363
static constexpr int max_digits10 = 0; 
# 1365
static constexpr bool is_signed = false; 
# 1366
static constexpr bool is_integer = true; 
# 1367
static constexpr bool is_exact = true; 
# 1368
static constexpr int radix = 2; 
# 1371
static constexpr unsigned long long epsilon() noexcept { return 0; } 
# 1374
static constexpr unsigned long long round_error() noexcept { return 0; } 
# 1376
static constexpr int min_exponent = 0; 
# 1377
static constexpr int min_exponent10 = 0; 
# 1378
static constexpr int max_exponent = 0; 
# 1379
static constexpr int max_exponent10 = 0; 
# 1381
static constexpr bool has_infinity = false; 
# 1382
static constexpr bool has_quiet_NaN = false; 
# 1383
static constexpr bool has_signaling_NaN = false; 
# 1384
static constexpr float_denorm_style has_denorm = denorm_absent; 
# 1386
static constexpr bool has_denorm_loss = false; 
# 1389
static constexpr unsigned long long infinity() noexcept 
# 1390
{ return static_cast< unsigned long long>(0); } 
# 1393
static constexpr unsigned long long quiet_NaN() noexcept 
# 1394
{ return static_cast< unsigned long long>(0); } 
# 1397
static constexpr unsigned long long signaling_NaN() noexcept 
# 1398
{ return static_cast< unsigned long long>(0); } 
# 1401
static constexpr unsigned long long denorm_min() noexcept 
# 1402
{ return static_cast< unsigned long long>(0); } 
# 1404
static constexpr bool is_iec559 = false; 
# 1405
static constexpr bool is_bounded = true; 
# 1406
static constexpr bool is_modulo = true; 
# 1408
static constexpr bool traps = true; 
# 1409
static constexpr bool tinyness_before = false; 
# 1410
static constexpr float_round_style round_style = round_toward_zero; 
# 1412
}; 
# 1570 "/usr/include/c++/8/limits" 3
template<> struct numeric_limits< __int128_t>  { static constexpr bool is_specialized = true; static constexpr __int128_t min() noexcept { return (((__int128_t)(-1)) < (0)) ? (-((((__int128_t)(-1)) < (0)) ? (((((__int128_t)1) << ((128 - (((__int128_t)(-1)) < (0))) - 1)) - (1)) << 1) + (1) : (~((__int128_t)0)))) - (1) : ((__int128_t)0); } static constexpr __int128_t max() noexcept { return (((__int128_t)(-1)) < (0)) ? (((((__int128_t)1) << ((128 - (((__int128_t)(-1)) < (0))) - 1)) - (1)) << 1) + (1) : (~((__int128_t)0)); } static constexpr int digits = (128 - 1); static constexpr int digits10 = (((128 - 1) * 643L) / (2136)); static constexpr bool is_signed = true; static constexpr bool is_integer = true; static constexpr bool is_exact = true; static constexpr int radix = 2; static constexpr __int128_t epsilon() noexcept { return 0; } static constexpr __int128_t round_error() noexcept { return 0; } static constexpr __int128_t lowest() noexcept { return min(); } static constexpr int max_digits10 = 0; static constexpr int min_exponent = 0; static constexpr int min_exponent10 = 0; static constexpr int max_exponent = 0; static constexpr int max_exponent10 = 0; static constexpr bool has_infinity = false; static constexpr bool has_quiet_NaN = false; static constexpr bool has_signaling_NaN = false; static constexpr float_denorm_style has_denorm = denorm_absent; static constexpr bool has_denorm_loss = false; static constexpr __int128_t infinity() noexcept { return static_cast< __int128_t>(0); } static constexpr __int128_t quiet_NaN() noexcept { return static_cast< __int128_t>(0); } static constexpr __int128_t signaling_NaN() noexcept { return static_cast< __int128_t>(0); } static constexpr __int128_t denorm_min() noexcept { return static_cast< __int128_t>(0); } static constexpr bool is_iec559 = false; static constexpr bool is_bounded = true; static constexpr bool is_modulo = false; static constexpr bool traps = true; static constexpr bool tinyness_before = false; static constexpr float_round_style round_style = round_toward_zero; }; template<> struct numeric_limits< __uint128_t>  { static constexpr bool is_specialized = true; static constexpr __uint128_t min() noexcept { return 0; } static constexpr __uint128_t max() noexcept { return (((__uint128_t)(-1)) < (0)) ? (((((__uint128_t)1) << ((128 - (((__uint128_t)(-1)) < (0))) - 1)) - (1)) << 1) + (1) : (~((__uint128_t)0)); } static constexpr __uint128_t lowest() noexcept { return min(); } static constexpr int max_digits10 = 0; static constexpr int digits = 128; static constexpr int digits10 = (((128) * 643L) / (2136)); static constexpr bool is_signed = false; static constexpr bool is_integer = true; static constexpr bool is_exact = true; static constexpr int radix = 2; static constexpr __uint128_t epsilon() noexcept { return 0; } static constexpr __uint128_t round_error() noexcept { return 0; } static constexpr int min_exponent = 0; static constexpr int min_exponent10 = 0; static constexpr int max_exponent = 0; static constexpr int max_exponent10 = 0; static constexpr bool has_infinity = false; static constexpr bool has_quiet_NaN = false; static constexpr bool has_signaling_NaN = false; static constexpr float_denorm_style has_denorm = denorm_absent; static constexpr bool has_denorm_loss = false; static constexpr __uint128_t infinity() noexcept { return static_cast< __uint128_t>(0); } static constexpr __uint128_t quiet_NaN() noexcept { return static_cast< __uint128_t>(0); } static constexpr __uint128_t signaling_NaN() noexcept { return static_cast< __uint128_t>(0); } static constexpr __uint128_t denorm_min() noexcept { return static_cast< __uint128_t>(0); } static constexpr bool is_iec559 = false; static constexpr bool is_bounded = true; static constexpr bool is_modulo = true; static constexpr bool traps = true; static constexpr bool tinyness_before = false; static constexpr float_round_style round_style = round_toward_zero; }; 
# 1594 "/usr/include/c++/8/limits" 3
template<> struct numeric_limits< float>  { 
# 1596
static constexpr bool is_specialized = true; 
# 1599
static constexpr float min() noexcept { return (1.175494351e-38F); } 
# 1602
static constexpr float max() noexcept { return (3.402823466e+38F); } 
# 1606
static constexpr float lowest() noexcept { return -(3.402823466e+38F); } 
# 1609
static constexpr int digits = 24; 
# 1610
static constexpr int digits10 = 6; 
# 1612
static constexpr int max_digits10 = ((2) + (((24) * 643L) / (2136))); 
# 1615
static constexpr bool is_signed = true; 
# 1616
static constexpr bool is_integer = false; 
# 1617
static constexpr bool is_exact = false; 
# 1618
static constexpr int radix = 2; 
# 1621
static constexpr float epsilon() noexcept { return (1.192092896e-07F); } 
# 1624
static constexpr float round_error() noexcept { return (0.5F); } 
# 1626
static constexpr int min_exponent = (-125); 
# 1627
static constexpr int min_exponent10 = (-37); 
# 1628
static constexpr int max_exponent = 128; 
# 1629
static constexpr int max_exponent10 = 38; 
# 1631
static constexpr bool has_infinity = (1); 
# 1632
static constexpr bool has_quiet_NaN = (1); 
# 1633
static constexpr bool has_signaling_NaN = has_quiet_NaN; 
# 1634
static constexpr float_denorm_style has_denorm = (((bool)1) ? denorm_present : denorm_absent); 
# 1636
static constexpr bool has_denorm_loss = false; 
# 1640
static constexpr float infinity() noexcept { return __builtin_huge_valf(); } 
# 1643
static constexpr float quiet_NaN() noexcept { return __builtin_nanf(""); } 
# 1646
static constexpr float signaling_NaN() noexcept { return __builtin_nansf(""); } 
# 1649
static constexpr float denorm_min() noexcept { return (1.401298464e-45F); } 
# 1651
static constexpr bool is_iec559 = (has_infinity && has_quiet_NaN && (has_denorm == (denorm_present))); 
# 1653
static constexpr bool is_bounded = true; 
# 1654
static constexpr bool is_modulo = false; 
# 1656
static constexpr bool traps = false; 
# 1657
static constexpr bool tinyness_before = false; 
# 1659
static constexpr float_round_style round_style = round_to_nearest; 
# 1661
}; 
# 1669
template<> struct numeric_limits< double>  { 
# 1671
static constexpr bool is_specialized = true; 
# 1674
static constexpr double min() noexcept { return (double)(2.2250738585072013831e-308L); } 
# 1677
static constexpr double max() noexcept { return (double)(1.7976931348623157081e+308L); } 
# 1681
static constexpr double lowest() noexcept { return -((double)(1.7976931348623157081e+308L)); } 
# 1684
static constexpr int digits = 53; 
# 1685
static constexpr int digits10 = 15; 
# 1687
static constexpr int max_digits10 = ((2) + (((53) * 643L) / (2136))); 
# 1690
static constexpr bool is_signed = true; 
# 1691
static constexpr bool is_integer = false; 
# 1692
static constexpr bool is_exact = false; 
# 1693
static constexpr int radix = 2; 
# 1696
static constexpr double epsilon() noexcept { return (double)(2.2204460492503130808e-16L); } 
# 1699
static constexpr double round_error() noexcept { return (0.5); } 
# 1701
static constexpr int min_exponent = (-1021); 
# 1702
static constexpr int min_exponent10 = (-307); 
# 1703
static constexpr int max_exponent = 1024; 
# 1704
static constexpr int max_exponent10 = 308; 
# 1706
static constexpr bool has_infinity = (1); 
# 1707
static constexpr bool has_quiet_NaN = (1); 
# 1708
static constexpr bool has_signaling_NaN = has_quiet_NaN; 
# 1709
static constexpr float_denorm_style has_denorm = (((bool)1) ? denorm_present : denorm_absent); 
# 1711
static constexpr bool has_denorm_loss = false; 
# 1715
static constexpr double infinity() noexcept { return __builtin_huge_val(); } 
# 1718
static constexpr double quiet_NaN() noexcept { return __builtin_nan(""); } 
# 1721
static constexpr double signaling_NaN() noexcept { return __builtin_nans(""); } 
# 1724
static constexpr double denorm_min() noexcept { return (double)(4.9406564584124654418e-324L); } 
# 1726
static constexpr bool is_iec559 = (has_infinity && has_quiet_NaN && (has_denorm == (denorm_present))); 
# 1728
static constexpr bool is_bounded = true; 
# 1729
static constexpr bool is_modulo = false; 
# 1731
static constexpr bool traps = false; 
# 1732
static constexpr bool tinyness_before = false; 
# 1734
static constexpr float_round_style round_style = round_to_nearest; 
# 1736
}; 
# 1744
template<> struct numeric_limits< long double>  { 
# 1746
static constexpr bool is_specialized = true; 
# 1749
static constexpr long double min() noexcept { return (3.3621031431120935063e-4932L); } 
# 1752
static constexpr long double max() noexcept { return (1.189731495357231765e+4932L); } 
# 1756
static constexpr long double lowest() noexcept { return -(1.189731495357231765e+4932L); } 
# 1759
static constexpr int digits = 64; 
# 1760
static constexpr int digits10 = 18; 
# 1762
static constexpr int max_digits10 = ((2) + (((64) * 643L) / (2136))); 
# 1765
static constexpr bool is_signed = true; 
# 1766
static constexpr bool is_integer = false; 
# 1767
static constexpr bool is_exact = false; 
# 1768
static constexpr int radix = 2; 
# 1771
static constexpr long double epsilon() noexcept { return (1.084202172485504434e-19L); } 
# 1774
static constexpr long double round_error() noexcept { return (0.5L); } 
# 1776
static constexpr int min_exponent = (-16381); 
# 1777
static constexpr int min_exponent10 = (-4931); 
# 1778
static constexpr int max_exponent = 16384; 
# 1779
static constexpr int max_exponent10 = 4932; 
# 1781
static constexpr bool has_infinity = (1); 
# 1782
static constexpr bool has_quiet_NaN = (1); 
# 1783
static constexpr bool has_signaling_NaN = has_quiet_NaN; 
# 1784
static constexpr float_denorm_style has_denorm = (((bool)1) ? denorm_present : denorm_absent); 
# 1786
static constexpr bool has_denorm_loss = false; 
# 1790
static constexpr long double infinity() noexcept { return __builtin_huge_vall(); } 
# 1793
static constexpr long double quiet_NaN() noexcept { return __builtin_nanl(""); } 
# 1796
static constexpr long double signaling_NaN() noexcept { return __builtin_nansl(""); } 
# 1799
static constexpr long double denorm_min() noexcept { return (3.6451995318824746025e-4951L); } 
# 1801
static constexpr bool is_iec559 = (has_infinity && has_quiet_NaN && (has_denorm == (denorm_present))); 
# 1803
static constexpr bool is_bounded = true; 
# 1804
static constexpr bool is_modulo = false; 
# 1806
static constexpr bool traps = false; 
# 1807
static constexpr bool tinyness_before = false; 
# 1809
static constexpr float_round_style round_style = round_to_nearest; 
# 1811
}; 
# 1818
}
# 37 "/usr/include/c++/8/bits/uniform_int_dist.h" 3
namespace std __attribute((__visibility__("default"))) { 
# 41
namespace __detail { 
# 44
template< class _Tp> inline bool 
# 46
_Power_of_2(_Tp __x) 
# 47
{ 
# 48
return ((__x - 1) & __x) == 0; 
# 49
} 
# 50
}
# 57
template< class _IntType = int> 
# 58
class uniform_int_distribution { 
# 60
static_assert((std::is_integral< _IntType> ::value), "template argument must be an integral type");
# 65
public: typedef _IntType result_type; 
# 67
struct param_type { 
# 69
typedef uniform_int_distribution distribution_type; 
# 72
explicit param_type(_IntType __a = 0, _IntType 
# 73
__b = std::numeric_limits< _IntType> ::max()) : _M_a(__a), _M_b(__b) 
# 75
{ 
# 76
; 
# 77
} 
# 80
result_type a() const 
# 81
{ return _M_a; } 
# 84
result_type b() const 
# 85
{ return _M_b; } 
# 88
friend inline bool operator==(const param_type &__p1, const param_type &__p2) 
# 89
{ return ((__p1._M_a) == (__p2._M_a)) && ((__p1._M_b) == (__p2._M_b)); } 
# 92
friend inline bool operator!=(const param_type &__p1, const param_type &__p2) 
# 93
{ return !(__p1 == __p2); } 
# 96
private: _IntType _M_a; 
# 97
_IntType _M_b; 
# 98
}; 
# 105
explicit uniform_int_distribution(_IntType __a = 0, _IntType 
# 106
__b = std::numeric_limits< _IntType> ::max()) : _M_param(__a, __b) 
# 108
{ } 
# 111
explicit uniform_int_distribution(const param_type &__p) : _M_param(__p) 
# 113
{ } 
# 121
void reset() { } 
# 124
result_type a() const 
# 125
{ return ((_M_param).a()); } 
# 128
result_type b() const 
# 129
{ return ((_M_param).b()); } 
# 135
param_type param() const 
# 136
{ return _M_param; } 
# 143
void param(const param_type &__param) 
# 144
{ (_M_param) = __param; } 
# 150
result_type min() const 
# 151
{ return a(); } 
# 157
result_type max() const 
# 158
{ return b(); } 
# 163
template< class _UniformRandomNumberGenerator> result_type 
# 165
operator()(_UniformRandomNumberGenerator &__urng) 
# 166
{ return (this->operator()(__urng, _M_param)); } 
# 168
template< class _UniformRandomNumberGenerator> result_type operator()(_UniformRandomNumberGenerator & __urng, const param_type & __p); 
# 173
template< class _ForwardIterator, class 
# 174
_UniformRandomNumberGenerator> void 
# 176
__generate(_ForwardIterator __f, _ForwardIterator __t, _UniformRandomNumberGenerator &
# 177
__urng) 
# 178
{ (this->__generate(__f, __t, __urng, _M_param)); } 
# 180
template< class _ForwardIterator, class 
# 181
_UniformRandomNumberGenerator> void 
# 183
__generate(_ForwardIterator __f, _ForwardIterator __t, _UniformRandomNumberGenerator &
# 184
__urng, const param_type &
# 185
__p) 
# 186
{ (this->__generate_impl(__f, __t, __urng, __p)); } 
# 188
template< class _UniformRandomNumberGenerator> void 
# 190
__generate(result_type *__f, result_type *__t, _UniformRandomNumberGenerator &
# 191
__urng, const param_type &
# 192
__p) 
# 193
{ (this->__generate_impl(__f, __t, __urng, __p)); } 
# 200
friend inline bool operator==(const uniform_int_distribution &__d1, const uniform_int_distribution &
# 201
__d2) 
# 202
{ return (__d1._M_param) == (__d2._M_param); } 
# 205
private: template< class _ForwardIterator, class 
# 206
_UniformRandomNumberGenerator> void 
# 205
__generate_impl(_ForwardIterator __f, _ForwardIterator __t, _UniformRandomNumberGenerator & __urng, const param_type & __p); 
# 212
param_type _M_param; 
# 213
}; 
# 215
template< class _IntType> 
# 216
template< class _UniformRandomNumberGenerator> typename uniform_int_distribution< _IntType> ::result_type 
# 219
uniform_int_distribution< _IntType> ::operator()(_UniformRandomNumberGenerator &__urng, const param_type &
# 220
__param) 
# 221
{ 
# 223
typedef typename _UniformRandomNumberGenerator::result_type _Gresult_type; 
# 224
typedef typename make_unsigned< _IntType> ::type __utype; 
# 226
typedef typename common_type< typename _UniformRandomNumberGenerator::result_type, typename make_unsigned< _IntType> ::type> ::type __uctype; 
# 228
const __uctype __urngmin = (__urng.min()); 
# 229
const __uctype __urngmax = (__urng.max()); 
# 230
const __uctype __urngrange = __urngmax - __urngmin; 
# 231
const __uctype __urange = ((__uctype)(__param.b())) - ((__uctype)(__param.a())); 
# 234
__uctype __ret; 
# 236
if (__urngrange > __urange) 
# 237
{ 
# 239
const __uctype __uerange = __urange + 1; 
# 240
const __uctype __scaling = __urngrange / __uerange; 
# 241
const __uctype __past = __uerange * __scaling; 
# 242
do { 
# 243
__ret = (((__uctype)__urng()) - __urngmin); } 
# 244
while (__ret >= __past); 
# 245
__ret /= __scaling; 
# 246
} else { 
# 247
if (__urngrange < __urange) 
# 248
{ 
# 264 "/usr/include/c++/8/bits/uniform_int_dist.h" 3
__uctype __tmp; 
# 265
do 
# 266
{ 
# 267
const __uctype __uerngrange = __urngrange + 1; 
# 268
__tmp = (__uerngrange * operator()(__urng, param_type(0, __urange / __uerngrange))); 
# 270
__ret = (__tmp + (((__uctype)__urng()) - __urngmin)); 
# 271
} 
# 272
while ((__ret > __urange) || (__ret < __tmp)); 
# 273
} else { 
# 275
__ret = (((__uctype)__urng()) - __urngmin); }  }  
# 277
return __ret + (__param.a()); 
# 278
} 
# 281
template< class _IntType> 
# 282
template< class _ForwardIterator, class 
# 283
_UniformRandomNumberGenerator> void 
# 286
uniform_int_distribution< _IntType> ::__generate_impl(_ForwardIterator __f, _ForwardIterator __t, _UniformRandomNumberGenerator &
# 287
__urng, const param_type &
# 288
__param) 
# 289
{ 
# 292
typedef typename _UniformRandomNumberGenerator::result_type _Gresult_type; 
# 293
typedef typename make_unsigned< _IntType> ::type __utype; 
# 295
typedef typename common_type< typename _UniformRandomNumberGenerator::result_type, typename make_unsigned< _IntType> ::type> ::type __uctype; 
# 297
const __uctype __urngmin = (__urng.min()); 
# 298
const __uctype __urngmax = (__urng.max()); 
# 299
const __uctype __urngrange = __urngmax - __urngmin; 
# 300
const __uctype __urange = ((__uctype)(__param.b())) - ((__uctype)(__param.a())); 
# 303
__uctype __ret; 
# 305
if (__urngrange > __urange) 
# 306
{ 
# 307
if (__detail::_Power_of_2(__urngrange + 1) && __detail::_Power_of_2(__urange + 1)) 
# 309
{ 
# 310
while (__f != __t) 
# 311
{ 
# 312
__ret = (((__uctype)__urng()) - __urngmin); 
# 313
(*(__f++)) = ((__ret & __urange) + (__param.a())); 
# 314
}  
# 315
} else 
# 317
{ 
# 319
const __uctype __uerange = __urange + 1; 
# 320
const __uctype __scaling = __urngrange / __uerange; 
# 321
const __uctype __past = __uerange * __scaling; 
# 322
while (__f != __t) 
# 323
{ 
# 324
do { 
# 325
__ret = (((__uctype)__urng()) - __urngmin); } 
# 326
while (__ret >= __past); 
# 327
(*(__f++)) = ((__ret / __scaling) + (__param.a())); 
# 328
}  
# 329
}  
# 330
} else { 
# 331
if (__urngrange < __urange) 
# 332
{ 
# 348 "/usr/include/c++/8/bits/uniform_int_dist.h" 3
__uctype __tmp; 
# 349
while (__f != __t) 
# 350
{ 
# 351
do 
# 352
{ 
# 353
const __uctype __uerngrange = __urngrange + 1; 
# 354
__tmp = (__uerngrange * operator()(__urng, param_type(0, __urange / __uerngrange))); 
# 356
__ret = (__tmp + (((__uctype)__urng()) - __urngmin)); 
# 357
} 
# 358
while ((__ret > __urange) || (__ret < __tmp)); 
# 359
(*(__f++)) = __ret; 
# 360
}  
# 361
} else { 
# 363
while (__f != __t) { 
# 364
(*(__f++)) = ((((__uctype)__urng()) - __urngmin) + (__param.a())); }  }  }  
# 365
} 
# 370
}
# 71 "/usr/include/c++/8/bits/stl_algo.h" 3
namespace std __attribute((__visibility__("default"))) { 
# 76
template< class _Iterator, class _Compare> void 
# 78
__move_median_to_first(_Iterator __result, _Iterator __a, _Iterator __b, _Iterator 
# 79
__c, _Compare __comp) 
# 80
{ 
# 81
if (__comp(__a, __b)) 
# 82
{ 
# 83
if (__comp(__b, __c)) { 
# 84
std::iter_swap(__result, __b); } else { 
# 85
if (__comp(__a, __c)) { 
# 86
std::iter_swap(__result, __c); } else { 
# 88
std::iter_swap(__result, __a); }  }  
# 89
} else { 
# 90
if (__comp(__a, __c)) { 
# 91
std::iter_swap(__result, __a); } else { 
# 92
if (__comp(__b, __c)) { 
# 93
std::iter_swap(__result, __c); } else { 
# 95
std::iter_swap(__result, __b); }  }  }  
# 96
} 
# 99
template< class _InputIterator, class _Predicate> inline _InputIterator 
# 101
__find_if(_InputIterator __first, _InputIterator __last, _Predicate 
# 102
__pred, input_iterator_tag) 
# 103
{ 
# 104
while ((__first != __last) && (!__pred(__first))) { 
# 105
++__first; }  
# 106
return __first; 
# 107
} 
# 110
template< class _RandomAccessIterator, class _Predicate> _RandomAccessIterator 
# 112
__find_if(_RandomAccessIterator __first, _RandomAccessIterator __last, _Predicate 
# 113
__pred, random_access_iterator_tag) 
# 114
{ 
# 116
typename iterator_traits< _RandomAccessIterator> ::difference_type __trip_count = (__last - __first) >> 2; 
# 118
for (; __trip_count > 0; --__trip_count) 
# 119
{ 
# 120
if (__pred(__first)) { 
# 121
return __first; }  
# 122
++__first; 
# 124
if (__pred(__first)) { 
# 125
return __first; }  
# 126
++__first; 
# 128
if (__pred(__first)) { 
# 129
return __first; }  
# 130
++__first; 
# 132
if (__pred(__first)) { 
# 133
return __first; }  
# 134
++__first; 
# 135
}  
# 137
switch (__last - __first) 
# 138
{ 
# 139
case 3:  
# 140
if (__pred(__first)) { 
# 141
return __first; }  
# 142
++__first; 
# 143
case 2:  
# 144
if (__pred(__first)) { 
# 145
return __first; }  
# 146
++__first; 
# 147
case 1:  
# 148
if (__pred(__first)) { 
# 149
return __first; }  
# 150
++__first; 
# 151
case 0:  
# 152
default:  
# 153
return __last; 
# 154
}  
# 155
} 
# 157
template< class _Iterator, class _Predicate> inline _Iterator 
# 159
__find_if(_Iterator __first, _Iterator __last, _Predicate __pred) 
# 160
{ 
# 161
return __find_if(__first, __last, __pred, std::__iterator_category(__first)); 
# 163
} 
# 166
template< class _InputIterator, class _Predicate> inline _InputIterator 
# 168
__find_if_not(_InputIterator __first, _InputIterator __last, _Predicate 
# 169
__pred) 
# 170
{ 
# 171
return std::__find_if(__first, __last, __gnu_cxx::__ops::__negate(__pred), std::__iterator_category(__first)); 
# 174
} 
# 179
template< class _InputIterator, class _Predicate, class _Distance> _InputIterator 
# 181
__find_if_not_n(_InputIterator __first, _Distance &__len, _Predicate __pred) 
# 182
{ 
# 183
for (; __len; (--__len), ((void)(++__first))) { 
# 184
if (!__pred(__first)) { 
# 185
break; }  }  
# 186
return __first; 
# 187
} 
# 202 "/usr/include/c++/8/bits/stl_algo.h" 3
template< class _ForwardIterator1, class _ForwardIterator2, class 
# 203
_BinaryPredicate> _ForwardIterator1 
# 205
__search(_ForwardIterator1 __first1, _ForwardIterator1 __last1, _ForwardIterator2 
# 206
__first2, _ForwardIterator2 __last2, _BinaryPredicate 
# 207
__predicate) 
# 208
{ 
# 210
if ((__first1 == __last1) || (__first2 == __last2)) { 
# 211
return __first1; }  
# 214
_ForwardIterator2 __p1(__first2); 
# 215
if ((++__p1) == __last2) { 
# 216
return std::__find_if(__first1, __last1, __gnu_cxx::__ops::__iter_comp_iter(__predicate, __first2)); }  
# 220
_ForwardIterator2 __p; 
# 221
_ForwardIterator1 __current = __first1; 
# 223
for (; ;) 
# 224
{ 
# 225
__first1 = std::__find_if(__first1, __last1, __gnu_cxx::__ops::__iter_comp_iter(__predicate, __first2)); 
# 229
if (__first1 == __last1) { 
# 230
return __last1; }  
# 232
__p = __p1; 
# 233
__current = __first1; 
# 234
if ((++__current) == __last1) { 
# 235
return __last1; }  
# 237
while (__predicate(__current, __p)) 
# 238
{ 
# 239
if ((++__p) == __last2) { 
# 240
return __first1; }  
# 241
if ((++__current) == __last1) { 
# 242
return __last1; }  
# 243
}  
# 244
++__first1; 
# 245
}  
# 246
return __first1; 
# 247
} 
# 254
template< class _ForwardIterator, class _Integer, class 
# 255
_UnaryPredicate> _ForwardIterator 
# 257
__search_n_aux(_ForwardIterator __first, _ForwardIterator __last, _Integer 
# 258
__count, _UnaryPredicate __unary_pred, forward_iterator_tag) 
# 260
{ 
# 261
__first = std::__find_if(__first, __last, __unary_pred); 
# 262
while (__first != __last) 
# 263
{ 
# 265
typename iterator_traits< _ForwardIterator> ::difference_type __n = __count; 
# 266
_ForwardIterator __i = __first; 
# 267
++__i; 
# 268
while ((__i != __last) && (__n != 1) && __unary_pred(__i)) 
# 269
{ 
# 270
++__i; 
# 271
--__n; 
# 272
}  
# 273
if (__n == 1) { 
# 274
return __first; }  
# 275
if (__i == __last) { 
# 276
return __last; }  
# 277
__first = std::__find_if(++__i, __last, __unary_pred); 
# 278
}  
# 279
return __last; 
# 280
} 
# 286
template< class _RandomAccessIter, class _Integer, class 
# 287
_UnaryPredicate> _RandomAccessIter 
# 289
__search_n_aux(_RandomAccessIter __first, _RandomAccessIter __last, _Integer 
# 290
__count, _UnaryPredicate __unary_pred, random_access_iterator_tag) 
# 292
{ 
# 294
typedef typename iterator_traits< _RandomAccessIter> ::difference_type _DistanceType; 
# 296
_DistanceType __tailSize = __last - __first; 
# 297
_DistanceType __remainder = __count; 
# 299
while (__remainder <= __tailSize) 
# 300
{ 
# 301
__first += __remainder; 
# 302
__tailSize -= __remainder; 
# 305
_RandomAccessIter __backTrack = __first; 
# 306
while (__unary_pred(--__backTrack)) 
# 307
{ 
# 308
if ((--__remainder) == 0) { 
# 309
return __first - __count; }  
# 310
}  
# 311
__remainder = ((__count + 1) - (__first - __backTrack)); 
# 312
}  
# 313
return __last; 
# 314
} 
# 316
template< class _ForwardIterator, class _Integer, class 
# 317
_UnaryPredicate> _ForwardIterator 
# 319
__search_n(_ForwardIterator __first, _ForwardIterator __last, _Integer 
# 320
__count, _UnaryPredicate 
# 321
__unary_pred) 
# 322
{ 
# 323
if (__count <= 0) { 
# 324
return __first; }  
# 326
if (__count == 1) { 
# 327
return std::__find_if(__first, __last, __unary_pred); }  
# 329
return std::__search_n_aux(__first, __last, __count, __unary_pred, std::__iterator_category(__first)); 
# 331
} 
# 334
template< class _ForwardIterator1, class _ForwardIterator2, class 
# 335
_BinaryPredicate> _ForwardIterator1 
# 337
__find_end(_ForwardIterator1 __first1, _ForwardIterator1 __last1, _ForwardIterator2 
# 338
__first2, _ForwardIterator2 __last2, forward_iterator_tag, forward_iterator_tag, _BinaryPredicate 
# 340
__comp) 
# 341
{ 
# 342
if (__first2 == __last2) { 
# 343
return __last1; }  
# 345
_ForwardIterator1 __result = __last1; 
# 346
while (1) 
# 347
{ 
# 348
_ForwardIterator1 __new_result = std::__search(__first1, __last1, __first2, __last2, __comp); 
# 350
if (__new_result == __last1) { 
# 351
return __result; } else 
# 353
{ 
# 354
__result = __new_result; 
# 355
__first1 = __new_result; 
# 356
++__first1; 
# 357
}  
# 358
}  
# 359
} 
# 362
template< class _BidirectionalIterator1, class _BidirectionalIterator2, class 
# 363
_BinaryPredicate> _BidirectionalIterator1 
# 365
__find_end(_BidirectionalIterator1 __first1, _BidirectionalIterator1 
# 366
__last1, _BidirectionalIterator2 
# 367
__first2, _BidirectionalIterator2 
# 368
__last2, bidirectional_iterator_tag, bidirectional_iterator_tag, _BinaryPredicate 
# 370
__comp) 
# 371
{ 
# 378
typedef reverse_iterator< _BidirectionalIterator1>  _RevIterator1; 
# 379
typedef reverse_iterator< _BidirectionalIterator2>  _RevIterator2; 
# 381
_RevIterator1 __rlast1(__first1); 
# 382
_RevIterator2 __rlast2(__first2); 
# 383
_RevIterator1 __rresult = std::__search(((reverse_iterator< _BidirectionalIterator1> )(__last1)), __rlast1, ((reverse_iterator< _BidirectionalIterator2> )(__last2)), __rlast2, __comp); 
# 387
if (__rresult == __rlast1) { 
# 388
return __last1; } else 
# 390
{ 
# 391
_BidirectionalIterator1 __result = (__rresult.base()); 
# 392
std::advance(__result, -std::distance(__first2, __last2)); 
# 393
return __result; 
# 394
}  
# 395
} 
# 423 "/usr/include/c++/8/bits/stl_algo.h" 3
template< class _ForwardIterator1, class _ForwardIterator2> inline _ForwardIterator1 
# 425
find_end(_ForwardIterator1 __first1, _ForwardIterator1 __last1, _ForwardIterator2 
# 426
__first2, _ForwardIterator2 __last2) 
# 427
{ 
# 434
; 
# 435
; 
# 437
return std::__find_end(__first1, __last1, __first2, __last2, std::__iterator_category(__first1), std::__iterator_category(__first2), __gnu_cxx::__ops::__iter_equal_to_iter()); 
# 441
} 
# 471 "/usr/include/c++/8/bits/stl_algo.h" 3
template< class _ForwardIterator1, class _ForwardIterator2, class 
# 472
_BinaryPredicate> inline _ForwardIterator1 
# 474
find_end(_ForwardIterator1 __first1, _ForwardIterator1 __last1, _ForwardIterator2 
# 475
__first2, _ForwardIterator2 __last2, _BinaryPredicate 
# 476
__comp) 
# 477
{ 
# 484
; 
# 485
; 
# 487
return std::__find_end(__first1, __last1, __first2, __last2, std::__iterator_category(__first1), std::__iterator_category(__first2), __gnu_cxx::__ops::__iter_comp_iter(__comp)); 
# 491
} 
# 506 "/usr/include/c++/8/bits/stl_algo.h" 3
template< class _InputIterator, class _Predicate> inline bool 
# 508
all_of(_InputIterator __first, _InputIterator __last, _Predicate __pred) 
# 509
{ return __last == std::find_if_not(__first, __last, __pred); } 
# 523 "/usr/include/c++/8/bits/stl_algo.h" 3
template< class _InputIterator, class _Predicate> inline bool 
# 525
none_of(_InputIterator __first, _InputIterator __last, _Predicate __pred) 
# 526
{ return __last == std::find_if(__first, __last, __pred); } 
# 541 "/usr/include/c++/8/bits/stl_algo.h" 3
template< class _InputIterator, class _Predicate> inline bool 
# 543
any_of(_InputIterator __first, _InputIterator __last, _Predicate __pred) 
# 544
{ return !std::none_of(__first, __last, __pred); } 
# 556 "/usr/include/c++/8/bits/stl_algo.h" 3
template< class _InputIterator, class _Predicate> inline _InputIterator 
# 558
find_if_not(_InputIterator __first, _InputIterator __last, _Predicate 
# 559
__pred) 
# 560
{ 
# 565
; 
# 566
return std::__find_if_not(__first, __last, __gnu_cxx::__ops::__pred_iter(__pred)); 
# 568
} 
# 580 "/usr/include/c++/8/bits/stl_algo.h" 3
template< class _InputIterator, class _Predicate> inline bool 
# 582
is_partitioned(_InputIterator __first, _InputIterator __last, _Predicate 
# 583
__pred) 
# 584
{ 
# 585
__first = std::find_if_not(__first, __last, __pred); 
# 586
if (__first == __last) { 
# 587
return true; }  
# 588
++__first; 
# 589
return std::none_of(__first, __last, __pred); 
# 590
} 
# 601 "/usr/include/c++/8/bits/stl_algo.h" 3
template< class _ForwardIterator, class _Predicate> _ForwardIterator 
# 603
partition_point(_ForwardIterator __first, _ForwardIterator __last, _Predicate 
# 604
__pred) 
# 605
{ 
# 612
; 
# 615
typedef typename iterator_traits< _ForwardIterator> ::difference_type _DistanceType; 
# 617
_DistanceType __len = std::distance(__first, __last); 
# 618
_DistanceType __half; 
# 619
_ForwardIterator __middle; 
# 621
while (__len > 0) 
# 622
{ 
# 623
__half = (__len >> 1); 
# 624
__middle = __first; 
# 625
std::advance(__middle, __half); 
# 626
if (__pred(*__middle)) 
# 627
{ 
# 628
__first = __middle; 
# 629
++__first; 
# 630
__len = ((__len - __half) - 1); 
# 631
} else { 
# 633
__len = __half; }  
# 634
}  
# 635
return __first; 
# 636
} 
# 639
template< class _InputIterator, class _OutputIterator, class 
# 640
_Predicate> _OutputIterator 
# 642
__remove_copy_if(_InputIterator __first, _InputIterator __last, _OutputIterator 
# 643
__result, _Predicate __pred) 
# 644
{ 
# 645
for (; __first != __last; ++__first) { 
# 646
if (!__pred(__first)) 
# 647
{ 
# 648
(*__result) = (*__first); 
# 649
++__result; 
# 650
}  }  
# 651
return __result; 
# 652
} 
# 668 "/usr/include/c++/8/bits/stl_algo.h" 3
template< class _InputIterator, class _OutputIterator, class _Tp> inline _OutputIterator 
# 670
remove_copy(_InputIterator __first, _InputIterator __last, _OutputIterator 
# 671
__result, const _Tp &__value) 
# 672
{ 
# 679
; 
# 681
return std::__remove_copy_if(__first, __last, __result, __gnu_cxx::__ops::__iter_equals_val(__value)); 
# 683
} 
# 700 "/usr/include/c++/8/bits/stl_algo.h" 3
template< class _InputIterator, class _OutputIterator, class 
# 701
_Predicate> inline _OutputIterator 
# 703
remove_copy_if(_InputIterator __first, _InputIterator __last, _OutputIterator 
# 704
__result, _Predicate __pred) 
# 705
{ 
# 712
; 
# 714
return std::__remove_copy_if(__first, __last, __result, __gnu_cxx::__ops::__pred_iter(__pred)); 
# 716
} 
# 734 "/usr/include/c++/8/bits/stl_algo.h" 3
template< class _InputIterator, class _OutputIterator, class 
# 735
_Predicate> _OutputIterator 
# 737
copy_if(_InputIterator __first, _InputIterator __last, _OutputIterator 
# 738
__result, _Predicate __pred) 
# 739
{ 
# 746
; 
# 748
for (; __first != __last; ++__first) { 
# 749
if (__pred(*__first)) 
# 750
{ 
# 751
(*__result) = (*__first); 
# 752
++__result; 
# 753
}  }  
# 754
return __result; 
# 755
} 
# 757
template< class _InputIterator, class _Size, class _OutputIterator> _OutputIterator 
# 759
__copy_n(_InputIterator __first, _Size __n, _OutputIterator 
# 760
__result, input_iterator_tag) 
# 761
{ 
# 762
if (__n > 0) 
# 763
{ 
# 764
while (true) 
# 765
{ 
# 766
(*__result) = (*__first); 
# 767
++__result; 
# 768
if ((--__n) > 0) { 
# 769
++__first; } else { 
# 771
break; }  
# 772
}  
# 773
}  
# 774
return __result; 
# 775
} 
# 777
template< class _RandomAccessIterator, class _Size, class 
# 778
_OutputIterator> inline _OutputIterator 
# 780
__copy_n(_RandomAccessIterator __first, _Size __n, _OutputIterator 
# 781
__result, random_access_iterator_tag) 
# 782
{ return std::copy(__first, __first + __n, __result); } 
# 797 "/usr/include/c++/8/bits/stl_algo.h" 3
template< class _InputIterator, class _Size, class _OutputIterator> inline _OutputIterator 
# 799
copy_n(_InputIterator __first, _Size __n, _OutputIterator __result) 
# 800
{ 
# 806
return std::__copy_n(__first, __n, __result, std::__iterator_category(__first)); 
# 808
} 
# 825 "/usr/include/c++/8/bits/stl_algo.h" 3
template< class _InputIterator, class _OutputIterator1, class 
# 826
_OutputIterator2, class _Predicate> pair< _OutputIterator1, _OutputIterator2>  
# 828
partition_copy(_InputIterator __first, _InputIterator __last, _OutputIterator1 
# 829
__out_true, _OutputIterator2 __out_false, _Predicate 
# 830
__pred) 
# 831
{ 
# 840
; 
# 842
for (; __first != __last; ++__first) { 
# 843
if (__pred(*__first)) 
# 844
{ 
# 845
(*__out_true) = (*__first); 
# 846
++__out_true; 
# 847
} else 
# 849
{ 
# 850
(*__out_false) = (*__first); 
# 851
++__out_false; 
# 852
}  }  
# 854
return pair< _OutputIterator1, _OutputIterator2> (__out_true, __out_false); 
# 855
} 
# 858
template< class _ForwardIterator, class _Predicate> _ForwardIterator 
# 860
__remove_if(_ForwardIterator __first, _ForwardIterator __last, _Predicate 
# 861
__pred) 
# 862
{ 
# 863
__first = std::__find_if(__first, __last, __pred); 
# 864
if (__first == __last) { 
# 865
return __first; }  
# 866
_ForwardIterator __result = __first; 
# 867
++__first; 
# 868
for (; __first != __last; ++__first) { 
# 869
if (!__pred(__first)) 
# 870
{ 
# 871
(*__result) = std::move(*__first); 
# 872
++__result; 
# 873
}  }  
# 874
return __result; 
# 875
} 
# 894 "/usr/include/c++/8/bits/stl_algo.h" 3
template< class _ForwardIterator, class _Tp> inline _ForwardIterator 
# 896
remove(_ForwardIterator __first, _ForwardIterator __last, const _Tp &
# 897
__value) 
# 898
{ 
# 904
; 
# 906
return std::__remove_if(__first, __last, __gnu_cxx::__ops::__iter_equals_val(__value)); 
# 908
} 
# 927 "/usr/include/c++/8/bits/stl_algo.h" 3
template< class _ForwardIterator, class _Predicate> inline _ForwardIterator 
# 929
remove_if(_ForwardIterator __first, _ForwardIterator __last, _Predicate 
# 930
__pred) 
# 931
{ 
# 937
; 
# 939
return std::__remove_if(__first, __last, __gnu_cxx::__ops::__pred_iter(__pred)); 
# 941
} 
# 943
template< class _ForwardIterator, class _BinaryPredicate> _ForwardIterator 
# 945
__adjacent_find(_ForwardIterator __first, _ForwardIterator __last, _BinaryPredicate 
# 946
__binary_pred) 
# 947
{ 
# 948
if (__first == __last) { 
# 949
return __last; }  
# 950
_ForwardIterator __next = __first; 
# 951
while ((++__next) != __last) 
# 952
{ 
# 953
if (__binary_pred(__first, __next)) { 
# 954
return __first; }  
# 955
__first = __next; 
# 956
}  
# 957
return __last; 
# 958
} 
# 960
template< class _ForwardIterator, class _BinaryPredicate> _ForwardIterator 
# 962
__unique(_ForwardIterator __first, _ForwardIterator __last, _BinaryPredicate 
# 963
__binary_pred) 
# 964
{ 
# 966
__first = std::__adjacent_find(__first, __last, __binary_pred); 
# 967
if (__first == __last) { 
# 968
return __last; }  
# 971
_ForwardIterator __dest = __first; 
# 972
++__first; 
# 973
while ((++__first) != __last) { 
# 974
if (!__binary_pred(__dest, __first)) { 
# 975
(*(++__dest)) = std::move(*__first); }  }  
# 976
return ++__dest; 
# 977
} 
# 993 "/usr/include/c++/8/bits/stl_algo.h" 3
template< class _ForwardIterator> inline _ForwardIterator 
# 995
unique(_ForwardIterator __first, _ForwardIterator __last) 
# 996
{ 
# 1002
; 
# 1004
return std::__unique(__first, __last, __gnu_cxx::__ops::__iter_equal_to_iter()); 
# 1006
} 
# 1023 "/usr/include/c++/8/bits/stl_algo.h" 3
template< class _ForwardIterator, class _BinaryPredicate> inline _ForwardIterator 
# 1025
unique(_ForwardIterator __first, _ForwardIterator __last, _BinaryPredicate 
# 1026
__binary_pred) 
# 1027
{ 
# 1034
; 
# 1036
return std::__unique(__first, __last, __gnu_cxx::__ops::__iter_comp_iter(__binary_pred)); 
# 1038
} 
# 1046
template< class _ForwardIterator, class _OutputIterator, class 
# 1047
_BinaryPredicate> _OutputIterator 
# 1049
__unique_copy(_ForwardIterator __first, _ForwardIterator __last, _OutputIterator 
# 1050
__result, _BinaryPredicate __binary_pred, forward_iterator_tag, output_iterator_tag) 
# 1052
{ 
# 1058
_ForwardIterator __next = __first; 
# 1059
(*__result) = (*__first); 
# 1060
while ((++__next) != __last) { 
# 1061
if (!__binary_pred(__first, __next)) 
# 1062
{ 
# 1063
__first = __next; 
# 1064
(*(++__result)) = (*__first); 
# 1065
}  }  
# 1066
return ++__result; 
# 1067
} 
# 1075
template< class _InputIterator, class _OutputIterator, class 
# 1076
_BinaryPredicate> _OutputIterator 
# 1078
__unique_copy(_InputIterator __first, _InputIterator __last, _OutputIterator 
# 1079
__result, _BinaryPredicate __binary_pred, input_iterator_tag, output_iterator_tag) 
# 1081
{ 
# 1087
typename iterator_traits< _InputIterator> ::value_type __value = (*__first); 
# 1089
__decltype((__gnu_cxx::__ops::__iter_comp_val(__binary_pred))) __rebound_pred = __gnu_cxx::__ops::__iter_comp_val(__binary_pred); 
# 1091
(*__result) = __value; 
# 1092
while ((++__first) != __last) { 
# 1093
if (!__rebound_pred(__first, __value)) 
# 1094
{ 
# 1095
__value = (*__first); 
# 1096
(*(++__result)) = __value; 
# 1097
}  }  
# 1098
return ++__result; 
# 1099
} 
# 1107
template< class _InputIterator, class _ForwardIterator, class 
# 1108
_BinaryPredicate> _ForwardIterator 
# 1110
__unique_copy(_InputIterator __first, _InputIterator __last, _ForwardIterator 
# 1111
__result, _BinaryPredicate __binary_pred, input_iterator_tag, forward_iterator_tag) 
# 1113
{ 
# 1118
(*__result) = (*__first); 
# 1119
while ((++__first) != __last) { 
# 1120
if (!__binary_pred(__result, __first)) { 
# 1121
(*(++__result)) = (*__first); }  }  
# 1122
return ++__result; 
# 1123
} 
# 1130
template< class _BidirectionalIterator> void 
# 1132
__reverse(_BidirectionalIterator __first, _BidirectionalIterator __last, bidirectional_iterator_tag) 
# 1134
{ 
# 1135
while (true) { 
# 1136
if ((__first == __last) || (__first == (--__last))) { 
# 1137
return; } else 
# 1139
{ 
# 1140
std::iter_swap(__first, __last); 
# 1141
++__first; 
# 1142
}  }  
# 1143
} 
# 1150
template< class _RandomAccessIterator> void 
# 1152
__reverse(_RandomAccessIterator __first, _RandomAccessIterator __last, random_access_iterator_tag) 
# 1154
{ 
# 1155
if (__first == __last) { 
# 1156
return; }  
# 1157
--__last; 
# 1158
while (__first < __last) 
# 1159
{ 
# 1160
std::iter_swap(__first, __last); 
# 1161
++__first; 
# 1162
--__last; 
# 1163
}  
# 1164
} 
# 1178 "/usr/include/c++/8/bits/stl_algo.h" 3
template< class _BidirectionalIterator> inline void 
# 1180
reverse(_BidirectionalIterator __first, _BidirectionalIterator __last) 
# 1181
{ 
# 1185
; 
# 1186
std::__reverse(__first, __last, std::__iterator_category(__first)); 
# 1187
} 
# 1205 "/usr/include/c++/8/bits/stl_algo.h" 3
template< class _BidirectionalIterator, class _OutputIterator> _OutputIterator 
# 1207
reverse_copy(_BidirectionalIterator __first, _BidirectionalIterator __last, _OutputIterator 
# 1208
__result) 
# 1209
{ 
# 1215
; 
# 1217
while (__first != __last) 
# 1218
{ 
# 1219
--__last; 
# 1220
(*__result) = (*__last); 
# 1221
++__result; 
# 1222
}  
# 1223
return __result; 
# 1224
} 
# 1230
template< class _EuclideanRingElement> _EuclideanRingElement 
# 1232
__gcd(_EuclideanRingElement __m, _EuclideanRingElement __n) 
# 1233
{ 
# 1234
while (__n != 0) 
# 1235
{ 
# 1236
_EuclideanRingElement __t = __m % __n; 
# 1237
__m = __n; 
# 1238
__n = __t; 
# 1239
}  
# 1240
return __m; 
# 1241
} 
# 1243
inline namespace _V2 { 
# 1247
template< class _ForwardIterator> _ForwardIterator 
# 1249
__rotate(_ForwardIterator __first, _ForwardIterator 
# 1250
__middle, _ForwardIterator 
# 1251
__last, forward_iterator_tag) 
# 1253
{ 
# 1254
if (__first == __middle) { 
# 1255
return __last; } else { 
# 1256
if (__last == __middle) { 
# 1257
return __first; }  }  
# 1259
_ForwardIterator __first2 = __middle; 
# 1260
do 
# 1261
{ 
# 1262
std::iter_swap(__first, __first2); 
# 1263
++__first; 
# 1264
++__first2; 
# 1265
if (__first == __middle) { 
# 1266
__middle = __first2; }  
# 1267
} 
# 1268
while (__first2 != __last); 
# 1270
_ForwardIterator __ret = __first; 
# 1272
__first2 = __middle; 
# 1274
while (__first2 != __last) 
# 1275
{ 
# 1276
std::iter_swap(__first, __first2); 
# 1277
++__first; 
# 1278
++__first2; 
# 1279
if (__first == __middle) { 
# 1280
__middle = __first2; } else { 
# 1281
if (__first2 == __last) { 
# 1282
__first2 = __middle; }  }  
# 1283
}  
# 1284
return __ret; 
# 1285
} 
# 1288
template< class _BidirectionalIterator> _BidirectionalIterator 
# 1290
__rotate(_BidirectionalIterator __first, _BidirectionalIterator 
# 1291
__middle, _BidirectionalIterator 
# 1292
__last, bidirectional_iterator_tag) 
# 1294
{ 
# 1299
if (__first == __middle) { 
# 1300
return __last; } else { 
# 1301
if (__last == __middle) { 
# 1302
return __first; }  }  
# 1304
std::__reverse(__first, __middle, bidirectional_iterator_tag()); 
# 1305
std::__reverse(__middle, __last, bidirectional_iterator_tag()); 
# 1307
while ((__first != __middle) && (__middle != __last)) 
# 1308
{ 
# 1309
std::iter_swap(__first, --__last); 
# 1310
++__first; 
# 1311
}  
# 1313
if (__first == __middle) 
# 1314
{ 
# 1315
std::__reverse(__middle, __last, bidirectional_iterator_tag()); 
# 1316
return __last; 
# 1317
} else 
# 1319
{ 
# 1320
std::__reverse(__first, __middle, bidirectional_iterator_tag()); 
# 1321
return __first; 
# 1322
}  
# 1323
} 
# 1326
template< class _RandomAccessIterator> _RandomAccessIterator 
# 1328
__rotate(_RandomAccessIterator __first, _RandomAccessIterator 
# 1329
__middle, _RandomAccessIterator 
# 1330
__last, random_access_iterator_tag) 
# 1332
{ 
# 1337
if (__first == __middle) { 
# 1338
return __last; } else { 
# 1339
if (__last == __middle) { 
# 1340
return __first; }  }  
# 1343
typedef typename iterator_traits< _RandomAccessIterator> ::difference_type _Distance; 
# 1345
typedef typename iterator_traits< _RandomAccessIterator> ::value_type _ValueType; 
# 1347
_Distance __n = __last - __first; 
# 1348
_Distance __k = __middle - __first; 
# 1350
if (__k == (__n - __k)) 
# 1351
{ 
# 1352
std::swap_ranges(__first, __middle, __middle); 
# 1353
return __middle; 
# 1354
}  
# 1356
_RandomAccessIterator __p = __first; 
# 1357
_RandomAccessIterator __ret = __first + (__last - __middle); 
# 1359
for (; ;) 
# 1360
{ 
# 1361
if (__k < (__n - __k)) 
# 1362
{ 
# 1363
if (__is_pod(_ValueType) && (__k == 1)) 
# 1364
{ 
# 1365
_ValueType __t = std::move(*__p); 
# 1366
std::move(__p + 1, __p + __n, __p); 
# 1367
(*((__p + __n) - 1)) = std::move(__t); 
# 1368
return __ret; 
# 1369
}  
# 1370
_RandomAccessIterator __q = __p + __k; 
# 1371
for (_Distance __i = (0); __i < (__n - __k); ++__i) 
# 1372
{ 
# 1373
std::iter_swap(__p, __q); 
# 1374
++__p; 
# 1375
++__q; 
# 1376
}  
# 1377
__n %= __k; 
# 1378
if (__n == 0) { 
# 1379
return __ret; }  
# 1380
std::swap(__n, __k); 
# 1381
__k = (__n - __k); 
# 1382
} else 
# 1384
{ 
# 1385
__k = (__n - __k); 
# 1386
if (__is_pod(_ValueType) && (__k == 1)) 
# 1387
{ 
# 1388
_ValueType __t = std::move(*((__p + __n) - 1)); 
# 1389
std::move_backward(__p, (__p + __n) - 1, __p + __n); 
# 1390
(*__p) = std::move(__t); 
# 1391
return __ret; 
# 1392
}  
# 1393
_RandomAccessIterator __q = __p + __n; 
# 1394
__p = (__q - __k); 
# 1395
for (_Distance __i = (0); __i < (__n - __k); ++__i) 
# 1396
{ 
# 1397
--__p; 
# 1398
--__q; 
# 1399
std::iter_swap(__p, __q); 
# 1400
}  
# 1401
__n %= __k; 
# 1402
if (__n == 0) { 
# 1403
return __ret; }  
# 1404
std::swap(__n, __k); 
# 1405
}  
# 1406
}  
# 1407
} 
# 1432 "/usr/include/c++/8/bits/stl_algo.h" 3
template< class _ForwardIterator> inline _ForwardIterator 
# 1434
rotate(_ForwardIterator __first, _ForwardIterator __middle, _ForwardIterator 
# 1435
__last) 
# 1436
{ 
# 1440
; 
# 1441
; 
# 1443
return std::__rotate(__first, __middle, __last, std::__iterator_category(__first)); 
# 1445
} 
# 1447
}
# 1469 "/usr/include/c++/8/bits/stl_algo.h" 3
template< class _ForwardIterator, class _OutputIterator> inline _OutputIterator 
# 1471
rotate_copy(_ForwardIterator __first, _ForwardIterator __middle, _ForwardIterator 
# 1472
__last, _OutputIterator __result) 
# 1473
{ 
# 1478
; 
# 1479
; 
# 1481
return std::copy(__first, __middle, std::copy(__middle, __last, __result)); 
# 1483
} 
# 1486
template< class _ForwardIterator, class _Predicate> _ForwardIterator 
# 1488
__partition(_ForwardIterator __first, _ForwardIterator __last, _Predicate 
# 1489
__pred, forward_iterator_tag) 
# 1490
{ 
# 1491
if (__first == __last) { 
# 1492
return __first; }  
# 1494
while (__pred(*__first)) { 
# 1495
if ((++__first) == __last) { 
# 1496
return __first; }  }  
# 1498
_ForwardIterator __next = __first; 
# 1500
while ((++__next) != __last) { 
# 1501
if (__pred(*__next)) 
# 1502
{ 
# 1503
std::iter_swap(__first, __next); 
# 1504
++__first; 
# 1505
}  }  
# 1507
return __first; 
# 1508
} 
# 1511
template< class _BidirectionalIterator, class _Predicate> _BidirectionalIterator 
# 1513
__partition(_BidirectionalIterator __first, _BidirectionalIterator __last, _Predicate 
# 1514
__pred, bidirectional_iterator_tag) 
# 1515
{ 
# 1516
while (true) 
# 1517
{ 
# 1518
while (true) { 
# 1519
if (__first == __last) { 
# 1520
return __first; } else { 
# 1521
if (__pred(*__first)) { 
# 1522
++__first; } else { 
# 1524
break; }  }  }  
# 1525
--__last; 
# 1526
while (true) { 
# 1527
if (__first == __last) { 
# 1528
return __first; } else { 
# 1529
if (!((bool)__pred(*__last))) { 
# 1530
--__last; } else { 
# 1532
break; }  }  }  
# 1533
std::iter_swap(__first, __last); 
# 1534
++__first; 
# 1535
}  
# 1536
} 
# 1546 "/usr/include/c++/8/bits/stl_algo.h" 3
template< class _ForwardIterator, class _Pointer, class _Predicate, class 
# 1547
_Distance> _ForwardIterator 
# 1549
__stable_partition_adaptive(_ForwardIterator __first, _ForwardIterator 
# 1550
__last, _Predicate 
# 1551
__pred, _Distance __len, _Pointer 
# 1552
__buffer, _Distance 
# 1553
__buffer_size) 
# 1554
{ 
# 1555
if (__len == 1) { 
# 1556
return __first; }  
# 1558
if (__len <= __buffer_size) 
# 1559
{ 
# 1560
_ForwardIterator __result1 = __first; 
# 1561
_Pointer __result2 = __buffer; 
# 1566
(*__result2) = std::move(*__first); 
# 1567
++__result2; 
# 1568
++__first; 
# 1569
for (; __first != __last; ++__first) { 
# 1570
if (__pred(__first)) 
# 1571
{ 
# 1572
(*__result1) = std::move(*__first); 
# 1573
++__result1; 
# 1574
} else 
# 1576
{ 
# 1577
(*__result2) = std::move(*__first); 
# 1578
++__result2; 
# 1579
}  }  
# 1581
std::move(__buffer, __result2, __result1); 
# 1582
return __result1; 
# 1583
}  
# 1585
_ForwardIterator __middle = __first; 
# 1586
std::advance(__middle, __len / 2); 
# 1587
_ForwardIterator __left_split = std::__stable_partition_adaptive(__first, __middle, __pred, __len / 2, __buffer, __buffer_size); 
# 1594
_Distance __right_len = __len - (__len / 2); 
# 1595
_ForwardIterator __right_split = std::__find_if_not_n(__middle, __right_len, __pred); 
# 1598
if (__right_len) { 
# 1599
__right_split = std::__stable_partition_adaptive(__right_split, __last, __pred, __right_len, __buffer, __buffer_size); }  
# 1604
std::rotate(__left_split, __middle, __right_split); 
# 1605
std::advance(__left_split, std::distance(__middle, __right_split)); 
# 1606
return __left_split; 
# 1607
} 
# 1609
template< class _ForwardIterator, class _Predicate> _ForwardIterator 
# 1611
__stable_partition(_ForwardIterator __first, _ForwardIterator __last, _Predicate 
# 1612
__pred) 
# 1613
{ 
# 1614
__first = std::__find_if_not(__first, __last, __pred); 
# 1616
if (__first == __last) { 
# 1617
return __first; }  
# 1620
typedef typename iterator_traits< _ForwardIterator> ::value_type _ValueType; 
# 1622
typedef typename iterator_traits< _ForwardIterator> ::difference_type _DistanceType; 
# 1624
_Temporary_buffer< _ForwardIterator, typename iterator_traits< _ForwardIterator> ::value_type>  __buf(__first, __last); 
# 1625
return std::__stable_partition_adaptive(__first, __last, __pred, (_DistanceType)(__buf.requested_size()), (__buf.begin()), (_DistanceType)(__buf.size())); 
# 1630
} 
# 1649 "/usr/include/c++/8/bits/stl_algo.h" 3
template< class _ForwardIterator, class _Predicate> inline _ForwardIterator 
# 1651
stable_partition(_ForwardIterator __first, _ForwardIterator __last, _Predicate 
# 1652
__pred) 
# 1653
{ 
# 1659
; 
# 1661
return std::__stable_partition(__first, __last, __gnu_cxx::__ops::__pred_iter(__pred)); 
# 1663
} 
# 1666
template< class _RandomAccessIterator, class _Compare> void 
# 1668
__heap_select(_RandomAccessIterator __first, _RandomAccessIterator 
# 1669
__middle, _RandomAccessIterator 
# 1670
__last, _Compare __comp) 
# 1671
{ 
# 1672
std::__make_heap(__first, __middle, __comp); 
# 1673
for (_RandomAccessIterator __i = __middle; __i < __last; ++__i) { 
# 1674
if (__comp(__i, __first)) { 
# 1675
std::__pop_heap(__first, __middle, __i, __comp); }  }  
# 1676
} 
# 1680
template< class _InputIterator, class _RandomAccessIterator, class 
# 1681
_Compare> _RandomAccessIterator 
# 1683
__partial_sort_copy(_InputIterator __first, _InputIterator __last, _RandomAccessIterator 
# 1684
__result_first, _RandomAccessIterator 
# 1685
__result_last, _Compare 
# 1686
__comp) 
# 1687
{ 
# 1689
typedef typename iterator_traits< _InputIterator> ::value_type _InputValueType; 
# 1690
typedef iterator_traits< _RandomAccessIterator>  _RItTraits; 
# 1691
typedef typename iterator_traits< _RandomAccessIterator> ::difference_type _DistanceType; 
# 1693
if (__result_first == __result_last) { 
# 1694
return __result_last; }  
# 1695
_RandomAccessIterator __result_real_last = __result_first; 
# 1696
while ((__first != __last) && (__result_real_last != __result_last)) 
# 1697
{ 
# 1698
(*__result_real_last) = (*__first); 
# 1699
++__result_real_last; 
# 1700
++__first; 
# 1701
}  
# 1703
std::__make_heap(__result_first, __result_real_last, __comp); 
# 1704
while (__first != __last) 
# 1705
{ 
# 1706
if (__comp(__first, __result_first)) { 
# 1707
std::__adjust_heap(__result_first, (_DistanceType)0, (_DistanceType)(__result_real_last - __result_first), (_InputValueType)(*__first), __comp); }  
# 1711
++__first; 
# 1712
}  
# 1713
std::__sort_heap(__result_first, __result_real_last, __comp); 
# 1714
return __result_real_last; 
# 1715
} 
# 1735 "/usr/include/c++/8/bits/stl_algo.h" 3
template< class _InputIterator, class _RandomAccessIterator> inline _RandomAccessIterator 
# 1737
partial_sort_copy(_InputIterator __first, _InputIterator __last, _RandomAccessIterator 
# 1738
__result_first, _RandomAccessIterator 
# 1739
__result_last) 
# 1740
{ 
# 1755 "/usr/include/c++/8/bits/stl_algo.h" 3
; 
# 1756
; 
# 1757
; 
# 1759
return std::__partial_sort_copy(__first, __last, __result_first, __result_last, __gnu_cxx::__ops::__iter_less_iter()); 
# 1762
} 
# 1784 "/usr/include/c++/8/bits/stl_algo.h" 3
template< class _InputIterator, class _RandomAccessIterator, class 
# 1785
_Compare> inline _RandomAccessIterator 
# 1787
partial_sort_copy(_InputIterator __first, _InputIterator __last, _RandomAccessIterator 
# 1788
__result_first, _RandomAccessIterator 
# 1789
__result_last, _Compare 
# 1790
__comp) 
# 1791
{ 
# 1809 "/usr/include/c++/8/bits/stl_algo.h" 3
; 
# 1810
; 
# 1811
; 
# 1813
return std::__partial_sort_copy(__first, __last, __result_first, __result_last, __gnu_cxx::__ops::__iter_comp_iter(__comp)); 
# 1816
} 
# 1819
template< class _RandomAccessIterator, class _Compare> void 
# 1821
__unguarded_linear_insert(_RandomAccessIterator __last, _Compare 
# 1822
__comp) 
# 1823
{ 
# 1825
typename iterator_traits< _RandomAccessIterator> ::value_type __val = std::move(*__last); 
# 1826
_RandomAccessIterator __next = __last; 
# 1827
--__next; 
# 1828
while (__comp(__val, __next)) 
# 1829
{ 
# 1830
(*__last) = std::move(*__next); 
# 1831
__last = __next; 
# 1832
--__next; 
# 1833
}  
# 1834
(*__last) = std::move(__val); 
# 1835
} 
# 1838
template< class _RandomAccessIterator, class _Compare> void 
# 1840
__insertion_sort(_RandomAccessIterator __first, _RandomAccessIterator 
# 1841
__last, _Compare __comp) 
# 1842
{ 
# 1843
if (__first == __last) { return; }  
# 1845
for (_RandomAccessIterator __i = __first + 1; __i != __last; ++__i) 
# 1846
{ 
# 1847
if (__comp(__i, __first)) 
# 1848
{ 
# 1850
typename iterator_traits< _RandomAccessIterator> ::value_type __val = std::move(*__i); 
# 1851
std::move_backward(__first, __i, __i + 1); 
# 1852
(*__first) = std::move(__val); 
# 1853
} else { 
# 1855
std::__unguarded_linear_insert(__i, __gnu_cxx::__ops::__val_comp_iter(__comp)); }  
# 1857
}  
# 1858
} 
# 1861
template< class _RandomAccessIterator, class _Compare> inline void 
# 1863
__unguarded_insertion_sort(_RandomAccessIterator __first, _RandomAccessIterator 
# 1864
__last, _Compare __comp) 
# 1865
{ 
# 1866
for (_RandomAccessIterator __i = __first; __i != __last; ++__i) { 
# 1867
std::__unguarded_linear_insert(__i, __gnu_cxx::__ops::__val_comp_iter(__comp)); }  
# 1869
} 
# 1875
enum { _S_threshold = 16}; 
# 1878
template< class _RandomAccessIterator, class _Compare> void 
# 1880
__final_insertion_sort(_RandomAccessIterator __first, _RandomAccessIterator 
# 1881
__last, _Compare __comp) 
# 1882
{ 
# 1883
if ((__last - __first) > ((int)_S_threshold)) 
# 1884
{ 
# 1885
std::__insertion_sort(__first, __first + ((int)_S_threshold), __comp); 
# 1886
std::__unguarded_insertion_sort(__first + ((int)_S_threshold), __last, __comp); 
# 1888
} else { 
# 1890
std::__insertion_sort(__first, __last, __comp); }  
# 1891
} 
# 1894
template< class _RandomAccessIterator, class _Compare> _RandomAccessIterator 
# 1896
__unguarded_partition(_RandomAccessIterator __first, _RandomAccessIterator 
# 1897
__last, _RandomAccessIterator 
# 1898
__pivot, _Compare __comp) 
# 1899
{ 
# 1900
while (true) 
# 1901
{ 
# 1902
while (__comp(__first, __pivot)) { 
# 1903
++__first; }  
# 1904
--__last; 
# 1905
while (__comp(__pivot, __last)) { 
# 1906
--__last; }  
# 1907
if (!(__first < __last)) { 
# 1908
return __first; }  
# 1909
std::iter_swap(__first, __last); 
# 1910
++__first; 
# 1911
}  
# 1912
} 
# 1915
template< class _RandomAccessIterator, class _Compare> inline _RandomAccessIterator 
# 1917
__unguarded_partition_pivot(_RandomAccessIterator __first, _RandomAccessIterator 
# 1918
__last, _Compare __comp) 
# 1919
{ 
# 1920
_RandomAccessIterator __mid = __first + ((__last - __first) / 2); 
# 1921
std::__move_median_to_first(__first, __first + 1, __mid, __last - 1, __comp); 
# 1923
return std::__unguarded_partition(__first + 1, __last, __first, __comp); 
# 1924
} 
# 1926
template< class _RandomAccessIterator, class _Compare> inline void 
# 1928
__partial_sort(_RandomAccessIterator __first, _RandomAccessIterator 
# 1929
__middle, _RandomAccessIterator 
# 1930
__last, _Compare 
# 1931
__comp) 
# 1932
{ 
# 1933
std::__heap_select(__first, __middle, __last, __comp); 
# 1934
std::__sort_heap(__first, __middle, __comp); 
# 1935
} 
# 1938
template< class _RandomAccessIterator, class _Size, class _Compare> void 
# 1940
__introsort_loop(_RandomAccessIterator __first, _RandomAccessIterator 
# 1941
__last, _Size 
# 1942
__depth_limit, _Compare __comp) 
# 1943
{ 
# 1944
while ((__last - __first) > ((int)_S_threshold)) 
# 1945
{ 
# 1946
if (__depth_limit == 0) 
# 1947
{ 
# 1948
std::__partial_sort(__first, __last, __last, __comp); 
# 1949
return; 
# 1950
}  
# 1951
--__depth_limit; 
# 1952
_RandomAccessIterator __cut = std::__unguarded_partition_pivot(__first, __last, __comp); 
# 1954
std::__introsort_loop(__cut, __last, __depth_limit, __comp); 
# 1955
__last = __cut; 
# 1956
}  
# 1957
} 
# 1961
template< class _RandomAccessIterator, class _Compare> inline void 
# 1963
__sort(_RandomAccessIterator __first, _RandomAccessIterator __last, _Compare 
# 1964
__comp) 
# 1965
{ 
# 1966
if (__first != __last) 
# 1967
{ 
# 1968
std::__introsort_loop(__first, __last, std::__lg(__last - __first) * 2, __comp); 
# 1971
std::__final_insertion_sort(__first, __last, __comp); 
# 1972
}  
# 1973
} 
# 1975
template< class _RandomAccessIterator, class _Size, class _Compare> void 
# 1977
__introselect(_RandomAccessIterator __first, _RandomAccessIterator __nth, _RandomAccessIterator 
# 1978
__last, _Size __depth_limit, _Compare 
# 1979
__comp) 
# 1980
{ 
# 1981
while ((__last - __first) > 3) 
# 1982
{ 
# 1983
if (__depth_limit == 0) 
# 1984
{ 
# 1985
std::__heap_select(__first, __nth + 1, __last, __comp); 
# 1987
std::iter_swap(__first, __nth); 
# 1988
return; 
# 1989
}  
# 1990
--__depth_limit; 
# 1991
_RandomAccessIterator __cut = std::__unguarded_partition_pivot(__first, __last, __comp); 
# 1993
if (__cut <= __nth) { 
# 1994
__first = __cut; } else { 
# 1996
__last = __cut; }  
# 1997
}  
# 1998
std::__insertion_sort(__first, __last, __comp); 
# 1999
} 
# 2021 "/usr/include/c++/8/bits/stl_algo.h" 3
template< class _ForwardIterator, class _Tp, class _Compare> inline _ForwardIterator 
# 2023
lower_bound(_ForwardIterator __first, _ForwardIterator __last, const _Tp &
# 2024
__val, _Compare __comp) 
# 2025
{ 
# 2031
; 
# 2033
return std::__lower_bound(__first, __last, __val, __gnu_cxx::__ops::__iter_comp_val(__comp)); 
# 2035
} 
# 2037
template< class _ForwardIterator, class _Tp, class _Compare> _ForwardIterator 
# 2039
__upper_bound(_ForwardIterator __first, _ForwardIterator __last, const _Tp &
# 2040
__val, _Compare __comp) 
# 2041
{ 
# 2043
typedef typename iterator_traits< _ForwardIterator> ::difference_type _DistanceType; 
# 2045
_DistanceType __len = std::distance(__first, __last); 
# 2047
while (__len > 0) 
# 2048
{ 
# 2049
_DistanceType __half = __len >> 1; 
# 2050
_ForwardIterator __middle = __first; 
# 2051
std::advance(__middle, __half); 
# 2052
if (__comp(__val, __middle)) { 
# 2053
__len = __half; } else 
# 2055
{ 
# 2056
__first = __middle; 
# 2057
++__first; 
# 2058
__len = ((__len - __half) - 1); 
# 2059
}  
# 2060
}  
# 2061
return __first; 
# 2062
} 
# 2075 "/usr/include/c++/8/bits/stl_algo.h" 3
template< class _ForwardIterator, class _Tp> inline _ForwardIterator 
# 2077
upper_bound(_ForwardIterator __first, _ForwardIterator __last, const _Tp &
# 2078
__val) 
# 2079
{ 
# 2084
; 
# 2086
return std::__upper_bound(__first, __last, __val, __gnu_cxx::__ops::__val_less_iter()); 
# 2088
} 
# 2105 "/usr/include/c++/8/bits/stl_algo.h" 3
template< class _ForwardIterator, class _Tp, class _Compare> inline _ForwardIterator 
# 2107
upper_bound(_ForwardIterator __first, _ForwardIterator __last, const _Tp &
# 2108
__val, _Compare __comp) 
# 2109
{ 
# 2115
; 
# 2117
return std::__upper_bound(__first, __last, __val, __gnu_cxx::__ops::__val_comp_iter(__comp)); 
# 2119
} 
# 2121
template< class _ForwardIterator, class _Tp, class 
# 2122
_CompareItTp, class _CompareTpIt> pair< _ForwardIterator, _ForwardIterator>  
# 2124
__equal_range(_ForwardIterator __first, _ForwardIterator __last, const _Tp &
# 2125
__val, _CompareItTp 
# 2126
__comp_it_val, _CompareTpIt __comp_val_it) 
# 2127
{ 
# 2129
typedef typename iterator_traits< _ForwardIterator> ::difference_type _DistanceType; 
# 2131
_DistanceType __len = std::distance(__first, __last); 
# 2133
while (__len > 0) 
# 2134
{ 
# 2135
_DistanceType __half = __len >> 1; 
# 2136
_ForwardIterator __middle = __first; 
# 2137
std::advance(__middle, __half); 
# 2138
if (__comp_it_val(__middle, __val)) 
# 2139
{ 
# 2140
__first = __middle; 
# 2141
++__first; 
# 2142
__len = ((__len - __half) - 1); 
# 2143
} else { 
# 2144
if (__comp_val_it(__val, __middle)) { 
# 2145
__len = __half; } else 
# 2147
{ 
# 2148
_ForwardIterator __left = std::__lower_bound(__first, __middle, __val, __comp_it_val); 
# 2150
std::advance(__first, __len); 
# 2151
_ForwardIterator __right = std::__upper_bound(++__middle, __first, __val, __comp_val_it); 
# 2153
return pair< _ForwardIterator, _ForwardIterator> (__left, __right); 
# 2154
}  }  
# 2155
}  
# 2156
return pair< _ForwardIterator, _ForwardIterator> (__first, __first); 
# 2157
} 
# 2176 "/usr/include/c++/8/bits/stl_algo.h" 3
template< class _ForwardIterator, class _Tp> inline pair< _ForwardIterator, _ForwardIterator>  
# 2178
equal_range(_ForwardIterator __first, _ForwardIterator __last, const _Tp &
# 2179
__val) 
# 2180
{ 
# 2187
; 
# 2188
; 
# 2190
return std::__equal_range(__first, __last, __val, __gnu_cxx::__ops::__iter_less_val(), __gnu_cxx::__ops::__val_less_iter()); 
# 2193
} 
# 2212 "/usr/include/c++/8/bits/stl_algo.h" 3
template< class _ForwardIterator, class _Tp, class _Compare> inline pair< _ForwardIterator, _ForwardIterator>  
# 2214
equal_range(_ForwardIterator __first, _ForwardIterator __last, const _Tp &
# 2215
__val, _Compare __comp) 
# 2216
{ 
# 2224
; 
# 2226
; 
# 2228
return std::__equal_range(__first, __last, __val, __gnu_cxx::__ops::__iter_comp_val(__comp), __gnu_cxx::__ops::__val_comp_iter(__comp)); 
# 2231
} 
# 2245 "/usr/include/c++/8/bits/stl_algo.h" 3
template< class _ForwardIterator, class _Tp> bool 
# 2247
binary_search(_ForwardIterator __first, _ForwardIterator __last, const _Tp &
# 2248
__val) 
# 2249
{ 
# 2254
; 
# 2255
; 
# 2257
_ForwardIterator __i = std::__lower_bound(__first, __last, __val, __gnu_cxx::__ops::__iter_less_val()); 
# 2260
return (__i != __last) && (!(__val < (*__i))); 
# 2261
} 
# 2278 "/usr/include/c++/8/bits/stl_algo.h" 3
template< class _ForwardIterator, class _Tp, class _Compare> bool 
# 2280
binary_search(_ForwardIterator __first, _ForwardIterator __last, const _Tp &
# 2281
__val, _Compare __comp) 
# 2282
{ 
# 2288
; 
# 2290
; 
# 2292
_ForwardIterator __i = std::__lower_bound(__first, __last, __val, __gnu_cxx::__ops::__iter_comp_val(__comp)); 
# 2295
return (__i != __last) && (!((bool)__comp(__val, *__i))); 
# 2296
} 
# 2301
template< class _InputIterator1, class _InputIterator2, class 
# 2302
_OutputIterator, class _Compare> void 
# 2304
__move_merge_adaptive(_InputIterator1 __first1, _InputIterator1 __last1, _InputIterator2 
# 2305
__first2, _InputIterator2 __last2, _OutputIterator 
# 2306
__result, _Compare __comp) 
# 2307
{ 
# 2308
while ((__first1 != __last1) && (__first2 != __last2)) 
# 2309
{ 
# 2310
if (__comp(__first2, __first1)) 
# 2311
{ 
# 2312
(*__result) = std::move(*__first2); 
# 2313
++__first2; 
# 2314
} else 
# 2316
{ 
# 2317
(*__result) = std::move(*__first1); 
# 2318
++__first1; 
# 2319
}  
# 2320
++__result; 
# 2321
}  
# 2322
if (__first1 != __last1) { 
# 2323
std::move(__first1, __last1, __result); }  
# 2324
} 
# 2327
template< class _BidirectionalIterator1, class _BidirectionalIterator2, class 
# 2328
_BidirectionalIterator3, class _Compare> void 
# 2330
__move_merge_adaptive_backward(_BidirectionalIterator1 __first1, _BidirectionalIterator1 
# 2331
__last1, _BidirectionalIterator2 
# 2332
__first2, _BidirectionalIterator2 
# 2333
__last2, _BidirectionalIterator3 
# 2334
__result, _Compare 
# 2335
__comp) 
# 2336
{ 
# 2337
if (__first1 == __last1) 
# 2338
{ 
# 2339
std::move_backward(__first2, __last2, __result); 
# 2340
return; 
# 2341
} else { 
# 2342
if (__first2 == __last2) { 
# 2343
return; }  }  
# 2345
--__last1; 
# 2346
--__last2; 
# 2347
while (true) 
# 2348
{ 
# 2349
if (__comp(__last2, __last1)) 
# 2350
{ 
# 2351
(*(--__result)) = std::move(*__last1); 
# 2352
if (__first1 == __last1) 
# 2353
{ 
# 2354
std::move_backward(__first2, ++__last2, __result); 
# 2355
return; 
# 2356
}  
# 2357
--__last1; 
# 2358
} else 
# 2360
{ 
# 2361
(*(--__result)) = std::move(*__last2); 
# 2362
if (__first2 == __last2) { 
# 2363
return; }  
# 2364
--__last2; 
# 2365
}  
# 2366
}  
# 2367
} 
# 2370
template< class _BidirectionalIterator1, class _BidirectionalIterator2, class 
# 2371
_Distance> _BidirectionalIterator1 
# 2373
__rotate_adaptive(_BidirectionalIterator1 __first, _BidirectionalIterator1 
# 2374
__middle, _BidirectionalIterator1 
# 2375
__last, _Distance 
# 2376
__len1, _Distance __len2, _BidirectionalIterator2 
# 2377
__buffer, _Distance 
# 2378
__buffer_size) 
# 2379
{ 
# 2380
_BidirectionalIterator2 __buffer_end; 
# 2381
if ((__len1 > __len2) && (__len2 <= __buffer_size)) 
# 2382
{ 
# 2383
if (__len2) 
# 2384
{ 
# 2385
__buffer_end = std::move(__middle, __last, __buffer); 
# 2386
std::move_backward(__first, __middle, __last); 
# 2387
return std::move(__buffer, __buffer_end, __first); 
# 2388
} else { 
# 2390
return __first; }  
# 2391
} else { 
# 2392
if (__len1 <= __buffer_size) 
# 2393
{ 
# 2394
if (__len1) 
# 2395
{ 
# 2396
__buffer_end = std::move(__first, __middle, __buffer); 
# 2397
std::move(__middle, __last, __first); 
# 2398
return std::move_backward(__buffer, __buffer_end, __last); 
# 2399
} else { 
# 2401
return __last; }  
# 2402
} else 
# 2404
{ 
# 2405
std::rotate(__first, __middle, __last); 
# 2406
std::advance(__first, std::distance(__middle, __last)); 
# 2407
return __first; 
# 2408
}  }  
# 2409
} 
# 2412
template< class _BidirectionalIterator, class _Distance, class 
# 2413
_Pointer, class _Compare> void 
# 2415
__merge_adaptive(_BidirectionalIterator __first, _BidirectionalIterator 
# 2416
__middle, _BidirectionalIterator 
# 2417
__last, _Distance 
# 2418
__len1, _Distance __len2, _Pointer 
# 2419
__buffer, _Distance __buffer_size, _Compare 
# 2420
__comp) 
# 2421
{ 
# 2422
if ((__len1 <= __len2) && (__len1 <= __buffer_size)) 
# 2423
{ 
# 2424
_Pointer __buffer_end = std::move(__first, __middle, __buffer); 
# 2425
std::__move_merge_adaptive(__buffer, __buffer_end, __middle, __last, __first, __comp); 
# 2427
} else { 
# 2428
if (__len2 <= __buffer_size) 
# 2429
{ 
# 2430
_Pointer __buffer_end = std::move(__middle, __last, __buffer); 
# 2431
std::__move_merge_adaptive_backward(__first, __middle, __buffer, __buffer_end, __last, __comp); 
# 2433
} else 
# 2435
{ 
# 2436
_BidirectionalIterator __first_cut = __first; 
# 2437
_BidirectionalIterator __second_cut = __middle; 
# 2438
_Distance __len11 = (0); 
# 2439
_Distance __len22 = (0); 
# 2440
if (__len1 > __len2) 
# 2441
{ 
# 2442
__len11 = (__len1 / 2); 
# 2443
std::advance(__first_cut, __len11); 
# 2444
__second_cut = std::__lower_bound(__middle, __last, *__first_cut, __gnu_cxx::__ops::__iter_comp_val(__comp)); 
# 2447
__len22 = std::distance(__middle, __second_cut); 
# 2448
} else 
# 2450
{ 
# 2451
__len22 = (__len2 / 2); 
# 2452
std::advance(__second_cut, __len22); 
# 2453
__first_cut = std::__upper_bound(__first, __middle, *__second_cut, __gnu_cxx::__ops::__val_comp_iter(__comp)); 
# 2456
__len11 = std::distance(__first, __first_cut); 
# 2457
}  
# 2459
_BidirectionalIterator __new_middle = std::__rotate_adaptive(__first_cut, __middle, __second_cut, __len1 - __len11, __len22, __buffer, __buffer_size); 
# 2463
std::__merge_adaptive(__first, __first_cut, __new_middle, __len11, __len22, __buffer, __buffer_size, __comp); 
# 2465
std::__merge_adaptive(__new_middle, __second_cut, __last, __len1 - __len11, __len2 - __len22, __buffer, __buffer_size, __comp); 
# 2469
}  }  
# 2470
} 
# 2473
template< class _BidirectionalIterator, class _Distance, class 
# 2474
_Compare> void 
# 2476
__merge_without_buffer(_BidirectionalIterator __first, _BidirectionalIterator 
# 2477
__middle, _BidirectionalIterator 
# 2478
__last, _Distance 
# 2479
__len1, _Distance __len2, _Compare 
# 2480
__comp) 
# 2481
{ 
# 2482
if ((__len1 == 0) || (__len2 == 0)) { 
# 2483
return; }  
# 2485
if ((__len1 + __len2) == 2) 
# 2486
{ 
# 2487
if (__comp(__middle, __first)) { 
# 2488
std::iter_swap(__first, __middle); }  
# 2489
return; 
# 2490
}  
# 2492
_BidirectionalIterator __first_cut = __first; 
# 2493
_BidirectionalIterator __second_cut = __middle; 
# 2494
_Distance __len11 = (0); 
# 2495
_Distance __len22 = (0); 
# 2496
if (__len1 > __len2) 
# 2497
{ 
# 2498
__len11 = (__len1 / 2); 
# 2499
std::advance(__first_cut, __len11); 
# 2500
__second_cut = std::__lower_bound(__middle, __last, *__first_cut, __gnu_cxx::__ops::__iter_comp_val(__comp)); 
# 2503
__len22 = std::distance(__middle, __second_cut); 
# 2504
} else 
# 2506
{ 
# 2507
__len22 = (__len2 / 2); 
# 2508
std::advance(__second_cut, __len22); 
# 2509
__first_cut = std::__upper_bound(__first, __middle, *__second_cut, __gnu_cxx::__ops::__val_comp_iter(__comp)); 
# 2512
__len11 = std::distance(__first, __first_cut); 
# 2513
}  
# 2515
std::rotate(__first_cut, __middle, __second_cut); 
# 2516
_BidirectionalIterator __new_middle = __first_cut; 
# 2517
std::advance(__new_middle, std::distance(__middle, __second_cut)); 
# 2518
std::__merge_without_buffer(__first, __first_cut, __new_middle, __len11, __len22, __comp); 
# 2520
std::__merge_without_buffer(__new_middle, __second_cut, __last, __len1 - __len11, __len2 - __len22, __comp); 
# 2522
} 
# 2524
template< class _BidirectionalIterator, class _Compare> void 
# 2526
__inplace_merge(_BidirectionalIterator __first, _BidirectionalIterator 
# 2527
__middle, _BidirectionalIterator 
# 2528
__last, _Compare 
# 2529
__comp) 
# 2530
{ 
# 2532
typedef typename iterator_traits< _BidirectionalIterator> ::value_type _ValueType; 
# 2534
typedef typename iterator_traits< _BidirectionalIterator> ::difference_type _DistanceType; 
# 2536
if ((__first == __middle) || (__middle == __last)) { 
# 2537
return; }  
# 2539
const _DistanceType __len1 = std::distance(__first, __middle); 
# 2540
const _DistanceType __len2 = std::distance(__middle, __last); 
# 2542
typedef _Temporary_buffer< _BidirectionalIterator, typename iterator_traits< _BidirectionalIterator> ::value_type>  _TmpBuf; 
# 2543
_TmpBuf __buf(__first, __last); 
# 2545
if ((__buf.begin()) == 0) { 
# 2546
std::__merge_without_buffer(__first, __middle, __last, __len1, __len2, __comp); } else { 
# 2549
std::__merge_adaptive(__first, __middle, __last, __len1, __len2, (__buf.begin()), (_DistanceType)(__buf.size()), __comp); }  
# 2552
} 
# 2572 "/usr/include/c++/8/bits/stl_algo.h" 3
template< class _BidirectionalIterator> inline void 
# 2574
inplace_merge(_BidirectionalIterator __first, _BidirectionalIterator 
# 2575
__middle, _BidirectionalIterator 
# 2576
__last) 
# 2577
{ 
# 2583
; 
# 2584
; 
# 2585
; 
# 2587
std::__inplace_merge(__first, __middle, __last, __gnu_cxx::__ops::__iter_less_iter()); 
# 2589
} 
# 2613 "/usr/include/c++/8/bits/stl_algo.h" 3
template< class _BidirectionalIterator, class _Compare> inline void 
# 2615
inplace_merge(_BidirectionalIterator __first, _BidirectionalIterator 
# 2616
__middle, _BidirectionalIterator 
# 2617
__last, _Compare 
# 2618
__comp) 
# 2619
{ 
# 2626
; 
# 2627
; 
# 2628
; 
# 2630
std::__inplace_merge(__first, __middle, __last, __gnu_cxx::__ops::__iter_comp_iter(__comp)); 
# 2632
} 
# 2636
template< class _InputIterator, class _OutputIterator, class 
# 2637
_Compare> _OutputIterator 
# 2639
__move_merge(_InputIterator __first1, _InputIterator __last1, _InputIterator 
# 2640
__first2, _InputIterator __last2, _OutputIterator 
# 2641
__result, _Compare __comp) 
# 2642
{ 
# 2643
while ((__first1 != __last1) && (__first2 != __last2)) 
# 2644
{ 
# 2645
if (__comp(__first2, __first1)) 
# 2646
{ 
# 2647
(*__result) = std::move(*__first2); 
# 2648
++__first2; 
# 2649
} else 
# 2651
{ 
# 2652
(*__result) = std::move(*__first1); 
# 2653
++__first1; 
# 2654
}  
# 2655
++__result; 
# 2656
}  
# 2657
return std::move(__first2, __last2, std::move(__first1, __last1, __result)); 
# 2660
} 
# 2662
template< class _RandomAccessIterator1, class _RandomAccessIterator2, class 
# 2663
_Distance, class _Compare> void 
# 2665
__merge_sort_loop(_RandomAccessIterator1 __first, _RandomAccessIterator1 
# 2666
__last, _RandomAccessIterator2 
# 2667
__result, _Distance __step_size, _Compare 
# 2668
__comp) 
# 2669
{ 
# 2670
const _Distance __two_step = 2 * __step_size; 
# 2672
while ((__last - __first) >= __two_step) 
# 2673
{ 
# 2674
__result = std::__move_merge(__first, __first + __step_size, __first + __step_size, __first + __two_step, __result, __comp); 
# 2678
__first += __two_step; 
# 2679
}  
# 2680
__step_size = std::min((_Distance)(__last - __first), __step_size); 
# 2682
std::__move_merge(__first, __first + __step_size, __first + __step_size, __last, __result, __comp); 
# 2684
} 
# 2686
template< class _RandomAccessIterator, class _Distance, class 
# 2687
_Compare> void 
# 2689
__chunk_insertion_sort(_RandomAccessIterator __first, _RandomAccessIterator 
# 2690
__last, _Distance 
# 2691
__chunk_size, _Compare __comp) 
# 2692
{ 
# 2693
while ((__last - __first) >= __chunk_size) 
# 2694
{ 
# 2695
std::__insertion_sort(__first, __first + __chunk_size, __comp); 
# 2696
__first += __chunk_size; 
# 2697
}  
# 2698
std::__insertion_sort(__first, __last, __comp); 
# 2699
} 
# 2701
enum { _S_chunk_size = 7}; 
# 2703
template< class _RandomAccessIterator, class _Pointer, class _Compare> void 
# 2705
__merge_sort_with_buffer(_RandomAccessIterator __first, _RandomAccessIterator 
# 2706
__last, _Pointer 
# 2707
__buffer, _Compare __comp) 
# 2708
{ 
# 2710
typedef typename iterator_traits< _RandomAccessIterator> ::difference_type _Distance; 
# 2712
const _Distance __len = __last - __first; 
# 2713
const _Pointer __buffer_last = __buffer + __len; 
# 2715
_Distance __step_size = (_S_chunk_size); 
# 2716
std::__chunk_insertion_sort(__first, __last, __step_size, __comp); 
# 2718
while (__step_size < __len) 
# 2719
{ 
# 2720
std::__merge_sort_loop(__first, __last, __buffer, __step_size, __comp); 
# 2722
__step_size *= 2; 
# 2723
std::__merge_sort_loop(__buffer, __buffer_last, __first, __step_size, __comp); 
# 2725
__step_size *= 2; 
# 2726
}  
# 2727
} 
# 2729
template< class _RandomAccessIterator, class _Pointer, class 
# 2730
_Distance, class _Compare> void 
# 2732
__stable_sort_adaptive(_RandomAccessIterator __first, _RandomAccessIterator 
# 2733
__last, _Pointer 
# 2734
__buffer, _Distance __buffer_size, _Compare 
# 2735
__comp) 
# 2736
{ 
# 2737
const _Distance __len = ((__last - __first) + 1) / 2; 
# 2738
const _RandomAccessIterator __middle = __first + __len; 
# 2739
if (__len > __buffer_size) 
# 2740
{ 
# 2741
std::__stable_sort_adaptive(__first, __middle, __buffer, __buffer_size, __comp); 
# 2743
std::__stable_sort_adaptive(__middle, __last, __buffer, __buffer_size, __comp); 
# 2745
} else 
# 2747
{ 
# 2748
std::__merge_sort_with_buffer(__first, __middle, __buffer, __comp); 
# 2749
std::__merge_sort_with_buffer(__middle, __last, __buffer, __comp); 
# 2750
}  
# 2751
std::__merge_adaptive(__first, __middle, __last, (_Distance)(__middle - __first), (_Distance)(__last - __middle), __buffer, __buffer_size, __comp); 
# 2756
} 
# 2759
template< class _RandomAccessIterator, class _Compare> void 
# 2761
__inplace_stable_sort(_RandomAccessIterator __first, _RandomAccessIterator 
# 2762
__last, _Compare __comp) 
# 2763
{ 
# 2764
if ((__last - __first) < 15) 
# 2765
{ 
# 2766
std::__insertion_sort(__first, __last, __comp); 
# 2767
return; 
# 2768
}  
# 2769
_RandomAccessIterator __middle = __first + ((__last - __first) / 2); 
# 2770
std::__inplace_stable_sort(__first, __middle, __comp); 
# 2771
std::__inplace_stable_sort(__middle, __last, __comp); 
# 2772
std::__merge_without_buffer(__first, __middle, __last, __middle - __first, __last - __middle, __comp); 
# 2776
} 
# 2785 "/usr/include/c++/8/bits/stl_algo.h" 3
template< class _InputIterator1, class _InputIterator2, class 
# 2786
_Compare> bool 
# 2788
__includes(_InputIterator1 __first1, _InputIterator1 __last1, _InputIterator2 
# 2789
__first2, _InputIterator2 __last2, _Compare 
# 2790
__comp) 
# 2791
{ 
# 2792
while ((__first1 != __last1) && (__first2 != __last2)) { 
# 2793
if (__comp(__first2, __first1)) { 
# 2794
return false; } else { 
# 2795
if (__comp(__first1, __first2)) { 
# 2796
++__first1; } else 
# 2798
{ 
# 2799
++__first1; 
# 2800
++__first2; 
# 2801
}  }  }  
# 2803
return __first2 == __last2; 
# 2804
} 
# 2824 "/usr/include/c++/8/bits/stl_algo.h" 3
template< class _InputIterator1, class _InputIterator2> inline bool 
# 2826
includes(_InputIterator1 __first1, _InputIterator1 __last1, _InputIterator2 
# 2827
__first2, _InputIterator2 __last2) 
# 2828
{ 
# 2838
; 
# 2839
; 
# 2840
; 
# 2841
; 
# 2843
return std::__includes(__first1, __last1, __first2, __last2, __gnu_cxx::__ops::__iter_less_iter()); 
# 2845
} 
# 2868 "/usr/include/c++/8/bits/stl_algo.h" 3
template< class _InputIterator1, class _InputIterator2, class 
# 2869
_Compare> inline bool 
# 2871
includes(_InputIterator1 __first1, _InputIterator1 __last1, _InputIterator2 
# 2872
__first2, _InputIterator2 __last2, _Compare 
# 2873
__comp) 
# 2874
{ 
# 2884
; 
# 2885
; 
# 2886
; 
# 2887
; 
# 2889
return std::__includes(__first1, __last1, __first2, __last2, __gnu_cxx::__ops::__iter_comp_iter(__comp)); 
# 2891
} 
# 2903 "/usr/include/c++/8/bits/stl_algo.h" 3
template< class _BidirectionalIterator, class _Compare> bool 
# 2905
__next_permutation(_BidirectionalIterator __first, _BidirectionalIterator 
# 2906
__last, _Compare __comp) 
# 2907
{ 
# 2908
if (__first == __last) { 
# 2909
return false; }  
# 2910
_BidirectionalIterator __i = __first; 
# 2911
++__i; 
# 2912
if (__i == __last) { 
# 2913
return false; }  
# 2914
__i = __last; 
# 2915
--__i; 
# 2917
for (; ;) 
# 2918
{ 
# 2919
_BidirectionalIterator __ii = __i; 
# 2920
--__i; 
# 2921
if (__comp(__i, __ii)) 
# 2922
{ 
# 2923
_BidirectionalIterator __j = __last; 
# 2924
while (!__comp(__i, --__j)) 
# 2925
{ }  
# 2926
std::iter_swap(__i, __j); 
# 2927
std::__reverse(__ii, __last, std::__iterator_category(__first)); 
# 2929
return true; 
# 2930
}  
# 2931
if (__i == __first) 
# 2932
{ 
# 2933
std::__reverse(__first, __last, std::__iterator_category(__first)); 
# 2935
return false; 
# 2936
}  
# 2937
}  
# 2938
} 
# 2952 "/usr/include/c++/8/bits/stl_algo.h" 3
template< class _BidirectionalIterator> inline bool 
# 2954
next_permutation(_BidirectionalIterator __first, _BidirectionalIterator 
# 2955
__last) 
# 2956
{ 
# 2962
; 
# 2963
; 
# 2965
return std::__next_permutation(__first, __last, __gnu_cxx::__ops::__iter_less_iter()); 
# 2967
} 
# 2984 "/usr/include/c++/8/bits/stl_algo.h" 3
template< class _BidirectionalIterator, class _Compare> inline bool 
# 2986
next_permutation(_BidirectionalIterator __first, _BidirectionalIterator 
# 2987
__last, _Compare __comp) 
# 2988
{ 
# 2995
; 
# 2996
; 
# 2998
return std::__next_permutation(__first, __last, __gnu_cxx::__ops::__iter_comp_iter(__comp)); 
# 3000
} 
# 3002
template< class _BidirectionalIterator, class _Compare> bool 
# 3004
__prev_permutation(_BidirectionalIterator __first, _BidirectionalIterator 
# 3005
__last, _Compare __comp) 
# 3006
{ 
# 3007
if (__first == __last) { 
# 3008
return false; }  
# 3009
_BidirectionalIterator __i = __first; 
# 3010
++__i; 
# 3011
if (__i == __last) { 
# 3012
return false; }  
# 3013
__i = __last; 
# 3014
--__i; 
# 3016
for (; ;) 
# 3017
{ 
# 3018
_BidirectionalIterator __ii = __i; 
# 3019
--__i; 
# 3020
if (__comp(__ii, __i)) 
# 3021
{ 
# 3022
_BidirectionalIterator __j = __last; 
# 3023
while (!__comp(--__j, __i)) 
# 3024
{ }  
# 3025
std::iter_swap(__i, __j); 
# 3026
std::__reverse(__ii, __last, std::__iterator_category(__first)); 
# 3028
return true; 
# 3029
}  
# 3030
if (__i == __first) 
# 3031
{ 
# 3032
std::__reverse(__first, __last, std::__iterator_category(__first)); 
# 3034
return false; 
# 3035
}  
# 3036
}  
# 3037
} 
# 3052 "/usr/include/c++/8/bits/stl_algo.h" 3
template< class _BidirectionalIterator> inline bool 
# 3054
prev_permutation(_BidirectionalIterator __first, _BidirectionalIterator 
# 3055
__last) 
# 3056
{ 
# 3062
; 
# 3063
; 
# 3065
return std::__prev_permutation(__first, __last, __gnu_cxx::__ops::__iter_less_iter()); 
# 3067
} 
# 3084 "/usr/include/c++/8/bits/stl_algo.h" 3
template< class _BidirectionalIterator, class _Compare> inline bool 
# 3086
prev_permutation(_BidirectionalIterator __first, _BidirectionalIterator 
# 3087
__last, _Compare __comp) 
# 3088
{ 
# 3095
; 
# 3096
; 
# 3098
return std::__prev_permutation(__first, __last, __gnu_cxx::__ops::__iter_comp_iter(__comp)); 
# 3100
} 
# 3105
template< class _InputIterator, class _OutputIterator, class 
# 3106
_Predicate, class _Tp> _OutputIterator 
# 3108
__replace_copy_if(_InputIterator __first, _InputIterator __last, _OutputIterator 
# 3109
__result, _Predicate 
# 3110
__pred, const _Tp &__new_value) 
# 3111
{ 
# 3112
for (; __first != __last; (++__first), ((void)(++__result))) { 
# 3113
if (__pred(__first)) { 
# 3114
(*__result) = __new_value; } else { 
# 3116
(*__result) = (*__first); }  }  
# 3117
return __result; 
# 3118
} 
# 3134 "/usr/include/c++/8/bits/stl_algo.h" 3
template< class _InputIterator, class _OutputIterator, class _Tp> inline _OutputIterator 
# 3136
replace_copy(_InputIterator __first, _InputIterator __last, _OutputIterator 
# 3137
__result, const _Tp &
# 3138
__old_value, const _Tp &__new_value) 
# 3139
{ 
# 3146
; 
# 3148
return std::__replace_copy_if(__first, __last, __result, __gnu_cxx::__ops::__iter_equals_val(__old_value), __new_value); 
# 3151
} 
# 3168 "/usr/include/c++/8/bits/stl_algo.h" 3
template< class _InputIterator, class _OutputIterator, class 
# 3169
_Predicate, class _Tp> inline _OutputIterator 
# 3171
replace_copy_if(_InputIterator __first, _InputIterator __last, _OutputIterator 
# 3172
__result, _Predicate 
# 3173
__pred, const _Tp &__new_value) 
# 3174
{ 
# 3181
; 
# 3183
return std::__replace_copy_if(__first, __last, __result, __gnu_cxx::__ops::__pred_iter(__pred), __new_value); 
# 3186
} 
# 3188
template< class _InputIterator, class _Predicate> typename iterator_traits< _InputIterator> ::difference_type 
# 3190
__count_if(_InputIterator __first, _InputIterator __last, _Predicate __pred) 
# 3191
{ 
# 3192
typename iterator_traits< _InputIterator> ::difference_type __n = (0); 
# 3193
for (; __first != __last; ++__first) { 
# 3194
if (__pred(__first)) { 
# 3195
++__n; }  }  
# 3196
return __n; 
# 3197
} 
# 3207 "/usr/include/c++/8/bits/stl_algo.h" 3
template< class _ForwardIterator> inline bool 
# 3209
is_sorted(_ForwardIterator __first, _ForwardIterator __last) 
# 3210
{ return std::is_sorted_until(__first, __last) == __last; } 
# 3221 "/usr/include/c++/8/bits/stl_algo.h" 3
template< class _ForwardIterator, class _Compare> inline bool 
# 3223
is_sorted(_ForwardIterator __first, _ForwardIterator __last, _Compare 
# 3224
__comp) 
# 3225
{ return std::is_sorted_until(__first, __last, __comp) == __last; } 
# 3227
template< class _ForwardIterator, class _Compare> _ForwardIterator 
# 3229
__is_sorted_until(_ForwardIterator __first, _ForwardIterator __last, _Compare 
# 3230
__comp) 
# 3231
{ 
# 3232
if (__first == __last) { 
# 3233
return __last; }  
# 3235
_ForwardIterator __next = __first; 
# 3236
for (++__next; __next != __last; (__first = __next), ((void)(++__next))) { 
# 3237
if (__comp(__next, __first)) { 
# 3238
return __next; }  }  
# 3239
return __next; 
# 3240
} 
# 3250 "/usr/include/c++/8/bits/stl_algo.h" 3
template< class _ForwardIterator> inline _ForwardIterator 
# 3252
is_sorted_until(_ForwardIterator __first, _ForwardIterator __last) 
# 3253
{ 
# 3258
; 
# 3259
; 
# 3261
return std::__is_sorted_until(__first, __last, __gnu_cxx::__ops::__iter_less_iter()); 
# 3263
} 
# 3274 "/usr/include/c++/8/bits/stl_algo.h" 3
template< class _ForwardIterator, class _Compare> inline _ForwardIterator 
# 3276
is_sorted_until(_ForwardIterator __first, _ForwardIterator __last, _Compare 
# 3277
__comp) 
# 3278
{ 
# 3284
; 
# 3285
; 
# 3287
return std::__is_sorted_until(__first, __last, __gnu_cxx::__ops::__iter_comp_iter(__comp)); 
# 3289
} 
# 3299 "/usr/include/c++/8/bits/stl_algo.h" 3
template< class _Tp> constexpr pair< const _Tp &, const _Tp &>  
# 3302
minmax(const _Tp &__a, const _Tp &__b) 
# 3303
{ 
# 3307
return (__b < __a) ? pair< const _Tp &, const _Tp &> (__b, __a) : pair< const _Tp &, const _Tp &> (__a, __b); 
# 3309
} 
# 3320 "/usr/include/c++/8/bits/stl_algo.h" 3
template< class _Tp, class _Compare> constexpr pair< const _Tp &, const _Tp &>  
# 3323
minmax(const _Tp &__a, const _Tp &__b, _Compare __comp) 
# 3324
{ 
# 3325
return (__comp(__b, __a)) ? pair< const _Tp &, const _Tp &> (__b, __a) : pair< const _Tp &, const _Tp &> (__a, __b); 
# 3327
} 
# 3329
template< class _ForwardIterator, class _Compare> constexpr pair< _ForwardIterator, _ForwardIterator>  
# 3332
__minmax_element(_ForwardIterator __first, _ForwardIterator __last, _Compare 
# 3333
__comp) 
# 3334
{ 
# 3335
_ForwardIterator __next = __first; 
# 3336
if ((__first == __last) || ((++__next) == __last)) { 
# 3338
return std::make_pair(__first, __first); }  
# 3340
_ForwardIterator __min{}, __max{}; 
# 3341
if (__comp(__next, __first)) 
# 3342
{ 
# 3343
__min = __next; 
# 3344
__max = __first; 
# 3345
} else 
# 3347
{ 
# 3348
__min = __first; 
# 3349
__max = __next; 
# 3350
}  
# 3352
__first = __next; 
# 3353
++__first; 
# 3355
while (__first != __last) 
# 3356
{ 
# 3357
__next = __first; 
# 3358
if ((++__next) == __last) 
# 3359
{ 
# 3360
if (__comp(__first, __min)) { 
# 3361
__min = __first; } else { 
# 3362
if (!__comp(__first, __max)) { 
# 3363
__max = __first; }  }  
# 3364
break; 
# 3365
}  
# 3367
if (__comp(__next, __first)) 
# 3368
{ 
# 3369
if (__comp(__next, __min)) { 
# 3370
__min = __next; }  
# 3371
if (!__comp(__first, __max)) { 
# 3372
__max = __first; }  
# 3373
} else 
# 3375
{ 
# 3376
if (__comp(__first, __min)) { 
# 3377
__min = __first; }  
# 3378
if (!__comp(__next, __max)) { 
# 3379
__max = __next; }  
# 3380
}  
# 3382
__first = __next; 
# 3383
++__first; 
# 3384
}  
# 3386
return std::make_pair(__min, __max); 
# 3387
} 
# 3400 "/usr/include/c++/8/bits/stl_algo.h" 3
template< class _ForwardIterator> constexpr pair< _ForwardIterator, _ForwardIterator>  
# 3403
minmax_element(_ForwardIterator __first, _ForwardIterator __last) 
# 3404
{ 
# 3409
; 
# 3410
; 
# 3412
return std::__minmax_element(__first, __last, __gnu_cxx::__ops::__iter_less_iter()); 
# 3414
} 
# 3428 "/usr/include/c++/8/bits/stl_algo.h" 3
template< class _ForwardIterator, class _Compare> constexpr pair< _ForwardIterator, _ForwardIterator>  
# 3431
minmax_element(_ForwardIterator __first, _ForwardIterator __last, _Compare 
# 3432
__comp) 
# 3433
{ 
# 3439
; 
# 3440
; 
# 3442
return std::__minmax_element(__first, __last, __gnu_cxx::__ops::__iter_comp_iter(__comp)); 
# 3444
} 
# 3447
template< class _Tp> constexpr _Tp 
# 3450
min(initializer_list< _Tp>  __l) 
# 3451
{ return *std::min_element((__l.begin()), (__l.end())); } 
# 3453
template< class _Tp, class _Compare> constexpr _Tp 
# 3456
min(initializer_list< _Tp>  __l, _Compare __comp) 
# 3457
{ return *std::min_element((__l.begin()), (__l.end()), __comp); } 
# 3459
template< class _Tp> constexpr _Tp 
# 3462
max(initializer_list< _Tp>  __l) 
# 3463
{ return *std::max_element((__l.begin()), (__l.end())); } 
# 3465
template< class _Tp, class _Compare> constexpr _Tp 
# 3468
max(initializer_list< _Tp>  __l, _Compare __comp) 
# 3469
{ return *std::max_element((__l.begin()), (__l.end()), __comp); } 
# 3471
template< class _Tp> constexpr pair< _Tp, _Tp>  
# 3474
minmax(initializer_list< _Tp>  __l) 
# 3475
{ 
# 3476
pair< const _Tp *, const _Tp *>  __p = std::minmax_element((__l.begin()), (__l.end())); 
# 3478
return std::make_pair(*(__p.first), *(__p.second)); 
# 3479
} 
# 3481
template< class _Tp, class _Compare> constexpr pair< _Tp, _Tp>  
# 3484
minmax(initializer_list< _Tp>  __l, _Compare __comp) 
# 3485
{ 
# 3486
pair< const _Tp *, const _Tp *>  __p = std::minmax_element((__l.begin()), (__l.end()), __comp); 
# 3488
return std::make_pair(*(__p.first), *(__p.second)); 
# 3489
} 
# 3491
template< class _ForwardIterator1, class _ForwardIterator2, class 
# 3492
_BinaryPredicate> bool 
# 3494
__is_permutation(_ForwardIterator1 __first1, _ForwardIterator1 __last1, _ForwardIterator2 
# 3495
__first2, _BinaryPredicate __pred) 
# 3496
{ 
# 3499
for (; __first1 != __last1; (++__first1), ((void)(++__first2))) { 
# 3500
if (!__pred(__first1, __first2)) { 
# 3501
break; }  }  
# 3503
if (__first1 == __last1) { 
# 3504
return true; }  
# 3508
_ForwardIterator2 __last2 = __first2; 
# 3509
std::advance(__last2, std::distance(__first1, __last1)); 
# 3510
for (_ForwardIterator1 __scan = __first1; __scan != __last1; ++__scan) { 
# 3511
{ 
# 3512
if (__scan != std::__find_if(__first1, __scan, __gnu_cxx::__ops::__iter_comp_iter(__pred, __scan))) { 
# 3514
continue; }  
# 3516
auto __matches = std::__count_if(__first2, __last2, __gnu_cxx::__ops::__iter_comp_iter(__pred, __scan)); 
# 3519
if ((0 == __matches) || (std::__count_if(__scan, __last1, __gnu_cxx::__ops::__iter_comp_iter(__pred, __scan)) != __matches)) { 
# 3523
return false; }  
# 3524
} }  
# 3525
return true; 
# 3526
} 
# 3540 "/usr/include/c++/8/bits/stl_algo.h" 3
template< class _ForwardIterator1, class _ForwardIterator2> inline bool 
# 3542
is_permutation(_ForwardIterator1 __first1, _ForwardIterator1 __last1, _ForwardIterator2 
# 3543
__first2) 
# 3544
{ 
# 3551
; 
# 3553
return std::__is_permutation(__first1, __last1, __first2, __gnu_cxx::__ops::__iter_equal_to_iter()); 
# 3555
} 
# 3571 "/usr/include/c++/8/bits/stl_algo.h" 3
template< class _ForwardIterator1, class _ForwardIterator2, class 
# 3572
_BinaryPredicate> inline bool 
# 3574
is_permutation(_ForwardIterator1 __first1, _ForwardIterator1 __last1, _ForwardIterator2 
# 3575
__first2, _BinaryPredicate __pred) 
# 3576
{ 
# 3583
; 
# 3585
return std::__is_permutation(__first1, __last1, __first2, __gnu_cxx::__ops::__iter_comp_iter(__pred)); 
# 3587
} 
# 3590
template< class _ForwardIterator1, class _ForwardIterator2, class 
# 3591
_BinaryPredicate> bool 
# 3593
__is_permutation(_ForwardIterator1 __first1, _ForwardIterator1 __last1, _ForwardIterator2 
# 3594
__first2, _ForwardIterator2 __last2, _BinaryPredicate 
# 3595
__pred) 
# 3596
{ 
# 3597
using _Cat1 = typename iterator_traits< _ForwardIterator1> ::iterator_category; 
# 3599
using _Cat2 = typename iterator_traits< _ForwardIterator2> ::iterator_category; 
# 3601
using _It1_is_RA = is_same< typename iterator_traits< _ForwardIterator1> ::iterator_category, random_access_iterator_tag> ; 
# 3602
using _It2_is_RA = is_same< typename iterator_traits< _ForwardIterator2> ::iterator_category, random_access_iterator_tag> ; 
# 3603
constexpr bool __ra_iters = (_It1_is_RA() && _It2_is_RA()); 
# 3604
if (__ra_iters) 
# 3605
{ 
# 3606
auto __d1 = std::distance(__first1, __last1); 
# 3607
auto __d2 = std::distance(__first2, __last2); 
# 3608
if (__d1 != __d2) { 
# 3609
return false; }  
# 3610
}  
# 3614
for (; (__first1 != __last1) && (__first2 != __last2); (++__first1), ((void)(++__first2))) { 
# 3616
if (!__pred(__first1, __first2)) { 
# 3617
break; }  }  
# 3619
if (__ra_iters) 
# 3620
{ 
# 3621
if (__first1 == __last1) { 
# 3622
return true; }  
# 3623
} else 
# 3625
{ 
# 3626
auto __d1 = std::distance(__first1, __last1); 
# 3627
auto __d2 = std::distance(__first2, __last2); 
# 3628
if ((__d1 == 0) && (__d2 == 0)) { 
# 3629
return true; }  
# 3630
if (__d1 != __d2) { 
# 3631
return false; }  
# 3632
}  
# 3634
for (_ForwardIterator1 __scan = __first1; __scan != __last1; ++__scan) { 
# 3635
{ 
# 3636
if (__scan != std::__find_if(__first1, __scan, __gnu_cxx::__ops::__iter_comp_iter(__pred, __scan))) { 
# 3638
continue; }  
# 3640
auto __matches = std::__count_if(__first2, __last2, __gnu_cxx::__ops::__iter_comp_iter(__pred, __scan)); 
# 3642
if ((0 == __matches) || (std::__count_if(__scan, __last1, __gnu_cxx::__ops::__iter_comp_iter(__pred, __scan)) != __matches)) { 
# 3646
return false; }  
# 3647
} }  
# 3648
return true; 
# 3649
} 
# 3664 "/usr/include/c++/8/bits/stl_algo.h" 3
template< class _ForwardIterator1, class _ForwardIterator2> inline bool 
# 3666
is_permutation(_ForwardIterator1 __first1, _ForwardIterator1 __last1, _ForwardIterator2 
# 3667
__first2, _ForwardIterator2 __last2) 
# 3668
{ 
# 3669
; 
# 3670
; 
# 3672
return std::__is_permutation(__first1, __last1, __first2, __last2, __gnu_cxx::__ops::__iter_equal_to_iter()); 
# 3675
} 
# 3691 "/usr/include/c++/8/bits/stl_algo.h" 3
template< class _ForwardIterator1, class _ForwardIterator2, class 
# 3692
_BinaryPredicate> inline bool 
# 3694
is_permutation(_ForwardIterator1 __first1, _ForwardIterator1 __last1, _ForwardIterator2 
# 3695
__first2, _ForwardIterator2 __last2, _BinaryPredicate 
# 3696
__pred) 
# 3697
{ 
# 3698
; 
# 3699
; 
# 3701
return std::__is_permutation(__first1, __last1, __first2, __last2, __gnu_cxx::__ops::__iter_comp_iter(__pred)); 
# 3703
} 
# 3767 "/usr/include/c++/8/bits/stl_algo.h" 3
template< class _IntType, class _UniformRandomBitGenerator> pair< _IntType, _IntType>  
# 3769
__gen_two_uniform_ints(_IntType __b0, _IntType __b1, _UniformRandomBitGenerator &&
# 3770
__g) 
# 3771
{ 
# 3772
_IntType __x = uniform_int_distribution< _IntType> {0, (__b0 * __b1) - 1}(__g); 
# 3774
return std::make_pair(__x / __b1, __x % __b1); 
# 3775
} 
# 3789 "/usr/include/c++/8/bits/stl_algo.h" 3
template< class _RandomAccessIterator, class 
# 3790
_UniformRandomNumberGenerator> void 
# 3792
shuffle(_RandomAccessIterator __first, _RandomAccessIterator __last, _UniformRandomNumberGenerator &&
# 3793
__g) 
# 3794
{ 
# 3798
; 
# 3800
if (__first == __last) { 
# 3801
return; }  
# 3804
typedef typename iterator_traits< _RandomAccessIterator> ::difference_type _DistanceType; 
# 3806
typedef typename make_unsigned< typename iterator_traits< _RandomAccessIterator> ::difference_type> ::type __ud_type; 
# 3807
typedef uniform_int_distribution< typename make_unsigned< typename iterator_traits< _RandomAccessIterator> ::difference_type> ::type>  __distr_type; 
# 3808
typedef typename uniform_int_distribution< typename make_unsigned< typename iterator_traits< _RandomAccessIterator> ::difference_type> ::type> ::param_type __p_type; 
# 3811
typedef typename remove_reference< _UniformRandomNumberGenerator> ::type _Gen; 
# 3813
typedef typename common_type< typename remove_reference< _UniformRandomNumberGenerator> ::type::result_type, typename make_unsigned< typename iterator_traits< _RandomAccessIterator> ::difference_type> ::type> ::type __uc_type; 
# 3815
const __uc_type __urngrange = (__g.max()) - (__g.min()); 
# 3816
const __uc_type __urange = (__uc_type)(__last - __first); 
# 3818
if ((__urngrange / __urange) >= __urange) 
# 3820
{ 
# 3821
_RandomAccessIterator __i = __first + 1; 
# 3827
if ((__urange % 2) == 0) 
# 3828
{ 
# 3829
__distr_type __d{0, 1}; 
# 3830
std::iter_swap(__i++, __first + __d(__g)); 
# 3831
}  
# 3837
while (__i != __last) 
# 3838
{ 
# 3839
const __uc_type __swap_range = ((__uc_type)(__i - __first)) + 1; 
# 3841
const pair< typename common_type< typename remove_reference< _UniformRandomNumberGenerator> ::type::result_type, typename make_unsigned< typename iterator_traits< _RandomAccessIterator> ::difference_type> ::type> ::type, typename common_type< typename remove_reference< _UniformRandomNumberGenerator> ::type::result_type, typename make_unsigned< typename iterator_traits< _RandomAccessIterator> ::difference_type> ::type> ::type>  __pospos = __gen_two_uniform_ints(__swap_range, __swap_range + 1, __g); 
# 3844
std::iter_swap(__i++, __first + (__pospos.first)); 
# 3845
std::iter_swap(__i++, __first + (__pospos.second)); 
# 3846
}  
# 3848
return; 
# 3849
}  
# 3851
__distr_type __d; 
# 3853
for (_RandomAccessIterator __i = __first + 1; __i != __last; ++__i) { 
# 3854
std::iter_swap(__i, __first + __d(__g, __p_type(0, __i - __first))); }  
# 3855
} 
# 3874 "/usr/include/c++/8/bits/stl_algo.h" 3
template< class _InputIterator, class _Function> _Function 
# 3876
for_each(_InputIterator __first, _InputIterator __last, _Function __f) 
# 3877
{ 
# 3880
; 
# 3881
for (; __first != __last; ++__first) { 
# 3882
__f(*__first); }  
# 3883
return __f; 
# 3884
} 
# 3895 "/usr/include/c++/8/bits/stl_algo.h" 3
template< class _InputIterator, class _Tp> inline _InputIterator 
# 3897
find(_InputIterator __first, _InputIterator __last, const _Tp &
# 3898
__val) 
# 3899
{ 
# 3904
; 
# 3905
return std::__find_if(__first, __last, __gnu_cxx::__ops::__iter_equals_val(__val)); 
# 3907
} 
# 3919 "/usr/include/c++/8/bits/stl_algo.h" 3
template< class _InputIterator, class _Predicate> inline _InputIterator 
# 3921
find_if(_InputIterator __first, _InputIterator __last, _Predicate 
# 3922
__pred) 
# 3923
{ 
# 3928
; 
# 3930
return std::__find_if(__first, __last, __gnu_cxx::__ops::__pred_iter(__pred)); 
# 3932
} 
# 3950 "/usr/include/c++/8/bits/stl_algo.h" 3
template< class _InputIterator, class _ForwardIterator> _InputIterator 
# 3952
find_first_of(_InputIterator __first1, _InputIterator __last1, _ForwardIterator 
# 3953
__first2, _ForwardIterator __last2) 
# 3954
{ 
# 3961
; 
# 3962
; 
# 3964
for (; __first1 != __last1; ++__first1) { 
# 3965
for (_ForwardIterator __iter = __first2; __iter != __last2; ++__iter) { 
# 3966
if ((*__first1) == (*__iter)) { 
# 3967
return __first1; }  }  }  
# 3968
return __last1; 
# 3969
} 
# 3990 "/usr/include/c++/8/bits/stl_algo.h" 3
template< class _InputIterator, class _ForwardIterator, class 
# 3991
_BinaryPredicate> _InputIterator 
# 3993
find_first_of(_InputIterator __first1, _InputIterator __last1, _ForwardIterator 
# 3994
__first2, _ForwardIterator __last2, _BinaryPredicate 
# 3995
__comp) 
# 3996
{ 
# 4003
; 
# 4004
; 
# 4006
for (; __first1 != __last1; ++__first1) { 
# 4007
for (_ForwardIterator __iter = __first2; __iter != __last2; ++__iter) { 
# 4008
if (__comp(*__first1, *__iter)) { 
# 4009
return __first1; }  }  }  
# 4010
return __last1; 
# 4011
} 
# 4022 "/usr/include/c++/8/bits/stl_algo.h" 3
template< class _ForwardIterator> inline _ForwardIterator 
# 4024
adjacent_find(_ForwardIterator __first, _ForwardIterator __last) 
# 4025
{ 
# 4030
; 
# 4032
return std::__adjacent_find(__first, __last, __gnu_cxx::__ops::__iter_equal_to_iter()); 
# 4034
} 
# 4047 "/usr/include/c++/8/bits/stl_algo.h" 3
template< class _ForwardIterator, class _BinaryPredicate> inline _ForwardIterator 
# 4049
adjacent_find(_ForwardIterator __first, _ForwardIterator __last, _BinaryPredicate 
# 4050
__binary_pred) 
# 4051
{ 
# 4057
; 
# 4059
return std::__adjacent_find(__first, __last, __gnu_cxx::__ops::__iter_comp_iter(__binary_pred)); 
# 4061
} 
# 4072 "/usr/include/c++/8/bits/stl_algo.h" 3
template< class _InputIterator, class _Tp> inline typename iterator_traits< _InputIterator> ::difference_type 
# 4074
count(_InputIterator __first, _InputIterator __last, const _Tp &__value) 
# 4075
{ 
# 4080
; 
# 4082
return std::__count_if(__first, __last, __gnu_cxx::__ops::__iter_equals_val(__value)); 
# 4084
} 
# 4095 "/usr/include/c++/8/bits/stl_algo.h" 3
template< class _InputIterator, class _Predicate> inline typename iterator_traits< _InputIterator> ::difference_type 
# 4097
count_if(_InputIterator __first, _InputIterator __last, _Predicate __pred) 
# 4098
{ 
# 4103
; 
# 4105
return std::__count_if(__first, __last, __gnu_cxx::__ops::__pred_iter(__pred)); 
# 4107
} 
# 4135 "/usr/include/c++/8/bits/stl_algo.h" 3
template< class _ForwardIterator1, class _ForwardIterator2> inline _ForwardIterator1 
# 4137
search(_ForwardIterator1 __first1, _ForwardIterator1 __last1, _ForwardIterator2 
# 4138
__first2, _ForwardIterator2 __last2) 
# 4139
{ 
# 4146
; 
# 4147
; 
# 4149
return std::__search(__first1, __last1, __first2, __last2, __gnu_cxx::__ops::__iter_equal_to_iter()); 
# 4151
} 
# 4174 "/usr/include/c++/8/bits/stl_algo.h" 3
template< class _ForwardIterator1, class _ForwardIterator2, class 
# 4175
_BinaryPredicate> inline _ForwardIterator1 
# 4177
search(_ForwardIterator1 __first1, _ForwardIterator1 __last1, _ForwardIterator2 
# 4178
__first2, _ForwardIterator2 __last2, _BinaryPredicate 
# 4179
__predicate) 
# 4180
{ 
# 4187
; 
# 4188
; 
# 4190
return std::__search(__first1, __last1, __first2, __last2, __gnu_cxx::__ops::__iter_comp_iter(__predicate)); 
# 4192
} 
# 4209 "/usr/include/c++/8/bits/stl_algo.h" 3
template< class _ForwardIterator, class _Integer, class _Tp> inline _ForwardIterator 
# 4211
search_n(_ForwardIterator __first, _ForwardIterator __last, _Integer 
# 4212
__count, const _Tp &__val) 
# 4213
{ 
# 4218
; 
# 4220
return std::__search_n(__first, __last, __count, __gnu_cxx::__ops::__iter_equals_val(__val)); 
# 4222
} 
# 4242 "/usr/include/c++/8/bits/stl_algo.h" 3
template< class _ForwardIterator, class _Integer, class _Tp, class 
# 4243
_BinaryPredicate> inline _ForwardIterator 
# 4245
search_n(_ForwardIterator __first, _ForwardIterator __last, _Integer 
# 4246
__count, const _Tp &__val, _BinaryPredicate 
# 4247
__binary_pred) 
# 4248
{ 
# 4253
; 
# 4255
return std::__search_n(__first, __last, __count, __gnu_cxx::__ops::__iter_comp_val(__binary_pred, __val)); 
# 4257
} 
# 4290 "/usr/include/c++/8/bits/stl_algo.h" 3
template< class _InputIterator, class _OutputIterator, class 
# 4291
_UnaryOperation> _OutputIterator 
# 4293
transform(_InputIterator __first, _InputIterator __last, _OutputIterator 
# 4294
__result, _UnaryOperation __unary_op) 
# 4295
{ 
# 4301
; 
# 4303
for (; __first != __last; (++__first), ((void)(++__result))) { 
# 4304
(*__result) = __unary_op(*__first); }  
# 4305
return __result; 
# 4306
} 
# 4327 "/usr/include/c++/8/bits/stl_algo.h" 3
template< class _InputIterator1, class _InputIterator2, class 
# 4328
_OutputIterator, class _BinaryOperation> _OutputIterator 
# 4330
transform(_InputIterator1 __first1, _InputIterator1 __last1, _InputIterator2 
# 4331
__first2, _OutputIterator __result, _BinaryOperation 
# 4332
__binary_op) 
# 4333
{ 
# 4340
; 
# 4342
for (; __first1 != __last1; ((++__first1), ((void)(++__first2))), (++__result)) { 
# 4343
(*__result) = __binary_op(*__first1, *__first2); }  
# 4344
return __result; 
# 4345
} 
# 4360 "/usr/include/c++/8/bits/stl_algo.h" 3
template< class _ForwardIterator, class _Tp> void 
# 4362
replace(_ForwardIterator __first, _ForwardIterator __last, const _Tp &
# 4363
__old_value, const _Tp &__new_value) 
# 4364
{ 
# 4372
; 
# 4374
for (; __first != __last; ++__first) { 
# 4375
if ((*__first) == __old_value) { 
# 4376
(*__first) = __new_value; }  }  
# 4377
} 
# 4392 "/usr/include/c++/8/bits/stl_algo.h" 3
template< class _ForwardIterator, class _Predicate, class _Tp> void 
# 4394
replace_if(_ForwardIterator __first, _ForwardIterator __last, _Predicate 
# 4395
__pred, const _Tp &__new_value) 
# 4396
{ 
# 4404
; 
# 4406
for (; __first != __last; ++__first) { 
# 4407
if (__pred(*__first)) { 
# 4408
(*__first) = __new_value; }  }  
# 4409
} 
# 4424 "/usr/include/c++/8/bits/stl_algo.h" 3
template< class _ForwardIterator, class _Generator> void 
# 4426
generate(_ForwardIterator __first, _ForwardIterator __last, _Generator 
# 4427
__gen) 
# 4428
{ 
# 4433
; 
# 4435
for (; __first != __last; ++__first) { 
# 4436
(*__first) = __gen(); }  
# 4437
} 
# 4455 "/usr/include/c++/8/bits/stl_algo.h" 3
template< class _OutputIterator, class _Size, class _Generator> _OutputIterator 
# 4457
generate_n(_OutputIterator __first, _Size __n, _Generator __gen) 
# 4458
{ 
# 4464
for (__decltype((__n + 0)) __niter = __n; __niter > 0; (--__niter), ((void)(++__first))) { 
# 4466
(*__first) = __gen(); }  
# 4467
return __first; 
# 4468
} 
# 4491 "/usr/include/c++/8/bits/stl_algo.h" 3
template< class _InputIterator, class _OutputIterator> inline _OutputIterator 
# 4493
unique_copy(_InputIterator __first, _InputIterator __last, _OutputIterator 
# 4494
__result) 
# 4495
{ 
# 4502
; 
# 4504
if (__first == __last) { 
# 4505
return __result; }  
# 4506
return std::__unique_copy(__first, __last, __result, __gnu_cxx::__ops::__iter_equal_to_iter(), std::__iterator_category(__first), std::__iterator_category(__result)); 
# 4510
} 
# 4531 "/usr/include/c++/8/bits/stl_algo.h" 3
template< class _InputIterator, class _OutputIterator, class 
# 4532
_BinaryPredicate> inline _OutputIterator 
# 4534
unique_copy(_InputIterator __first, _InputIterator __last, _OutputIterator 
# 4535
__result, _BinaryPredicate 
# 4536
__binary_pred) 
# 4537
{ 
# 4542
; 
# 4544
if (__first == __last) { 
# 4545
return __result; }  
# 4546
return std::__unique_copy(__first, __last, __result, __gnu_cxx::__ops::__iter_comp_iter(__binary_pred), std::__iterator_category(__first), std::__iterator_category(__result)); 
# 4550
} 
# 4564 "/usr/include/c++/8/bits/stl_algo.h" 3
template< class _RandomAccessIterator> inline void 
# 4566
random_shuffle(_RandomAccessIterator __first, _RandomAccessIterator __last) 
# 4567
{ 
# 4571
; 
# 4573
if (__first != __last) { 
# 4574
for (_RandomAccessIterator __i = __first + 1; __i != __last; ++__i) 
# 4575
{ 
# 4577
_RandomAccessIterator __j = __first + (std::rand() % ((__i - __first) + 1)); 
# 4579
if (__i != __j) { 
# 4580
std::iter_swap(__i, __j); }  
# 4581
}  }  
# 4582
} 
# 4599 "/usr/include/c++/8/bits/stl_algo.h" 3
template< class _RandomAccessIterator, class _RandomNumberGenerator> void 
# 4601
random_shuffle(_RandomAccessIterator __first, _RandomAccessIterator __last, _RandomNumberGenerator &&
# 4603
__rand) 
# 4607
{ 
# 4611
; 
# 4613
if (__first == __last) { 
# 4614
return; }  
# 4615
for (_RandomAccessIterator __i = __first + 1; __i != __last; ++__i) 
# 4616
{ 
# 4617
_RandomAccessIterator __j = __first + __rand((__i - __first) + 1); 
# 4618
if (__i != __j) { 
# 4619
std::iter_swap(__i, __j); }  
# 4620
}  
# 4621
} 
# 4639 "/usr/include/c++/8/bits/stl_algo.h" 3
template< class _ForwardIterator, class _Predicate> inline _ForwardIterator 
# 4641
partition(_ForwardIterator __first, _ForwardIterator __last, _Predicate 
# 4642
__pred) 
# 4643
{ 
# 4649
; 
# 4651
return std::__partition(__first, __last, __pred, std::__iterator_category(__first)); 
# 4653
} 
# 4672 "/usr/include/c++/8/bits/stl_algo.h" 3
template< class _RandomAccessIterator> inline void 
# 4674
partial_sort(_RandomAccessIterator __first, _RandomAccessIterator 
# 4675
__middle, _RandomAccessIterator 
# 4676
__last) 
# 4677
{ 
# 4683
; 
# 4684
; 
# 4685
; 
# 4687
std::__partial_sort(__first, __middle, __last, __gnu_cxx::__ops::__iter_less_iter()); 
# 4689
} 
# 4710 "/usr/include/c++/8/bits/stl_algo.h" 3
template< class _RandomAccessIterator, class _Compare> inline void 
# 4712
partial_sort(_RandomAccessIterator __first, _RandomAccessIterator 
# 4713
__middle, _RandomAccessIterator 
# 4714
__last, _Compare 
# 4715
__comp) 
# 4716
{ 
# 4723
; 
# 4724
; 
# 4725
; 
# 4727
std::__partial_sort(__first, __middle, __last, __gnu_cxx::__ops::__iter_comp_iter(__comp)); 
# 4729
} 
# 4746 "/usr/include/c++/8/bits/stl_algo.h" 3
template< class _RandomAccessIterator> inline void 
# 4748
nth_element(_RandomAccessIterator __first, _RandomAccessIterator __nth, _RandomAccessIterator 
# 4749
__last) 
# 4750
{ 
# 4756
; 
# 4757
; 
# 4758
; 
# 4760
if ((__first == __last) || (__nth == __last)) { 
# 4761
return; }  
# 4763
std::__introselect(__first, __nth, __last, std::__lg(__last - __first) * 2, __gnu_cxx::__ops::__iter_less_iter()); 
# 4766
} 
# 4785 "/usr/include/c++/8/bits/stl_algo.h" 3
template< class _RandomAccessIterator, class _Compare> inline void 
# 4787
nth_element(_RandomAccessIterator __first, _RandomAccessIterator __nth, _RandomAccessIterator 
# 4788
__last, _Compare __comp) 
# 4789
{ 
# 4796
; 
# 4797
; 
# 4798
; 
# 4800
if ((__first == __last) || (__nth == __last)) { 
# 4801
return; }  
# 4803
std::__introselect(__first, __nth, __last, std::__lg(__last - __first) * 2, __gnu_cxx::__ops::__iter_comp_iter(__comp)); 
# 4806
} 
# 4822 "/usr/include/c++/8/bits/stl_algo.h" 3
template< class _RandomAccessIterator> inline void 
# 4824
sort(_RandomAccessIterator __first, _RandomAccessIterator __last) 
# 4825
{ 
# 4831
; 
# 4832
; 
# 4834
std::__sort(__first, __last, __gnu_cxx::__ops::__iter_less_iter()); 
# 4835
} 
# 4852 "/usr/include/c++/8/bits/stl_algo.h" 3
template< class _RandomAccessIterator, class _Compare> inline void 
# 4854
sort(_RandomAccessIterator __first, _RandomAccessIterator __last, _Compare 
# 4855
__comp) 
# 4856
{ 
# 4863
; 
# 4864
; 
# 4866
std::__sort(__first, __last, __gnu_cxx::__ops::__iter_comp_iter(__comp)); 
# 4867
} 
# 4869
template< class _InputIterator1, class _InputIterator2, class 
# 4870
_OutputIterator, class _Compare> _OutputIterator 
# 4872
__merge(_InputIterator1 __first1, _InputIterator1 __last1, _InputIterator2 
# 4873
__first2, _InputIterator2 __last2, _OutputIterator 
# 4874
__result, _Compare __comp) 
# 4875
{ 
# 4876
while ((__first1 != __last1) && (__first2 != __last2)) 
# 4877
{ 
# 4878
if (__comp(__first2, __first1)) 
# 4879
{ 
# 4880
(*__result) = (*__first2); 
# 4881
++__first2; 
# 4882
} else 
# 4884
{ 
# 4885
(*__result) = (*__first1); 
# 4886
++__first1; 
# 4887
}  
# 4888
++__result; 
# 4889
}  
# 4890
return std::copy(__first2, __last2, std::copy(__first1, __last1, __result)); 
# 4892
} 
# 4913 "/usr/include/c++/8/bits/stl_algo.h" 3
template< class _InputIterator1, class _InputIterator2, class 
# 4914
_OutputIterator> inline _OutputIterator 
# 4916
merge(_InputIterator1 __first1, _InputIterator1 __last1, _InputIterator2 
# 4917
__first2, _InputIterator2 __last2, _OutputIterator 
# 4918
__result) 
# 4919
{ 
# 4930
; 
# 4931
; 
# 4932
; 
# 4933
; 
# 4935
return std::__merge(__first1, __last1, __first2, __last2, __result, __gnu_cxx::__ops::__iter_less_iter()); 
# 4938
} 
# 4963 "/usr/include/c++/8/bits/stl_algo.h" 3
template< class _InputIterator1, class _InputIterator2, class 
# 4964
_OutputIterator, class _Compare> inline _OutputIterator 
# 4966
merge(_InputIterator1 __first1, _InputIterator1 __last1, _InputIterator2 
# 4967
__first2, _InputIterator2 __last2, _OutputIterator 
# 4968
__result, _Compare __comp) 
# 4969
{ 
# 4980
; 
# 4981
; 
# 4982
; 
# 4983
; 
# 4985
return std::__merge(__first1, __last1, __first2, __last2, __result, __gnu_cxx::__ops::__iter_comp_iter(__comp)); 
# 4988
} 
# 4990
template< class _RandomAccessIterator, class _Compare> inline void 
# 4992
__stable_sort(_RandomAccessIterator __first, _RandomAccessIterator __last, _Compare 
# 4993
__comp) 
# 4994
{ 
# 4996
typedef typename iterator_traits< _RandomAccessIterator> ::value_type _ValueType; 
# 4998
typedef typename iterator_traits< _RandomAccessIterator> ::difference_type _DistanceType; 
# 5000
typedef _Temporary_buffer< _RandomAccessIterator, typename iterator_traits< _RandomAccessIterator> ::value_type>  _TmpBuf; 
# 5001
_TmpBuf __buf(__first, __last); 
# 5003
if ((__buf.begin()) == 0) { 
# 5004
std::__inplace_stable_sort(__first, __last, __comp); } else { 
# 5006
std::__stable_sort_adaptive(__first, __last, (__buf.begin()), (_DistanceType)(__buf.size()), __comp); }  
# 5008
} 
# 5027 "/usr/include/c++/8/bits/stl_algo.h" 3
template< class _RandomAccessIterator> inline void 
# 5029
stable_sort(_RandomAccessIterator __first, _RandomAccessIterator __last) 
# 5030
{ 
# 5036
; 
# 5037
; 
# 5039
std::__stable_sort(__first, __last, __gnu_cxx::__ops::__iter_less_iter()); 
# 5041
} 
# 5061 "/usr/include/c++/8/bits/stl_algo.h" 3
template< class _RandomAccessIterator, class _Compare> inline void 
# 5063
stable_sort(_RandomAccessIterator __first, _RandomAccessIterator __last, _Compare 
# 5064
__comp) 
# 5065
{ 
# 5072
; 
# 5073
; 
# 5075
std::__stable_sort(__first, __last, __gnu_cxx::__ops::__iter_comp_iter(__comp)); 
# 5077
} 
# 5079
template< class _InputIterator1, class _InputIterator2, class 
# 5080
_OutputIterator, class 
# 5081
_Compare> _OutputIterator 
# 5083
__set_union(_InputIterator1 __first1, _InputIterator1 __last1, _InputIterator2 
# 5084
__first2, _InputIterator2 __last2, _OutputIterator 
# 5085
__result, _Compare __comp) 
# 5086
{ 
# 5087
while ((__first1 != __last1) && (__first2 != __last2)) 
# 5088
{ 
# 5089
if (__comp(__first1, __first2)) 
# 5090
{ 
# 5091
(*__result) = (*__first1); 
# 5092
++__first1; 
# 5093
} else { 
# 5094
if (__comp(__first2, __first1)) 
# 5095
{ 
# 5096
(*__result) = (*__first2); 
# 5097
++__first2; 
# 5098
} else 
# 5100
{ 
# 5101
(*__result) = (*__first1); 
# 5102
++__first1; 
# 5103
++__first2; 
# 5104
}  }  
# 5105
++__result; 
# 5106
}  
# 5107
return std::copy(__first2, __last2, std::copy(__first1, __last1, __result)); 
# 5109
} 
# 5130 "/usr/include/c++/8/bits/stl_algo.h" 3
template< class _InputIterator1, class _InputIterator2, class 
# 5131
_OutputIterator> inline _OutputIterator 
# 5133
set_union(_InputIterator1 __first1, _InputIterator1 __last1, _InputIterator2 
# 5134
__first2, _InputIterator2 __last2, _OutputIterator 
# 5135
__result) 
# 5136
{ 
# 5150
; 
# 5151
; 
# 5152
; 
# 5153
; 
# 5155
return std::__set_union(__first1, __last1, __first2, __last2, __result, __gnu_cxx::__ops::__iter_less_iter()); 
# 5158
} 
# 5180 "/usr/include/c++/8/bits/stl_algo.h" 3
template< class _InputIterator1, class _InputIterator2, class 
# 5181
_OutputIterator, class _Compare> inline _OutputIterator 
# 5183
set_union(_InputIterator1 __first1, _InputIterator1 __last1, _InputIterator2 
# 5184
__first2, _InputIterator2 __last2, _OutputIterator 
# 5185
__result, _Compare __comp) 
# 5186
{ 
# 5200
; 
# 5201
; 
# 5202
; 
# 5203
; 
# 5205
return std::__set_union(__first1, __last1, __first2, __last2, __result, __gnu_cxx::__ops::__iter_comp_iter(__comp)); 
# 5208
} 
# 5210
template< class _InputIterator1, class _InputIterator2, class 
# 5211
_OutputIterator, class 
# 5212
_Compare> _OutputIterator 
# 5214
__set_intersection(_InputIterator1 __first1, _InputIterator1 __last1, _InputIterator2 
# 5215
__first2, _InputIterator2 __last2, _OutputIterator 
# 5216
__result, _Compare __comp) 
# 5217
{ 
# 5218
while ((__first1 != __last1) && (__first2 != __last2)) { 
# 5219
if (__comp(__first1, __first2)) { 
# 5220
++__first1; } else { 
# 5221
if (__comp(__first2, __first1)) { 
# 5222
++__first2; } else 
# 5224
{ 
# 5225
(*__result) = (*__first1); 
# 5226
++__first1; 
# 5227
++__first2; 
# 5228
++__result; 
# 5229
}  }  }  
# 5230
return __result; 
# 5231
} 
# 5251 "/usr/include/c++/8/bits/stl_algo.h" 3
template< class _InputIterator1, class _InputIterator2, class 
# 5252
_OutputIterator> inline _OutputIterator 
# 5254
set_intersection(_InputIterator1 __first1, _InputIterator1 __last1, _InputIterator2 
# 5255
__first2, _InputIterator2 __last2, _OutputIterator 
# 5256
__result) 
# 5257
{ 
# 5269
; 
# 5270
; 
# 5271
; 
# 5272
; 
# 5274
return std::__set_intersection(__first1, __last1, __first2, __last2, __result, __gnu_cxx::__ops::__iter_less_iter()); 
# 5277
} 
# 5300 "/usr/include/c++/8/bits/stl_algo.h" 3
template< class _InputIterator1, class _InputIterator2, class 
# 5301
_OutputIterator, class _Compare> inline _OutputIterator 
# 5303
set_intersection(_InputIterator1 __first1, _InputIterator1 __last1, _InputIterator2 
# 5304
__first2, _InputIterator2 __last2, _OutputIterator 
# 5305
__result, _Compare __comp) 
# 5306
{ 
# 5318
; 
# 5319
; 
# 5320
; 
# 5321
; 
# 5323
return std::__set_intersection(__first1, __last1, __first2, __last2, __result, __gnu_cxx::__ops::__iter_comp_iter(__comp)); 
# 5326
} 
# 5328
template< class _InputIterator1, class _InputIterator2, class 
# 5329
_OutputIterator, class 
# 5330
_Compare> _OutputIterator 
# 5332
__set_difference(_InputIterator1 __first1, _InputIterator1 __last1, _InputIterator2 
# 5333
__first2, _InputIterator2 __last2, _OutputIterator 
# 5334
__result, _Compare __comp) 
# 5335
{ 
# 5336
while ((__first1 != __last1) && (__first2 != __last2)) { 
# 5337
if (__comp(__first1, __first2)) 
# 5338
{ 
# 5339
(*__result) = (*__first1); 
# 5340
++__first1; 
# 5341
++__result; 
# 5342
} else { 
# 5343
if (__comp(__first2, __first1)) { 
# 5344
++__first2; } else 
# 5346
{ 
# 5347
++__first1; 
# 5348
++__first2; 
# 5349
}  }  }  
# 5350
return std::copy(__first1, __last1, __result); 
# 5351
} 
# 5373 "/usr/include/c++/8/bits/stl_algo.h" 3
template< class _InputIterator1, class _InputIterator2, class 
# 5374
_OutputIterator> inline _OutputIterator 
# 5376
set_difference(_InputIterator1 __first1, _InputIterator1 __last1, _InputIterator2 
# 5377
__first2, _InputIterator2 __last2, _OutputIterator 
# 5378
__result) 
# 5379
{ 
# 5391
; 
# 5392
; 
# 5393
; 
# 5394
; 
# 5396
return std::__set_difference(__first1, __last1, __first2, __last2, __result, __gnu_cxx::__ops::__iter_less_iter()); 
# 5399
} 
# 5424 "/usr/include/c++/8/bits/stl_algo.h" 3
template< class _InputIterator1, class _InputIterator2, class 
# 5425
_OutputIterator, class _Compare> inline _OutputIterator 
# 5427
set_difference(_InputIterator1 __first1, _InputIterator1 __last1, _InputIterator2 
# 5428
__first2, _InputIterator2 __last2, _OutputIterator 
# 5429
__result, _Compare __comp) 
# 5430
{ 
# 5442
; 
# 5443
; 
# 5444
; 
# 5445
; 
# 5447
return std::__set_difference(__first1, __last1, __first2, __last2, __result, __gnu_cxx::__ops::__iter_comp_iter(__comp)); 
# 5450
} 
# 5452
template< class _InputIterator1, class _InputIterator2, class 
# 5453
_OutputIterator, class 
# 5454
_Compare> _OutputIterator 
# 5456
__set_symmetric_difference(_InputIterator1 __first1, _InputIterator1 
# 5457
__last1, _InputIterator2 
# 5458
__first2, _InputIterator2 
# 5459
__last2, _OutputIterator 
# 5460
__result, _Compare 
# 5461
__comp) 
# 5462
{ 
# 5463
while ((__first1 != __last1) && (__first2 != __last2)) { 
# 5464
if (__comp(__first1, __first2)) 
# 5465
{ 
# 5466
(*__result) = (*__first1); 
# 5467
++__first1; 
# 5468
++__result; 
# 5469
} else { 
# 5470
if (__comp(__first2, __first1)) 
# 5471
{ 
# 5472
(*__result) = (*__first2); 
# 5473
++__first2; 
# 5474
++__result; 
# 5475
} else 
# 5477
{ 
# 5478
++__first1; 
# 5479
++__first2; 
# 5480
}  }  }  
# 5481
return std::copy(__first2, __last2, std::copy(__first1, __last1, __result)); 
# 5483
} 
# 5503 "/usr/include/c++/8/bits/stl_algo.h" 3
template< class _InputIterator1, class _InputIterator2, class 
# 5504
_OutputIterator> inline _OutputIterator 
# 5506
set_symmetric_difference(_InputIterator1 __first1, _InputIterator1 __last1, _InputIterator2 
# 5507
__first2, _InputIterator2 __last2, _OutputIterator 
# 5508
__result) 
# 5509
{ 
# 5523
; 
# 5524
; 
# 5525
; 
# 5526
; 
# 5528
return std::__set_symmetric_difference(__first1, __last1, __first2, __last2, __result, __gnu_cxx::__ops::__iter_less_iter()); 
# 5531
} 
# 5554 "/usr/include/c++/8/bits/stl_algo.h" 3
template< class _InputIterator1, class _InputIterator2, class 
# 5555
_OutputIterator, class _Compare> inline _OutputIterator 
# 5557
set_symmetric_difference(_InputIterator1 __first1, _InputIterator1 __last1, _InputIterator2 
# 5558
__first2, _InputIterator2 __last2, _OutputIterator 
# 5559
__result, _Compare 
# 5560
__comp) 
# 5561
{ 
# 5575
; 
# 5576
; 
# 5577
; 
# 5578
; 
# 5580
return std::__set_symmetric_difference(__first1, __last1, __first2, __last2, __result, __gnu_cxx::__ops::__iter_comp_iter(__comp)); 
# 5583
} 
# 5585
template< class _ForwardIterator, class _Compare> constexpr _ForwardIterator 
# 5588
__min_element(_ForwardIterator __first, _ForwardIterator __last, _Compare 
# 5589
__comp) 
# 5590
{ 
# 5591
if (__first == __last) { 
# 5592
return __first; }  
# 5593
_ForwardIterator __result = __first; 
# 5594
while ((++__first) != __last) { 
# 5595
if (__comp(__first, __result)) { 
# 5596
__result = __first; }  }  
# 5597
return __result; 
# 5598
} 
# 5607 "/usr/include/c++/8/bits/stl_algo.h" 3
template< class _ForwardIterator> constexpr _ForwardIterator 
# 5610
min_element(_ForwardIterator __first, _ForwardIterator __last) 
# 5611
{ 
# 5616
; 
# 5617
; 
# 5619
return std::__min_element(__first, __last, __gnu_cxx::__ops::__iter_less_iter()); 
# 5621
} 
# 5632 "/usr/include/c++/8/bits/stl_algo.h" 3
template< class _ForwardIterator, class _Compare> constexpr _ForwardIterator 
# 5635
min_element(_ForwardIterator __first, _ForwardIterator __last, _Compare 
# 5636
__comp) 
# 5637
{ 
# 5643
; 
# 5644
; 
# 5646
return std::__min_element(__first, __last, __gnu_cxx::__ops::__iter_comp_iter(__comp)); 
# 5648
} 
# 5650
template< class _ForwardIterator, class _Compare> constexpr _ForwardIterator 
# 5653
__max_element(_ForwardIterator __first, _ForwardIterator __last, _Compare 
# 5654
__comp) 
# 5655
{ 
# 5656
if (__first == __last) { return __first; }  
# 5657
_ForwardIterator __result = __first; 
# 5658
while ((++__first) != __last) { 
# 5659
if (__comp(__result, __first)) { 
# 5660
__result = __first; }  }  
# 5661
return __result; 
# 5662
} 
# 5671 "/usr/include/c++/8/bits/stl_algo.h" 3
template< class _ForwardIterator> constexpr _ForwardIterator 
# 5674
max_element(_ForwardIterator __first, _ForwardIterator __last) 
# 5675
{ 
# 5680
; 
# 5681
; 
# 5683
return std::__max_element(__first, __last, __gnu_cxx::__ops::__iter_less_iter()); 
# 5685
} 
# 5696 "/usr/include/c++/8/bits/stl_algo.h" 3
template< class _ForwardIterator, class _Compare> constexpr _ForwardIterator 
# 5699
max_element(_ForwardIterator __first, _ForwardIterator __last, _Compare 
# 5700
__comp) 
# 5701
{ 
# 5707
; 
# 5708
; 
# 5710
return std::__max_element(__first, __last, __gnu_cxx::__ops::__iter_comp_iter(__comp)); 
# 5712
} 
# 5716
template< class _InputIterator, class _RandomAccessIterator, class 
# 5717
_Size, class _UniformRandomBitGenerator> _RandomAccessIterator 
# 5719
__sample(_InputIterator __first, _InputIterator __last, input_iterator_tag, _RandomAccessIterator 
# 5720
__out, random_access_iterator_tag, _Size 
# 5721
__n, _UniformRandomBitGenerator &&__g) 
# 5722
{ 
# 5723
using __distrib_type = uniform_int_distribution< _Size> ; 
# 5724
using __param_type = typename uniform_int_distribution< _Size> ::param_type; 
# 5725
__distrib_type __d{}; 
# 5726
_Size __sample_sz = (0); 
# 5727
while ((__first != __last) && (__sample_sz != __n)) 
# 5728
{ 
# 5729
(__out[__sample_sz++]) = (*__first); 
# 5730
++__first; 
# 5731
}  
# 5732
for (auto __pop_sz = __sample_sz; __first != __last; (++__first), ((void)(++__pop_sz))) 
# 5734
{ 
# 5735
const auto __k = __d(__g, __param_type{0, __pop_sz}); 
# 5736
if (__k < __n) { 
# 5737
(__out[__k]) = (*__first); }  
# 5738
}  
# 5739
return __out + __sample_sz; 
# 5740
} 
# 5743
template< class _ForwardIterator, class _OutputIterator, class _Cat, class 
# 5744
_Size, class _UniformRandomBitGenerator> _OutputIterator 
# 5746
__sample(_ForwardIterator __first, _ForwardIterator __last, forward_iterator_tag, _OutputIterator 
# 5748
__out, _Cat, _Size 
# 5749
__n, _UniformRandomBitGenerator &&__g) 
# 5750
{ 
# 5751
using __distrib_type = uniform_int_distribution< _Size> ; 
# 5752
using __param_type = typename uniform_int_distribution< _Size> ::param_type; 
# 5753
using _USize = make_unsigned_t< _Size> ; 
# 5754
using _Gen = remove_reference_t< _UniformRandomBitGenerator> ; 
# 5755
using __uc_type = common_type_t< typename remove_reference< _UniformRandomBitGenerator> ::type::result_type, make_unsigned_t< _Size> > ; 
# 5757
__distrib_type __d{}; 
# 5758
_Size __unsampled_sz = std::distance(__first, __last); 
# 5759
__n = std::min(__n, __unsampled_sz); 
# 5764
const __uc_type __urngrange = (__g.max()) - (__g.min()); 
# 5765
if ((__urngrange / ((__uc_type)__unsampled_sz)) >= ((__uc_type)__unsampled_sz)) 
# 5768
{ 
# 5769
while ((__n != 0) && (__unsampled_sz >= 2)) 
# 5770
{ 
# 5771
const pair< _Size, _Size>  __p = __gen_two_uniform_ints(__unsampled_sz, __unsampled_sz - 1, __g); 
# 5774
--__unsampled_sz; 
# 5775
if ((__p.first) < __n) 
# 5776
{ 
# 5777
(*(__out++)) = (*__first); 
# 5778
--__n; 
# 5779
}  
# 5781
++__first; 
# 5783
if (__n == 0) { break; }  
# 5785
--__unsampled_sz; 
# 5786
if ((__p.second) < __n) 
# 5787
{ 
# 5788
(*(__out++)) = (*__first); 
# 5789
--__n; 
# 5790
}  
# 5792
++__first; 
# 5793
}  
# 5794
}  
# 5798
for (; __n != 0; ++__first) { 
# 5799
if (__d(__g, __param_type{0, --__unsampled_sz}) < __n) 
# 5800
{ 
# 5801
(*(__out++)) = (*__first); 
# 5802
--__n; 
# 5803
}  }  
# 5804
return __out; 
# 5805
} 
# 5841 "/usr/include/c++/8/bits/stl_algo.h" 3
}
# 22 "simple-return.cu"
__attribute__((unused)) static inline uint32_t __mysmid() {int volatile ___ = 1;
# 25
::exit(___);}
#if 0
# 22
{ 
# 23
uint32_t smid; 
# 24
__asm__ volatile("mov.u32 %0, %%smid;" : "=r" (smid) :); 
# 25
return smid; } 
#endif
# 31 "simple-return.cu"
void computation(float *x, float *y, float *z, int SM_num_start, int SM_num_end) ;
#if 0
# 31
{ 
# 33
int SM_num; 
# 34
SM_num = (__mysmid()); 
# 35
printf("SM num: %d \n", SM_num); 
# 37
int i = __device_builtin_variable_threadIdx.x; 
# 39
if ((SM_num_start <= SM_num) && (SM_num <= SM_num_end)) 
# 40
{ 
# 41
(z[i]) = ((x[i]) + (y[i])); 
# 43
}  
# 45
} 
#endif
# 51 "simple-return.cu"
int main(int argc, char **argv) { 
# 52
float h_A[128], h_B[128], h_C[128]; 
# 53
float *d_A, *d_B, *d_C; 
# 54
int i; 
# 55
for (i = 0; i < 128; i++) { 
# 56
(h_A[i]) = i; 
# 57
(h_B[i]) = (1); 
# 58
(h_C[i]) = (0); 
# 59
}  
# 61
int size = ((128) * sizeof(float)); 
# 62
cudaMalloc((void **)(&d_A), size); 
# 63
cudaMalloc((void **)(&d_B), size); 
# 64
cudaMalloc((void **)(&d_C), size); 
# 66
cudaMemcpy(d_A, h_A, size, cudaMemcpyHostToDevice); 
# 67
cudaMemcpy(d_B, h_B, size, cudaMemcpyHostToDevice); 
# 69
(__cudaPushCallConfiguration(1, 128)) ? (void)0 : computation(d_A, d_B, d_C, 0, 0); 
# 71
cudaMemcpy(h_C, d_C, size, cudaMemcpyDeviceToHost); 
# 73
for (i = 0; i < 128; i++) { 
# 76
(((std::cout << (h_C[i]))) << (" ")); 
# 77
}  
# 79
(std::cout << (std::endl)); 
# 81
return 0; 
# 82
} 

# 1 "simple-return.cudafe1.stub.c"
#define _NV_ANON_NAMESPACE _GLOBAL__N__21_simple_return_cpp1_ii_51bf810a
# 1 "simple-return.cudafe1.stub.c"
#include "simple-return.cudafe1.stub.c"
# 1 "simple-return.cudafe1.stub.c"
#undef _NV_ANON_NAMESPACE
